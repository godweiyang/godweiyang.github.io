{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/tiantangdemogui.mp3","path":"medias/music/tiantangdemogui.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/daoshu.mp3","path":"medias/music/daoshu.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/yiluxiangbei.mp3","path":"medias/music/yiluxiangbei.mp3","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a6ad0999ab08c1c2d45314bbbf10819ce1ca9081","modified":1505817154000},{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1563610286000},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1563523182000},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1563523182000},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1564132983966},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1563626476000},{"_id":"themes/matery/_config.yml","hash":"129c9ce81a173ddbcbf2621a57929006ccf5ab2f","modified":1564132863877},{"_id":"source/_data/musics.json","hash":"2dd50be9395d8f80c406c1bb12daa61cac53bd66","modified":1563707304000},{"_id":"source/_data/friends.json","hash":"3d6cf15cbfb667de14a88adc7c341b6af1cfde06","modified":1564147987868},{"_id":"source/_posts/2017-conclusion.md","hash":"817fae8819accb56fff7d40855a7f6c5c4d8d15e","modified":1563558140000},{"_id":"source/_posts/2018-conclusion.md","hash":"1dcabbfb1622ab1ff4f543578ecf11251ed9b110","modified":1563630842000},{"_id":"source/_posts/ACL17-1161.md","hash":"ea5babf6ea3810991880841800b50598ff169259","modified":1563595262000},{"_id":"source/_posts/ACL17-2027.md","hash":"ae8e0e92464c7c5f5a86746e83db34ea7db2be66","modified":1563595272000},{"_id":"source/_posts/ACL17-ConParsing.md","hash":"c689372bfec273d78d17bb10942b07be600cb023","modified":1563595302000},{"_id":"source/_posts/ACL18-BeamSpanParser.md","hash":"cc09bab63211fd7730cbeb69b82e981db45af5f8","modified":1563595312000},{"_id":"source/_posts/COLING18-2LocalModels.md","hash":"bc361cf7d995e69782ce594d7131338d1b0b264a","modified":1563595502000},{"_id":"source/_posts/ACL18-AttConParsing.md","hash":"8de215496e8c0364808ceda199fab7355bf057c1","modified":1563595308000},{"_id":"source/_posts/ConParSeqLab.md","hash":"094b9aa44f514df546a52051e61c141e4ac11f33","modified":1563595628000},{"_id":"source/_posts/ConParsing-Syntactic-Distance.md","hash":"3d0828dfad18bfd424325d05770a5ee60dbd9669","modified":1563595632000},{"_id":"source/_posts/EMNLP17-1.md","hash":"f004ecd5d8ef3ae1cbbfb3b0c5ad2b1839e7c0cd","modified":1563596056000},{"_id":"source/_posts/EMNLP17-2.md","hash":"432ef12bb89c270c4b8097df139aea7d277fc8c6","modified":1563596062000},{"_id":"source/_posts/EMNLP18-dynamic-oracle.md","hash":"22fa8796904e2b484f6246ab566e6745022ed622","modified":1563596068000},{"_id":"source/_posts/ICLR17-1.md","hash":"89ebea2a58661d9486bb66c1438afc5cca21299e","modified":1563596220000},{"_id":"source/_posts/IVP-EACL17.md","hash":"b1a352768d5d61ec7a3b9ea1fb30bf65122a88ce","modified":1563596236000},{"_id":"source/_posts/MetaMTL.md","hash":"44a7998add634da64c1dc76a7e9582a0fd6af283","modified":1563596318000},{"_id":"source/_posts/NAACL18-ConParsing.md","hash":"4d8490eb7978f52a1b57dae1b259b51b030e3a0b","modified":1563597050000},{"_id":"source/_posts/NAACL19-ConParsing.md","hash":"ba32a75f5cbce372b1725d8e292b4a958d5fa3b7","modified":1563597054000},{"_id":"source/_posts/NAACL19-URNNG.md","hash":"ea995709acea52571c4edcfa44ce60abbb7963ba","modified":1563597104000},{"_id":"source/_posts/POS-LM.md","hash":"9551f516fecc5658770ec47855bc14df89921629","modified":1563596434000},{"_id":"source/_posts/PaperDaily-1.md","hash":"0d8dc8e4cd29d4de9ea44c10860155f73c236e72","modified":1563596372000},{"_id":"source/_posts/PaperDaily-2.md","hash":"ad5d5906d8a2da80b58e4699874af2cc67fd8bc7","modified":1563596376000},{"_id":"source/_posts/PaperDaily-3.md","hash":"b4612996871e49968595a259ec9a13a1b9fbda7f","modified":1563596400000},{"_id":"source/_posts/PaperDaily-4.md","hash":"1745e5495cc681a17606ad25173a759164ebfb1c","modified":1563596412000},{"_id":"source/_posts/RNNG.md","hash":"e3dc2f94b25105e8af1a99d091204c3b6de440ac","modified":1563596474000},{"_id":"source/_posts/TACL17-ConParsing.md","hash":"c3fdcdd8d6f3d8af5e290967db6a48a3c9c30cd7","modified":1563596522000},{"_id":"source/_posts/TextMinning.md","hash":"4bf851bd22756e35fc4280a0a413e6c42be13743","modified":1563596534000},{"_id":"source/_posts/algorithm-code-tricks.md","hash":"f8a0a92eda8644e0fc45ed3144bca581e1db580f","modified":1564029323371},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up.md","hash":"dfed57daa332f4fdd5b10ef9662f913c927165ff","modified":1563595376000},{"_id":"source/_posts/baoyan.md","hash":"398bcf8a7032ce2c5cff2a26b2afa2ef4727702c","modified":1563538250000},{"_id":"source/_posts/biyelunwen.md","hash":"0697ded962c8782464d2d8b13563d81760d22f4b","modified":1563597130000},{"_id":"source/_posts/concrete-math-1.md","hash":"7b6c007f7020225e2a09be44005a54549b577925","modified":1563595528000},{"_id":"source/_posts/concrete-math-10.md","hash":"e2e0a89c20c47351b885d1e8abeb10ab45e52404","modified":1563595580000},{"_id":"source/_posts/concrete-math-11.md","hash":"593f64f79943365aeef12cc3e1249b49642f7174","modified":1563595584000},{"_id":"source/_posts/concrete-math-12.md","hash":"171312e138899bc59a1cc1c79ffca56cb69f6611","modified":1563595590000},{"_id":"source/_posts/concrete-math-13.md","hash":"cb3f2582340dd11eafaaceea54c328f012eee9a1","modified":1563595596000},{"_id":"source/_posts/concrete-math-14.md","hash":"bf6d23018a2a05a05989f7861816bdea00c343eb","modified":1563595600000},{"_id":"source/_posts/concrete-math-2.md","hash":"1f2035fb1e505504940ff09f9242cbfe4395e338","modified":1563595536000},{"_id":"source/_posts/concrete-math-3.md","hash":"21140547919c8d187cb57cda58fe40a8b86ef23d","modified":1563597060000},{"_id":"source/_posts/concrete-math-4.md","hash":"519ef8cb254f8774136b3744019b9de01f7ead97","modified":1563595546000},{"_id":"source/_posts/concrete-math-5.md","hash":"be7538a39cfd649af44fd5d21b659a0c05308a70","modified":1563595552000},{"_id":"source/_posts/concrete-math-6.md","hash":"59a9edd6bdf618ee442e6e40919a91c5174d21b9","modified":1563595560000},{"_id":"source/_posts/concrete-math-7.md","hash":"5135f5ef08588b6033e29080e3413113fc1bf751","modified":1563595564000},{"_id":"source/_posts/concrete-math-8.md","hash":"e7707602a1670247881fac3c2cd25c8707cd281f","modified":1563595570000},{"_id":"source/_posts/concrete-math-9.md","hash":"06b0d09bc278cbe3f16ce663e3e91721d3aa844a","modified":1563595574000},{"_id":"source/_posts/concrete-math-hw1.md","hash":"e54e1dc233386d892845a964472838ce012ba447","modified":1563595606000},{"_id":"source/_posts/concrete-math-hw2.md","hash":"74eb339b0eace411e853b6d46797adf708812274","modified":1563595610000},{"_id":"source/_posts/concrete-math-hw3.md","hash":"4e22ae50cee7cf2969e61903b6d442dee0cb7e6a","modified":1563595616000},{"_id":"source/_posts/concrete-math-hw5.md","hash":"7f6d9a681d46f9585c4e111d497800b302726a7e","modified":1563595620000},{"_id":"source/_posts/constituent-parsing-summary.md","hash":"a447748c315e2b479538cd4701d184596fd7012a","modified":1563595636000},{"_id":"source/_posts/context.md","hash":"251d630034e249db958a474cb23357f50001b6b9","modified":1563595648000},{"_id":"source/_posts/diora.md","hash":"b5991e8d82efb7f739a153d1a67ec91fe70cf521","modified":1564147317443},{"_id":"source/_posts/dl1.md","hash":"6cb2c0443346fe605308799358325349b9ee7d18","modified":1563556366000},{"_id":"source/_posts/dl2.md","hash":"f87ff887024b7247d3a9eafefc041c5105693c11","modified":1563556366000},{"_id":"source/_posts/dlhw1.md","hash":"a9ed8f5595c129916cd399ca5fdc3edc5999e03f","modified":1563556366000},{"_id":"source/_posts/dlhw2.md","hash":"728f4d8f0317778e6132fdaf0fea3bebe0ae18e2","modified":1563538884000},{"_id":"source/_posts/dynamic-oracles.md","hash":"dd358433199957051e22ad0657fc53d293992631","modified":1563596004000},{"_id":"source/_posts/ecnu-ppt.md","hash":"0a6c561210a03178c5cacb89b9dc224fa988e0a2","modified":1563596032000},{"_id":"source/_posts/eoj2854.md","hash":"98284bc2fb8289c031b27bdf8b1937eca922f0aa","modified":1563596100000},{"_id":"source/_posts/eoj3006.md","hash":"90d5e5abba06fa881f725c8e24a5984e87b9d07b","modified":1563596122000},{"_id":"source/_posts/eoj3328.md","hash":"46eb0294e24b318dc09199ecc3d3da631057b860","modified":1563596148000},{"_id":"source/_posts/graduate-technique.md","hash":"333a8c68ac161673745c4c9d28121e8d977d7254","modified":1563597092000},{"_id":"source/_posts/hexo-blog.md","hash":"f6b60938e31a94522248152237434867a1e1cca9","modified":1564032320940},{"_id":"source/_posts/iclr18-PRPN.md","hash":"8d8d52e106efe33eda367a98817f0df49b2f947d","modified":1563596224000},{"_id":"source/_posts/inside-outside.md","hash":"a03bb0ce07652aff8a7d61060e334c38dd7b2efc","modified":1563596232000},{"_id":"source/_posts/k-bandit.md","hash":"65c2f19c15792675d0e76163600b946b7c185cf8","modified":1563556366000},{"_id":"source/_posts/latex-pdf.md","hash":"08466a84f07f2fa75e67846f8f1489387d7b3cf4","modified":1563596282000},{"_id":"source/_posts/nvidia-cuda-dynet.md","hash":"2b007059ca77cbe7332448c6a0eb17dfe059e02a","modified":1563597056000},{"_id":"source/_posts/python-advice.md","hash":"7bd98c1d2ad98a0846f77c1f399e89c249efedab","modified":1564032608059},{"_id":"source/_posts/recommend.md","hash":"3acd674ebd9452feb74ba385990c43300c050f95","modified":1563539250000},{"_id":"source/_posts/sublime.md","hash":"04d8f7f5e37355715e5d9c1830d5aed40141b121","modified":1564032661483},{"_id":"source/_posts/sw-compiler.md","hash":"e35240d02cc8820fd5cf8f95c2018950cb53b11f","modified":1563596518000},{"_id":"source/_posts/text-minning-ppt.md","hash":"93129d74ccfc9f54511ec96ae5d4f7a50b850917","modified":1563556366000},{"_id":"source/about/index.md","hash":"f9b2c632154cbdadfe706cd568f19e91e3024162","modified":1563608088000},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1563604024000},{"_id":"source/contact/index.md","hash":"90938c4c3fafef4c472d9b4e1d9dd5652a749055","modified":1564132661312},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1563603604000},{"_id":"source/friends/index.md","hash":"b9066c1913a04e4e743fe9c3adabd8c380930d2f","modified":1563603612000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1564132707206},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1563603616000},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1564132683338},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1563626476000},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1563609100000},{"_id":"themes/matery/layout/archive.ejs","hash":"3cb5125e8243e82e96f8ca2fc30d3ec30390447f","modified":1564036241029},{"_id":"themes/matery/layout/friends.ejs","hash":"99126a7e59e92f8ea48b73cfd2a59ce43e26709b","modified":1563543000000},{"_id":"themes/matery/layout/category.ejs","hash":"41af886df5f0c3251e6ba810f43b9abbc900894b","modified":1564036241029},{"_id":"themes/matery/layout/contact.ejs","hash":"def9ddbfccfa29a8ffce8bf512f7db16d114dcc1","modified":1564139449448},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1563523182000},{"_id":"themes/matery/layout/layout.ejs","hash":"f99d28f7c3382caf4321641f2d79582aac0b0c90","modified":1564030254942},{"_id":"themes/matery/layout/index.ejs","hash":"e920e19d370b6c218f89c86dc5baad4ff5b6f413","modified":1564036241029},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1564139232762},{"_id":"themes/matery/source/favicon.png","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1563511652000},{"_id":"themes/matery/layout/tag.ejs","hash":"780e6b678ab9b81b5e1eee4193dd81101b52c545","modified":1564131700129},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1563523182000},{"_id":"source/_posts/2017-conclusion/1.jpg","hash":"c2a3097d4e74572b8936ee7f11bb36eb6871f4a2","modified":1535958650000},{"_id":"source/_posts/2017-conclusion/3.jpg","hash":"994066e10060760088a1267cf69a060492a7155e","modified":1535958650000},{"_id":"source/_posts/2017-conclusion/4.jpg","hash":"34c09a0a03452eff78ec8fe757e406736ddb8471","modified":1535958650000},{"_id":"source/_posts/2018-conclusion/1.jpg","hash":"8b0227ce07f8978fd4b15a5d1ac56490904e5165","modified":1543134256000},{"_id":"source/_posts/2017-conclusion/749826.jpg","hash":"f41cde8693d855cf74ded242299b5f08f1f2d3c3","modified":1539616082000},{"_id":"source/_posts/2018-conclusion/3.jpg","hash":"54a1446f2b84ec30da46d0e94050ced17983375a","modified":1543133786000},{"_id":"source/_posts/2018-conclusion/4.jpg","hash":"8432aec066796b337e4330ba915f1893c3ff9db0","modified":1543134162000},{"_id":"source/_posts/ACL17-1161/1.jpg","hash":"61e2416117e7cf54895d5d5480797882ae35e431","modified":1535958642000},{"_id":"source/_posts/ACL17-1161/5.jpg","hash":"e836a5667afd9946faf022b47b4fb65d4a92e809","modified":1535958644000},{"_id":"source/_posts/ACL17-2027/1.png","hash":"b37a00cc13dfdaac8be86b1eb6f729cc93e2ff60","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/2.png","hash":"c2cdd049d1dbb3017921ba805415bb655ee9be00","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/3.png","hash":"28d922d25de60dc6d487263184d712019ab2ad34","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/4.png","hash":"2c6fbbda6a6f3550fb7ee996e6d6b1f27cc7c1a7","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/6.png","hash":"4e20a04dc21cb95ba12266642209ad3a415db3aa","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/5.png","hash":"4778ead745b9fe191cc15a22bbe82a67f1c1c1fb","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/7.png","hash":"53402a7d6ee533f799fc4ed30492c78d87fa8a71","modified":1535958644000},{"_id":"source/_posts/ACL18-BeamSpanParser/1.jpg","hash":"c18c8d8e3732121359f64ffea600fa63aaae99bc","modified":1539763134000},{"_id":"source/_posts/ACL18-AttConParsing/8.png","hash":"9d122176377f9b8a387c6c2f28d0aa26b55a5f5c","modified":1535958644000},{"_id":"source/_posts/ACL18-BeamSpanParser/2.jpg","hash":"67c664888d33036687e08ddb1a14eab96a5d03c2","modified":1539780276000},{"_id":"source/_posts/COLING18-2LocalModels/1.jpg","hash":"529c18ab427a57ba175ff3a1fefcd071691afc2c","modified":1539876412000},{"_id":"source/_posts/ACL18-BeamSpanParser/3.jpg","hash":"bba7604b927227e9cbfc4ad3c38a36420cb5c475","modified":1539780734000},{"_id":"source/_posts/COLING18-2LocalModels/2.jpg","hash":"fca80c7c033ec1c040ace32b303e8b3bbc7ba6ef","modified":1539876576000},{"_id":"source/_posts/COLING18-2LocalModels/3.jpg","hash":"0a00475f624b3ddcefdccf522141e62522dd6ec8","modified":1539877092000},{"_id":"source/_posts/ConParSeqLab/1.jpg","hash":"e437c69853cf5580017dd9f577f3811470afcf62","modified":1552396986000},{"_id":"source/_posts/ConParSeqLab/3.jpg","hash":"74173996cf0267650ce8b7e863b97308e2343fe8","modified":1552465424000},{"_id":"source/_posts/ConParSeqLab/2.jpg","hash":"8c6574640a28c751ec354e80953bac32a0358bd1","modified":1552463992000},{"_id":"source/_posts/ConParSeqLab/4.jpg","hash":"bebd47e158a95f29846864b895a25da7f64e4218","modified":1552466396000},{"_id":"source/_posts/ConParSeqLab/5.jpg","hash":"c76e2e37987b5c9ce56cb7a2db24b530c12dfd84","modified":1552470714000},{"_id":"source/_posts/ConParSeqLab/6.jpg","hash":"54c6a8389d8111d4c2118486629889d228035567","modified":1552488958000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/3.png","hash":"a900e34610daac442b4c1d55b026a960555a127e","modified":1535958646000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/7.png","hash":"ae4fe189cef0754d929dc000d630bced98f619c5","modified":1535958646000},{"_id":"source/_posts/EMNLP17-1/2.png","hash":"364d7c4623ab874cfb7bb73a0d85ba510731a6af","modified":1535958648000},{"_id":"source/_posts/EMNLP17-1/3.png","hash":"6cefe18e64c1619ce1df7e007a5b56565ae8fae4","modified":1535958648000},{"_id":"source/_posts/EMNLP17-1/5.png","hash":"80b03c4f7f8bf321d690e955e32e0870e2e69f11","modified":1535958648000},{"_id":"source/_posts/EMNLP17-1/4.png","hash":"81676c5cf9237ea81dbe0f50e7379f103916189a","modified":1535958648000},{"_id":"source/_posts/EMNLP18-dynamic-oracle/1.jpg","hash":"6791d4d88d10bb2212cd7f9dd68ad4aab72add2a","modified":1541509930000},{"_id":"source/_posts/EMNLP18-dynamic-oracle/2.jpg","hash":"d1373de1ae3faed05dbb3724fb9b1155d7bc5361","modified":1541570926000},{"_id":"source/_posts/EMNLP18-dynamic-oracle/4.jpg","hash":"f7b0ffa0ce2efb0b3053e5f7a11ac0c3131d601c","modified":1541570958000},{"_id":"source/_posts/IVP-EACL17/2.jpg","hash":"1e37a164a4fb02b8114f59280dfcbdc622e72c8b","modified":1535958650000},{"_id":"source/_posts/IVP-EACL17/1.jpg","hash":"e13e8a4b48030bd74d71bde22d799585157e2b34","modified":1535958650000},{"_id":"source/_posts/IVP-EACL17/3.jpg","hash":"ca58edf30372ebee470644373778763cd12319c6","modified":1535958650000},{"_id":"source/_posts/IVP-EACL17/6.jpg","hash":"eb718bee87d5d42a6e7aef9e50e94e480c7e3c36","modified":1535958650000},{"_id":"source/_posts/IVP-EACL17/7.jpg","hash":"d56833a6052de25482c28f5c510cde65244d3a44","modified":1535958650000},{"_id":"source/_posts/IVP-EACL17/5.jpg","hash":"94f9e6a374293eaab9ca0e75230bf67afd013966","modified":1535958650000},{"_id":"source/_posts/MetaMTL/2.jpg","hash":"fdd448fe2cafd96f97d732164d23b5f40cab8713","modified":1540545044000},{"_id":"source/_posts/MetaMTL/3.jpg","hash":"f5d9b3329451511014a0092acd3da82e9b7f43ed","modified":1540552656000},{"_id":"source/_posts/MetaMTL/1.jpg","hash":"127c132f42edc4f68030d04c3fdd611de8cce04d","modified":1540542556000},{"_id":"source/_posts/MetaMTL/4.jpg","hash":"be0bbe85fac680836d97bc171a36636c2d22a810","modified":1540553370000},{"_id":"source/_posts/MetaMTL/5.jpg","hash":"b62a5139e59152919658f876b834083bcdd23e60","modified":1540555858000},{"_id":"source/_posts/MetaMTL/6.jpg","hash":"10950e88fc639073911747c053e9bf07739b8b9e","modified":1540556808000},{"_id":"source/_posts/MetaMTL/9.jpg","hash":"ef9dc7f2a14d04a646303989346c1aa47abd9a45","modified":1540558156000},{"_id":"source/_posts/NAACL18-ConParsing/1.jpg","hash":"7cbff68d05bafa10b91f9aff3acb57dabd9a2ab0","modified":1535958650000},{"_id":"source/_posts/NAACL19-ConParsing/2.jpg","hash":"f3249ddee73332d9c4f437468926a25bf76f61b5","modified":1553667832000},{"_id":"source/_posts/NAACL19-ConParsing/1.jpg","hash":"aa255a310dabe75547413949be0127c4e2351dba","modified":1553666224000},{"_id":"source/_posts/NAACL19-ConParsing/3.jpg","hash":"2b6acf4abb4a0702e5d1859d240f4678f6ffdf24","modified":1553671524000},{"_id":"source/_posts/NAACL19-ConParsing/4.jpg","hash":"4917be9f00df29b36af5326ef753666ef6c3595c","modified":1553675178000},{"_id":"source/_posts/NAACL19-ConParsing/6.jpg","hash":"ed4d29cc56b4ceb864cc3ee5f10848cd3eee1f99","modified":1553675454000},{"_id":"source/_posts/NAACL19-URNNG/2.png","hash":"bff97fa05bd5954a8b9da4639792f61a23e8cd52","modified":1556287618000},{"_id":"source/_posts/NAACL19-URNNG/3.jpg","hash":"dc9f10d16d95c019b7af7f7123f4580ea3ce70b3","modified":1556358504000},{"_id":"source/_posts/NAACL19-URNNG/5.jpg","hash":"eee0a140a989d63a080e5aff8ea4d517f4157bce","modified":1556377632000},{"_id":"source/_posts/NAACL19-URNNG/7.jpg","hash":"70e9b3b8697b4edbe20caa6d03752ee85a873892","modified":1556379878000},{"_id":"source/_posts/PaperDaily-1/1.png","hash":"58845f333333b35f53240f1c60392fb451db3268","modified":1535958650000},{"_id":"source/_posts/PaperDaily-2/1.png","hash":"4af838672bd53459390d4e4145839fae5a0a8996","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/2.png","hash":"34124c1898a028f5f4fb7ec78bd0c30041215e94","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/3.png","hash":"0c9c4be9779fbbe078809491c36ad064f4db94ac","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/1.png","hash":"87773324328cd07cc534dd6cdf164f823c766377","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/10.png","hash":"1079d27ae3b892be1ba232c5a7ed60f0351857bc","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/11.png","hash":"9a19e3a6da09e7dbbb28af630af6133190193dfa","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/12.png","hash":"9e82dcb0a0aa2ddcd2419f78300dd3377d272ef4","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/14.png","hash":"ed00c0cdac800b2a91b3419016dcf9d11b9f65ec","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/15.png","hash":"cfc121f17daf9054b26fb35229fe95fbca37493a","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/3.png","hash":"b276a67106696cc998e263bc18fda3b5e39d565d","modified":1535958652000},{"_id":"source/_posts/PaperDaily-4/5.png","hash":"8cc4e6709f366a6bb5306db13f19142fa1b45f2a","modified":1535958652000},{"_id":"source/_posts/PaperDaily-4/4.png","hash":"c54e92a8f980e631abcba5d13ff5a3eead8a1d08","modified":1535958652000},{"_id":"source/_posts/PaperDaily-4/7.png","hash":"fe85b118879143d500a40028a379252fbc99c407","modified":1535958652000},{"_id":"source/_posts/PaperDaily-4/6.png","hash":"47a3c9853551dcc6ed2a1a5dafa948be6bb1bb5d","modified":1535958652000},{"_id":"source/_posts/PaperDaily-4/9.png","hash":"402255c0b7e74de19103dabc87b298e73b8b8a98","modified":1535958652000},{"_id":"source/_posts/RNNG/3.jpg","hash":"168aa7311c86ea296d39818d6ab4635b2084b10c","modified":1535992806000},{"_id":"source/_posts/RNNG/4.jpg","hash":"609e877cfb50496962a26bc92c7a13256ed41271","modified":1535993056000},{"_id":"source/_posts/RNNG/6.jpg","hash":"d128d922cf1da4159c0b7e5efdfe92847e8fe085","modified":1535995102000},{"_id":"source/_posts/TACL17-ConParsing/1.jpg","hash":"a1cafa4a316399a877344e03a558cebde44e0d32","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/10.jpg","hash":"d4bdec8a1088a7dc94fba07a852b5fd3b6afbc98","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/12.jpg","hash":"6f4f295ce133e70ff01f6d348e29285cb37475a9","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/2.jpg","hash":"1f910be02546dad14bea9ed0ef20773ce74f80fb","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/3.jpg","hash":"638162ad47de9e46aec43727bcaa2ba494bd5eb7","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/4.jpg","hash":"a1a4ef127208c14e2463028132792810a198e1d6","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/5.jpg","hash":"87008d6318973baa9f5e499c39f9195a0083a501","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/6.jpg","hash":"dcb16a1904b0b6167e47b8afbb93d473099ecbcc","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/7.jpg","hash":"bf3e1a67c7b64a061001ce1345ffade39934b755","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/8.jpg","hash":"cff68c9ac64e7221974625593867c9b1bd5fc76d","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/9.jpg","hash":"09185135722dd6c5a31c894aac21931a38e4dadc","modified":1535958644000},{"_id":"source/_posts/TextMinning/2.png","hash":"8e1bf2eafce472b6a226a31074f7d78c832cc78c","modified":1535958652000},{"_id":"source/_posts/TextMinning/3.png","hash":"309a52b9e4f767ba4a4ed9aa07b42cccdfc99dbc","modified":1535958652000},{"_id":"source/_posts/TextMinning/4.png","hash":"77deeae4c2c9d49f153adf6b469c6e6f85e2b9dd","modified":1535958652000},{"_id":"source/_posts/TextMinning/5.png","hash":"d465cfd9cf40b16866e773eb18ddcb5a2706f884","modified":1535958652000},{"_id":"source/_posts/algorithm-code-tricks/3337-2.jpg","hash":"422e25f7a14fdeb9cad05037e5930a0a70d8ad0e","modified":1563513142000},{"_id":"source/_posts/algorithm-code-tricks/3337-1.jpg","hash":"a0a35453b50ee3879d1d733e7962fe664da89770","modified":1563512146000},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/1.jpg","hash":"e907f8b74bb7db073c4e58ca12e7eaf70e6c7548","modified":1541939688000},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/3.jpg","hash":"5ede1aa788dd8877189f137722ce4a6672683184","modified":1542035604000},{"_id":"source/_posts/concrete-math-1/1.jpg","hash":"a6514aced6c0ec40545f90a5a208eaa89f48123c","modified":1535958644000},{"_id":"source/_posts/concrete-math-1/3.jpg","hash":"cda3bb3811e8b4dd4b040e8e96162cad10172811","modified":1535958644000},{"_id":"source/_posts/concrete-math-1/2.jpg","hash":"abc4195376867e87415d11448d63a16123efd103","modified":1535958644000},{"_id":"source/_posts/concrete-math-10/1.png","hash":"b6bd955c88ae07da38d285e46c5e84bb488348b1","modified":1535958644000},{"_id":"source/_posts/concrete-math-7/1.jpg","hash":"70b71ff9daa83bac2e91ee9d245bdd058fb28662","modified":1535958646000},{"_id":"source/_posts/concrete-math-8/1.jpg","hash":"7c3b6be12a3706519bd11c2627bab82f5f9fc2e3","modified":1535958646000},{"_id":"source/_posts/concrete-math-8/2.jpg","hash":"8bb9ab82b2601fbdd45701e98d40b74bed6b1bf5","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/1.jpg","hash":"3de61dc8a87fe354012290162a8254d152f17082","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/2.jpg","hash":"7e63bd4bb235d1beadd75e6e2de537ad238a2b10","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/3.jpg","hash":"58a3ea6ad8a4ecfa47976b80f3bd78089215df37","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/4.jpg","hash":"875aa9e619b8794f334373ee9a0437570bfd7941","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/5.jpg","hash":"852199210bf819baff2e56f21b5d63e64d977743","modified":1535958646000},{"_id":"source/_posts/constituent-parsing-summary/bi_lstm.jpg","hash":"3034b96bb5c0f5cdfda18f232588512d3b1a7bec","modified":1538040298000},{"_id":"source/_posts/constituent-parsing-summary/bottom_up.jpg","hash":"1f910be02546dad14bea9ed0ef20773ce74f80fb","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/bottom_up_example.jpg","hash":"638162ad47de9e46aec43727bcaa2ba494bd5eb7","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/composition.png","hash":"538491cb9a200b387080218dd7eac1b4d9374b1a","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/in_order.jpg","hash":"dcb16a1904b0b6167e47b8afbb93d473099ecbcc","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/in_order_example.jpg","hash":"bf3e1a67c7b64a061001ce1345ffade39934b755","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/label_oracle.png","hash":"019b9aa7f01afcdb35e5d9bfdfab171ad7dc8bcf","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/multi_headed_attention.jpg","hash":"47669cd77b6c688f9971526a668fb901ea347527","modified":1538043178000},{"_id":"source/_posts/constituent-parsing-summary/single_attention.jpg","hash":"138646f0a6138ac75a0cabbb89ba6a9728695f80","modified":1538043258000},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_tree.png","hash":"0a5062c924fee9dc2c61f28d48f0fb7f73e748a9","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/structural_oracle.png","hash":"99cedbc9173600c819ed8e12c637c6ae0b241844","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/syntactic_distance_example.jpg","hash":"1eaff00cffc52db1a8b88f67d9b9a4260a697aa3","modified":1537897278000},{"_id":"source/_posts/constituent-parsing-summary/top_down.jpg","hash":"a1a4ef127208c14e2463028132792810a198e1d6","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/top_down_example.jpg","hash":"87008d6318973baa9f5e499c39f9195a0083a501","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/transition_framework.png","hash":"59b2cd8386ef4c428441c70ca64f76c974894559","modified":1537864254000},{"_id":"source/_posts/context/2.jpg","hash":"422c0faa05908aa3bb8c534c1d5ad1fe1aebf378","modified":1535958646000},{"_id":"source/_posts/context/3.jpg","hash":"0290a7b305e7a7947252a8d49ca11107f4c9e83d","modified":1535958646000},{"_id":"source/_posts/dl1/5.jpg","hash":"31c54ea3f61e1cedd5efbb51ef49d46ddbeff43e","modified":1535958646000},{"_id":"source/_posts/dl2/14.jpg","hash":"8f12eb076da3b4f8a15ad54ab47c5e80ba433a6b","modified":1535958646000},{"_id":"source/_posts/dynamic-oracles/1.png","hash":"ac6467877f2fbee1a06180e71154bea72398ba80","modified":1535958648000},{"_id":"source/_posts/dynamic-oracles/4.png","hash":"99cedbc9173600c819ed8e12c637c6ae0b241844","modified":1535958648000},{"_id":"source/_posts/dynamic-oracles/3.png","hash":"ced90a262c69ae5b3ac550983e0e5a1e717e25e1","modified":1535958648000},{"_id":"source/_posts/dynamic-oracles/6.png","hash":"019b9aa7f01afcdb35e5d9bfdfab171ad7dc8bcf","modified":1535958648000},{"_id":"source/_posts/dynamic-oracles/7.png","hash":"eb175a564348409fee280a7f9ddae2e3fc49bb7a","modified":1535958648000},{"_id":"source/_posts/hexo-blog/1.jpg","hash":"ca247c820179e3c10e3009215a89bde6ff49fd6a","modified":1535958648000},{"_id":"source/_posts/hexo-blog/10.jpg","hash":"e74a46614b596918677641930c6268b45a9a2d71","modified":1535958648000},{"_id":"source/_posts/hexo-blog/13.jpg","hash":"265522726740882b738cc6696a6a94b21de4f499","modified":1535958648000},{"_id":"source/_posts/hexo-blog/14.jpg","hash":"9b13137196ed0e0f93546e502d03536ad3fa50cf","modified":1535958648000},{"_id":"source/_posts/hexo-blog/15.jpg","hash":"7b1ff0147b5d84e258cf301eb9e8d8152227ee51","modified":1535958648000},{"_id":"source/_posts/hexo-blog/16.jpg","hash":"11052f5e8146a3d38f22002e20f0172a8b1ca23f","modified":1535958648000},{"_id":"source/_posts/hexo-blog/19.jpg","hash":"2207c8147f6334e2e2eedd70279c0984094a01f5","modified":1535958648000},{"_id":"source/_posts/hexo-blog/18.jpg","hash":"4259425fd6a59a8e1c914c3f3105555d87f96f4d","modified":1535958648000},{"_id":"source/_posts/hexo-blog/2.jpg","hash":"92be8c2267281c00990b04ec687c5f4a152b7128","modified":1535958648000},{"_id":"source/_posts/hexo-blog/20.jpg","hash":"7e6022459b17ddc05d61e4c6a88517d294a5848e","modified":1534829628000},{"_id":"source/_posts/hexo-blog/3.jpg","hash":"c3b9a6c76d660c297fba1868a6f34989abd685ec","modified":1535958648000},{"_id":"source/_posts/hexo-blog/4.jpg","hash":"ff4993e70a9a81a29fbbd836cc43b7a1daf6e2d7","modified":1535958648000},{"_id":"source/_posts/hexo-blog/5.jpg","hash":"9435ca71f3593101384c4ff69c1ce57a90c367a2","modified":1535958648000},{"_id":"source/_posts/hexo-blog/6.jpg","hash":"6ec043f8250a5fa0fcc2f3a8e8167655eabd88ba","modified":1535958648000},{"_id":"source/_posts/hexo-blog/8.jpg","hash":"59c13e2fbc8d37ca0087d8f25a79c4e5feeb0f91","modified":1535958648000},{"_id":"source/_posts/hexo-blog/7.jpg","hash":"c7afa32a6363549cef23b622e539a84625615db4","modified":1535958648000},{"_id":"source/_posts/hexo-blog/9.jpg","hash":"185d3bfea5d5c844abdc8925cf0ab9a9767ba168","modified":1535958648000},{"_id":"source/_posts/inside-outside/1.jpg","hash":"ed0edc4a807f0b549193b4fb3b2e343daf583d07","modified":1535958650000},{"_id":"source/_posts/inside-outside/2.jpg","hash":"a51e60751172eda5b2d515f33ad6b8ec40e3c322","modified":1535958650000},{"_id":"source/_posts/iclr18-PRPN/6.jpg","hash":"543c039aa1d6b7e2d4d639633c9d9bf5ffeb484b","modified":1554360652000},{"_id":"source/_posts/recommend/top.jpg","hash":"88078a2d4247d3cb8378cf80f5771ce2df20977a","modified":1535958652000},{"_id":"source/_posts/sw-compiler/1.png","hash":"2505835d4043562e3c6121621b85d78513f20935","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/1.png","hash":"3eaffd511bf3b3504a856d151c877321afe93719","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/2.png","hash":"11810de5c727194f74b7332f86f5a67a9b571bfa","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/4.png","hash":"53625359d72205e92c25bdaae0393a904f50b69a","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/5.png","hash":"657bebdae596372792dd11c6b99b96ade6b668a9","modified":1535958652000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1563523182000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1563523182000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1563523182000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1564132197574},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"10d98a764ae47cf004226c67e30482878f09d553","modified":1564035259680},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1563523182000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1563523182000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1563540830000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1563523182000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1563523182000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"61553cb0fbed39c44957b32f66b6fab8aec485bc","modified":1564132825502},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"dded138c6cf821147b576658fd836d2f8900acfb","modified":1563523182000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1563523182000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1564132927576},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1564132941362},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1563523182000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"ae8a8db3f0d630e92cf70cfcb3a9afb026b1395a","modified":1563626476000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1563523182000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"10e7424ec6de528ba5a74e00906abfa42428296c","modified":1564030762747},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1563523182000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e6476c86ce108794b6fce57e69e3cd29f7d4f26","modified":1564036241039},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1563523182000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1563523182000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1563523182000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1563523182000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"55272fab7a3303e94f1839ebd7ca6cf9965fb328","modified":1563563418000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1563523182000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"8671cff27aef7298b2518dd57fe0671959f21701","modified":1563523182000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1563523182000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1563523182000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1563523182000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1563523182000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1563523182000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1563598848000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1563523182000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1563523182000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"42a88f242d9a446dc4c648575f7c05483d2d99a0","modified":1563523182000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1564133284626},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1564132513869},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1563523182000},{"_id":"themes/matery/source/css/matery.css","hash":"db4e3f27ce7790fbcec0052c7bb88b7b76ac394e","modified":1564134914069},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1563523182000},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1563523182000},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1563523182000},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1563523182000},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1563523182000},{"_id":"themes/matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1563523182000},{"_id":"source/_posts/2017-conclusion/2.jpg","hash":"fdc020fff3446bf34fb4488ad0a414044799cd7d","modified":1535958650000},{"_id":"source/_posts/2018-conclusion/2.jpg","hash":"e169d2b7ed2a68ac031bc2908961cbea87cbafc0","modified":1543129772000},{"_id":"source/_posts/ACL17-1161/3.jpg","hash":"34cf1273bff246457866153cd24a7d977e4081ae","modified":1535958642000},{"_id":"source/_posts/ACL17-1161/2.jpg","hash":"d01a72efb889370dd34b1f503e96dfc07448105d","modified":1535958642000},{"_id":"source/_posts/ACL17-1161/6.jpg","hash":"be41e90d0fac5591b907df5009f5e0f4f7033cd5","modified":1535958644000},{"_id":"source/_posts/ACL17-2027/3.png","hash":"69abb4868a7e6c6cf4b504fe15655a933122636e","modified":1535958644000},{"_id":"source/_posts/ACL17-2027/2.png","hash":"ca0cb3ee8c9e4afce33de57932ae60023f0a82e5","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/1.png","hash":"f9ba5228a7d41f89abead1b5cca7a5ae366e7f38","modified":1535958644000},{"_id":"source/_posts/ACL18-AttConParsing/9.png","hash":"ba68a2190412bcc34fa63a773169c5467afe8af6","modified":1535958644000},{"_id":"source/_posts/COLING18-2LocalModels/4.jpg","hash":"7e149e31a9a74d68093bc808fecde76130de0ca9","modified":1539878176000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/1.png","hash":"d866f0961493baa27f91ed99c87eff1f66cdcec4","modified":1535958646000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/2.png","hash":"76a05d633624c2ee2c3e63951ff034e5c4a1e597","modified":1535958646000},{"_id":"source/_posts/ConParSeqLab/7.jpg","hash":"47dcb52147fcec7cb50afa8345c2e308eb1e7d65","modified":1552489320000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/6.png","hash":"f6dacbc79b60ffb06a52d33cb923dc9280b2719e","modified":1535958646000},{"_id":"source/_posts/EMNLP17-1/1.png","hash":"b3da6d0b276cb8e6d5b171c723e2424b20cce274","modified":1535958648000},{"_id":"source/_posts/EMNLP18-dynamic-oracle/5.jpg","hash":"43a11318e908ac7e3d45af2fee025ec73f9e4253","modified":1541570996000},{"_id":"source/_posts/EMNLP18-dynamic-oracle/3.jpg","hash":"3daf9af661e354bf97504632afa9567013edc5b5","modified":1541570942000},{"_id":"source/_posts/EMNLP18-dynamic-oracle/6.jpg","hash":"7fc401f173a4a61f260c4eca4dcffc308c4ae0c7","modified":1542549130000},{"_id":"source/_posts/ICLR17-1/2.png","hash":"7b9fa6ac4f2d3969549dd3e5f6b8df214cc2a68d","modified":1535958650000},{"_id":"source/_posts/ICLR17-1/3.png","hash":"52298a4d4c4173c666094688838e1f21689f9eb4","modified":1535958650000},{"_id":"source/_posts/ICLR17-1/5.png","hash":"36e97ab7daab3ee79d6437538d3a8b6f1981f837","modified":1535958650000},{"_id":"source/_posts/IVP-EACL17/4.jpg","hash":"10dc1ffdcf3c71cc1e683c67ff7cad6c16dd92cc","modified":1535958650000},{"_id":"source/_posts/MetaMTL/7.jpg","hash":"4888b307ba1844df09ab6bd7cb45e93849c0f0cd","modified":1540557834000},{"_id":"source/_posts/NAACL18-ConParsing/2.jpg","hash":"e38298a461097bcabc6540af7c235bbcd9597661","modified":1535958650000},{"_id":"source/_posts/NAACL19-ConParsing/5.jpg","hash":"40466cef69d4e7956a83f5ada6c84cd43e7b8edd","modified":1553675378000},{"_id":"source/_posts/NAACL19-URNNG/4.jpg","hash":"98188fc67be56513ae1d6b94d7b7b15e5e251148","modified":1556371716000},{"_id":"source/_posts/NAACL19-URNNG/6.jpg","hash":"160d92269f749fc9c510fccbe50f5afb322cf81f","modified":1556379770000},{"_id":"source/_posts/PaperDaily-2/2.png","hash":"551c68a8d0af4c42c67e36f857cf317912ce8506","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/4.png","hash":"5bab9f0aaffe6c871bcc561ee628dc268a6a9474","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/5.png","hash":"0e6201314d3750a89d5025684dda5ebbb9be3b4f","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/6.png","hash":"8fef47518e4cb1b6fbd7576cd6c7658f596bf3eb","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/ukulele.jpg","hash":"649a056d7fa086a18c8de3ca3a4fa91277c2c465","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/13.png","hash":"b7ab7c455f647beaf4d2721b2e558f335a16ec6f","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/2.png","hash":"01f661a1eac231dfd8f17477d09d294f97a47632","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/8.png","hash":"d6f26e3a128fb27326ce037f71a2f5f52613cfae","modified":1535958652000},{"_id":"source/_posts/RNNG/5.jpg","hash":"e13ddeb5f21b622bfda4fa9367fb4e66d8d74d49","modified":1535995092000},{"_id":"source/_posts/TACL17-ConParsing/11.jpg","hash":"66e9b5a86a1ee0e2d3afa8d87aeda003c74f2c03","modified":1535958644000},{"_id":"source/_posts/TextMinning/1.png","hash":"6e5d11f442e7c6157da94c73a4fe93c9130165fb","modified":1535958652000},{"_id":"source/_posts/TextMinning/6.png","hash":"cf5c4d42617b1d989b25d0221a2e7a86c98eb46e","modified":1535958652000},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/2.jpg","hash":"18598a580ac9402237ef7235a6a90ff97a8584b3","modified":1541939716000},{"_id":"source/_posts/concrete-math-hw1/1.jpg","hash":"f81f41d347a810c9e23103bbbe6adbebe8d13c1e","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/8.jpg","hash":"828af6f8f0fbab2d36f771a7c5ac3a97a2abb6d4","modified":1535958646000},{"_id":"source/_posts/constituent-parsing-summary/binarized_syntactic_tree.png","hash":"2a02fb2ca94a74f822f2b1bf4ed8060ffe8eeac9","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/chart_based.png","hash":"31079c81252844826b3bd2ac53ce1ae0eac501d7","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/results.jpg","hash":"02a515bada08b0b10cbe61447741121b9fcb5e56","modified":1537898182000},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up.png","hash":"ace34948b1f4690ae8ef57be0f17dd2f87234d4f","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_example.png","hash":"724d6fb737b8e842f0604d2a50115471a328585d","modified":1537864254000},{"_id":"source/_posts/constituent-parsing-summary/syntactic_tree.png","hash":"cfcb94aaad70f50d7e336f10fda9450cc3a051a7","modified":1537864254000},{"_id":"source/_posts/context/1.jpg","hash":"1db0f41b5aab46bdb9c0d82648916321d066b31d","modified":1535958646000},{"_id":"source/_posts/context/hierarchical_model.jpg","hash":"28e8741980c7e4aa5b30d2b1b425f0ae4fc7a5a3","modified":1535958646000},{"_id":"source/_posts/dl1/10.jpg","hash":"bafed0c9dc94fe5da3837ff70edf7528a97cb950","modified":1535958646000},{"_id":"source/_posts/dl1/11.jpg","hash":"fb924abd5646642772daa686c5a48008842dbb2b","modified":1535958646000},{"_id":"source/_posts/dl1/12.jpg","hash":"76af0223ef7c2965790a4727137f4daf0239a8e7","modified":1535958646000},{"_id":"source/_posts/dl1/6.jpg","hash":"6320b45a894679d75658ff367209451733fbbc7c","modified":1535958646000},{"_id":"source/_posts/dl1/7.jpg","hash":"c0ed99fd645ab7ca0f9c86d184d00d0e02c4a95b","modified":1535958646000},{"_id":"source/_posts/dl1/8.jpg","hash":"416ecc6820e81a59a0f10fb0ba41dd3d7beb9de8","modified":1535958646000},{"_id":"source/_posts/dl1/9.jpg","hash":"02f0e90668ac85207b5d313b0d6c5792d970417e","modified":1535958646000},{"_id":"source/_posts/dl2/13.jpg","hash":"67c282a28a7730e9d7f1b60c8d6de853bf983ab7","modified":1535958646000},{"_id":"source/_posts/dl2/15.jpg","hash":"f8d1fa5345cfa62270ba9a66ad9057b54ce7d504","modified":1535958646000},{"_id":"source/_posts/dl2/16.jpg","hash":"9475d182f1ab4d8f0f1ff65b3b58dcb17ab0d908","modified":1535958646000},{"_id":"source/_posts/dl2/17.jpg","hash":"96574e5c54b2683a65d57811db597fce143f9849","modified":1535958646000},{"_id":"source/_posts/dynamic-oracles/5.png","hash":"21b1af04bbda8d3709d50c923909afb45f81f165","modified":1535958648000},{"_id":"source/_posts/dynamic-oracles/2.png","hash":"c17bb58f12c49c23f8448991cfcc483d5673f081","modified":1535958648000},{"_id":"source/_posts/dynamic-oracles/8.png","hash":"9079dd35686859c29127255d0cdcf1634dc9cdfa","modified":1535958648000},{"_id":"source/_posts/hexo-blog/11.jpg","hash":"ddf41b537f6e6e95d2192b84ed3208c1be9b4bfd","modified":1535958648000},{"_id":"source/_posts/hexo-blog/17.jpg","hash":"12331a0bb13ad1a35859a95b83a9ab76683fb6f6","modified":1535958648000},{"_id":"source/_posts/hexo-blog/21.jpg","hash":"807ad483d0660f6dd82753ba804cdc1c026a3151","modified":1563613706000},{"_id":"source/_posts/iclr18-PRPN/4.jpg","hash":"97d2fd468fd730dd987f717736b81d55c18eda87","modified":1554360594000},{"_id":"source/_posts/iclr18-PRPN/5.jpg","hash":"5787418ccc9cb48b3b04f299ac4955a1d10cfc7d","modified":1554360622000},{"_id":"source/_posts/latex-pdf/2.jpg","hash":"0f543fdc1d349d9a088fcc82a3a13d801352bc5a","modified":1547374406000},{"_id":"source/_posts/latex-pdf/1.jpg","hash":"584247a929b25b2882f2210fa3d293174a3d68fa","modified":1547373260000},{"_id":"source/_posts/latex-pdf/3.jpg","hash":"27dc46db2469da34781ac82d9e150fc1c6f72d8f","modified":1547374720000},{"_id":"source/_posts/latex-pdf/5.jpg","hash":"16f7b34189b344b7f3d9c6ca32088b565e5b0a92","modified":1547375602000},{"_id":"source/_posts/text-minning-ppt/11.png","hash":"1394ffe92e92480fedda0f8e78f1cd4403234b83","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/12.png","hash":"db4ff4544109d4d3a6b6b310e4721ff2e9e5970a","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/13.png","hash":"ee619f52f7326329d61638dc4544b1e95513805f","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/16.png","hash":"a364adbce732755e7305b3f2ce4a6027dfb48719","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/17.png","hash":"e13e72453ba14ab7f8f689f4b63888caedca2e42","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/18.png","hash":"827058648a253ad5a44ffd5796017ba2db7940be","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/3.png","hash":"d070bf7b636dda13a5d3e593040ab479194a261e","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/6.png","hash":"9a6f07c319dffbd2453bb838afec45563a912e7c","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/7.png","hash":"064f165d3118d07f58ade7304376b4b38290ec6a","modified":1535958652000},{"_id":"source/_posts/ACL17-1161/4.jpg","hash":"5d227c6c00c22306c0987e1371b9e91edf4d8688","modified":1535958642000},{"_id":"source/_posts/ACL17-ConParsing/3.png","hash":"af8acc8d53d09063ff7de42eaf9eadd5d22f8f42","modified":1535958644000},{"_id":"source/_posts/ICLR17-1/1.png","hash":"cbbf361024c4a489adcb13f5de8ed0c9986aee22","modified":1535958650000},{"_id":"source/_posts/ICLR17-1/4.png","hash":"082aa3b10e1bdab5b6196d9128590fd0a9c9ddfe","modified":1535958650000},{"_id":"source/_posts/MetaMTL/8.jpg","hash":"003954e67cb864805120807e0cd79bd910cc6787","modified":1540557958000},{"_id":"source/_posts/PaperDaily-1/2.png","hash":"fd934c1df2672fe9e28a0c151dc97db246ae0961","modified":1535958650000},{"_id":"source/_posts/PaperDaily-2/header.jpg","hash":"b40ef7492a4290a301ad14b9540f35d7ae78aae4","modified":1535958650000},{"_id":"source/_posts/RNNG/1.jpg","hash":"af93bd523f381f536b93f89e4ba695e3039b8f28","modified":1535991678000},{"_id":"source/_posts/RNNG/2.jpg","hash":"da2b938fbc85e8cd7df91a5ce89f0995269bae7b","modified":1535991766000},{"_id":"source/_posts/concrete-math-4/1.jpg","hash":"54d5607ff217e9143350a67ffc8a6e3fbb8ca537","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw1/2.jpg","hash":"069c92e875dfbcf351ca7b3c60894d774bf1cd1f","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw1/3.jpg","hash":"eef243561f26405d1ca068d24a3d44d0b61e025b","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/6.jpg","hash":"0970d5f7fc0e78fded17aa8b81d02e96894243fa","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/7.jpg","hash":"311ed0af0b4995b173f7098ffeeb0119bb7a8879","modified":1535958646000},{"_id":"source/_posts/hexo-blog/12.jpg","hash":"ebaa2a0db37495492da2dbe1493fc0d1afc85189","modified":1535958648000},{"_id":"source/_posts/latex-pdf/4.jpg","hash":"74aedf6718772123e95291100ac12e2e440bbadf","modified":1547375170000},{"_id":"source/_posts/sublime/sublime.png","hash":"ec02cf02afa67afbcd7f6c4772639782563ebe03","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/14.png","hash":"32039f04ecdf05982d1ad7d8fc81390fc5de2a57","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/15.png","hash":"443ae2b9a9f7a8129f4501f84b270c3feb5fe278","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/20.png","hash":"adadf50418f65d6447dd2b69cb98b0afc5a96c2f","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/8.png","hash":"70a512011e6eb16d59845e64c61d3f61defb93e6","modified":1535958652000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1563523182000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1563523182000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1563523182000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1563523182000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1563523182000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1563523182000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1563523182000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1563523182000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1563523182000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1563523182000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1563523182000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1563523182000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1564030218426},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1563523182000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1563523182000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1563523182000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1563523182000},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1528457796000},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1564140633664},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1564140784428},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1564142267078},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1564142037603},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1564143056093},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1563675316000},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1564140306641},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1564146119094},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1564143490574},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1564144851967},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1564144405113},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1564144649752},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1564143688510},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1564146318967},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1564144302359},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1564140923112},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1564145620299},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1564145974454},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1564145891872},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"f6f297f1c351edb5a247163384d226d3173ad1c6","modified":1563591552000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"4d1ddcb0c28c6ad2740c8a5bb40cc77cd298cfad","modified":1563561540000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"55bbf85618e68571ed4444153de7a45e8e5804ce","modified":1563561570000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"036c7ab34a93d69aac0b815a03fb9ccd8704cc8b","modified":1563561550000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"e15ef7f17b80870006638a1601fb342580ce156c","modified":1563561614000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"f63976af8165aaedd0f263cf7db7dce9776648b7","modified":1563561600000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"1a898e8584d15344ba9ed40d3fe68859a5dbc2cc","modified":1563561618000},{"_id":"source/_posts/2018-conclusion/header.jpg","hash":"962f6bbba5dddc11d9f54350fd228e0831b8b261","modified":1541577030000},{"_id":"source/_posts/ACL17-1161/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958644000},{"_id":"source/_posts/ACL17-2027/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958644000},{"_id":"source/_posts/ACL17-ConParsing/1.png","hash":"36213f5559c754c393eab66a1ed431226eba364c","modified":1535958644000},{"_id":"source/_posts/ACL17-ConParsing/2.png","hash":"57fdad89eb78c386a9f7dd53740196fc32a568f9","modified":1535958644000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1563529386000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/5.png","hash":"e1762f48a839790016f565e3425d3a5c0a9ad784","modified":1535958646000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/4.png","hash":"9bb2c42dbd9447a72808cdb7680d24b1cd693fae","modified":1535958646000},{"_id":"source/_posts/EMNLP17-1/6.png","hash":"1e5e2508beb4e2c7c9ad8160879d2a49741483d9","modified":1535958648000},{"_id":"source/_posts/EMNLP17-1/7.png","hash":"7ecd8b433572c0433ac0659844e14427bec125de","modified":1535958648000},{"_id":"source/_posts/EMNLP17-1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958648000},{"_id":"source/_posts/EMNLP17-2/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958648000},{"_id":"source/_posts/ICLR17-1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958650000},{"_id":"source/_posts/POS-LM/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958652000},{"_id":"source/_posts/PaperDaily-1/header.jpg","hash":"4a2e013b8b6585c9fa223bb05d1f3df0e3066c5b","modified":1535958650000},{"_id":"source/_posts/PaperDaily-3/1.png","hash":"24d6e1f5245f08f03c145fcbe3f07099fd3976cd","modified":1535958650000},{"_id":"source/_posts/TextMinning/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958652000},{"_id":"source/_posts/baoyan/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958644000},{"_id":"source/_posts/concrete-math-2/header.jpg","hash":"9e215f6e178849a79de8b463819590c200209d25","modified":1535958646000},{"_id":"source/_posts/concrete-math-6/header.jpg","hash":"0f6d8286d892d9cd57237c6cce0308ad55624b48","modified":1535958646000},{"_id":"source/_posts/concrete-math-9/header.jpg","hash":"51154604945a2a98cb74e63655a792bb259b5b00","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw1/4.jpg","hash":"d415991b1a53aba068ac2288c1a26ce9ca9a658b","modified":1535958646000},{"_id":"source/_posts/context/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958646000},{"_id":"source/_posts/dl1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958646000},{"_id":"source/_posts/dlhw1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958648000},{"_id":"source/_posts/dl2/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958646000},{"_id":"source/_posts/dlhw2/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958648000},{"_id":"source/_posts/ecnu-ppt/1.png","hash":"df0b35cf3ba0dbdbdd4ee7e194ce1e93938e4c8a","modified":1535958648000},{"_id":"source/_posts/ecnu-ppt/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958648000},{"_id":"source/_posts/eoj3328/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958648000},{"_id":"source/_posts/recommend/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958652000},{"_id":"source/_posts/sublime/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958652000},{"_id":"source/_posts/sw-compiler/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/19.png","hash":"0aa2ff2bfe64f6f63375a8602a87d61b67edd359","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1535958652000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1563523182000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1563523182000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1563523182000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6979c760beb550b681a06a8f11688f2d1591a70e","modified":1563523182000},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1560173690848},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1564144775374},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1564146890852},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1564144199464},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1564145875835},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1564144593437},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1564142739993},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1564146702557},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"a2c6760e565af0411df5166fd0d6ff1f9c571f02","modified":1563591618000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1563523182000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1563529418000},{"_id":"source/_posts/ACL17-ConParsing/header.jpg","hash":"5cfe63312c5c89d8dd1ea20dcc04b539d68d5d12","modified":1535958644000},{"_id":"source/_posts/ACL18-BeamSpanParser/header.jpg","hash":"18a3db0137bf25d79b4401375145d854be13c407","modified":1539615006000},{"_id":"source/_posts/concrete-math-13/header.jpg","hash":"d5ee781f1e7b256f2f22dbc31f86f672eaf05106","modified":1535958646000},{"_id":"source/_posts/concrete-math-3/header.jpg","hash":"fb63d444e25ab9050e0935dced42912070a0fcda","modified":1535958646000},{"_id":"source/_posts/iclr18-PRPN/1.png","hash":"a4230c1c3edf3fa8ecbef7c8098065dad27556f5","modified":1554111844000},{"_id":"source/_posts/python-advice/header.jpg","hash":"f4eef7abf1cf3a45863e3fc8c72eda1e6f7e9732","modified":1539262700000},{"_id":"source/_posts/text-minning-ppt/10.png","hash":"08092310710e0156613e34adb89d01142f469b3c","modified":1535958652000},{"_id":"source/_posts/text-minning-ppt/9.png","hash":"950c487f5751ad3b50cbaa67af6d866821f783f7","modified":1535958652000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1563523182000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"9d5dd7e092c8eaf6266e2498cff72e6c98790a05","modified":1563523182000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1563523182000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1563523182000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1563523182000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1563523182000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1563523182000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1563523182000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1563523182000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1563523182000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1563523182000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1563523182000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1563523182000},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1564142272452},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1564141101952},{"_id":"source/_posts/2017-conclusion/header.jpg","hash":"25ab6c0454f4f12635c81c5a3d332c1128b98c6a","modified":1535958650000},{"_id":"source/_posts/COLING18-2LocalModels/header.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1539855764000},{"_id":"source/_posts/ConParSeqLab/header.jpg","hash":"24c3c8992c997e373d925a12328335755a3375b6","modified":1552306486000},{"_id":"source/_posts/IVP-EACL17/header.jpg","hash":"c81af18ddd046cc0ba1a5ba125ccb6b098e53d11","modified":1535958650000},{"_id":"source/_posts/NAACL18-ConParsing/header.jpg","hash":"b464570f4d701ff2ce926d67e0ef8b7c280312c5","modified":1535958650000},{"_id":"source/_posts/NAACL19-ConParsing/header.jpg","hash":"a1b9196a1209a8ceb0d0925707e1599e352892a2","modified":1552307078000},{"_id":"source/_posts/PaperDaily-3/header.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1535958650000},{"_id":"source/_posts/PaperDaily-4/header.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1535958652000},{"_id":"source/_posts/concrete-math-8/header.jpg","hash":"79a3c96a5adcf46f1e1a208243603a35053118f3","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw2/header.jpg","hash":"69a1d8cdb92af914e145ac7beb110bcf6570a440","modified":1535958646000},{"_id":"source/_posts/iclr18-PRPN/3.png","hash":"dc567db0571cf14a110aa0b9192ad0bcd69b8c46","modified":1554360230000},{"_id":"source/_posts/iclr18-PRPN/header.jpg","hash":"66d0bd0f521a48c37a1edced18767ead49bee65b","modified":1554020412000},{"_id":"source/_posts/nvidia-cuda-dynet/header.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1535958650000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563523182000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563523182000},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1564144452206},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1564145439812},{"_id":"source/_posts/EMNLP18-dynamic-oracle/header.jpg","hash":"96dcf6edcbeb826a59963cb77a31e8f92aab856b","modified":1541489400000},{"_id":"source/_posts/concrete-math-4/header.jpg","hash":"cee5cc79f2b0e329a836d1518205121034669669","modified":1535958646000},{"_id":"source/_posts/eoj3006/header.jpg","hash":"8749c0fb1a4cd07ee145f67caa53cfb69c86ca0f","modified":1535958648000},{"_id":"source/_posts/graduate-technique/header.jpg","hash":"41f4966fd962f6a37af870da805a3722a60ff20d","modified":1535958648000},{"_id":"source/_posts/hexo-blog/header.jpg","hash":"41f4966fd962f6a37af870da805a3722a60ff20d","modified":1535958648000},{"_id":"source/_posts/inside-outside/header.jpg","hash":"ae1646f64eb14dfc3b9723ade4cbeaf04669a5c4","modified":1535958650000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563523182000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1563523182000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1563523182000},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1564143237571},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"26df6a776eed7aab29b68864e0e420f2d6c6b9ae","modified":1563591644000},{"_id":"source/_posts/MetaMTL/header.jpg","hash":"719f0a49b0435de1000cbcbee0dafbe4487994c7","modified":1540479432000},{"_id":"source/_posts/biyelunwen/header.jpg","hash":"4cba22fc966db3d7376eb624add5ddcbd3683600","modified":1535958644000},{"_id":"source/_posts/concrete-math-10/header.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1535958644000},{"_id":"source/_posts/concrete-math-hw1/header.jpg","hash":"c2f353c18a35233d6428af1047ae833311f36b4c","modified":1535958646000},{"_id":"source/_posts/iclr18-PRPN/2.png","hash":"0ab9e36c071d80de49150072cd25f4af07b8d1cb","modified":1554112850000},{"_id":"source/_posts/k-bandit/header.jpg","hash":"71131f183c8442b3dd47b2a11ac45f7fa58f431f","modified":1535958650000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"e356a9e5c362c13289d68f72af9548957dd1688b","modified":1563591602000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1535958652000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1539855764000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1535958650000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1535958650000},{"_id":"source/_posts/ConParsing-Syntactic-Distance/header.jpg","hash":"dc1b11d16d0e8b8b35f06188e5eb2417b780888a","modified":1535958646000},{"_id":"source/_posts/RNNG/header.jpg","hash":"cc86c841ef7b4ddc0d8797ffbe0fb4d7bcfdf79c","modified":1535958644000},{"_id":"source/_posts/concrete-math-5/header.jpg","hash":"000e8fe87d5be0013aa3d5c85ad032bb6c79f9b4","modified":1535958646000},{"_id":"source/_posts/eoj2854/header.jpg","hash":"c5d843379b10a3457c5b11e2cfb109994031c749","modified":1535958648000},{"_id":"source/_posts/concrete-math-14/header.jpg","hash":"ec7f2023e11ca52d19659ee5cc032f13e2c619be","modified":1535958646000},{"_id":"source/_posts/concrete-math-7/header.jpg","hash":"8c2fbb027c2c0a6b78a7c23aec430404b1f2f7f3","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw5/header.jpg","hash":"307732f7b34c070ae8145b4cb9337b204727380d","modified":1535958646000},{"_id":"source/_posts/dynamic-oracles/header.jpg","hash":"47d8f6dfb2dd3c0733cd92a1787bca7ee853b368","modified":1535958648000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1535958644000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"4cba22fc966db3d7376eb624add5ddcbd3683600","modified":1535958644000},{"_id":"source/_posts/concrete-math-12/header.jpg","hash":"880acfa97261401c3eaad318c3c4ebd476b4ac17","modified":1535958646000},{"_id":"source/_posts/concrete-math-hw3/header.jpg","hash":"74dc43187c721b7aa0d5eec0166844bde38f8650","modified":1535958646000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1563523182000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"5a1abf198297a88ca8d1717a33f73505fd72acb0","modified":1563561366000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1563523182000},{"_id":"source/_posts/NAACL19-URNNG/header.jpg","hash":"d8529e50828a9c49c3bd887f07cc52df1258a406","modified":1556286158000},{"_id":"source/_posts/concrete-math-1/header.jpg","hash":"f8eb851c56a7687ab8ba37892808c40c86047e73","modified":1535958644000},{"_id":"source/_posts/concrete-math-11/header.jpg","hash":"e1aabb01b0cae8d9b2eeaecfd48625ea9eadf943","modified":1535958644000},{"_id":"source/_posts/constituent-parsing-summary/header.jpg","hash":"fb9880a4a0af48937207098da1446966c35d326d","modified":1537937800000},{"_id":"source/_posts/latex-pdf/header.jpg","hash":"16202f2dfa34e3b685219294e418cf58fbab64d9","modified":1547375744000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"66c95f6644cfa9f0af77220c7e79274ed27dd79e","modified":1563561448000},{"_id":"source/_posts/ACL18-AttConParsing/header.jpg","hash":"18f3a192233a473ef981510f897fbaf1c4f77e78","modified":1535958644000},{"_id":"source/_posts/TACL17-ConParsing/header.jpg","hash":"03fb48cc4c95b16c261d4e3d133e06f11aea7209","modified":1535958644000},{"_id":"source/_posts/algorithm-code-tricks/header.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1562732140000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1562732140000},{"_id":"themes/matery/source/medias/music/tiantangdemogui.mp3","hash":"3e9a91d47c673303cfb7745141fcb2372a78b938","modified":1563707176000},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/header.jpg","hash":"4eb92838e7282a09b759edbaca5bec4ee0930eb9","modified":1541936066000},{"_id":"source/_posts/NAACL19-URNNG/1.jpg","hash":"90eebd3222048f87e11632c39875eb444b37c911","modified":1556286008000},{"_id":"themes/matery/source/medias/music/daoshu.mp3","hash":"b5439266629548f6301d5844282bb4ffd3d5ad06","modified":1563560578000},{"_id":"themes/matery/source/medias/music/yiluxiangbei.mp3","hash":"19109e0e2d8a9dc1e118f54f05394096144210fd","modified":1563560610000},{"_id":"public/baidusitemap.xml","hash":"46460936f59154bb291ce0c3975f3b268cb4c4fd","modified":1564154539292},{"_id":"public/sitemap.xml","hash":"672417b2ecfe287e9affc9b5e6ccacef6e394f12","modified":1564154539300},{"_id":"public/atom.xml","hash":"1ef8fcc5a735df699b571f77aedad093221b8d1a","modified":1564154550469},{"_id":"public/search.xml","hash":"47ea794c00a86ff11684c770f92fa9d02fe155c3","modified":1564154550888},{"_id":"public/404.html","hash":"6bbcdddc8b82a2a6c800879003cf577bd689ae31","modified":1564154551170},{"_id":"public/about/index.html","hash":"1cb560cc414eaf2ee2b9e1340ba451efb94cb44f","modified":1564154551170},{"_id":"public/categories/index.html","hash":"08e36333b65efe00733f15094ec1a848a1272686","modified":1564154551171},{"_id":"public/contact/index.html","hash":"09fb31951c12b9e6e1c38ec66a7ff21f7213354d","modified":1564154551171},{"_id":"public/archives/index.html","hash":"ac68b899d741787d905695c6ee6485e61c3b9ddb","modified":1564154551171},{"_id":"public/friends/index.html","hash":"3970b631fc1d3986852b09228386c5ffbdb27de9","modified":1564154551171},{"_id":"public/tags/index.html","hash":"7f32fb60d1f57a520319afc1d16ccfcf97f7c92b","modified":1564154551171},{"_id":"public/2019/07/25/diora/index.html","hash":"b2a9f32f1d1628a0d74e801d79718208c3b4a9ea","modified":1564154551171},{"_id":"public/2019/07/12/algorithm-code-tricks/index.html","hash":"6cfdc8b41500a6209a23cd1664556847ccbceda6","modified":1564154551171},{"_id":"public/2019/04/20/naacl19-urnng/index.html","hash":"8a037d6db1e93669b6c40509c58c888430ec3a18","modified":1564154551171},{"_id":"public/2019/03/31/iclr18-prpn/index.html","hash":"a2c572cb697569acfde8c3aec41bb5784e75def7","modified":1564154551171},{"_id":"public/2019/03/11/naacl19-conparsing/index.html","hash":"d9eb1887e3058af6b03fb37e8b60b1b17e995d7e","modified":1564154551171},{"_id":"public/2019/03/11/conparseqlab/index.html","hash":"159640985b517e29f5f9281fa00021d0c2c325b4","modified":1564154551171},{"_id":"public/2019/01/13/latex-pdf/index.html","hash":"69ac7d8ad5ca46829aa0dc1beb79331b8e6bdd3e","modified":1564154551172},{"_id":"public/2018/12/31/2018-conclusion/index.html","hash":"6cc2227eb287a0c288197f79b7f014d9fe377645","modified":1564154551172},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/index.html","hash":"4bd99ed6857b84cccd198f34f12e59b91aa1f4a8","modified":1564154551172},{"_id":"public/2018/11/06/arxiv-18-sr-cp-bottom-up/index.html","hash":"797f48b9b9810e0f7cd4056a28ab384e6936cced","modified":1564154551172},{"_id":"public/2018/10/25/metamtl/index.html","hash":"cd1362cdc8bc30b1c4eba72ee98206d593d25e73","modified":1564154551172},{"_id":"public/2018/10/18/coling18-2localmodels/index.html","hash":"464d39d42da51186307818346ca1fc100f87e41a","modified":1564154551172},{"_id":"public/2018/10/15/acl18-beamspanparser/index.html","hash":"8c242f48c80fd27071332929d7caa133469e9231","modified":1564154551172},{"_id":"public/2018/10/11/python-advice/index.html","hash":"f6c054c9222b33a58e36634db35e5e3cbef8e37f","modified":1564154551172},{"_id":"public/2018/09/26/constituent-parsing-summary/index.html","hash":"28bca3c9f4417525e559b91626c0ee46efa5512b","modified":1564154551172},{"_id":"public/2018/09/02/rnng/index.html","hash":"dbd7628b7fa6d1a1bd031e06f5698752aa30fbff","modified":1564154551172},{"_id":"public/2018/08/28/tacl17-conparsing/index.html","hash":"0e9b38c1ea496f647d0f126a50539ef436f07ddd","modified":1564154551173},{"_id":"public/2018/08/05/k-bandit/index.html","hash":"dcacdc270f6214996c29578b92e406184789f39f","modified":1564154551173},{"_id":"public/2018/07/19/conparsing-syntactic-distance/index.html","hash":"4252cf6b3f6729f597d7ff685106ba134935869e","modified":1564154551173},{"_id":"public/2018/07/04/acl18-attconparsing/index.html","hash":"fde2be97abf10676f86067e12f71e13b63d441a9","modified":1564154551173},{"_id":"public/2018/08/03/dynamic-oracles/index.html","hash":"e9aebb1596f5e7807ada008bee4b34c849825283","modified":1564154551173},{"_id":"public/2018/07/03/naacl18-conparsing/index.html","hash":"8f811aca5795aa7255a829ed22ea61fac11fcb39","modified":1564154551173},{"_id":"public/2018/06/05/eoj3006/index.html","hash":"782583e4998af46fb7aed3094ce697e400c41365","modified":1564154551173},{"_id":"public/2018/06/01/concrete-math-hw5/index.html","hash":"76abbdbfb232dee762be2a22f3bc91fab2137964","modified":1564154551173},{"_id":"public/2018/06/28/acl17-conparsing/index.html","hash":"591d9ff8dbf44c489c2fc38ecfd2bd55d4e18ad7","modified":1564154551173},{"_id":"public/2018/06/05/eoj2854/index.html","hash":"3d59e1341b5c0fa91234ae1008ea7a9f7de44948","modified":1564154551173},{"_id":"public/2018/05/28/concrete-math-14/index.html","hash":"be2263f25bb27bda11b796431064c34f3fc86298","modified":1564154551174},{"_id":"public/2018/05/27/concrete-math-13/index.html","hash":"38f11c16ca29acb9abd4b8c9b30626b350316ad5","modified":1564154551174},{"_id":"public/2018/05/07/concrete-math-11/index.html","hash":"b52e01a00e1dd4e7b73d2117af1ef357f42751fb","modified":1564154551174},{"_id":"public/2018/05/14/concrete-math-12/index.html","hash":"42a139feff9db9f2d8996611f29e3efe71b849ab","modified":1564154551174},{"_id":"public/2018/04/28/concrete-math-10/index.html","hash":"ea5c25254afbe0ac17e5bd75b05c3398e71d1cda","modified":1564154551174},{"_id":"public/2018/04/23/concrete-math-9/index.html","hash":"2c4daa455c5d188663cd344986796580fa0cd8fe","modified":1564154551174},{"_id":"public/2018/04/24/ivp-eacl17/index.html","hash":"69001b1e78d01a99f10a81c256f3b6737fe497ea","modified":1564154551174},{"_id":"public/2018/04/20/concrete-math-hw3/index.html","hash":"3db29946406d478771fea3513ebd735690fa4228","modified":1564154551174},{"_id":"public/2018/04/19/inside-outside/index.html","hash":"135b762b09c7e940b169601503816e986ae9084b","modified":1564154551174},{"_id":"public/2018/04/13/hexo-blog/index.html","hash":"4766173b93976d63bdec245b510ffbc7bc88bb47","modified":1564154551174},{"_id":"public/2018/04/16/concrete-math-8/index.html","hash":"c72dbf14a93e5ffaa8f0103ef391c1a005a84c2f","modified":1564154551175},{"_id":"public/2018/04/09/concrete-math-7/index.html","hash":"d2cec31612f7a446d48efabba562d2bba81291c7","modified":1564154551175},{"_id":"public/2018/04/02/concrete-math-6/index.html","hash":"8e5fb98db4900317267fe235709ba6fc7641b9f5","modified":1564154551175},{"_id":"public/2018/03/26/concrete-math-5/index.html","hash":"fcd28c45faa2b330980065c8915c45ba4e2585ed","modified":1564154551175},{"_id":"public/2018/03/19/concrete-math-hw2/index.html","hash":"022673b2cd3a87a8e56be32e37153244d743f08d","modified":1564154551175},{"_id":"public/2018/03/19/concrete-math-4/index.html","hash":"3f6f72e0ef6f4a6530f226a950e56a3f9180b5d3","modified":1564154551175},{"_id":"public/2018/03/18/graduate-technique/index.html","hash":"1a21f6dc7064a20f443c93a30372138a0b5de585","modified":1564154551175},{"_id":"public/2018/03/12/concrete-math-3/index.html","hash":"560eb303fd769c940dce1454573eac141e6c2c0b","modified":1564154551175},{"_id":"public/2018/03/05/concrete-math-hw1/index.html","hash":"45a2fe99d9c8275de6ca30a286d66bf9d9e6387e","modified":1564154551175},{"_id":"public/2018/03/09/nvidia-cuda-dynet/index.html","hash":"0e53eae843dcd7a8000ce504caf4eb33f1873d09","modified":1564154551176},{"_id":"public/2018/03/05/concrete-math-2/index.html","hash":"4497bcb0f4b3ff0a2e84285d1973a785df02d3cd","modified":1564154551176},{"_id":"public/2018/02/27/concrete-math-1/index.html","hash":"6d827195eeada6c6c17c69b7d4ef5d8c39ffafc8","modified":1564154551176},{"_id":"public/2018/02/26/biyelunwen/index.html","hash":"debcc711c1f1680945a95a7e58e8aa5ba620fd63","modified":1564154551176},{"_id":"public/2018/01/22/2017-conclusion/index.html","hash":"e80041cf07fa94f6926ba254bfe47ad6e67e56db","modified":1564154551176},{"_id":"public/2018/01/15/paperdaily-4/index.html","hash":"152185ce6c1a4c5d74893077b4a4711f95ba5ebe","modified":1564154551176},{"_id":"public/2018/01/13/paperdaily-3/index.html","hash":"4187b4dcd48ff9bfb594b04366b50ad091b36d9b","modified":1564154551176},{"_id":"public/2018/01/09/paperdaily-1/index.html","hash":"5a378089761a7819fa6d13b1a067c49a1879b947","modified":1564154551176},{"_id":"public/2018/01/10/paperdaily-2/index.html","hash":"388b6773a90fdbd12582c3dbc04717b9736fa46f","modified":1564154551179},{"_id":"public/2018/01/01/pos-lm/index.html","hash":"7c8c32a48d99e907b56c0d6e3b526bff573afa53","modified":1564154551179},{"_id":"public/2017/12/30/text-minning-ppt/index.html","hash":"72bc6623aef41d6ddba0ae42d5c1174937161aaa","modified":1564154551179},{"_id":"public/2017/12/29/ecnu-ppt/index.html","hash":"5629f48d3986f5f4a13359f6c510ab2b5d74330b","modified":1564154551179},{"_id":"public/2017/12/19/emnlp17-2/index.html","hash":"621647adec1b2fcbd6aeca83b24c496ccbfe7963","modified":1564154551179},{"_id":"public/2017/11/29/textminning/index.html","hash":"f8977ff08f7325d6c3fc56a3f1aa56fcf727e151","modified":1564154551179},{"_id":"public/2017/12/19/emnlp17-1/index.html","hash":"7f2d804a56ef72793e478eccf37654101261206a","modified":1564154551179},{"_id":"public/2017/11/16/sw-compiler/index.html","hash":"b67288fb8ae16456d6c9bfd0862abef48e00c333","modified":1564154551179},{"_id":"public/2017/11/13/iclr17-1/index.html","hash":"b896c2d725001816cb760a5d3d9c670af86a8c88","modified":1564154551179},{"_id":"public/2017/10/25/acl17-2027/index.html","hash":"39e2935dc3df7d3cbb433c7bcf34322287339101","modified":1564154551179},{"_id":"public/2017/10/03/acl17-1161/index.html","hash":"5e7b31fdc014532509dcb5bb0ad6a92c5a8f2b72","modified":1564154551179},{"_id":"public/2017/10/02/sublime/index.html","hash":"7d54ab7a1cf872d54bfe6072dc212eaace57ffd3","modified":1564154551179},{"_id":"public/2017/09/20/dlhw2/index.html","hash":"1cc69d74a146841a0812c886f6f5894e7477b7b0","modified":1564154551180},{"_id":"public/2017/09/20/dlhw1/index.html","hash":"037ee2b774cb325e44929aa7733824de5b2f2804","modified":1564154551180},{"_id":"public/2017/09/19/dl2/index.html","hash":"92141aa9a6e65da4af2194828196c9cda2b09b75","modified":1564154551180},{"_id":"public/2017/09/19/dl1/index.html","hash":"4742d0ed6b78c53cb9db041b4ea87adf9b1455f1","modified":1564154551180},{"_id":"public/2017/09/19/context/index.html","hash":"6c6b3c91555eded5e3cb65a8641f451b5fc7707d","modified":1564154551180},{"_id":"public/2017/09/19/baoyan/index.html","hash":"5915c07f1e841ad787fe924803251872d23ccdda","modified":1564154551180},{"_id":"public/2017/09/19/recommend/index.html","hash":"d26fe45345bc125b040159199564683651987d49","modified":1564154551180},{"_id":"public/2017/09/19/eoj3328/index.html","hash":"0ada4bce8fab6dc92d12c8f76bc033cdfa382a5d","modified":1564154551180},{"_id":"public/archives/page/2/index.html","hash":"0098e4971a65132356ce109411d8da942b21b9a6","modified":1564154551180},{"_id":"public/archives/page/3/index.html","hash":"f5392d55d647aea34f42f51f91c375535c85180a","modified":1564154551180},{"_id":"public/archives/page/4/index.html","hash":"8ee364945ec51b6d2763aaf90296a45380a8a9cd","modified":1564154551181},{"_id":"public/archives/page/5/index.html","hash":"50821394a402111af96b39b09f5fc2cc7284c6a0","modified":1564154551181},{"_id":"public/archives/page/6/index.html","hash":"940f0f41109d5523df25f5b1b7e95cb56488ca07","modified":1564154551181},{"_id":"public/archives/page/7/index.html","hash":"0749b536d3e2e8db0e5a800855a5e75b9b1b4c38","modified":1564154551181},{"_id":"public/archives/2017/index.html","hash":"bbafe880212642fee35267c67b1c67386cd8b8dc","modified":1564154551181},{"_id":"public/archives/2017/page/2/index.html","hash":"73d4e3c457f0918e6f049c14e7826e192e86a4f6","modified":1564154551181},{"_id":"public/archives/2017/09/index.html","hash":"b0093cb6b7e870933a7c463b1659b5de095a3c9c","modified":1564154551181},{"_id":"public/archives/2017/10/index.html","hash":"bd3375ef139ea5a202cb66b66ec09099f3ea32ad","modified":1564154551181},{"_id":"public/archives/2017/11/index.html","hash":"2d373ec65b82513bc9d6dbd42c866c9335e23bd2","modified":1564154551181},{"_id":"public/archives/2017/12/index.html","hash":"0204bed25ce6a2db65cb0261ee23a59686b5fda0","modified":1564154551181},{"_id":"public/archives/2018/index.html","hash":"2c95177093d10a0088f83156a12a34c6006122db","modified":1564154551181},{"_id":"public/archives/2018/page/3/index.html","hash":"4e8e05cc97e7792e8fbc8ac0a6443e2a03011f61","modified":1564154551182},{"_id":"public/archives/2018/page/2/index.html","hash":"1e4c3f3fd210748c70d0ecf24f8fca9855d2ad7a","modified":1564154551182},{"_id":"public/archives/2018/page/4/index.html","hash":"09a0541211b98b059d584e6b5f9b8fdefc055a5d","modified":1564154551182},{"_id":"public/archives/2018/01/index.html","hash":"7f992bcf3ad59f27d21af6fa2a902564f7e9ff1c","modified":1564154551182},{"_id":"public/archives/2018/02/index.html","hash":"94dfa3cf46afca5310ec2b715b2de988d809faee","modified":1564154551182},{"_id":"public/archives/2018/03/index.html","hash":"2dea655ceb152d231ccda5cd98a4c39116bb6a50","modified":1564154551182},{"_id":"public/archives/2018/04/index.html","hash":"f2b11159c5b6b6f80b8d50e6b0997318dcab9f4e","modified":1564154551182},{"_id":"public/archives/2018/06/index.html","hash":"d6e2c7904ae3b2fd98f3bb54c763d32e56a50677","modified":1564154551182},{"_id":"public/archives/2018/05/index.html","hash":"35c5b08a3431ad7cdd3151e294918138725fe630","modified":1564154551182},{"_id":"public/archives/2018/07/index.html","hash":"4ce32a32f33d2ba80ffdd8b3c8804c3e2fa277e4","modified":1564154551182},{"_id":"public/archives/2018/08/index.html","hash":"b7b1219b050e34d051f82cff5cca3011dfbff3c1","modified":1564154551183},{"_id":"public/archives/2018/09/index.html","hash":"4dd1d55ba9e2e92497f43a4404a62149ca3aed97","modified":1564154551183},{"_id":"public/archives/2018/10/index.html","hash":"5d03fe9c26db7b649a20833bf273df0d4b409596","modified":1564154551183},{"_id":"public/archives/2018/11/index.html","hash":"37eb73e9a2bb6c2029ff131e1c713d23b2c4ac5b","modified":1564154551183},{"_id":"public/archives/2018/12/index.html","hash":"7bef29d9034bdbf7d79badf7ebf51b3c559b2355","modified":1564154551183},{"_id":"public/archives/2019/index.html","hash":"631ad86485c78606e9c8ebdfff69de09410d624d","modified":1564154551183},{"_id":"public/archives/2019/01/index.html","hash":"adf8f040c647e50fbadc53a5973395cbc157b0a7","modified":1564154551183},{"_id":"public/archives/2019/03/index.html","hash":"e645a45e4b8a26274576fc5b7d87be1fef0ccd5a","modified":1564154551183},{"_id":"public/archives/2019/04/index.html","hash":"d71357c67f069b0a80672abd2c41dbd6fbf54216","modified":1564154551183},{"_id":"public/archives/2019/07/index.html","hash":"4c1966bcf27538b94a5f13abd91dd74daae3fe20","modified":1564154551183},{"_id":"public/categories/随笔/index.html","hash":"51df3d679b905df20407ef0b708462e4b8372a86","modified":1564154551183},{"_id":"public/categories/序列标注/index.html","hash":"97801e4a0cf622a7a027fb03323e846141944327","modified":1564154551184},{"_id":"public/categories/句法分析/index.html","hash":"398afe799d7875172577abb24c3df53f49414f4a","modified":1564154551184},{"_id":"public/categories/句法分析/page/2/index.html","hash":"62ba096e2022230c929e6dd8cc0b6a9f5c449196","modified":1564154551184},{"_id":"public/categories/元学习/index.html","hash":"93017a94cf9727899f0d5b15404484b9a6415410","modified":1564154551184},{"_id":"public/categories/深度学习/index.html","hash":"6e50c2b56457c4e9b0ca83eef9fe8810f9d83781","modified":1564154551184},{"_id":"public/categories/程序设计/index.html","hash":"c7da44e1725a3794753c0b4c63f37944c561c0be","modified":1564154551184},{"_id":"public/categories/数学/index.html","hash":"35b64aec212749aa3cbdd6d61565c7f0c8c9cf5c","modified":1564154551184},{"_id":"public/categories/数学/page/2/index.html","hash":"f1b73fb59bd103a025b7f045e3ffc719b4ef44b9","modified":1564154551184},{"_id":"public/categories/问答系统/index.html","hash":"7f7507c9fabe9db73431a2dfd0c4c43163e1edf0","modified":1564154551185},{"_id":"public/categories/模板/index.html","hash":"494a7a6cc786fe268eb96d6c34a0a69d80aeacab","modified":1564154551185},{"_id":"public/categories/软件安装与配置/index.html","hash":"e55b9c8f74f4e0590cd5c71c5ed128cf515eb34f","modified":1564154551185},{"_id":"public/categories/强化学习/index.html","hash":"8c8274ac1cc32725501a727b2dde36c28080511b","modified":1564154551185},{"_id":"public/page/2/index.html","hash":"fbe8b572bb0c95db18f50ffd722502b9a0995225","modified":1564154551185},{"_id":"public/page/3/index.html","hash":"7f05d21760d9d10f0fdcc804111cde775ec54b0b","modified":1564154551185},{"_id":"public/page/4/index.html","hash":"ee95e517cf599bae4133f38142f6422a526d7ac4","modified":1564154551185},{"_id":"public/index.html","hash":"e08ba540ab1869bb78cd11d79064b24ffbe557d8","modified":1564154551186},{"_id":"public/page/5/index.html","hash":"c9eee6c8a1fd9d772490f866edadc760fd882520","modified":1564154551186},{"_id":"public/page/6/index.html","hash":"be25bac732e6ef77be70e1dc689c1bd0c8561aeb","modified":1564154551186},{"_id":"public/page/7/index.html","hash":"ebe8d2b21975a5293a98ca08cf2c95b00f8fe894","modified":1564154551186},{"_id":"public/tags/随笔/index.html","hash":"9cbf930ce4a7d7aa4c03573832b1a2612843a189","modified":1564154551186},{"_id":"public/tags/自然语言处理/index.html","hash":"ac271799d2691bd229dbeb10c927b3f77c0d3634","modified":1564154551187},{"_id":"public/tags/ACL/index.html","hash":"dab2a5c6c5f796bf9180bcdc702b72231dc77e2f","modified":1564154551187},{"_id":"public/tags/自然语言处理/page/2/index.html","hash":"132b12c692959c8fafdecfa88f86149534cbd0de","modified":1564154551187},{"_id":"public/tags/自然语言处理/page/3/index.html","hash":"1659d76dbcf23e02607858d43532444da5cc0203","modified":1564154551187},{"_id":"public/tags/神经网络/page/2/index.html","hash":"5f98e7fd11cd30b896d5360234fdd1012baf5ca1","modified":1564154551187},{"_id":"public/tags/神经网络/index.html","hash":"6528c3f1bf867d4e58ebdd3c037c07b18e8170f8","modified":1564154551187},{"_id":"public/tags/神经网络/page/3/index.html","hash":"ef6cc25941cf772457425678b36468f1ba74e996","modified":1564154551187},{"_id":"public/tags/神经网络/page/4/index.html","hash":"95b32e489ac268dbeec7b190de7c3cf7fdc46462","modified":1564154551187},{"_id":"public/tags/深度学习/page/2/index.html","hash":"811ae72866e41738293a57cf9674131cfd4cb32c","modified":1564154551187},{"_id":"public/tags/深度学习/index.html","hash":"7acdcec879e64375214e3071319c9e0c3b301af4","modified":1564154551187},{"_id":"public/tags/深度学习/page/3/index.html","hash":"53555ad1542ef2e782fd25f4081b380b9adc20da","modified":1564154551187},{"_id":"public/tags/深度学习/page/4/index.html","hash":"a3e164c01b376df426dede9287d158e792714908","modified":1564154551187},{"_id":"public/tags/句法分析/index.html","hash":"7dd5d9a87d4c82198b9969225c55f15260734154","modified":1564154551187},{"_id":"public/tags/序列标注/index.html","hash":"db2b6aafaf3e36ccc2a17325cee355bc3006c4ff","modified":1564154551187},{"_id":"public/tags/句法分析/page/2/index.html","hash":"724239671432f737525d08b3d12cd2954039f401","modified":1564154551187},{"_id":"public/tags/COLING/index.html","hash":"69fdc7846cec0762002fbe83e7d3f0cbb9858de0","modified":1564154551188},{"_id":"public/tags/EMNLP/index.html","hash":"c7c5dc4c4cd13f291ec377f14c7065050a535862","modified":1564154551188},{"_id":"public/tags/迁移学习/index.html","hash":"6c5ac897df83b4bd63ce371d4a36e34bfd636c2f","modified":1564154551188},{"_id":"public/tags/ICLR/index.html","hash":"5231e473747da2affe19af165c9753488a20e1ff","modified":1564154551188},{"_id":"public/tags/AAAI/index.html","hash":"147de888a1c69ca56fd9788be300ca1290d7bf4f","modified":1564154551188},{"_id":"public/tags/NAACL/index.html","hash":"7fa27b554037eaa5deddea0fb86eb5a0cd839bc2","modified":1564154551188},{"_id":"public/tags/Dynet/index.html","hash":"832d571596b4fab7757e9f4f8d4b31ac079f3153","modified":1564154551188},{"_id":"public/tags/TACL/index.html","hash":"3d674d5fd95eadccbee3ac818123d6f4e8e28d00","modified":1564154551188},{"_id":"public/tags/半监督学习/index.html","hash":"fc7249bc133e15b2689c2cfc4ae40ce59d39aa65","modified":1564154551188},{"_id":"public/tags/EACL/index.html","hash":"60afa5af08d19ff9437be9ff1c090272ec21ddc6","modified":1564154551188},{"_id":"public/tags/算法/index.html","hash":"af76cabdc026328d546c1b1c12818d7a0a525231","modified":1564154551188},{"_id":"public/tags/机试/index.html","hash":"06258e8674bc900d16d00ad7e9fdbe9a1ca8fab6","modified":1564154551188},{"_id":"public/tags/保研/index.html","hash":"5b29cb5401cb31700c80c70511a337c69f4160d3","modified":1564154551188},{"_id":"public/tags/具体数学/index.html","hash":"58aa6e4a29febc324d0c652027b429679a314a21","modified":1564154551188},{"_id":"public/tags/具体数学/page/2/index.html","hash":"e88f32e9fe05c25fd46870efdbe34f0f60d15fe0","modified":1564154551188},{"_id":"public/tags/NLP/index.html","hash":"63581c20d2d452df050de986101482df17873b23","modified":1564154551189},{"_id":"public/tags/问答系统/index.html","hash":"089fbf6adf2de745850924e3762e2b1e93f7ac3d","modified":1564154551189},{"_id":"public/tags/LaTeX/index.html","hash":"67a550f38fed22598a3244f39e9d581ae0eacd35","modified":1564154551189},{"_id":"public/tags/Beamer/index.html","hash":"47db31344ab80197a2c8e4b3802a991c80f80503","modified":1564154551189},{"_id":"public/tags/EOJ/index.html","hash":"d0be83f56e0096a667a749d3860749a3a8565293","modified":1564154551189},{"_id":"public/tags/ppt/index.html","hash":"05c4238a9f01cfc365fe89658b70b7283a9edb4f","modified":1564154551189},{"_id":"public/tags/Hexo/index.html","hash":"cf7699c29f9ffa4682673303b37948c9451bed97","modified":1564154551189},{"_id":"public/tags/Github/index.html","hash":"ff40529a7b0aee3521a61cb0cc36df88f1ae0db8","modified":1564154551189},{"_id":"public/tags/博客/index.html","hash":"32774d809e2231bc5e15c607ab8ee45f3ee59e37","modified":1564154551189},{"_id":"public/tags/强化学习/index.html","hash":"e33b0c21bff57cce2235a7b3475ee013c8ebca3d","modified":1564154551189},{"_id":"public/tags/Ubuntu/index.html","hash":"e276808785da58fb41a61b8f826b8e86b75af85d","modified":1564154551189},{"_id":"public/tags/Cuda/index.html","hash":"a46bd19c9da36488f1e71eba148c72a40d12ddde","modified":1564154551189},{"_id":"public/tags/Python/index.html","hash":"79fd29eb9fc8e489225d2876e5c87e052cf0149c","modified":1564154551190},{"_id":"public/tags/Sublime/index.html","hash":"419c8fb55fb4a76e5e96329eb80ca03c637ed884","modified":1564154551190},{"_id":"public/tags/编译器/index.html","hash":"6c2e9a2cd2483ebf9cf3a0adee95eb00bf3b9be5","modified":1564154551190},{"_id":"public/tags/编译原理/index.html","hash":"3a8405ed03d4779b9c1d2b965c02c1fccaf3b04f","modified":1564154551190},{"_id":"public/tags/C/index.html","hash":"515e291ab2c6ccea8d481928a2245776f7c46928","modified":1564154551190},{"_id":"public/CNAME","hash":"a6ad0999ab08c1c2d45314bbbf10819ce1ca9081","modified":1564154551190},{"_id":"public/favicon.png","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1564154551190},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1564154551190},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1564154551190},{"_id":"public/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1564154551190},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1564154551190},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1564154551190},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1564154551190},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1564154551191},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1564154551191},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1564154551191},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1564154551191},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1564154551191},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1564154551191},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1564154551191},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1564154551191},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1564154551191},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1564154551191},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1564154551191},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1564154551191},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1564154551191},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1564154551191},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1564154551191},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1564154551191},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1564154551191},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1564154551192},{"_id":"public/medias/featureimages/2.jpg","hash":"f6f297f1c351edb5a247163384d226d3173ad1c6","modified":1564154551192},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1564154551192},{"_id":"public/medias/featureimages/3.jpg","hash":"4d1ddcb0c28c6ad2740c8a5bb40cc77cd298cfad","modified":1564154551192},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1564154551192},{"_id":"public/medias/featureimages/5.jpg","hash":"55bbf85618e68571ed4444153de7a45e8e5804ce","modified":1564154551192},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1564154551192},{"_id":"public/medias/featureimages/7.jpg","hash":"e15ef7f17b80870006638a1601fb342580ce156c","modified":1564154551192},{"_id":"public/medias/featureimages/4.jpg","hash":"036c7ab34a93d69aac0b815a03fb9ccd8704cc8b","modified":1564154551192},{"_id":"public/medias/featureimages/6.jpg","hash":"f63976af8165aaedd0f263cf7db7dce9776648b7","modified":1564154551192},{"_id":"public/medias/featureimages/8.jpg","hash":"1a898e8584d15344ba9ed40d3fe68859a5dbc2cc","modified":1564154551192},{"_id":"public/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1564154551192},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1564154551193},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1564154551193},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1564154551193},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1564154551193},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1564154551193},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1564154551193},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1564154551193},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1564154551193},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1564154551193},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1564154551193},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1564154551193},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1564154551193},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1564154551250},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1564154551254},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1564154551258},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1564154551258},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1564154551258},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1564154551258},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1564154551258},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1564154551258},{"_id":"public/medias/featureimages/10.jpg","hash":"a2c6760e565af0411df5166fd0d6ff1f9c571f02","modified":1564154551258},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1564154551258},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1564154551258},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1564154551258},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1564154551258},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1564154551258},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1564154551258},{"_id":"public/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1564154551258},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1564154551259},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1564154551259},{"_id":"public/2018/10/15/acl18-beamspanparser/1.jpg","hash":"c18c8d8e3732121359f64ffea600fa63aaae99bc","modified":1564154551259},{"_id":"public/2017/10/25/acl17-2027/1.png","hash":"b37a00cc13dfdaac8be86b1eb6f729cc93e2ff60","modified":1564154551259},{"_id":"public/2018/10/15/acl18-beamspanparser/2.jpg","hash":"67c664888d33036687e08ddb1a14eab96a5d03c2","modified":1564154551259},{"_id":"public/2018/10/15/acl18-beamspanparser/3.jpg","hash":"bba7604b927227e9cbfc4ad3c38a36420cb5c475","modified":1564154551259},{"_id":"public/2018/12/31/2018-conclusion/1.jpg","hash":"8b0227ce07f8978fd4b15a5d1ac56490904e5165","modified":1564154551259},{"_id":"public/2018/12/31/2018-conclusion/3.jpg","hash":"54a1446f2b84ec30da46d0e94050ced17983375a","modified":1564154551259},{"_id":"public/2018/12/31/2018-conclusion/4.jpg","hash":"8432aec066796b337e4330ba915f1893c3ff9db0","modified":1564154551259},{"_id":"public/2018/10/18/coling18-2localmodels/1.jpg","hash":"529c18ab427a57ba175ff3a1fefcd071691afc2c","modified":1564154551259},{"_id":"public/2018/10/18/coling18-2localmodels/3.jpg","hash":"0a00475f624b3ddcefdccf522141e62522dd6ec8","modified":1564154551259},{"_id":"public/2018/10/18/coling18-2localmodels/2.jpg","hash":"fca80c7c033ec1c040ace32b303e8b3bbc7ba6ef","modified":1564154551259},{"_id":"public/2018/01/22/2017-conclusion/1.jpg","hash":"c2a3097d4e74572b8936ee7f11bb36eb6871f4a2","modified":1564154551259},{"_id":"public/2018/01/22/2017-conclusion/3.jpg","hash":"994066e10060760088a1267cf69a060492a7155e","modified":1564154551259},{"_id":"public/2018/01/22/2017-conclusion/4.jpg","hash":"34c09a0a03452eff78ec8fe757e406736ddb8471","modified":1564154551259},{"_id":"public/2018/01/22/2017-conclusion/749826.jpg","hash":"f41cde8693d855cf74ded242299b5f08f1f2d3c3","modified":1564154551259},{"_id":"public/2017/10/03/acl17-1161/1.jpg","hash":"61e2416117e7cf54895d5d5480797882ae35e431","modified":1564154551260},{"_id":"public/2017/10/03/acl17-1161/5.jpg","hash":"e836a5667afd9946faf022b47b4fb65d4a92e809","modified":1564154551260},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/1.jpg","hash":"6791d4d88d10bb2212cd7f9dd68ad4aab72add2a","modified":1564154551260},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/2.jpg","hash":"d1373de1ae3faed05dbb3724fb9b1155d7bc5361","modified":1564154551260},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/4.jpg","hash":"f7b0ffa0ce2efb0b3053e5f7a11ac0c3131d601c","modified":1564154551260},{"_id":"public/2017/12/19/emnlp17-1/2.png","hash":"364d7c4623ab874cfb7bb73a0d85ba510731a6af","modified":1564154551260},{"_id":"public/2017/12/19/emnlp17-1/3.png","hash":"6cefe18e64c1619ce1df7e007a5b56565ae8fae4","modified":1564154551260},{"_id":"public/2017/12/19/emnlp17-1/4.png","hash":"81676c5cf9237ea81dbe0f50e7379f103916189a","modified":1564154551260},{"_id":"public/2017/12/19/emnlp17-1/5.png","hash":"80b03c4f7f8bf321d690e955e32e0870e2e69f11","modified":1564154551260},{"_id":"public/2018/07/19/conparsing-syntactic-distance/3.png","hash":"a900e34610daac442b4c1d55b026a960555a127e","modified":1564154551260},{"_id":"public/2018/07/19/conparsing-syntactic-distance/7.png","hash":"ae4fe189cef0754d929dc000d630bced98f619c5","modified":1564154551260},{"_id":"public/2019/03/11/conparseqlab/2.jpg","hash":"8c6574640a28c751ec354e80953bac32a0358bd1","modified":1564154551260},{"_id":"public/2019/03/11/conparseqlab/1.jpg","hash":"e437c69853cf5580017dd9f577f3811470afcf62","modified":1564154551260},{"_id":"public/2019/03/11/conparseqlab/3.jpg","hash":"74173996cf0267650ce8b7e863b97308e2343fe8","modified":1564154551260},{"_id":"public/2019/03/11/conparseqlab/6.jpg","hash":"54c6a8389d8111d4c2118486629889d228035567","modified":1564154551260},{"_id":"public/2019/03/11/conparseqlab/5.jpg","hash":"c76e2e37987b5c9ce56cb7a2db24b530c12dfd84","modified":1564154551260},{"_id":"public/2019/03/11/conparseqlab/4.jpg","hash":"bebd47e158a95f29846864b895a25da7f64e4218","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/2.png","hash":"c2cdd049d1dbb3017921ba805415bb655ee9be00","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/3.png","hash":"28d922d25de60dc6d487263184d712019ab2ad34","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/5.png","hash":"4778ead745b9fe191cc15a22bbe82a67f1c1c1fb","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/4.png","hash":"2c6fbbda6a6f3550fb7ee996e6d6b1f27cc7c1a7","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/6.png","hash":"4e20a04dc21cb95ba12266642209ad3a415db3aa","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/7.png","hash":"53402a7d6ee533f799fc4ed30492c78d87fa8a71","modified":1564154551260},{"_id":"public/2018/07/04/acl18-attconparsing/8.png","hash":"9d122176377f9b8a387c6c2f28d0aa26b55a5f5c","modified":1564154551260},{"_id":"public/2018/04/28/concrete-math-10/1.png","hash":"b6bd955c88ae07da38d285e46c5e84bb488348b1","modified":1564154551260},{"_id":"public/2018/04/09/concrete-math-7/1.jpg","hash":"70b71ff9daa83bac2e91ee9d245bdd058fb28662","modified":1564154551260},{"_id":"public/2017/09/19/recommend/top.jpg","hash":"88078a2d4247d3cb8378cf80f5771ce2df20977a","modified":1564154551260},{"_id":"public/2017/11/16/sw-compiler/1.png","hash":"2505835d4043562e3c6121621b85d78513f20935","modified":1564154551260},{"_id":"public/2018/07/03/naacl18-conparsing/1.jpg","hash":"7cbff68d05bafa10b91f9aff3acb57dabd9a2ab0","modified":1564154551260},{"_id":"public/2018/01/09/paperdaily-1/1.png","hash":"58845f333333b35f53240f1c60392fb451db3268","modified":1564154551260},{"_id":"public/2018/01/10/paperdaily-2/1.png","hash":"4af838672bd53459390d4e4145839fae5a0a8996","modified":1564154551261},{"_id":"public/2019/07/12/algorithm-code-tricks/3337-1.jpg","hash":"a0a35453b50ee3879d1d733e7962fe664da89770","modified":1564154551261},{"_id":"public/2018/04/16/concrete-math-8/1.jpg","hash":"7c3b6be12a3706519bd11c2627bab82f5f9fc2e3","modified":1564154551261},{"_id":"public/2019/07/12/algorithm-code-tricks/3337-2.jpg","hash":"422e25f7a14fdeb9cad05037e5930a0a70d8ad0e","modified":1564154551261},{"_id":"public/2018/04/19/inside-outside/1.jpg","hash":"ed0edc4a807f0b549193b4fb3b2e343daf583d07","modified":1564154551261},{"_id":"public/2018/04/19/inside-outside/2.jpg","hash":"a51e60751172eda5b2d515f33ad6b8ec40e3c322","modified":1564154551261},{"_id":"public/2018/04/16/concrete-math-8/2.jpg","hash":"8bb9ab82b2601fbdd45701e98d40b74bed6b1bf5","modified":1564154551261},{"_id":"public/2018/11/06/arxiv-18-sr-cp-bottom-up/1.jpg","hash":"e907f8b74bb7db073c4e58ca12e7eaf70e6c7548","modified":1564154551261},{"_id":"public/2018/11/06/arxiv-18-sr-cp-bottom-up/3.jpg","hash":"5ede1aa788dd8877189f137722ce4a6672683184","modified":1564154551261},{"_id":"public/2018/02/27/concrete-math-1/1.jpg","hash":"a6514aced6c0ec40545f90a5a208eaa89f48123c","modified":1564154551261},{"_id":"public/2018/02/27/concrete-math-1/2.jpg","hash":"abc4195376867e87415d11448d63a16123efd103","modified":1564154551261},{"_id":"public/2018/02/27/concrete-math-1/3.jpg","hash":"cda3bb3811e8b4dd4b040e8e96162cad10172811","modified":1564154551261},{"_id":"public/2017/09/19/context/3.jpg","hash":"0290a7b305e7a7947252a8d49ca11107f4c9e83d","modified":1564154551261},{"_id":"public/2017/09/19/context/2.jpg","hash":"422c0faa05908aa3bb8c534c1d5ad1fe1aebf378","modified":1564154551261},{"_id":"public/2017/09/19/dl2/14.jpg","hash":"8f12eb076da3b4f8a15ad54ab47c5e80ba433a6b","modified":1564154551261},{"_id":"public/2019/03/11/naacl19-conparsing/1.jpg","hash":"aa255a310dabe75547413949be0127c4e2351dba","modified":1564154551261},{"_id":"public/2019/03/11/naacl19-conparsing/3.jpg","hash":"2b6acf4abb4a0702e5d1859d240f4678f6ffdf24","modified":1564154551261},{"_id":"public/2019/03/11/naacl19-conparsing/2.jpg","hash":"f3249ddee73332d9c4f437468926a25bf76f61b5","modified":1564154551261},{"_id":"public/2019/03/11/naacl19-conparsing/4.jpg","hash":"4917be9f00df29b36af5326ef753666ef6c3595c","modified":1564154551261},{"_id":"public/2019/03/11/naacl19-conparsing/6.jpg","hash":"ed4d29cc56b4ceb864cc3ee5f10848cd3eee1f99","modified":1564154551261},{"_id":"public/2018/09/02/rnng/3.jpg","hash":"168aa7311c86ea296d39818d6ab4635b2084b10c","modified":1564154551261},{"_id":"public/2018/09/02/rnng/4.jpg","hash":"609e877cfb50496962a26bc92c7a13256ed41271","modified":1564154551261},{"_id":"public/2018/09/02/rnng/6.jpg","hash":"d128d922cf1da4159c0b7e5efdfe92847e8fe085","modified":1564154551261},{"_id":"public/2017/11/29/textminning/2.png","hash":"8e1bf2eafce472b6a226a31074f7d78c832cc78c","modified":1564154551261},{"_id":"public/2017/11/29/textminning/3.png","hash":"309a52b9e4f767ba4a4ed9aa07b42cccdfc99dbc","modified":1564154551261},{"_id":"public/2017/11/29/textminning/4.png","hash":"77deeae4c2c9d49f153adf6b469c6e6f85e2b9dd","modified":1564154551261},{"_id":"public/2017/11/29/textminning/5.png","hash":"d465cfd9cf40b16866e773eb18ddcb5a2706f884","modified":1564154551261},{"_id":"public/2018/04/24/ivp-eacl17/1.jpg","hash":"e13e8a4b48030bd74d71bde22d799585157e2b34","modified":1564154551262},{"_id":"public/2019/03/31/iclr18-prpn/6.jpg","hash":"543c039aa1d6b7e2d4d639633c9d9bf5ffeb484b","modified":1564154551262},{"_id":"public/2018/04/24/ivp-eacl17/3.jpg","hash":"ca58edf30372ebee470644373778763cd12319c6","modified":1564154551262},{"_id":"public/2018/04/24/ivp-eacl17/5.jpg","hash":"94f9e6a374293eaab9ca0e75230bf67afd013966","modified":1564154551262},{"_id":"public/2018/04/24/ivp-eacl17/2.jpg","hash":"1e37a164a4fb02b8114f59280dfcbdc622e72c8b","modified":1564154551262},{"_id":"public/2018/04/24/ivp-eacl17/7.jpg","hash":"d56833a6052de25482c28f5c510cde65244d3a44","modified":1564154551262},{"_id":"public/2018/04/24/ivp-eacl17/6.jpg","hash":"eb718bee87d5d42a6e7aef9e50e94e480c7e3c36","modified":1564154551262},{"_id":"public/2019/04/20/naacl19-urnng/2.png","hash":"bff97fa05bd5954a8b9da4639792f61a23e8cd52","modified":1564154551262},{"_id":"public/2019/04/20/naacl19-urnng/3.jpg","hash":"dc9f10d16d95c019b7af7f7123f4580ea3ce70b3","modified":1564154551262},{"_id":"public/2019/04/20/naacl19-urnng/5.jpg","hash":"eee0a140a989d63a080e5aff8ea4d517f4157bce","modified":1564154551262},{"_id":"public/2019/04/20/naacl19-urnng/7.jpg","hash":"70e9b3b8697b4edbe20caa6d03752ee85a873892","modified":1564154551262},{"_id":"public/2018/01/13/paperdaily-3/2.png","hash":"34124c1898a028f5f4fb7ec78bd0c30041215e94","modified":1564154551262},{"_id":"public/2018/01/13/paperdaily-3/3.png","hash":"0c9c4be9779fbbe078809491c36ad064f4db94ac","modified":1564154551262},{"_id":"public/2018/03/19/concrete-math-hw2/1.jpg","hash":"3de61dc8a87fe354012290162a8254d152f17082","modified":1564154551262},{"_id":"public/2018/03/19/concrete-math-hw2/3.jpg","hash":"58a3ea6ad8a4ecfa47976b80f3bd78089215df37","modified":1564154551262},{"_id":"public/2018/03/19/concrete-math-hw2/2.jpg","hash":"7e63bd4bb235d1beadd75e6e2de537ad238a2b10","modified":1564154551262},{"_id":"public/2018/03/19/concrete-math-hw2/5.jpg","hash":"852199210bf819baff2e56f21b5d63e64d977743","modified":1564154551262},{"_id":"public/2018/03/19/concrete-math-hw2/4.jpg","hash":"875aa9e619b8794f334373ee9a0437570bfd7941","modified":1564154551262},{"_id":"public/2017/09/19/dl1/5.jpg","hash":"31c54ea3f61e1cedd5efbb51ef49d46ddbeff43e","modified":1564154551262},{"_id":"public/2018/08/03/dynamic-oracles/1.png","hash":"ac6467877f2fbee1a06180e71154bea72398ba80","modified":1564154551262},{"_id":"public/2018/08/03/dynamic-oracles/4.png","hash":"99cedbc9173600c819ed8e12c637c6ae0b241844","modified":1564154551262},{"_id":"public/2018/08/03/dynamic-oracles/3.png","hash":"ced90a262c69ae5b3ac550983e0e5a1e717e25e1","modified":1564154551262},{"_id":"public/2018/08/03/dynamic-oracles/6.png","hash":"019b9aa7f01afcdb35e5d9bfdfab171ad7dc8bcf","modified":1564154551262},{"_id":"public/2018/08/03/dynamic-oracles/7.png","hash":"eb175a564348409fee280a7f9ddae2e3fc49bb7a","modified":1564154551262},{"_id":"public/2018/10/25/metamtl/2.jpg","hash":"fdd448fe2cafd96f97d732164d23b5f40cab8713","modified":1564154551262},{"_id":"public/2018/10/25/metamtl/3.jpg","hash":"f5d9b3329451511014a0092acd3da82e9b7f43ed","modified":1564154551262},{"_id":"public/2018/10/25/metamtl/1.jpg","hash":"127c132f42edc4f68030d04c3fdd611de8cce04d","modified":1564154551263},{"_id":"public/2018/10/25/metamtl/4.jpg","hash":"be0bbe85fac680836d97bc171a36636c2d22a810","modified":1564154551263},{"_id":"public/2018/10/25/metamtl/5.jpg","hash":"b62a5139e59152919658f876b834083bcdd23e60","modified":1564154551263},{"_id":"public/2018/10/25/metamtl/6.jpg","hash":"10950e88fc639073911747c053e9bf07739b8b9e","modified":1564154551263},{"_id":"public/2018/10/25/metamtl/9.jpg","hash":"ef9dc7f2a14d04a646303989346c1aa47abd9a45","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/1.jpg","hash":"a1cafa4a316399a877344e03a558cebde44e0d32","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/10.jpg","hash":"d4bdec8a1088a7dc94fba07a852b5fd3b6afbc98","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/3.jpg","hash":"638162ad47de9e46aec43727bcaa2ba494bd5eb7","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/2.jpg","hash":"1f910be02546dad14bea9ed0ef20773ce74f80fb","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/12.jpg","hash":"6f4f295ce133e70ff01f6d348e29285cb37475a9","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/5.jpg","hash":"87008d6318973baa9f5e499c39f9195a0083a501","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/4.jpg","hash":"a1a4ef127208c14e2463028132792810a198e1d6","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/7.jpg","hash":"bf3e1a67c7b64a061001ce1345ffade39934b755","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/6.jpg","hash":"dcb16a1904b0b6167e47b8afbb93d473099ecbcc","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/9.jpg","hash":"09185135722dd6c5a31c894aac21931a38e4dadc","modified":1564154551263},{"_id":"public/2018/08/28/tacl17-conparsing/8.jpg","hash":"cff68c9ac64e7221974625593867c9b1bd5fc76d","modified":1564154551263},{"_id":"public/2018/01/15/paperdaily-4/1.png","hash":"87773324328cd07cc534dd6cdf164f823c766377","modified":1564154551263},{"_id":"public/2018/01/15/paperdaily-4/11.png","hash":"9a19e3a6da09e7dbbb28af630af6133190193dfa","modified":1564154551263},{"_id":"public/2018/01/15/paperdaily-4/12.png","hash":"9e82dcb0a0aa2ddcd2419f78300dd3377d272ef4","modified":1564154551263},{"_id":"public/2018/01/15/paperdaily-4/14.png","hash":"ed00c0cdac800b2a91b3419016dcf9d11b9f65ec","modified":1564154551263},{"_id":"public/2018/01/15/paperdaily-4/15.png","hash":"cfc121f17daf9054b26fb35229fe95fbca37493a","modified":1564154551263},{"_id":"public/2018/01/15/paperdaily-4/10.png","hash":"1079d27ae3b892be1ba232c5a7ed60f0351857bc","modified":1564154551264},{"_id":"public/2018/01/15/paperdaily-4/3.png","hash":"b276a67106696cc998e263bc18fda3b5e39d565d","modified":1564154551264},{"_id":"public/2018/01/15/paperdaily-4/4.png","hash":"c54e92a8f980e631abcba5d13ff5a3eead8a1d08","modified":1564154551264},{"_id":"public/2018/01/15/paperdaily-4/6.png","hash":"47a3c9853551dcc6ed2a1a5dafa948be6bb1bb5d","modified":1564154551264},{"_id":"public/2018/01/15/paperdaily-4/7.png","hash":"fe85b118879143d500a40028a379252fbc99c407","modified":1564154551264},{"_id":"public/2018/01/15/paperdaily-4/5.png","hash":"8cc4e6709f366a6bb5306db13f19142fa1b45f2a","modified":1564154551264},{"_id":"public/2017/12/30/text-minning-ppt/1.png","hash":"3eaffd511bf3b3504a856d151c877321afe93719","modified":1564154551264},{"_id":"public/2018/01/15/paperdaily-4/9.png","hash":"402255c0b7e74de19103dabc87b298e73b8b8a98","modified":1564154551264},{"_id":"public/2017/12/30/text-minning-ppt/2.png","hash":"11810de5c727194f74b7332f86f5a67a9b571bfa","modified":1564154551264},{"_id":"public/2017/12/30/text-minning-ppt/5.png","hash":"657bebdae596372792dd11c6b99b96ade6b668a9","modified":1564154551264},{"_id":"public/2017/12/30/text-minning-ppt/4.png","hash":"53625359d72205e92c25bdaae0393a904f50b69a","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/bi_lstm.jpg","hash":"3034b96bb5c0f5cdfda18f232588512d3b1a7bec","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/bottom_up_example.jpg","hash":"638162ad47de9e46aec43727bcaa2ba494bd5eb7","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/bottom_up.jpg","hash":"1f910be02546dad14bea9ed0ef20773ce74f80fb","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/composition.png","hash":"538491cb9a200b387080218dd7eac1b4d9374b1a","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/in_order.jpg","hash":"dcb16a1904b0b6167e47b8afbb93d473099ecbcc","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/in_order_example.jpg","hash":"bf3e1a67c7b64a061001ce1345ffade39934b755","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/label_oracle.png","hash":"019b9aa7f01afcdb35e5d9bfdfab171ad7dc8bcf","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/multi_headed_attention.jpg","hash":"47669cd77b6c688f9971526a668fb901ea347527","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/single_attention.jpg","hash":"138646f0a6138ac75a0cabbb89ba6a9728695f80","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/span_based_bottom_up_tree.png","hash":"0a5062c924fee9dc2c61f28d48f0fb7f73e748a9","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/structural_oracle.png","hash":"99cedbc9173600c819ed8e12c637c6ae0b241844","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/syntactic_distance_example.jpg","hash":"1eaff00cffc52db1a8b88f67d9b9a4260a697aa3","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/top_down.jpg","hash":"a1a4ef127208c14e2463028132792810a198e1d6","modified":1564154551264},{"_id":"public/2018/09/26/constituent-parsing-summary/top_down_example.jpg","hash":"87008d6318973baa9f5e499c39f9195a0083a501","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/1.jpg","hash":"ca247c820179e3c10e3009215a89bde6ff49fd6a","modified":1564154551265},{"_id":"public/2018/09/26/constituent-parsing-summary/transition_framework.png","hash":"59b2cd8386ef4c428441c70ca64f76c974894559","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/10.jpg","hash":"e74a46614b596918677641930c6268b45a9a2d71","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/14.jpg","hash":"9b13137196ed0e0f93546e502d03536ad3fa50cf","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/13.jpg","hash":"265522726740882b738cc6696a6a94b21de4f499","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/15.jpg","hash":"7b1ff0147b5d84e258cf301eb9e8d8152227ee51","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/16.jpg","hash":"11052f5e8146a3d38f22002e20f0172a8b1ca23f","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/18.jpg","hash":"4259425fd6a59a8e1c914c3f3105555d87f96f4d","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/19.jpg","hash":"2207c8147f6334e2e2eedd70279c0984094a01f5","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/2.jpg","hash":"92be8c2267281c00990b04ec687c5f4a152b7128","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/20.jpg","hash":"7e6022459b17ddc05d61e4c6a88517d294a5848e","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/3.jpg","hash":"c3b9a6c76d660c297fba1868a6f34989abd685ec","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/4.jpg","hash":"ff4993e70a9a81a29fbbd836cc43b7a1daf6e2d7","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/5.jpg","hash":"9435ca71f3593101384c4ff69c1ce57a90c367a2","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/6.jpg","hash":"6ec043f8250a5fa0fcc2f3a8e8167655eabd88ba","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/7.jpg","hash":"c7afa32a6363549cef23b622e539a84625615db4","modified":1564154551265},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/9.jpg","hash":"185d3bfea5d5c844abdc8925cf0ab9a9767ba168","modified":1564154551265},{"_id":"public/2018/04/13/hexo-blog/8.jpg","hash":"59c13e2fbc8d37ca0087d8f25a79c4e5feeb0f91","modified":1564154551265},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1564154551288},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1564154551288},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1564154551291},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1564154551291},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1564154551291},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1564154551291},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1564154551291},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1564154551291},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1564154551291},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1564154551291},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1564154551291},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1564154551291},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1564154551291},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1564154551292},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1564154551292},{"_id":"public/css/matery.css","hash":"b54cc18af6670f02d4c627d692b659a0c3015d9d","modified":1564154551292},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1564154551292},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1564154551292},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1564154551292},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1564154551292},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1564154551292},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1564154551292},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1564154551292},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1564154551292},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1564154551292},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1564154551292},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1564154551292},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1564154551292},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1564154551292},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1564154551292},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1564154551292},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1564154551292},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1564154551292},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1564154551292},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1564154551292},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1564154551293},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1564154551293},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1564154551293},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1564154551293},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1564154551293},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1564154551293},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1564154551293},{"_id":"public/2017/10/25/acl17-2027/2.png","hash":"ca0cb3ee8c9e4afce33de57932ae60023f0a82e5","modified":1564154551293},{"_id":"public/2017/10/25/acl17-2027/3.png","hash":"69abb4868a7e6c6cf4b504fe15655a933122636e","modified":1564154551293},{"_id":"public/2018/12/31/2018-conclusion/2.jpg","hash":"e169d2b7ed2a68ac031bc2908961cbea87cbafc0","modified":1564154551293},{"_id":"public/2018/10/18/coling18-2localmodels/4.jpg","hash":"7e149e31a9a74d68093bc808fecde76130de0ca9","modified":1564154551293},{"_id":"public/2018/01/22/2017-conclusion/2.jpg","hash":"fdc020fff3446bf34fb4488ad0a414044799cd7d","modified":1564154551293},{"_id":"public/2017/11/13/iclr17-1/2.png","hash":"7b9fa6ac4f2d3969549dd3e5f6b8df214cc2a68d","modified":1564154551294},{"_id":"public/2017/11/13/iclr17-1/3.png","hash":"52298a4d4c4173c666094688838e1f21689f9eb4","modified":1564154551294},{"_id":"public/2017/11/13/iclr17-1/5.png","hash":"36e97ab7daab3ee79d6437538d3a8b6f1981f837","modified":1564154551294},{"_id":"public/2017/10/03/acl17-1161/3.jpg","hash":"34cf1273bff246457866153cd24a7d977e4081ae","modified":1564154551294},{"_id":"public/2017/10/03/acl17-1161/2.jpg","hash":"d01a72efb889370dd34b1f503e96dfc07448105d","modified":1564154551294},{"_id":"public/2017/10/03/acl17-1161/6.jpg","hash":"be41e90d0fac5591b907df5009f5e0f4f7033cd5","modified":1564154551294},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/3.jpg","hash":"3daf9af661e354bf97504632afa9567013edc5b5","modified":1564154551294},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/5.jpg","hash":"43a11318e908ac7e3d45af2fee025ec73f9e4253","modified":1564154551294},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/6.jpg","hash":"7fc401f173a4a61f260c4eca4dcffc308c4ae0c7","modified":1564154551294},{"_id":"public/2017/12/19/emnlp17-1/1.png","hash":"b3da6d0b276cb8e6d5b171c723e2424b20cce274","modified":1564154551294},{"_id":"public/2018/07/19/conparsing-syntactic-distance/1.png","hash":"d866f0961493baa27f91ed99c87eff1f66cdcec4","modified":1564154551294},{"_id":"public/2018/07/19/conparsing-syntactic-distance/2.png","hash":"76a05d633624c2ee2c3e63951ff034e5c4a1e597","modified":1564154551294},{"_id":"public/2018/07/19/conparsing-syntactic-distance/6.png","hash":"f6dacbc79b60ffb06a52d33cb923dc9280b2719e","modified":1564154551294},{"_id":"public/2019/03/11/conparseqlab/7.jpg","hash":"47dcb52147fcec7cb50afa8345c2e308eb1e7d65","modified":1564154551295},{"_id":"public/2018/07/04/acl18-attconparsing/1.png","hash":"f9ba5228a7d41f89abead1b5cca7a5ae366e7f38","modified":1564154551295},{"_id":"public/2018/07/04/acl18-attconparsing/9.png","hash":"ba68a2190412bcc34fa63a773169c5467afe8af6","modified":1564154551295},{"_id":"public/2018/07/03/naacl18-conparsing/2.jpg","hash":"e38298a461097bcabc6540af7c235bbcd9597661","modified":1564154551295},{"_id":"public/2018/01/10/paperdaily-2/2.png","hash":"551c68a8d0af4c42c67e36f857cf317912ce8506","modified":1564154551295},{"_id":"public/2018/11/06/arxiv-18-sr-cp-bottom-up/2.jpg","hash":"18598a580ac9402237ef7235a6a90ff97a8584b3","modified":1564154551295},{"_id":"public/2017/09/19/context/1.jpg","hash":"1db0f41b5aab46bdb9c0d82648916321d066b31d","modified":1564154551296},{"_id":"public/2018/03/05/concrete-math-hw1/1.jpg","hash":"f81f41d347a810c9e23103bbbe6adbebe8d13c1e","modified":1564154551296},{"_id":"public/2017/09/19/context/hierarchical_model.jpg","hash":"28e8741980c7e4aa5b30d2b1b425f0ae4fc7a5a3","modified":1564154551296},{"_id":"public/2017/09/19/dl2/15.jpg","hash":"f8d1fa5345cfa62270ba9a66ad9057b54ce7d504","modified":1564154551296},{"_id":"public/2017/09/19/dl2/13.jpg","hash":"67c282a28a7730e9d7f1b60c8d6de853bf983ab7","modified":1564154551296},{"_id":"public/2019/01/13/latex-pdf/2.jpg","hash":"0f543fdc1d349d9a088fcc82a3a13d801352bc5a","modified":1564154551296},{"_id":"public/2017/09/19/dl2/17.jpg","hash":"96574e5c54b2683a65d57811db597fce143f9849","modified":1564154551296},{"_id":"public/2019/01/13/latex-pdf/1.jpg","hash":"584247a929b25b2882f2210fa3d293174a3d68fa","modified":1564154551296},{"_id":"public/2017/09/19/dl2/16.jpg","hash":"9475d182f1ab4d8f0f1ff65b3b58dcb17ab0d908","modified":1564154551296},{"_id":"public/2019/01/13/latex-pdf/3.jpg","hash":"27dc46db2469da34781ac82d9e150fc1c6f72d8f","modified":1564154551296},{"_id":"public/2019/01/13/latex-pdf/5.jpg","hash":"16f7b34189b344b7f3d9c6ca32088b565e5b0a92","modified":1564154551296},{"_id":"public/2019/03/11/naacl19-conparsing/5.jpg","hash":"40466cef69d4e7956a83f5ada6c84cd43e7b8edd","modified":1564154551296},{"_id":"public/2018/09/02/rnng/5.jpg","hash":"e13ddeb5f21b622bfda4fa9367fb4e66d8d74d49","modified":1564154551296},{"_id":"public/2017/11/29/textminning/1.png","hash":"6e5d11f442e7c6157da94c73a4fe93c9130165fb","modified":1564154551296},{"_id":"public/2017/11/29/textminning/6.png","hash":"cf5c4d42617b1d989b25d0221a2e7a86c98eb46e","modified":1564154551297},{"_id":"public/2019/03/31/iclr18-prpn/4.jpg","hash":"97d2fd468fd730dd987f717736b81d55c18eda87","modified":1564154551297},{"_id":"public/2019/03/31/iclr18-prpn/5.jpg","hash":"5787418ccc9cb48b3b04f299ac4955a1d10cfc7d","modified":1564154551297},{"_id":"public/2018/04/24/ivp-eacl17/4.jpg","hash":"10dc1ffdcf3c71cc1e683c67ff7cad6c16dd92cc","modified":1564154551297},{"_id":"public/2019/04/20/naacl19-urnng/4.jpg","hash":"98188fc67be56513ae1d6b94d7b7b15e5e251148","modified":1564154551297},{"_id":"public/2019/04/20/naacl19-urnng/6.jpg","hash":"160d92269f749fc9c510fccbe50f5afb322cf81f","modified":1564154551297},{"_id":"public/2018/01/13/paperdaily-3/4.png","hash":"5bab9f0aaffe6c871bcc561ee628dc268a6a9474","modified":1564154551297},{"_id":"public/2018/01/13/paperdaily-3/5.png","hash":"0e6201314d3750a89d5025684dda5ebbb9be3b4f","modified":1564154551297},{"_id":"public/2018/01/13/paperdaily-3/6.png","hash":"8fef47518e4cb1b6fbd7576cd6c7658f596bf3eb","modified":1564154551297},{"_id":"public/2018/01/13/paperdaily-3/ukulele.jpg","hash":"649a056d7fa086a18c8de3ca3a4fa91277c2c465","modified":1564154551297},{"_id":"public/2017/09/19/dl1/10.jpg","hash":"bafed0c9dc94fe5da3837ff70edf7528a97cb950","modified":1564154551297},{"_id":"public/2018/03/19/concrete-math-hw2/8.jpg","hash":"828af6f8f0fbab2d36f771a7c5ac3a97a2abb6d4","modified":1564154551297},{"_id":"public/2017/09/19/dl1/11.jpg","hash":"fb924abd5646642772daa686c5a48008842dbb2b","modified":1564154551297},{"_id":"public/2017/09/19/dl1/12.jpg","hash":"76af0223ef7c2965790a4727137f4daf0239a8e7","modified":1564154551297},{"_id":"public/2017/09/19/dl1/6.jpg","hash":"6320b45a894679d75658ff367209451733fbbc7c","modified":1564154551297},{"_id":"public/2017/09/19/dl1/7.jpg","hash":"c0ed99fd645ab7ca0f9c86d184d00d0e02c4a95b","modified":1564154551298},{"_id":"public/2017/09/19/dl1/8.jpg","hash":"416ecc6820e81a59a0f10fb0ba41dd3d7beb9de8","modified":1564154551298},{"_id":"public/2017/09/19/dl1/9.jpg","hash":"02f0e90668ac85207b5d313b0d6c5792d970417e","modified":1564154551298},{"_id":"public/2018/08/03/dynamic-oracles/2.png","hash":"c17bb58f12c49c23f8448991cfcc483d5673f081","modified":1564154551298},{"_id":"public/2018/08/03/dynamic-oracles/5.png","hash":"21b1af04bbda8d3709d50c923909afb45f81f165","modified":1564154551298},{"_id":"public/2018/08/03/dynamic-oracles/8.png","hash":"9079dd35686859c29127255d0cdcf1634dc9cdfa","modified":1564154551298},{"_id":"public/2018/10/25/metamtl/7.jpg","hash":"4888b307ba1844df09ab6bd7cb45e93849c0f0cd","modified":1564154551298},{"_id":"public/2018/08/28/tacl17-conparsing/11.jpg","hash":"66e9b5a86a1ee0e2d3afa8d87aeda003c74f2c03","modified":1564154551298},{"_id":"public/2018/01/15/paperdaily-4/13.png","hash":"b7ab7c455f647beaf4d2721b2e558f335a16ec6f","modified":1564154551298},{"_id":"public/2018/01/15/paperdaily-4/2.png","hash":"01f661a1eac231dfd8f17477d09d294f97a47632","modified":1564154551298},{"_id":"public/2018/01/15/paperdaily-4/8.png","hash":"d6f26e3a128fb27326ce037f71a2f5f52613cfae","modified":1564154551298},{"_id":"public/2017/12/30/text-minning-ppt/11.png","hash":"1394ffe92e92480fedda0f8e78f1cd4403234b83","modified":1564154551298},{"_id":"public/2017/12/30/text-minning-ppt/12.png","hash":"db4ff4544109d4d3a6b6b310e4721ff2e9e5970a","modified":1564154551298},{"_id":"public/2017/12/30/text-minning-ppt/13.png","hash":"ee619f52f7326329d61638dc4544b1e95513805f","modified":1564154551298},{"_id":"public/2017/12/30/text-minning-ppt/16.png","hash":"a364adbce732755e7305b3f2ce4a6027dfb48719","modified":1564154551298},{"_id":"public/2017/12/30/text-minning-ppt/17.png","hash":"e13e72453ba14ab7f8f689f4b63888caedca2e42","modified":1564154551298},{"_id":"public/2017/12/30/text-minning-ppt/18.png","hash":"827058648a253ad5a44ffd5796017ba2db7940be","modified":1564154551299},{"_id":"public/2017/12/30/text-minning-ppt/3.png","hash":"d070bf7b636dda13a5d3e593040ab479194a261e","modified":1564154551299},{"_id":"public/2017/12/30/text-minning-ppt/6.png","hash":"9a6f07c319dffbd2453bb838afec45563a912e7c","modified":1564154551299},{"_id":"public/2017/12/30/text-minning-ppt/7.png","hash":"064f165d3118d07f58ade7304376b4b38290ec6a","modified":1564154551299},{"_id":"public/2018/09/26/constituent-parsing-summary/binarized_syntactic_tree.png","hash":"2a02fb2ca94a74f822f2b1bf4ed8060ffe8eeac9","modified":1564154551299},{"_id":"public/2018/09/26/constituent-parsing-summary/chart_based.png","hash":"31079c81252844826b3bd2ac53ce1ae0eac501d7","modified":1564154551299},{"_id":"public/2018/09/26/constituent-parsing-summary/results.jpg","hash":"02a515bada08b0b10cbe61447741121b9fcb5e56","modified":1564154551299},{"_id":"public/2018/09/26/constituent-parsing-summary/span_based_bottom_up.png","hash":"ace34948b1f4690ae8ef57be0f17dd2f87234d4f","modified":1564154551299},{"_id":"public/2018/09/26/constituent-parsing-summary/span_based_bottom_up_example.png","hash":"724d6fb737b8e842f0604d2a50115471a328585d","modified":1564154551299},{"_id":"public/2018/09/26/constituent-parsing-summary/syntactic_tree.png","hash":"cfcb94aaad70f50d7e336f10fda9450cc3a051a7","modified":1564154551299},{"_id":"public/2018/04/13/hexo-blog/11.jpg","hash":"ddf41b537f6e6e95d2192b84ed3208c1be9b4bfd","modified":1564154551299},{"_id":"public/2018/04/13/hexo-blog/17.jpg","hash":"12331a0bb13ad1a35859a95b83a9ab76683fb6f6","modified":1564154551299},{"_id":"public/2018/04/13/hexo-blog/21.jpg","hash":"807ad483d0660f6dd82753ba804cdc1c026a3151","modified":1564154551299},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1564154551324},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1564154551324},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1564154551325},{"_id":"public/2017/10/03/acl17-1161/4.jpg","hash":"5d227c6c00c22306c0987e1371b9e91edf4d8688","modified":1564154551325},{"_id":"public/2018/06/28/acl17-conparsing/3.png","hash":"af8acc8d53d09063ff7de42eaf9eadd5d22f8f42","modified":1564154551325},{"_id":"public/2017/11/13/iclr17-1/4.png","hash":"082aa3b10e1bdab5b6196d9128590fd0a9c9ddfe","modified":1564154551325},{"_id":"public/2017/11/13/iclr17-1/1.png","hash":"cbbf361024c4a489adcb13f5de8ed0c9986aee22","modified":1564154551325},{"_id":"public/2018/03/19/concrete-math-4/1.jpg","hash":"54d5607ff217e9143350a67ffc8a6e3fbb8ca537","modified":1564154551325},{"_id":"public/2017/10/02/sublime/sublime.png","hash":"ec02cf02afa67afbcd7f6c4772639782563ebe03","modified":1564154551325},{"_id":"public/2018/01/09/paperdaily-1/2.png","hash":"fd934c1df2672fe9e28a0c151dc97db246ae0961","modified":1564154551325},{"_id":"public/2018/01/10/paperdaily-2/header.jpg","hash":"b40ef7492a4290a301ad14b9540f35d7ae78aae4","modified":1564154551326},{"_id":"public/2018/03/05/concrete-math-hw1/2.jpg","hash":"069c92e875dfbcf351ca7b3c60894d774bf1cd1f","modified":1564154551326},{"_id":"public/2018/03/05/concrete-math-hw1/3.jpg","hash":"eef243561f26405d1ca068d24a3d44d0b61e025b","modified":1564154551326},{"_id":"public/2019/01/13/latex-pdf/4.jpg","hash":"74aedf6718772123e95291100ac12e2e440bbadf","modified":1564154551326},{"_id":"public/2018/09/02/rnng/1.jpg","hash":"af93bd523f381f536b93f89e4ba695e3039b8f28","modified":1564154551326},{"_id":"public/2018/09/02/rnng/2.jpg","hash":"da2b938fbc85e8cd7df91a5ce89f0995269bae7b","modified":1564154551327},{"_id":"public/2018/03/19/concrete-math-hw2/6.jpg","hash":"0970d5f7fc0e78fded17aa8b81d02e96894243fa","modified":1564154551327},{"_id":"public/2018/03/19/concrete-math-hw2/7.jpg","hash":"311ed0af0b4995b173f7098ffeeb0119bb7a8879","modified":1564154551327},{"_id":"public/2018/10/25/metamtl/8.jpg","hash":"003954e67cb864805120807e0cd79bd910cc6787","modified":1564154551327},{"_id":"public/2017/12/30/text-minning-ppt/15.png","hash":"443ae2b9a9f7a8129f4501f84b270c3feb5fe278","modified":1564154551327},{"_id":"public/2017/12/30/text-minning-ppt/14.png","hash":"32039f04ecdf05982d1ad7d8fc81390fc5de2a57","modified":1564154551327},{"_id":"public/2017/12/30/text-minning-ppt/20.png","hash":"adadf50418f65d6447dd2b69cb98b0afc5a96c2f","modified":1564154551327},{"_id":"public/2017/12/30/text-minning-ppt/8.png","hash":"70a512011e6eb16d59845e64c61d3f61defb93e6","modified":1564154551328},{"_id":"public/2018/04/13/hexo-blog/12.jpg","hash":"ebaa2a0db37495492da2dbe1493fc0d1afc85189","modified":1564154551328},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1564154551349},{"_id":"public/medias/featureimages/11.jpg","hash":"26df6a776eed7aab29b68864e0e420f2d6c6b9ae","modified":1564154551349},{"_id":"public/2018/12/31/2018-conclusion/header.jpg","hash":"962f6bbba5dddc11d9f54350fd228e0831b8b261","modified":1564154551350},{"_id":"public/2017/10/03/acl17-1161/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551350},{"_id":"public/2017/10/25/acl17-2027/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551350},{"_id":"public/2018/06/28/acl17-conparsing/1.png","hash":"36213f5559c754c393eab66a1ed431226eba364c","modified":1564154551350},{"_id":"public/2018/06/28/acl17-conparsing/2.png","hash":"57fdad89eb78c386a9f7dd53740196fc32a568f9","modified":1564154551350},{"_id":"public/2018/07/19/conparsing-syntactic-distance/4.png","hash":"9bb2c42dbd9447a72808cdb7680d24b1cd693fae","modified":1564154551351},{"_id":"public/2017/12/19/emnlp17-1/6.png","hash":"1e5e2508beb4e2c7c9ad8160879d2a49741483d9","modified":1564154551351},{"_id":"public/2018/07/19/conparsing-syntactic-distance/5.png","hash":"e1762f48a839790016f565e3425d3a5c0a9ad784","modified":1564154551351},{"_id":"public/2017/12/19/emnlp17-1/7.png","hash":"7ecd8b433572c0433ac0659844e14427bec125de","modified":1564154551351},{"_id":"public/2017/12/19/emnlp17-2/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551351},{"_id":"public/2017/11/13/iclr17-1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551351},{"_id":"public/2017/12/19/emnlp17-1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551352},{"_id":"public/2018/01/01/pos-lm/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551352},{"_id":"public/2018/01/09/paperdaily-1/header.jpg","hash":"4a2e013b8b6585c9fa223bb05d1f3df0e3066c5b","modified":1564154551352},{"_id":"public/2017/09/19/baoyan/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551352},{"_id":"public/2018/01/13/paperdaily-3/1.png","hash":"24d6e1f5245f08f03c145fcbe3f07099fd3976cd","modified":1564154551352},{"_id":"public/2017/11/29/textminning/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551352},{"_id":"public/2018/03/05/concrete-math-2/header.jpg","hash":"9e215f6e178849a79de8b463819590c200209d25","modified":1564154551353},{"_id":"public/2018/04/02/concrete-math-6/header.jpg","hash":"0f6d8286d892d9cd57237c6cce0308ad55624b48","modified":1564154551353},{"_id":"public/2018/03/05/concrete-math-hw1/4.jpg","hash":"d415991b1a53aba068ac2288c1a26ce9ca9a658b","modified":1564154551353},{"_id":"public/2018/04/23/concrete-math-9/header.jpg","hash":"51154604945a2a98cb74e63655a792bb259b5b00","modified":1564154551353},{"_id":"public/2017/09/19/context/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551353},{"_id":"public/2017/09/19/dl1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551353},{"_id":"public/2017/09/20/dlhw1/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551353},{"_id":"public/2017/09/19/dl2/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551354},{"_id":"public/2017/09/20/dlhw2/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551354},{"_id":"public/2017/12/29/ecnu-ppt/1.png","hash":"df0b35cf3ba0dbdbdd4ee7e194ce1e93938e4c8a","modified":1564154551354},{"_id":"public/2017/12/29/ecnu-ppt/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551354},{"_id":"public/2017/09/19/eoj3328/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551354},{"_id":"public/2017/10/02/sublime/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551354},{"_id":"public/2017/09/19/recommend/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551355},{"_id":"public/2017/11/16/sw-compiler/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551355},{"_id":"public/2017/12/30/text-minning-ppt/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564154551355},{"_id":"public/2017/12/30/text-minning-ppt/19.png","hash":"0aa2ff2bfe64f6f63375a8602a87d61b67edd359","modified":1564154551355},{"_id":"public/medias/featureimages/9.jpg","hash":"e356a9e5c362c13289d68f72af9548957dd1688b","modified":1564154551369},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1564154551369},{"_id":"public/medias/banner/3.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1564154551369},{"_id":"public/2018/06/28/acl17-conparsing/header.jpg","hash":"5cfe63312c5c89d8dd1ea20dcc04b539d68d5d12","modified":1564154551370},{"_id":"public/2018/10/15/acl18-beamspanparser/header.jpg","hash":"18a3db0137bf25d79b4401375145d854be13c407","modified":1564154551370},{"_id":"public/2018/05/27/concrete-math-13/header.jpg","hash":"d5ee781f1e7b256f2f22dbc31f86f672eaf05106","modified":1564154551370},{"_id":"public/2018/03/12/concrete-math-3/header.jpg","hash":"fb63d444e25ab9050e0935dced42912070a0fcda","modified":1564154551370},{"_id":"public/2019/03/31/iclr18-prpn/1.png","hash":"a4230c1c3edf3fa8ecbef7c8098065dad27556f5","modified":1564154551370},{"_id":"public/2018/10/11/python-advice/header.jpg","hash":"f4eef7abf1cf3a45863e3fc8c72eda1e6f7e9732","modified":1564154551371},{"_id":"public/2017/12/30/text-minning-ppt/10.png","hash":"08092310710e0156613e34adb89d01142f469b3c","modified":1564154551371},{"_id":"public/2017/12/30/text-minning-ppt/9.png","hash":"950c487f5751ad3b50cbaa67af6d866821f783f7","modified":1564154551371},{"_id":"public/medias/banner/4.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1564154551385},{"_id":"public/medias/banner/5.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1564154551390},{"_id":"public/2018/10/18/coling18-2localmodels/header.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1564154551390},{"_id":"public/2018/01/22/2017-conclusion/header.jpg","hash":"25ab6c0454f4f12635c81c5a3d332c1128b98c6a","modified":1564154551390},{"_id":"public/2019/03/11/conparseqlab/header.jpg","hash":"24c3c8992c997e373d925a12328335755a3375b6","modified":1564154551390},{"_id":"public/2018/04/24/ivp-eacl17/header.jpg","hash":"c81af18ddd046cc0ba1a5ba125ccb6b098e53d11","modified":1564154551390},{"_id":"public/2018/07/03/naacl18-conparsing/header.jpg","hash":"b464570f4d701ff2ce926d67e0ef8b7c280312c5","modified":1564154551390},{"_id":"public/2018/03/09/nvidia-cuda-dynet/header.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1564154551391},{"_id":"public/2018/04/16/concrete-math-8/header.jpg","hash":"79a3c96a5adcf46f1e1a208243603a35053118f3","modified":1564154551391},{"_id":"public/2019/03/11/naacl19-conparsing/header.jpg","hash":"a1b9196a1209a8ceb0d0925707e1599e352892a2","modified":1564154551395},{"_id":"public/2019/03/31/iclr18-prpn/3.png","hash":"dc567db0571cf14a110aa0b9192ad0bcd69b8c46","modified":1564154551395},{"_id":"public/2018/01/13/paperdaily-3/header.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1564154551395},{"_id":"public/2019/03/31/iclr18-prpn/header.jpg","hash":"66d0bd0f521a48c37a1edced18767ead49bee65b","modified":1564154551395},{"_id":"public/2018/03/19/concrete-math-hw2/header.jpg","hash":"69a1d8cdb92af914e145ac7beb110bcf6570a440","modified":1564154551395},{"_id":"public/2018/01/15/paperdaily-4/header.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1564154551396},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1564154551430},{"_id":"public/2018/11/07/emnlp18-dynamic-oracle/header.jpg","hash":"96dcf6edcbeb826a59963cb77a31e8f92aab856b","modified":1564154551433},{"_id":"public/2018/06/05/eoj3006/header.jpg","hash":"8749c0fb1a4cd07ee145f67caa53cfb69c86ca0f","modified":1564154551433},{"_id":"public/2018/03/18/graduate-technique/header.jpg","hash":"41f4966fd962f6a37af870da805a3722a60ff20d","modified":1564154551434},{"_id":"public/2018/03/19/concrete-math-4/header.jpg","hash":"cee5cc79f2b0e329a836d1518205121034669669","modified":1564154551434},{"_id":"public/2018/04/19/inside-outside/header.jpg","hash":"ae1646f64eb14dfc3b9723ade4cbeaf04669a5c4","modified":1564154551434},{"_id":"public/2018/04/13/hexo-blog/header.jpg","hash":"41f4966fd962f6a37af870da805a3722a60ff20d","modified":1564154551437},{"_id":"public/medias/banner/1.jpg","hash":"4cba22fc966db3d7376eb624add5ddcbd3683600","modified":1564154551470},{"_id":"public/medias/banner/0.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1564154551471},{"_id":"public/2018/02/26/biyelunwen/header.jpg","hash":"4cba22fc966db3d7376eb624add5ddcbd3683600","modified":1564154551474},{"_id":"public/2018/04/28/concrete-math-10/header.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1564154551474},{"_id":"public/2018/08/05/k-bandit/header.jpg","hash":"71131f183c8442b3dd47b2a11ac45f7fa58f431f","modified":1564154551474},{"_id":"public/2018/03/05/concrete-math-hw1/header.jpg","hash":"c2f353c18a35233d6428af1047ae833311f36b4c","modified":1564154551475},{"_id":"public/2019/03/31/iclr18-prpn/2.png","hash":"0ab9e36c071d80de49150072cd25f4af07b8d1cb","modified":1564154551475},{"_id":"public/2018/10/25/metamtl/header.jpg","hash":"719f0a49b0435de1000cbcbee0dafbe4487994c7","modified":1564154551479},{"_id":"public/2018/07/19/conparsing-syntactic-distance/header.jpg","hash":"dc1b11d16d0e8b8b35f06188e5eb2417b780888a","modified":1564154551520},{"_id":"public/2018/03/26/concrete-math-5/header.jpg","hash":"000e8fe87d5be0013aa3d5c85ad032bb6c79f9b4","modified":1564154551520},{"_id":"public/2018/06/05/eoj2854/header.jpg","hash":"c5d843379b10a3457c5b11e2cfb109994031c749","modified":1564154551521},{"_id":"public/2018/09/02/rnng/header.jpg","hash":"cc86c841ef7b4ddc0d8797ffbe0fb4d7bcfdf79c","modified":1564154551525},{"_id":"public/medias/featureimages/0.jpg","hash":"5a1abf198297a88ca8d1717a33f73505fd72acb0","modified":1564154551557},{"_id":"public/2018/05/28/concrete-math-14/header.jpg","hash":"ec7f2023e11ca52d19659ee5cc032f13e2c619be","modified":1564154551559},{"_id":"public/2018/06/01/concrete-math-hw5/header.jpg","hash":"307732f7b34c070ae8145b4cb9337b204727380d","modified":1564154551559},{"_id":"public/2018/04/09/concrete-math-7/header.jpg","hash":"8c2fbb027c2c0a6b78a7c23aec430404b1f2f7f3","modified":1564154551560},{"_id":"public/2018/08/03/dynamic-oracles/header.jpg","hash":"47d8f6dfb2dd3c0733cd92a1787bca7ee853b368","modified":1564154551562},{"_id":"public/2018/05/14/concrete-math-12/header.jpg","hash":"880acfa97261401c3eaad318c3c4ebd476b4ac17","modified":1564154551593},{"_id":"public/2018/04/20/concrete-math-hw3/header.jpg","hash":"74dc43187c721b7aa0d5eec0166844bde38f8650","modified":1564154551593},{"_id":"public/medias/featureimages/1.jpg","hash":"66c95f6644cfa9f0af77220c7e79274ed27dd79e","modified":1564154551706},{"_id":"public/2018/05/07/concrete-math-11/header.jpg","hash":"e1aabb01b0cae8d9b2eeaecfd48625ea9eadf943","modified":1564154551706},{"_id":"public/2018/02/27/concrete-math-1/header.jpg","hash":"f8eb851c56a7687ab8ba37892808c40c86047e73","modified":1564154551707},{"_id":"public/2019/04/20/naacl19-urnng/header.jpg","hash":"d8529e50828a9c49c3bd887f07cc52df1258a406","modified":1564154551707},{"_id":"public/2019/01/13/latex-pdf/header.jpg","hash":"16202f2dfa34e3b685219294e418cf58fbab64d9","modified":1564154551710},{"_id":"public/2018/09/26/constituent-parsing-summary/header.jpg","hash":"fb9880a4a0af48937207098da1446966c35d326d","modified":1564154551710},{"_id":"public/2018/07/04/acl18-attconparsing/header.jpg","hash":"18f3a192233a473ef981510f897fbaf1c4f77e78","modified":1564154551712},{"_id":"public/2018/08/28/tacl17-conparsing/header.jpg","hash":"03fb48cc4c95b16c261d4e3d133e06f11aea7209","modified":1564154551712},{"_id":"public/medias/banner/6.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1564154551719},{"_id":"public/2019/07/12/algorithm-code-tricks/header.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1564154551719},{"_id":"public/medias/music/tiantangdemogui.mp3","hash":"3e9a91d47c673303cfb7745141fcb2372a78b938","modified":1564154551738},{"_id":"public/2018/11/06/arxiv-18-sr-cp-bottom-up/header.jpg","hash":"4eb92838e7282a09b759edbaca5bec4ee0930eb9","modified":1564154551745},{"_id":"public/2019/04/20/naacl19-urnng/1.jpg","hash":"90eebd3222048f87e11632c39875eb444b37c911","modified":1564154551751},{"_id":"public/medias/music/daoshu.mp3","hash":"b5439266629548f6301d5844282bb4ffd3d5ad06","modified":1564154551768},{"_id":"public/medias/music/yiluxiangbei.mp3","hash":"19109e0e2d8a9dc1e118f54f05394096144210fd","modified":1564154551779}],"Category":[{"name":"随笔","_id":"cjyk9822e00037swe2hssdb8z"},{"name":"序列标注","_id":"cjyk98237000d7swecka03c14"},{"name":"句法分析","_id":"cjyk9823g000k7sweghwh64ld"},{"name":"元学习","_id":"cjyk982bi004d7swelpwfwgu4"},{"name":"深度学习","_id":"cjyk982cu00527sweafdrrt31"},{"name":"程序设计","_id":"cjyk982e3005n7swecx4rk5ws"},{"name":"数学","_id":"cjyk982es00627swe653j5ekw"},{"name":"问答系统","_id":"cjyk982gx00817swe7g9jybut"},{"name":"模板","_id":"cjyk982hd008n7sweqx2bwmzz"},{"name":"软件安装与配置","_id":"cjyk982hm00957sweodjcw0i7"},{"name":"强化学习","_id":"cjyk982hv009h7swe41t56m0r"}],"Data":[{"_id":"musics","data":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]},{"_id":"friends","data":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2019-07-20T08:11:26.000Z","path":"404.html","comments":1,"_id":"cjyk9820n00007swefj9ylb2y","content":"","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n* <b>硕士 计算机科学与技术专业</b>\n华东师范大学\n预计2021年6月毕业\n* <b>本科 计算机科学与技术专业</b>\n华东师范大学\n2018年6月毕业\n<b>综合排名专业第一</b>\n\n# 获得荣誉\n* <b>金牌</b>\n2017 ACM-ICPC全国邀请赛（陕西站）\n* <b>银牌</b>\n2016 ACM-ICPC亚洲区域赛（青岛站）\n* <b>国家奖学金</b>\n2015 大一学年\n\n# 联系方式\n* <b>电子邮箱</b>\nweiyang@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B908，邮编200062\n* <b>微信</b>\nweiyang792321264\n* <b>QQ</b>\n792321264","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n* <b>硕士 计算机科学与技术专业</b>\n华东师范大学\n预计2021年6月毕业\n* <b>本科 计算机科学与技术专业</b>\n华东师范大学\n2018年6月毕业\n<b>综合排名专业第一</b>\n\n# 获得荣誉\n* <b>金牌</b>\n2017 ACM-ICPC全国邀请赛（陕西站）\n* <b>银牌</b>\n2016 ACM-ICPC亚洲区域赛（青岛站）\n* <b>国家奖学金</b>\n2015 大一学年\n\n# 联系方式\n* <b>电子邮箱</b>\nweiyang@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B908，邮编200062\n* <b>微信</b>\nweiyang792321264\n* <b>QQ</b>\n792321264","updated":"2019-07-20T07:34:48.000Z","path":"about/index.html","comments":1,"_id":"cjyk982bf004a7sweges7oxhc","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 计算机科学与技术专业</b><br>华东师范大学<br>预计2021年6月毕业</li>\n<li><b>本科 计算机科学与技术专业</b><br>华东师范大学<br>2018年6月毕业<br><b>综合排名专业第一</b></li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>金牌</b><br>2017 ACM-ICPC全国邀请赛（陕西站）</li>\n<li><b>银牌</b><br>2016 ACM-ICPC亚洲区域赛（青岛站）</li>\n<li><b>国家奖学金</b><br>2015 大一学年</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:weiyang@godweiyang.com\">weiyang@godweiyang.com</a><br><a href=\"mailto:792321264@qq.com\" target=\"_blank\" rel=\"noopener\">792321264@qq.com</a></li>\n<li><b>地址</b><br>上海市普陀区中山北路3663号理科大楼B908，邮编200062</li>\n<li><b>微信</b><br>weiyang792321264</li>\n<li><b>QQ</b><br>792321264</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 计算机科学与技术专业</b><br>华东师范大学<br>预计2021年6月毕业</li>\n<li><b>本科 计算机科学与技术专业</b><br>华东师范大学<br>2018年6月毕业<br><b>综合排名专业第一</b></li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>金牌</b><br>2017 ACM-ICPC全国邀请赛（陕西站）</li>\n<li><b>银牌</b><br>2016 ACM-ICPC亚洲区域赛（青岛站）</li>\n<li><b>国家奖学金</b><br>2015 大一学年</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:weiyang@godweiyang.com\">weiyang@godweiyang.com</a><br><a href=\"mailto:792321264@qq.com\" target=\"_blank\" rel=\"noopener\">792321264@qq.com</a></li>\n<li><b>地址</b><br>上海市普陀区中山北路3663号理科大楼B908，邮编200062</li>\n<li><b>微信</b><br>weiyang792321264</li>\n<li><b>QQ</b><br>792321264</li>\n</ul>\n"},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2019-07-20T06:27:04.000Z","path":"categories/index.html","comments":1,"_id":"cjyk982bh004c7swet8if5wjo","content":"","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2019-07-26T09:17:41.312Z","path":"contact/index.html","comments":1,"_id":"cjyk982bj004g7sweuiyp5pie","content":"","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2019-07-20T06:20:12.000Z","path":"friends/index.html","comments":1,"_id":"cjyk982bo004i7sweb2z7q655","content":"","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2019-07-20T06:20:04.000Z","path":"archives/index.html","comments":1,"_id":"cjyk982bt004m7swezdb6v5s3","content":"","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2019-07-20T06:20:16.000Z","path":"tags/index.html","comments":1,"_id":"cjyk982by004q7swek3v148g4","content":"","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"二零一七年终总结","date":"2018-01-22T04:32:09.000Z","top":false,"cover":true,"password":null,"toc":true,"mathjax":false,"summary":"时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。","_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。\n\n# 2017\n---\n回顾我的2017，没做什么事，令我能记得就3件大事吧：\n* 失恋ing\n* ACM退役\n* 顺利保研\n\n**第一件事**就不想过多回忆了，**2014.12.13 ~ 2017.03.01**，曲终人散。\n![](749826.jpg)\n最后引用《我的少女时代》里的一句话吧。\n> 每人都有一颗林真心，遇见是最美好的小幸运，谢谢你出现在我的青春里。\n\n![](1.jpg)\n**第二件事**其实也是黯淡退出吧，大三下开始课程繁忙，也就没怎么训练了，再加上暑假考驾照，于是乎就退役了。回顾三年来，从大一入学时电脑都没怎么碰过的小白，到现在算法也略有所知，也是付出过很大的努力吧，毕竟当年每天刷题，为了一个bug而熬夜到凌晨。最后也算是混了个水水的金牌，奖项不算耀眼。但最重要的是从这段经历中，学到了拼搏、坚持的一种精神，这对以后的研究生涯想必也有很大帮助。\n![](2.jpg)\n**第三件事**也是意料之中吧，没有什么波折。纠结了很多，虽然**专业第一**，但是最后还是选择保了本校。要问原因，也许是校园情怀，也许是导师人很好，也许是为了方便更早研究，也许就是懒吧。现在尘埃落定，靠人靠天不如靠自己，继续努力吧。\n![](3.jpg)\n\n过去的一年，学业未有很大长进，看着同学们整页的4.0绩点，心里倒也没有什么不平衡了。下学期保了研之后选了一门研究生的文本挖掘课，也马马虎虎读了几十篇论文，也算是对自然语言处理和深度学习入了个门，最后的presentation做的还算满意。\n\n# 2018\n---\n今年最重要的大事莫过于毕业论文了，因为以后要做的方向是句法分析，所以导师给我的毕业论文安排的就是《基于循环神经网络的成分句法分析》。虽然说是基于ACL2013的一篇论文改编的，但是目前为止，我还没有发现有人做和这个完全一样的。也许最后写的好的话可以直接发paper了。\n\n但是目前基本的框架还没完全搭建起来吧，代码还不是很熟练，现在只写了一个最基础的动态规划+RNN。最近有如下计划：\n* 准备试一下动态规划+LSTM。\n* 然后动态规划扩增一个维度，用来保存左右结点的head结点。\n* 如果这个写好了，就可以和我github找到的PCFG+CYK代码融合了，准备加上每个结点的POS。\n* 最后加入预训练词向量应该就基本完成了。\n\n希望能顺利毕业吧，前一段时间一直对一些实现细节有些困惑，代码还写错了，还以为理论错了。也不知道最后出来的结果会怎么样，希望能不错。\n\n生活方面，最近半年越来越懒了，极少出门，睡得晚，起的也晚。最近买了把尤克里里，也算是陶冶陶冶情操吧，不至于一直盯着电脑。现在也小有长进，能弹一点点了。\n\n现在能聊天的人越来越少了，QQ微信放那一天也不一定会有人来找，就算有人也多半是咨询问题的，等一个可以交心的人吧。有时我也想过，我是不是太像中央空调了，对所有人都这么有耐心，到头来却还是一个人，付出那么多最后还是一无所有。\n![](4.jpg)\n最后还是祝自己2018年顺利吧，希望毕业顺利，研究生涯小有收获，最后等一个有缘人吧。\n\n> 我遇见谁，会有怎样的对白。\n我等的人，她在多远的未来。","source":"_posts/2017-conclusion.md","raw":"---\ntitle: 二零一七年终总结\ndate: 2018-01-22 12:32:09\ntop: false\ncover: true\npassword:\ntoc: true\nmathjax: false\nsummary: 时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。\n\n# 2017\n---\n回顾我的2017，没做什么事，令我能记得就3件大事吧：\n* 失恋ing\n* ACM退役\n* 顺利保研\n\n**第一件事**就不想过多回忆了，**2014.12.13 ~ 2017.03.01**，曲终人散。\n![](749826.jpg)\n最后引用《我的少女时代》里的一句话吧。\n> 每人都有一颗林真心，遇见是最美好的小幸运，谢谢你出现在我的青春里。\n\n![](1.jpg)\n**第二件事**其实也是黯淡退出吧，大三下开始课程繁忙，也就没怎么训练了，再加上暑假考驾照，于是乎就退役了。回顾三年来，从大一入学时电脑都没怎么碰过的小白，到现在算法也略有所知，也是付出过很大的努力吧，毕竟当年每天刷题，为了一个bug而熬夜到凌晨。最后也算是混了个水水的金牌，奖项不算耀眼。但最重要的是从这段经历中，学到了拼搏、坚持的一种精神，这对以后的研究生涯想必也有很大帮助。\n![](2.jpg)\n**第三件事**也是意料之中吧，没有什么波折。纠结了很多，虽然**专业第一**，但是最后还是选择保了本校。要问原因，也许是校园情怀，也许是导师人很好，也许是为了方便更早研究，也许就是懒吧。现在尘埃落定，靠人靠天不如靠自己，继续努力吧。\n![](3.jpg)\n\n过去的一年，学业未有很大长进，看着同学们整页的4.0绩点，心里倒也没有什么不平衡了。下学期保了研之后选了一门研究生的文本挖掘课，也马马虎虎读了几十篇论文，也算是对自然语言处理和深度学习入了个门，最后的presentation做的还算满意。\n\n# 2018\n---\n今年最重要的大事莫过于毕业论文了，因为以后要做的方向是句法分析，所以导师给我的毕业论文安排的就是《基于循环神经网络的成分句法分析》。虽然说是基于ACL2013的一篇论文改编的，但是目前为止，我还没有发现有人做和这个完全一样的。也许最后写的好的话可以直接发paper了。\n\n但是目前基本的框架还没完全搭建起来吧，代码还不是很熟练，现在只写了一个最基础的动态规划+RNN。最近有如下计划：\n* 准备试一下动态规划+LSTM。\n* 然后动态规划扩增一个维度，用来保存左右结点的head结点。\n* 如果这个写好了，就可以和我github找到的PCFG+CYK代码融合了，准备加上每个结点的POS。\n* 最后加入预训练词向量应该就基本完成了。\n\n希望能顺利毕业吧，前一段时间一直对一些实现细节有些困惑，代码还写错了，还以为理论错了。也不知道最后出来的结果会怎么样，希望能不错。\n\n生活方面，最近半年越来越懒了，极少出门，睡得晚，起的也晚。最近买了把尤克里里，也算是陶冶陶冶情操吧，不至于一直盯着电脑。现在也小有长进，能弹一点点了。\n\n现在能聊天的人越来越少了，QQ微信放那一天也不一定会有人来找，就算有人也多半是咨询问题的，等一个可以交心的人吧。有时我也想过，我是不是太像中央空调了，对所有人都这么有耐心，到头来却还是一个人，付出那么多最后还是一无所有。\n![](4.jpg)\n最后还是祝自己2018年顺利吧，希望毕业顺利，研究生涯小有收获，最后等一个有缘人吧。\n\n> 我遇见谁，会有怎样的对白。\n我等的人，她在多远的未来。","slug":"2017-conclusion","published":1,"updated":"2019-07-19T17:42:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9822500017swet2uryjuq","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n<p>时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。</p>\n<h1 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h1><hr>\n<p>回顾我的2017，没做什么事，令我能记得就3件大事吧：</p>\n<ul>\n<li>失恋ing</li>\n<li>ACM退役</li>\n<li>顺利保研</li>\n</ul>\n<p><strong>第一件事</strong>就不想过多回忆了，<strong>2014.12.13 ~ 2017.03.01</strong>，曲终人散。<br><img src=\"749826.jpg\" alt><br>最后引用《我的少女时代》里的一句话吧。</p>\n<blockquote>\n<p>每人都有一颗林真心，遇见是最美好的小幸运，谢谢你出现在我的青春里。</p>\n</blockquote>\n<p><img src=\"1.jpg\" alt><br><strong>第二件事</strong>其实也是黯淡退出吧，大三下开始课程繁忙，也就没怎么训练了，再加上暑假考驾照，于是乎就退役了。回顾三年来，从大一入学时电脑都没怎么碰过的小白，到现在算法也略有所知，也是付出过很大的努力吧，毕竟当年每天刷题，为了一个bug而熬夜到凌晨。最后也算是混了个水水的金牌，奖项不算耀眼。但最重要的是从这段经历中，学到了拼搏、坚持的一种精神，这对以后的研究生涯想必也有很大帮助。<br><img src=\"2.jpg\" alt><br><strong>第三件事</strong>也是意料之中吧，没有什么波折。纠结了很多，虽然<strong>专业第一</strong>，但是最后还是选择保了本校。要问原因，也许是校园情怀，也许是导师人很好，也许是为了方便更早研究，也许就是懒吧。现在尘埃落定，靠人靠天不如靠自己，继续努力吧。<br><img src=\"3.jpg\" alt></p>\n<p>过去的一年，学业未有很大长进，看着同学们整页的4.0绩点，心里倒也没有什么不平衡了。下学期保了研之后选了一门研究生的文本挖掘课，也马马虎虎读了几十篇论文，也算是对自然语言处理和深度学习入了个门，最后的presentation做的还算满意。</p>\n<h1 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h1><hr>\n<p>今年最重要的大事莫过于毕业论文了，因为以后要做的方向是句法分析，所以导师给我的毕业论文安排的就是《基于循环神经网络的成分句法分析》。虽然说是基于ACL2013的一篇论文改编的，但是目前为止，我还没有发现有人做和这个完全一样的。也许最后写的好的话可以直接发paper了。</p>\n<p>但是目前基本的框架还没完全搭建起来吧，代码还不是很熟练，现在只写了一个最基础的动态规划+RNN。最近有如下计划：</p>\n<ul>\n<li>准备试一下动态规划+LSTM。</li>\n<li>然后动态规划扩增一个维度，用来保存左右结点的head结点。</li>\n<li>如果这个写好了，就可以和我github找到的PCFG+CYK代码融合了，准备加上每个结点的POS。</li>\n<li>最后加入预训练词向量应该就基本完成了。</li>\n</ul>\n<p>希望能顺利毕业吧，前一段时间一直对一些实现细节有些困惑，代码还写错了，还以为理论错了。也不知道最后出来的结果会怎么样，希望能不错。</p>\n<p>生活方面，最近半年越来越懒了，极少出门，睡得晚，起的也晚。最近买了把尤克里里，也算是陶冶陶冶情操吧，不至于一直盯着电脑。现在也小有长进，能弹一点点了。</p>\n<p>现在能聊天的人越来越少了，QQ微信放那一天也不一定会有人来找，就算有人也多半是咨询问题的，等一个可以交心的人吧。有时我也想过，我是不是太像中央空调了，对所有人都这么有耐心，到头来却还是一个人，付出那么多最后还是一无所有。<br><img src=\"4.jpg\" alt><br>最后还是祝自己2018年顺利吧，希望毕业顺利，研究生涯小有收获，最后等一个有缘人吧。</p>\n<blockquote>\n<p>我遇见谁，会有怎样的对白。<br>我等的人，她在多远的未来。</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n<p>时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。</p>\n<h1 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h1><hr>\n<p>回顾我的2017，没做什么事，令我能记得就3件大事吧：</p>\n<ul>\n<li>失恋ing</li>\n<li>ACM退役</li>\n<li>顺利保研</li>\n</ul>\n<p><strong>第一件事</strong>就不想过多回忆了，<strong>2014.12.13 ~ 2017.03.01</strong>，曲终人散。<br><img src=\"749826.jpg\" alt><br>最后引用《我的少女时代》里的一句话吧。</p>\n<blockquote>\n<p>每人都有一颗林真心，遇见是最美好的小幸运，谢谢你出现在我的青春里。</p>\n</blockquote>\n<p><img src=\"1.jpg\" alt><br><strong>第二件事</strong>其实也是黯淡退出吧，大三下开始课程繁忙，也就没怎么训练了，再加上暑假考驾照，于是乎就退役了。回顾三年来，从大一入学时电脑都没怎么碰过的小白，到现在算法也略有所知，也是付出过很大的努力吧，毕竟当年每天刷题，为了一个bug而熬夜到凌晨。最后也算是混了个水水的金牌，奖项不算耀眼。但最重要的是从这段经历中，学到了拼搏、坚持的一种精神，这对以后的研究生涯想必也有很大帮助。<br><img src=\"2.jpg\" alt><br><strong>第三件事</strong>也是意料之中吧，没有什么波折。纠结了很多，虽然<strong>专业第一</strong>，但是最后还是选择保了本校。要问原因，也许是校园情怀，也许是导师人很好，也许是为了方便更早研究，也许就是懒吧。现在尘埃落定，靠人靠天不如靠自己，继续努力吧。<br><img src=\"3.jpg\" alt></p>\n<p>过去的一年，学业未有很大长进，看着同学们整页的4.0绩点，心里倒也没有什么不平衡了。下学期保了研之后选了一门研究生的文本挖掘课，也马马虎虎读了几十篇论文，也算是对自然语言处理和深度学习入了个门，最后的presentation做的还算满意。</p>\n<h1 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h1><hr>\n<p>今年最重要的大事莫过于毕业论文了，因为以后要做的方向是句法分析，所以导师给我的毕业论文安排的就是《基于循环神经网络的成分句法分析》。虽然说是基于ACL2013的一篇论文改编的，但是目前为止，我还没有发现有人做和这个完全一样的。也许最后写的好的话可以直接发paper了。</p>\n<p>但是目前基本的框架还没完全搭建起来吧，代码还不是很熟练，现在只写了一个最基础的动态规划+RNN。最近有如下计划：</p>\n<ul>\n<li>准备试一下动态规划+LSTM。</li>\n<li>然后动态规划扩增一个维度，用来保存左右结点的head结点。</li>\n<li>如果这个写好了，就可以和我github找到的PCFG+CYK代码融合了，准备加上每个结点的POS。</li>\n<li>最后加入预训练词向量应该就基本完成了。</li>\n</ul>\n<p>希望能顺利毕业吧，前一段时间一直对一些实现细节有些困惑，代码还写错了，还以为理论错了。也不知道最后出来的结果会怎么样，希望能不错。</p>\n<p>生活方面，最近半年越来越懒了，极少出门，睡得晚，起的也晚。最近买了把尤克里里，也算是陶冶陶冶情操吧，不至于一直盯着电脑。现在也小有长进，能弹一点点了。</p>\n<p>现在能聊天的人越来越少了，QQ微信放那一天也不一定会有人来找，就算有人也多半是咨询问题的，等一个可以交心的人吧。有时我也想过，我是不是太像中央空调了，对所有人都这么有耐心，到头来却还是一个人，付出那么多最后还是一无所有。<br><img src=\"4.jpg\" alt><br>最后还是祝自己2018年顺利吧，希望毕业顺利，研究生涯小有收获，最后等一个有缘人吧。</p>\n<blockquote>\n<p>我遇见谁，会有怎样的对白。<br>我等的人，她在多远的未来。</p>\n</blockquote>\n"},{"title":"二零一八年终总结","date":"2018-12-31T15:59:59.000Z","top":false,"cover":true,"password":null,"toc":true,"mathjax":true,"summary":"某天，你无端想起了一个人，她曾让你对明天有所期许，但是却完全没有出现在你的明天里。2017年好像还历历在目，2018年却要过去了，貌似这一年并没有发生什么特别值得纪念的事情吧，平平淡淡，淡的就像一杯白开水。","_content":"\n> 某天，你无端想起了一个人，她曾让你对明天有所期许，但是却完全没有出现在你的明天里。\n\n2017年好像还历历在目，2018年却要过去了，貌似这一年并没有发生什么特别值得纪念的事情吧，平平淡淡，淡的就像一杯白开水。\n\n细数这一年发生的事，前半年写毕业论文，送走了一个又一个熟悉的面孔，略有感伤；后半年荒废，偶尔看看论文偶尔写两行代码，仍然时常因为一些无关紧要的事情而感伤。\n\n* 毕业\n* 炼丹\n* 想开\n\n# 毕业季\n---\n整个上半年差不多都在忙着读论文、改代码、写毕设吧。虽然当时的眼光有限，看的论文还都是几年前的传统方法，例如CKY算法，模型也基本都是基于Grammar的，在现在看来效率实在是低下，效果也不尽人意。幸好论文写得马马虎虎，也算是萌混过关吧QAQ，最后也混了个并没有什么卵用的优秀毕业论文。\n\n毕业论文封面：\n![](1.jpg)\n\n忙完了毕业论文，接下来就是毕业典礼了吧，也是个忧伤的时期吧。还记得毕业典礼那天大家一起去了闵行，自从两年前搬来中北后，就再也没有回去过了吧。闵行的校园，闭着眼睛也能知道走到哪了吧，毕竟曾经都一起走过，到处都留下了回忆。那天天气非常的好，又把校园都走了一遍吧，只是没有去曾经的三舍看看，略有遗憾，当年去四舍帮忙搬家的情景又浮现在了眼前。也许是回忆过多，没有久留，一伙曾经玩的最好的朋友们一起在宝龙广场吃了饭唱了歌，就当做是散伙饭了吧。\n\n之后就是暑假了吧，有人升学到了其他学校，有人开始了工作生涯，也有人继续和我一样留在了本校，继续做了室友。特别值得一提的是永日至秦吧，那个打游戏打的我心态爆炸的选手。暑假每天一起半夜出来跑了最后的步，还一起骑着单车骑到了外滩，再上一次去那看夜景还是不知几年前和她去的了吧，换了个人去，别有一番滋味。现在永日至秦也一个人去了北京，不知何时再能见到，希望下次见到李院士的时候你不是一个人（此处貌似有歧义）。\n\n最后附上孙子临走前的美照一张，有意向勾搭的找我要联系方式：\n![](2.jpg)\n\n# 炼丹生涯开始\n---\n送走了所有人之后，暑假搬了宿舍，就正式开始了研究僧的炼丹生涯（划水混毕业）了吧。一整个暑假都在看论文，补基础，也差不多看完了成分句法分析近几年来的所有深度学习方法了吧，基本对此有了一个初步的认识。还开通了[知乎专栏：自然语言处理与深度学习](https://zhuanlan.zhihu.com/godweiyang)，经营到现在也才900不到的粉丝吧，希望有一天能像大佬们那样几万的粉丝，在这个领域做出自己的贡献吧。通过看论文，写博客，也认识了许多志同道合的人吧，还和大佬们有所交流。\n\n![](4.jpg)\n\n其实写博客也是很累的，从刚开始计划的paper daily到后来的paper weekly，再到现在的paper randomly。有时候一篇论文真的要精读好久才能读懂，有时候实在读不懂了，就直接开写，在写的过程中，逐渐的就把自己说服懂了。其实这也和讲presentation一样，我也是比较喜欢做presentation的，一个原因是我确实喜欢和别人分享各种好的paper，好的思想，另一个原因是在讲的过程中，有些我一直不懂的问题可能讲着讲着我就懂了，也可以和台下的老师同学们自由讨论，理解得更加透彻。\n\n可能会有人问我，你写了没人看，哪里有成就感？确实，刚开始时只有寥寥无几的老同学们来捧个场子，而且他们也都看不懂，只是点个赞。但是如果只是为了出名，那就不要写博客了吧，写博客是主要是为了提升自己，记录自己的点点滴滴，然后是和别人分享，同时自己也能获得进步。至于成就感的话，慢慢就有了，最起码每次写完一篇博客，看着整理的满满当当的博文，自己就会有一种成就感，不需要别人来证明。现在每天看着知乎多了新粉丝，偶尔会有新评论和私信，询问学术方面的问题，还是会有小小的欣慰的。\n\n现在论文看的不如以前多了，看来还是得去补补基础，或者去看看其他方面的论文，涉猎广一点，有些东西是通用的，可以拿来为之所用。代码的话之前写的也不多，一直都是面向过程，写的代码都不堪入目。直到开学才拿了伯克利的优质代码，重构了一下，整合了比较流行的几种模型，在上面进行了修改，最近也一直在跑。虽然现在没有对象，但是面向对象的思想还是要有的，不然以后代码维护起来都很困难的。\n\n开学了课虽然不多，但是事情还是挺繁杂的吧。周二要给大三的操作系统实践做助教，每周都要改作业，还是挺麻烦的，混学分不容易。周四一天满课，知识分析课每周都要抄作业度日，其他几门课也都没怎么听，现在担忧期末考试怎么办，本科认真学习的劲头不知道都去哪里了，可能现在只要不挂科就行了吧，心态变了。而且现在想找个能一起学习的朋友都很难了。\n\n# 庸人自扰\n---\n并没有遇到什么在意的人吧，就说说我一直以来的心路历程吧。\n\n一个人好过歹过也已经有一年半多了，在旁人看来这么久了，也早该忘得一干二净了，但是毕竟这是初恋吧，被义务教育压榨了这么多年后的第一次解脱，很难忘记。而且我也不是一个很随便的人，没那么容易忘。直到一个多月前吧，她终于遇到了对她真正好的人了，我想我也该彻底释怀了，知道消息时也没多大的情绪波动，一切都在意料之中，早晚会来临的。\n\n可能会有人觉得我喜欢撩妹吧，学妹加了挺多。的确，是加了不少，都是每年开学水新生群加的吧，但绝大多数都安静地躺尸在了好友列表里。偶尔会有一些“慕名前来”问问题的人，以前我还能认真回答回答，毕竟我一直喜欢帮助别人，分享自己的经验。但是现在我改变了这些想法，二十三年了，第一次在这方面感到累了，也许自闭才是最好的解决方法吧，帮助别人到最后什么都得不到吧，还是照顾好自己。既然喜欢的人不可得，那就安心学习吧，对自己好才是最重要的。如果对任何人都这么有求必应，可能真的变成了小太阳了吧。\n\n以前的我也跟小标题一样，时常庸人自扰，无病呻吟吧，可能是我想太多了吧，总是被一些无关痛痒的事影响，每天都是唉声叹气的。现在我想开了，真的没必要为这些琐事担忧烦心，放任它去吧。每当再遇到了困扰的事，出去散散心倒是最好的解决方式，虽然找不到最合适的人一起散心，但是能呼吸一下外面透心凉的空气，心里的结也能一下子解开了。见的多了自然而然就不会为一些事而感到郁郁寡欢了，从前每次遇到不顺心的事总会连着影响几天，饭也吃不好觉也睡不着，学习也没有任何的动力。现在想开了，努力练就一颗强大的内心吧，虽然铁石心肠不好，但是还是要坚强呀。你已经是个大人了，要学着自己控制情绪了，不要再做一个幼稚的小孩了，成熟点吧。\n![](3.jpg)\n\n# 2019畅想\n---\n关于下一年，首先把课混过去，然后好好看论文敲代码做实验吧，但愿能有个不错的想法和实验效果，让我能在明年就安然毕业。至于发A什么的，就先想想吧，朝着这方面努力，希望我的微信名可以早日改掉。\n\n情感方面，就准备单着三年吧，除非天上掉馅饼了，好好做学术才是正道。\n\n多出去走走吧，本科四年都呆在学校了，三点一线式的类高中生活，谈的也是高中式恋爱吧，累了累了。\n\n其他没啥好想的了，鄙人不善幻想，只喜欢晚上做梦，最后送上泰戈尔的一句名言吧，与君共勉：\n\n> 有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了；\n有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。","source":"_posts/2018-conclusion.md","raw":"---\ntitle: 二零一八年终总结\ndate: 2018-12-31 23:59:59\ntop: false\ncover: true\npassword:\ntoc: true\nmathjax: true\nsummary: 某天，你无端想起了一个人，她曾让你对明天有所期许，但是却完全没有出现在你的明天里。2017年好像还历历在目，2018年却要过去了，貌似这一年并没有发生什么特别值得纪念的事情吧，平平淡淡，淡的就像一杯白开水。\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n> 某天，你无端想起了一个人，她曾让你对明天有所期许，但是却完全没有出现在你的明天里。\n\n2017年好像还历历在目，2018年却要过去了，貌似这一年并没有发生什么特别值得纪念的事情吧，平平淡淡，淡的就像一杯白开水。\n\n细数这一年发生的事，前半年写毕业论文，送走了一个又一个熟悉的面孔，略有感伤；后半年荒废，偶尔看看论文偶尔写两行代码，仍然时常因为一些无关紧要的事情而感伤。\n\n* 毕业\n* 炼丹\n* 想开\n\n# 毕业季\n---\n整个上半年差不多都在忙着读论文、改代码、写毕设吧。虽然当时的眼光有限，看的论文还都是几年前的传统方法，例如CKY算法，模型也基本都是基于Grammar的，在现在看来效率实在是低下，效果也不尽人意。幸好论文写得马马虎虎，也算是萌混过关吧QAQ，最后也混了个并没有什么卵用的优秀毕业论文。\n\n毕业论文封面：\n![](1.jpg)\n\n忙完了毕业论文，接下来就是毕业典礼了吧，也是个忧伤的时期吧。还记得毕业典礼那天大家一起去了闵行，自从两年前搬来中北后，就再也没有回去过了吧。闵行的校园，闭着眼睛也能知道走到哪了吧，毕竟曾经都一起走过，到处都留下了回忆。那天天气非常的好，又把校园都走了一遍吧，只是没有去曾经的三舍看看，略有遗憾，当年去四舍帮忙搬家的情景又浮现在了眼前。也许是回忆过多，没有久留，一伙曾经玩的最好的朋友们一起在宝龙广场吃了饭唱了歌，就当做是散伙饭了吧。\n\n之后就是暑假了吧，有人升学到了其他学校，有人开始了工作生涯，也有人继续和我一样留在了本校，继续做了室友。特别值得一提的是永日至秦吧，那个打游戏打的我心态爆炸的选手。暑假每天一起半夜出来跑了最后的步，还一起骑着单车骑到了外滩，再上一次去那看夜景还是不知几年前和她去的了吧，换了个人去，别有一番滋味。现在永日至秦也一个人去了北京，不知何时再能见到，希望下次见到李院士的时候你不是一个人（此处貌似有歧义）。\n\n最后附上孙子临走前的美照一张，有意向勾搭的找我要联系方式：\n![](2.jpg)\n\n# 炼丹生涯开始\n---\n送走了所有人之后，暑假搬了宿舍，就正式开始了研究僧的炼丹生涯（划水混毕业）了吧。一整个暑假都在看论文，补基础，也差不多看完了成分句法分析近几年来的所有深度学习方法了吧，基本对此有了一个初步的认识。还开通了[知乎专栏：自然语言处理与深度学习](https://zhuanlan.zhihu.com/godweiyang)，经营到现在也才900不到的粉丝吧，希望有一天能像大佬们那样几万的粉丝，在这个领域做出自己的贡献吧。通过看论文，写博客，也认识了许多志同道合的人吧，还和大佬们有所交流。\n\n![](4.jpg)\n\n其实写博客也是很累的，从刚开始计划的paper daily到后来的paper weekly，再到现在的paper randomly。有时候一篇论文真的要精读好久才能读懂，有时候实在读不懂了，就直接开写，在写的过程中，逐渐的就把自己说服懂了。其实这也和讲presentation一样，我也是比较喜欢做presentation的，一个原因是我确实喜欢和别人分享各种好的paper，好的思想，另一个原因是在讲的过程中，有些我一直不懂的问题可能讲着讲着我就懂了，也可以和台下的老师同学们自由讨论，理解得更加透彻。\n\n可能会有人问我，你写了没人看，哪里有成就感？确实，刚开始时只有寥寥无几的老同学们来捧个场子，而且他们也都看不懂，只是点个赞。但是如果只是为了出名，那就不要写博客了吧，写博客是主要是为了提升自己，记录自己的点点滴滴，然后是和别人分享，同时自己也能获得进步。至于成就感的话，慢慢就有了，最起码每次写完一篇博客，看着整理的满满当当的博文，自己就会有一种成就感，不需要别人来证明。现在每天看着知乎多了新粉丝，偶尔会有新评论和私信，询问学术方面的问题，还是会有小小的欣慰的。\n\n现在论文看的不如以前多了，看来还是得去补补基础，或者去看看其他方面的论文，涉猎广一点，有些东西是通用的，可以拿来为之所用。代码的话之前写的也不多，一直都是面向过程，写的代码都不堪入目。直到开学才拿了伯克利的优质代码，重构了一下，整合了比较流行的几种模型，在上面进行了修改，最近也一直在跑。虽然现在没有对象，但是面向对象的思想还是要有的，不然以后代码维护起来都很困难的。\n\n开学了课虽然不多，但是事情还是挺繁杂的吧。周二要给大三的操作系统实践做助教，每周都要改作业，还是挺麻烦的，混学分不容易。周四一天满课，知识分析课每周都要抄作业度日，其他几门课也都没怎么听，现在担忧期末考试怎么办，本科认真学习的劲头不知道都去哪里了，可能现在只要不挂科就行了吧，心态变了。而且现在想找个能一起学习的朋友都很难了。\n\n# 庸人自扰\n---\n并没有遇到什么在意的人吧，就说说我一直以来的心路历程吧。\n\n一个人好过歹过也已经有一年半多了，在旁人看来这么久了，也早该忘得一干二净了，但是毕竟这是初恋吧，被义务教育压榨了这么多年后的第一次解脱，很难忘记。而且我也不是一个很随便的人，没那么容易忘。直到一个多月前吧，她终于遇到了对她真正好的人了，我想我也该彻底释怀了，知道消息时也没多大的情绪波动，一切都在意料之中，早晚会来临的。\n\n可能会有人觉得我喜欢撩妹吧，学妹加了挺多。的确，是加了不少，都是每年开学水新生群加的吧，但绝大多数都安静地躺尸在了好友列表里。偶尔会有一些“慕名前来”问问题的人，以前我还能认真回答回答，毕竟我一直喜欢帮助别人，分享自己的经验。但是现在我改变了这些想法，二十三年了，第一次在这方面感到累了，也许自闭才是最好的解决方法吧，帮助别人到最后什么都得不到吧，还是照顾好自己。既然喜欢的人不可得，那就安心学习吧，对自己好才是最重要的。如果对任何人都这么有求必应，可能真的变成了小太阳了吧。\n\n以前的我也跟小标题一样，时常庸人自扰，无病呻吟吧，可能是我想太多了吧，总是被一些无关痛痒的事影响，每天都是唉声叹气的。现在我想开了，真的没必要为这些琐事担忧烦心，放任它去吧。每当再遇到了困扰的事，出去散散心倒是最好的解决方式，虽然找不到最合适的人一起散心，但是能呼吸一下外面透心凉的空气，心里的结也能一下子解开了。见的多了自然而然就不会为一些事而感到郁郁寡欢了，从前每次遇到不顺心的事总会连着影响几天，饭也吃不好觉也睡不着，学习也没有任何的动力。现在想开了，努力练就一颗强大的内心吧，虽然铁石心肠不好，但是还是要坚强呀。你已经是个大人了，要学着自己控制情绪了，不要再做一个幼稚的小孩了，成熟点吧。\n![](3.jpg)\n\n# 2019畅想\n---\n关于下一年，首先把课混过去，然后好好看论文敲代码做实验吧，但愿能有个不错的想法和实验效果，让我能在明年就安然毕业。至于发A什么的，就先想想吧，朝着这方面努力，希望我的微信名可以早日改掉。\n\n情感方面，就准备单着三年吧，除非天上掉馅饼了，好好做学术才是正道。\n\n多出去走走吧，本科四年都呆在学校了，三点一线式的类高中生活，谈的也是高中式恋爱吧，累了累了。\n\n其他没啥好想的了，鄙人不善幻想，只喜欢晚上做梦，最后送上泰戈尔的一句名言吧，与君共勉：\n\n> 有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了；\n有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。","slug":"2018-conclusion","published":1,"updated":"2019-07-20T13:54:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9822b00027swe2ii20oa9","content":"<blockquote>\n<p>某天，你无端想起了一个人，她曾让你对明天有所期许，但是却完全没有出现在你的明天里。</p>\n</blockquote>\n<p>2017年好像还历历在目，2018年却要过去了，貌似这一年并没有发生什么特别值得纪念的事情吧，平平淡淡，淡的就像一杯白开水。</p>\n<p>细数这一年发生的事，前半年写毕业论文，送走了一个又一个熟悉的面孔，略有感伤；后半年荒废，偶尔看看论文偶尔写两行代码，仍然时常因为一些无关紧要的事情而感伤。</p>\n<ul>\n<li>毕业</li>\n<li>炼丹</li>\n<li>想开</li>\n</ul>\n<h1 id=\"毕业季\"><a href=\"#毕业季\" class=\"headerlink\" title=\"毕业季\"></a>毕业季</h1><hr>\n<p>整个上半年差不多都在忙着读论文、改代码、写毕设吧。虽然当时的眼光有限，看的论文还都是几年前的传统方法，例如CKY算法，模型也基本都是基于Grammar的，在现在看来效率实在是低下，效果也不尽人意。幸好论文写得马马虎虎，也算是萌混过关吧QAQ，最后也混了个并没有什么卵用的优秀毕业论文。</p>\n<p>毕业论文封面：<br><img src=\"1.jpg\" alt></p>\n<p>忙完了毕业论文，接下来就是毕业典礼了吧，也是个忧伤的时期吧。还记得毕业典礼那天大家一起去了闵行，自从两年前搬来中北后，就再也没有回去过了吧。闵行的校园，闭着眼睛也能知道走到哪了吧，毕竟曾经都一起走过，到处都留下了回忆。那天天气非常的好，又把校园都走了一遍吧，只是没有去曾经的三舍看看，略有遗憾，当年去四舍帮忙搬家的情景又浮现在了眼前。也许是回忆过多，没有久留，一伙曾经玩的最好的朋友们一起在宝龙广场吃了饭唱了歌，就当做是散伙饭了吧。</p>\n<p>之后就是暑假了吧，有人升学到了其他学校，有人开始了工作生涯，也有人继续和我一样留在了本校，继续做了室友。特别值得一提的是永日至秦吧，那个打游戏打的我心态爆炸的选手。暑假每天一起半夜出来跑了最后的步，还一起骑着单车骑到了外滩，再上一次去那看夜景还是不知几年前和她去的了吧，换了个人去，别有一番滋味。现在永日至秦也一个人去了北京，不知何时再能见到，希望下次见到李院士的时候你不是一个人（此处貌似有歧义）。</p>\n<p>最后附上孙子临走前的美照一张，有意向勾搭的找我要联系方式：<br><img src=\"2.jpg\" alt></p>\n<h1 id=\"炼丹生涯开始\"><a href=\"#炼丹生涯开始\" class=\"headerlink\" title=\"炼丹生涯开始\"></a>炼丹生涯开始</h1><hr>\n<p>送走了所有人之后，暑假搬了宿舍，就正式开始了研究僧的炼丹生涯（划水混毕业）了吧。一整个暑假都在看论文，补基础，也差不多看完了成分句法分析近几年来的所有深度学习方法了吧，基本对此有了一个初步的认识。还开通了<a href=\"https://zhuanlan.zhihu.com/godweiyang\" target=\"_blank\" rel=\"noopener\">知乎专栏：自然语言处理与深度学习</a>，经营到现在也才900不到的粉丝吧，希望有一天能像大佬们那样几万的粉丝，在这个领域做出自己的贡献吧。通过看论文，写博客，也认识了许多志同道合的人吧，还和大佬们有所交流。</p>\n<p><img src=\"4.jpg\" alt></p>\n<p>其实写博客也是很累的，从刚开始计划的paper daily到后来的paper weekly，再到现在的paper randomly。有时候一篇论文真的要精读好久才能读懂，有时候实在读不懂了，就直接开写，在写的过程中，逐渐的就把自己说服懂了。其实这也和讲presentation一样，我也是比较喜欢做presentation的，一个原因是我确实喜欢和别人分享各种好的paper，好的思想，另一个原因是在讲的过程中，有些我一直不懂的问题可能讲着讲着我就懂了，也可以和台下的老师同学们自由讨论，理解得更加透彻。</p>\n<p>可能会有人问我，你写了没人看，哪里有成就感？确实，刚开始时只有寥寥无几的老同学们来捧个场子，而且他们也都看不懂，只是点个赞。但是如果只是为了出名，那就不要写博客了吧，写博客是主要是为了提升自己，记录自己的点点滴滴，然后是和别人分享，同时自己也能获得进步。至于成就感的话，慢慢就有了，最起码每次写完一篇博客，看着整理的满满当当的博文，自己就会有一种成就感，不需要别人来证明。现在每天看着知乎多了新粉丝，偶尔会有新评论和私信，询问学术方面的问题，还是会有小小的欣慰的。</p>\n<p>现在论文看的不如以前多了，看来还是得去补补基础，或者去看看其他方面的论文，涉猎广一点，有些东西是通用的，可以拿来为之所用。代码的话之前写的也不多，一直都是面向过程，写的代码都不堪入目。直到开学才拿了伯克利的优质代码，重构了一下，整合了比较流行的几种模型，在上面进行了修改，最近也一直在跑。虽然现在没有对象，但是面向对象的思想还是要有的，不然以后代码维护起来都很困难的。</p>\n<p>开学了课虽然不多，但是事情还是挺繁杂的吧。周二要给大三的操作系统实践做助教，每周都要改作业，还是挺麻烦的，混学分不容易。周四一天满课，知识分析课每周都要抄作业度日，其他几门课也都没怎么听，现在担忧期末考试怎么办，本科认真学习的劲头不知道都去哪里了，可能现在只要不挂科就行了吧，心态变了。而且现在想找个能一起学习的朋友都很难了。</p>\n<h1 id=\"庸人自扰\"><a href=\"#庸人自扰\" class=\"headerlink\" title=\"庸人自扰\"></a>庸人自扰</h1><hr>\n<p>并没有遇到什么在意的人吧，就说说我一直以来的心路历程吧。</p>\n<p>一个人好过歹过也已经有一年半多了，在旁人看来这么久了，也早该忘得一干二净了，但是毕竟这是初恋吧，被义务教育压榨了这么多年后的第一次解脱，很难忘记。而且我也不是一个很随便的人，没那么容易忘。直到一个多月前吧，她终于遇到了对她真正好的人了，我想我也该彻底释怀了，知道消息时也没多大的情绪波动，一切都在意料之中，早晚会来临的。</p>\n<p>可能会有人觉得我喜欢撩妹吧，学妹加了挺多。的确，是加了不少，都是每年开学水新生群加的吧，但绝大多数都安静地躺尸在了好友列表里。偶尔会有一些“慕名前来”问问题的人，以前我还能认真回答回答，毕竟我一直喜欢帮助别人，分享自己的经验。但是现在我改变了这些想法，二十三年了，第一次在这方面感到累了，也许自闭才是最好的解决方法吧，帮助别人到最后什么都得不到吧，还是照顾好自己。既然喜欢的人不可得，那就安心学习吧，对自己好才是最重要的。如果对任何人都这么有求必应，可能真的变成了小太阳了吧。</p>\n<p>以前的我也跟小标题一样，时常庸人自扰，无病呻吟吧，可能是我想太多了吧，总是被一些无关痛痒的事影响，每天都是唉声叹气的。现在我想开了，真的没必要为这些琐事担忧烦心，放任它去吧。每当再遇到了困扰的事，出去散散心倒是最好的解决方式，虽然找不到最合适的人一起散心，但是能呼吸一下外面透心凉的空气，心里的结也能一下子解开了。见的多了自然而然就不会为一些事而感到郁郁寡欢了，从前每次遇到不顺心的事总会连着影响几天，饭也吃不好觉也睡不着，学习也没有任何的动力。现在想开了，努力练就一颗强大的内心吧，虽然铁石心肠不好，但是还是要坚强呀。你已经是个大人了，要学着自己控制情绪了，不要再做一个幼稚的小孩了，成熟点吧。<br><img src=\"3.jpg\" alt></p>\n<h1 id=\"2019畅想\"><a href=\"#2019畅想\" class=\"headerlink\" title=\"2019畅想\"></a>2019畅想</h1><hr>\n<p>关于下一年，首先把课混过去，然后好好看论文敲代码做实验吧，但愿能有个不错的想法和实验效果，让我能在明年就安然毕业。至于发A什么的，就先想想吧，朝着这方面努力，希望我的微信名可以早日改掉。</p>\n<p>情感方面，就准备单着三年吧，除非天上掉馅饼了，好好做学术才是正道。</p>\n<p>多出去走走吧，本科四年都呆在学校了，三点一线式的类高中生活，谈的也是高中式恋爱吧，累了累了。</p>\n<p>其他没啥好想的了，鄙人不善幻想，只喜欢晚上做梦，最后送上泰戈尔的一句名言吧，与君共勉：</p>\n<blockquote>\n<p>有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了；<br>有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>某天，你无端想起了一个人，她曾让你对明天有所期许，但是却完全没有出现在你的明天里。</p>\n</blockquote>\n<p>2017年好像还历历在目，2018年却要过去了，貌似这一年并没有发生什么特别值得纪念的事情吧，平平淡淡，淡的就像一杯白开水。</p>\n<p>细数这一年发生的事，前半年写毕业论文，送走了一个又一个熟悉的面孔，略有感伤；后半年荒废，偶尔看看论文偶尔写两行代码，仍然时常因为一些无关紧要的事情而感伤。</p>\n<ul>\n<li>毕业</li>\n<li>炼丹</li>\n<li>想开</li>\n</ul>\n<h1 id=\"毕业季\"><a href=\"#毕业季\" class=\"headerlink\" title=\"毕业季\"></a>毕业季</h1><hr>\n<p>整个上半年差不多都在忙着读论文、改代码、写毕设吧。虽然当时的眼光有限，看的论文还都是几年前的传统方法，例如CKY算法，模型也基本都是基于Grammar的，在现在看来效率实在是低下，效果也不尽人意。幸好论文写得马马虎虎，也算是萌混过关吧QAQ，最后也混了个并没有什么卵用的优秀毕业论文。</p>\n<p>毕业论文封面：<br><img src=\"1.jpg\" alt></p>\n<p>忙完了毕业论文，接下来就是毕业典礼了吧，也是个忧伤的时期吧。还记得毕业典礼那天大家一起去了闵行，自从两年前搬来中北后，就再也没有回去过了吧。闵行的校园，闭着眼睛也能知道走到哪了吧，毕竟曾经都一起走过，到处都留下了回忆。那天天气非常的好，又把校园都走了一遍吧，只是没有去曾经的三舍看看，略有遗憾，当年去四舍帮忙搬家的情景又浮现在了眼前。也许是回忆过多，没有久留，一伙曾经玩的最好的朋友们一起在宝龙广场吃了饭唱了歌，就当做是散伙饭了吧。</p>\n<p>之后就是暑假了吧，有人升学到了其他学校，有人开始了工作生涯，也有人继续和我一样留在了本校，继续做了室友。特别值得一提的是永日至秦吧，那个打游戏打的我心态爆炸的选手。暑假每天一起半夜出来跑了最后的步，还一起骑着单车骑到了外滩，再上一次去那看夜景还是不知几年前和她去的了吧，换了个人去，别有一番滋味。现在永日至秦也一个人去了北京，不知何时再能见到，希望下次见到李院士的时候你不是一个人（此处貌似有歧义）。</p>\n<p>最后附上孙子临走前的美照一张，有意向勾搭的找我要联系方式：<br><img src=\"2.jpg\" alt></p>\n<h1 id=\"炼丹生涯开始\"><a href=\"#炼丹生涯开始\" class=\"headerlink\" title=\"炼丹生涯开始\"></a>炼丹生涯开始</h1><hr>\n<p>送走了所有人之后，暑假搬了宿舍，就正式开始了研究僧的炼丹生涯（划水混毕业）了吧。一整个暑假都在看论文，补基础，也差不多看完了成分句法分析近几年来的所有深度学习方法了吧，基本对此有了一个初步的认识。还开通了<a href=\"https://zhuanlan.zhihu.com/godweiyang\" target=\"_blank\" rel=\"noopener\">知乎专栏：自然语言处理与深度学习</a>，经营到现在也才900不到的粉丝吧，希望有一天能像大佬们那样几万的粉丝，在这个领域做出自己的贡献吧。通过看论文，写博客，也认识了许多志同道合的人吧，还和大佬们有所交流。</p>\n<p><img src=\"4.jpg\" alt></p>\n<p>其实写博客也是很累的，从刚开始计划的paper daily到后来的paper weekly，再到现在的paper randomly。有时候一篇论文真的要精读好久才能读懂，有时候实在读不懂了，就直接开写，在写的过程中，逐渐的就把自己说服懂了。其实这也和讲presentation一样，我也是比较喜欢做presentation的，一个原因是我确实喜欢和别人分享各种好的paper，好的思想，另一个原因是在讲的过程中，有些我一直不懂的问题可能讲着讲着我就懂了，也可以和台下的老师同学们自由讨论，理解得更加透彻。</p>\n<p>可能会有人问我，你写了没人看，哪里有成就感？确实，刚开始时只有寥寥无几的老同学们来捧个场子，而且他们也都看不懂，只是点个赞。但是如果只是为了出名，那就不要写博客了吧，写博客是主要是为了提升自己，记录自己的点点滴滴，然后是和别人分享，同时自己也能获得进步。至于成就感的话，慢慢就有了，最起码每次写完一篇博客，看着整理的满满当当的博文，自己就会有一种成就感，不需要别人来证明。现在每天看着知乎多了新粉丝，偶尔会有新评论和私信，询问学术方面的问题，还是会有小小的欣慰的。</p>\n<p>现在论文看的不如以前多了，看来还是得去补补基础，或者去看看其他方面的论文，涉猎广一点，有些东西是通用的，可以拿来为之所用。代码的话之前写的也不多，一直都是面向过程，写的代码都不堪入目。直到开学才拿了伯克利的优质代码，重构了一下，整合了比较流行的几种模型，在上面进行了修改，最近也一直在跑。虽然现在没有对象，但是面向对象的思想还是要有的，不然以后代码维护起来都很困难的。</p>\n<p>开学了课虽然不多，但是事情还是挺繁杂的吧。周二要给大三的操作系统实践做助教，每周都要改作业，还是挺麻烦的，混学分不容易。周四一天满课，知识分析课每周都要抄作业度日，其他几门课也都没怎么听，现在担忧期末考试怎么办，本科认真学习的劲头不知道都去哪里了，可能现在只要不挂科就行了吧，心态变了。而且现在想找个能一起学习的朋友都很难了。</p>\n<h1 id=\"庸人自扰\"><a href=\"#庸人自扰\" class=\"headerlink\" title=\"庸人自扰\"></a>庸人自扰</h1><hr>\n<p>并没有遇到什么在意的人吧，就说说我一直以来的心路历程吧。</p>\n<p>一个人好过歹过也已经有一年半多了，在旁人看来这么久了，也早该忘得一干二净了，但是毕竟这是初恋吧，被义务教育压榨了这么多年后的第一次解脱，很难忘记。而且我也不是一个很随便的人，没那么容易忘。直到一个多月前吧，她终于遇到了对她真正好的人了，我想我也该彻底释怀了，知道消息时也没多大的情绪波动，一切都在意料之中，早晚会来临的。</p>\n<p>可能会有人觉得我喜欢撩妹吧，学妹加了挺多。的确，是加了不少，都是每年开学水新生群加的吧，但绝大多数都安静地躺尸在了好友列表里。偶尔会有一些“慕名前来”问问题的人，以前我还能认真回答回答，毕竟我一直喜欢帮助别人，分享自己的经验。但是现在我改变了这些想法，二十三年了，第一次在这方面感到累了，也许自闭才是最好的解决方法吧，帮助别人到最后什么都得不到吧，还是照顾好自己。既然喜欢的人不可得，那就安心学习吧，对自己好才是最重要的。如果对任何人都这么有求必应，可能真的变成了小太阳了吧。</p>\n<p>以前的我也跟小标题一样，时常庸人自扰，无病呻吟吧，可能是我想太多了吧，总是被一些无关痛痒的事影响，每天都是唉声叹气的。现在我想开了，真的没必要为这些琐事担忧烦心，放任它去吧。每当再遇到了困扰的事，出去散散心倒是最好的解决方式，虽然找不到最合适的人一起散心，但是能呼吸一下外面透心凉的空气，心里的结也能一下子解开了。见的多了自然而然就不会为一些事而感到郁郁寡欢了，从前每次遇到不顺心的事总会连着影响几天，饭也吃不好觉也睡不着，学习也没有任何的动力。现在想开了，努力练就一颗强大的内心吧，虽然铁石心肠不好，但是还是要坚强呀。你已经是个大人了，要学着自己控制情绪了，不要再做一个幼稚的小孩了，成熟点吧。<br><img src=\"3.jpg\" alt></p>\n<h1 id=\"2019畅想\"><a href=\"#2019畅想\" class=\"headerlink\" title=\"2019畅想\"></a>2019畅想</h1><hr>\n<p>关于下一年，首先把课混过去，然后好好看论文敲代码做实验吧，但愿能有个不错的想法和实验效果，让我能在明年就安然毕业。至于发A什么的，就先想想吧，朝着这方面努力，希望我的微信名可以早日改掉。</p>\n<p>情感方面，就准备单着三年吧，除非天上掉馅饼了，好好做学术才是正道。</p>\n<p>多出去走走吧，本科四年都呆在学校了，三点一线式的类高中生活，谈的也是高中式恋爱吧，累了累了。</p>\n<p>其他没啥好想的了，鄙人不善幻想，只喜欢晚上做梦，最后送上泰戈尔的一句名言吧，与君共勉：</p>\n<blockquote>\n<p>有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了；<br>有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。</p>\n</blockquote>\n"},{"title":"Semi-supervised sequence tagging with bidirectional language models","date":"2017-10-03T08:18:34.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"论文链接：[P17-1161](https://www.aclweb.org/anthology/P/P17/P17-1161.pdf)\n\n# 摘要\n---\n从未标注文本中学习到的预训练词向量已经成为NLP任务神经网络结构的重要组成部分。\n但是大多数情况下，现在的循环神经网络还是从极少的标注数据中学习上下文相关的表示。\n所以这篇论文研究一种通用的半监督学习方法，将从双向语言模型中预训练出来的词向量加到NLP系统中，把它应用到序列标注任务中。\n我们在两个NLP任务上做实验：NER和chunking。\n\n# 1 介绍\n---\n这篇论文我们探讨一种半监督学习方法，不需要额外的标注数据。\n我们使用一个神经语言模型，在大量未标注数据上训练，计算出每个位置上下文的编码，然后应用到半监督的标注模型中。 \n我们第一个主要贡献是证明了语言模型训练出的上下文相关表示在半监督标注模型中是很有用的。\n第二个贡献是多使用一个后向的语言模型效果更好。\n同时我们发现没必要针对某个领域数据来专门训练。\n\n# 2 语言模型增强的序列标注\n---\n### 2.1 概览\n这个模型的主要结构如图所示：\n![](1.jpg)\n主要过程可以分为3步：\n* 首先在大量的未标注数据上训练词向量和一个神经语言模型\n* 然后提取一个句子中每个单词的词向量表示与语言模型表示\n* 最后将它们应用到监督序列标注模型中。\n\n具体的结构如下图所示：\n![](2.jpg)\n\n### 2.2 基本的序列标注模型\n我们用到的基本的序列标注模型是一个分层的神经序列标注模型，如上图左半部分所示。\n给定一个句子$({t_1},{t_2}, \\ldots ,{t_N})$，首先对于每个单词${t_k}$产生一个表示${x_k}$，其中${x_k}$是由这个单词基于字符的表示${c_k}$和词向量表示${w_k}$连接而成：\n\\\\[\\begin{array}{l}{c_k} = C({t_k};{\\theta _c})\\\\{w_k} = E({t_k};{\\theta _w})\\\\{x_k} = [{c_k};{w_k}]\\end{array}\\\\]字符表示${c_k}$捕获的是这个单词的形态信息，可以用CNN或者RNN来实现。\n词向量表示${w_k}$是从预训练的词向量表中直接提取的。\n为了学习到上下文相关的表示，我们采用多层双向RNN。\n对于每个单词${x_k}$，第${i}$层隐含层${h_{k,i}}$是由前向隐含层状态${ {\\vec h}_{k,i}}$和后向隐含层状态${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,i}}$连接而成。\n对于第一层隐含层，${h_{k,1}}$由${x_k}$经过如下运算获得：\n\\\\[\\begin{array}{l}{ {\\vec h}_{k,1}} = { {\\vec R}_1}({x_k},{ {\\vec h}_{k - 1,1}};{\\theta _{ { {\\vec R}_1}}})\\\\{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}} = { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}({x_k},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k + 1,1}};{\\theta _{ { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}}})\\\\{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}}]\\end{array}\\\\]这个实验中我们使用2层隐含层，并且使用GRU或者LSTM作为双向RNN。\n最后，最后一层隐含层的输出${h_{k,L}}$被输出到一个稠密层，用来预测每个标签的评分。\n由于在我们的序列标注任务中，连续的标签之间是有依赖性的，所以联合起来预测一整个句子的标签比单独预测每个单词的标签更好。\n因此，我们增加了额外的一层来计算相邻两个标签之间的条件随机场损失，然后用Viterbi算法来寻找概率最大的标签序列。\n\n### 2.3 双向语言模型\n一个语言模型是用来计算一个句子$({t_1},{t_2}, \\ldots ,{t_N})$的概率：\n\\\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_1},{t_2}, \\ldots ,{t_{k - 1}})} \\\\]之前的研究将每个单词的字符表示或者词向量表示送到多层LSTM中，用$({t_1},{t_2}, \\ldots ,{t_k})$来求出隐含层${ {\\vec h}^{LM}}_k$，这就是第$k$个单词的前向语言模型表示，同时也是语言模型LSTM层最顶端的输出。最后用softmax层来预测${t_{k + 1}}$的概率。\n当然再加上一个后向语言模型表示效果就更好了：\n\\\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_{k + 1}},{t_{k + 2}}, \\ldots ,{t_N})} \\\\]后向语言模型表示实现方式和前向相似，产生输出${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }^{LM}}_k$\n注意到在这个模型中，前向后向语言模型是独立的，不共享任何参数。\n\n### 2.4 结合语言模型和序列模型\n我们结合的模型TagLM是将语言模型的词表示当作额外的输入传送到序列标注模型中。\n在实验中，我们发现将语言模型表示和序列模型第一层隐含层输出结合效果最好。表示如下：\n\\\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\\\]有许多方法可以结合语言模型表示和序列模型第一层隐含层输出，比如用一个非线性函数来结合：\n\\\\[{h_{k,1}} = f([{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}])\\\\]另一种可能的方法是用类似注意力模型的机制，给每个单词的语言模型表示加上权重，然后再加进序列模型中。\n本次实验中直接结合效果已经很好了，所以没有尝试其他方法。\n\n# 3 实验\n---\n我们在两个NLP任务上做实验：NER和chunking，使用F1评价指标和BIOES标注体系。\n我们对数据做了预处理，对所有字母小写处理，将所有数字替换成0。\n#### CoNLL 2003 NER\nCoNLL 2003 NER任务包含了路透社RCV1语料库，它是由4种不同的实体类型标注的：PER、LOC、ORG、MISC，包含了标准的训练集、验证集和测试集。\n我们的序列模型的字符表示使用了80个隐含层和25维字符表示的双向GRU。上面的序列层使用了两个300个隐含层的双向GRU。为了正则化，每个GRU的输入都添加了25%的dropout。\n#### CoNLL 2000 chunking\nCoNLL 2000 chunking任务使用华尔街日报第15~18章训练，第20章测试。定义了11种句法分块类型，我们从训练集随机标记出1000个句子作为验证集。\n序列模型字符表示使用了30维字符表示和带有30个宽度为3字符滤波器的CNN。上面的序列层使用了两个200个隐含层的双向GRU。每个GRU的输入都添加了50%的dropout。\n#### 预训练语言模型\n我们在1B Word Benchmark上面训练语言模型，包含了8亿个单词。\n我们使用两个2048个单元，512维的LSTM，在4个GPU上进行参数的同步更新，在10轮训练后就停止训练。\n#### 训练\n所有的实验都采用Adam优化器在5.0处进行梯度截断。\n提前结束训练来防止过拟合，采用以下方法来决定什么时候停止训练：开始时学习率设为0.001，观察验证集每一轮的性能，当验证集上的性能达到最高时，将学习率降低一个数量级，再训练5次，再降低一个数量级，再训练5次，最后停止训练。\n### 3.1 综合系统结果\n表1和表2比较的是TagLM和其他没有额外标注数据的模型结果。\n表3和表4比较的是TagLM和其他包含额外标注数据的模型结果。\n![](3.jpg)\n![](4.jpg)\n* 增加外部标注数据\n尽管我们没有使用外部标注数据，但是我们效果依然比其他模型要好。表3和表4还可以看出这个模型加了语言模型后的提升是最大的。\n\n### 3.2 分析\n为了解释我们的TagLM的特性，我们在CoNLL 2003 NER上做了许多额外的实验。\n#### 怎样使用语言模型表示？\n在这个实验中，我们将语言模型产生的表示连接到序列模型的不同位置：\n* 连接到第一个RNN的输入层：\n\\\\[{x_k} = [{c_k};{w_k};{h_k}^{LM}]\\\\]\n* 连接到第一个RNN的输出层：\n\\\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\\\]\n* 连接到第二个RNN的输出层：\n\\\\[{h_{k,2}} = [{ {\\vec h}_{k,2}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,2}};{h_k}^{LM}]\\\\]\n\n表5显示出第二种位置是效果最好的，我们猜测原因可能是因为第二层RNN可以捕获第一层RNN产生的任务特定的上下文和语言模型产生的通用的上下文之间的互相联系。\n![](5.jpg)\n#### 用哪一种语言模型重要吗？\n从表6可以看出，前向传播使用CNN-BIG-LSTM，后向传播使用LSTM-2048-512效果是最好的，但是我们没有测试后向也是CNN-BIG-LSTM的，那样效果估计会更好。\n![](6.jpg)\n#### 任务特定RNN的重要性\n我们把任务特定的RNN去掉了，只用语言模型和稠密层和CRF来预测输出标签，结果非常的差。说明还是需要任务特定RNN来对标注数据编码产生必要的信息的。\n#### 数据集的大小\n通过在大数据和小数据上做实验，得出如下结论：\n以往的模型在小数据上从无语言模型到有语言模型提升都是很大的，但是在大数据上提升就非常的少了。\n而我们的TagLM不论是小数据还是大数据性能提升都非常的大。\n#### 参数个数\n由于第二层RNN的输入加入了语言模型表示，所以维数增加了，但是对实验效果几乎没有影响的。\n我们通过两个实验来验证：\n* 增加不包含语言模型的序列模型的第二层RNN维数。\n* 减少TagLM的第二层RNN维数。\n\n性能提升都非常的少，而且还说明了TagLM增加的参数对性能是有略微削弱的。\n#### 语言模型要跟随语料库领域而改变吗？\n答案是不需要，之前都是在新闻语料上做的训练，我们直接把它应用到了科技语料库上，性能依然有很大提升。\n\n# 4 相关工作\n---\n#### 未标注数据\n#### 神经语言模型\n#### 解释RNN状态\n#### 其他序列标注模型\n\n# 5 总结\n---\n* 提出了一种简单、通用的半监督方法，使用预训练的神经语言模型，来给序列标注模型增加上下文表示。\n* 我们的方法在NER和chunking任务上比其他的方法都要好。\n* 多使用一个后向的语言模型效果更好。\n* 即使语言模型在不同领域的语料库上训练，或者序列模型在大数据量的标注数据上训练，效果依然有很大提升。\n","source":"_posts/ACL17-1161.md","raw":"---\ntitle: Semi-supervised sequence tagging with bidirectional language models\ndate: 2017-10-03 16:18:34\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 序列标注\ncategories:\n- 序列标注\n---\n论文链接：[P17-1161](https://www.aclweb.org/anthology/P/P17/P17-1161.pdf)\n\n# 摘要\n---\n从未标注文本中学习到的预训练词向量已经成为NLP任务神经网络结构的重要组成部分。\n但是大多数情况下，现在的循环神经网络还是从极少的标注数据中学习上下文相关的表示。\n所以这篇论文研究一种通用的半监督学习方法，将从双向语言模型中预训练出来的词向量加到NLP系统中，把它应用到序列标注任务中。\n我们在两个NLP任务上做实验：NER和chunking。\n\n# 1 介绍\n---\n这篇论文我们探讨一种半监督学习方法，不需要额外的标注数据。\n我们使用一个神经语言模型，在大量未标注数据上训练，计算出每个位置上下文的编码，然后应用到半监督的标注模型中。 \n我们第一个主要贡献是证明了语言模型训练出的上下文相关表示在半监督标注模型中是很有用的。\n第二个贡献是多使用一个后向的语言模型效果更好。\n同时我们发现没必要针对某个领域数据来专门训练。\n\n# 2 语言模型增强的序列标注\n---\n### 2.1 概览\n这个模型的主要结构如图所示：\n![](1.jpg)\n主要过程可以分为3步：\n* 首先在大量的未标注数据上训练词向量和一个神经语言模型\n* 然后提取一个句子中每个单词的词向量表示与语言模型表示\n* 最后将它们应用到监督序列标注模型中。\n\n具体的结构如下图所示：\n![](2.jpg)\n\n### 2.2 基本的序列标注模型\n我们用到的基本的序列标注模型是一个分层的神经序列标注模型，如上图左半部分所示。\n给定一个句子$({t_1},{t_2}, \\ldots ,{t_N})$，首先对于每个单词${t_k}$产生一个表示${x_k}$，其中${x_k}$是由这个单词基于字符的表示${c_k}$和词向量表示${w_k}$连接而成：\n\\\\[\\begin{array}{l}{c_k} = C({t_k};{\\theta _c})\\\\{w_k} = E({t_k};{\\theta _w})\\\\{x_k} = [{c_k};{w_k}]\\end{array}\\\\]字符表示${c_k}$捕获的是这个单词的形态信息，可以用CNN或者RNN来实现。\n词向量表示${w_k}$是从预训练的词向量表中直接提取的。\n为了学习到上下文相关的表示，我们采用多层双向RNN。\n对于每个单词${x_k}$，第${i}$层隐含层${h_{k,i}}$是由前向隐含层状态${ {\\vec h}_{k,i}}$和后向隐含层状态${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,i}}$连接而成。\n对于第一层隐含层，${h_{k,1}}$由${x_k}$经过如下运算获得：\n\\\\[\\begin{array}{l}{ {\\vec h}_{k,1}} = { {\\vec R}_1}({x_k},{ {\\vec h}_{k - 1,1}};{\\theta _{ { {\\vec R}_1}}})\\\\{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}} = { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}({x_k},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k + 1,1}};{\\theta _{ { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}}})\\\\{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}}]\\end{array}\\\\]这个实验中我们使用2层隐含层，并且使用GRU或者LSTM作为双向RNN。\n最后，最后一层隐含层的输出${h_{k,L}}$被输出到一个稠密层，用来预测每个标签的评分。\n由于在我们的序列标注任务中，连续的标签之间是有依赖性的，所以联合起来预测一整个句子的标签比单独预测每个单词的标签更好。\n因此，我们增加了额外的一层来计算相邻两个标签之间的条件随机场损失，然后用Viterbi算法来寻找概率最大的标签序列。\n\n### 2.3 双向语言模型\n一个语言模型是用来计算一个句子$({t_1},{t_2}, \\ldots ,{t_N})$的概率：\n\\\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_1},{t_2}, \\ldots ,{t_{k - 1}})} \\\\]之前的研究将每个单词的字符表示或者词向量表示送到多层LSTM中，用$({t_1},{t_2}, \\ldots ,{t_k})$来求出隐含层${ {\\vec h}^{LM}}_k$，这就是第$k$个单词的前向语言模型表示，同时也是语言模型LSTM层最顶端的输出。最后用softmax层来预测${t_{k + 1}}$的概率。\n当然再加上一个后向语言模型表示效果就更好了：\n\\\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_{k + 1}},{t_{k + 2}}, \\ldots ,{t_N})} \\\\]后向语言模型表示实现方式和前向相似，产生输出${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }^{LM}}_k$\n注意到在这个模型中，前向后向语言模型是独立的，不共享任何参数。\n\n### 2.4 结合语言模型和序列模型\n我们结合的模型TagLM是将语言模型的词表示当作额外的输入传送到序列标注模型中。\n在实验中，我们发现将语言模型表示和序列模型第一层隐含层输出结合效果最好。表示如下：\n\\\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\\\]有许多方法可以结合语言模型表示和序列模型第一层隐含层输出，比如用一个非线性函数来结合：\n\\\\[{h_{k,1}} = f([{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}])\\\\]另一种可能的方法是用类似注意力模型的机制，给每个单词的语言模型表示加上权重，然后再加进序列模型中。\n本次实验中直接结合效果已经很好了，所以没有尝试其他方法。\n\n# 3 实验\n---\n我们在两个NLP任务上做实验：NER和chunking，使用F1评价指标和BIOES标注体系。\n我们对数据做了预处理，对所有字母小写处理，将所有数字替换成0。\n#### CoNLL 2003 NER\nCoNLL 2003 NER任务包含了路透社RCV1语料库，它是由4种不同的实体类型标注的：PER、LOC、ORG、MISC，包含了标准的训练集、验证集和测试集。\n我们的序列模型的字符表示使用了80个隐含层和25维字符表示的双向GRU。上面的序列层使用了两个300个隐含层的双向GRU。为了正则化，每个GRU的输入都添加了25%的dropout。\n#### CoNLL 2000 chunking\nCoNLL 2000 chunking任务使用华尔街日报第15~18章训练，第20章测试。定义了11种句法分块类型，我们从训练集随机标记出1000个句子作为验证集。\n序列模型字符表示使用了30维字符表示和带有30个宽度为3字符滤波器的CNN。上面的序列层使用了两个200个隐含层的双向GRU。每个GRU的输入都添加了50%的dropout。\n#### 预训练语言模型\n我们在1B Word Benchmark上面训练语言模型，包含了8亿个单词。\n我们使用两个2048个单元，512维的LSTM，在4个GPU上进行参数的同步更新，在10轮训练后就停止训练。\n#### 训练\n所有的实验都采用Adam优化器在5.0处进行梯度截断。\n提前结束训练来防止过拟合，采用以下方法来决定什么时候停止训练：开始时学习率设为0.001，观察验证集每一轮的性能，当验证集上的性能达到最高时，将学习率降低一个数量级，再训练5次，再降低一个数量级，再训练5次，最后停止训练。\n### 3.1 综合系统结果\n表1和表2比较的是TagLM和其他没有额外标注数据的模型结果。\n表3和表4比较的是TagLM和其他包含额外标注数据的模型结果。\n![](3.jpg)\n![](4.jpg)\n* 增加外部标注数据\n尽管我们没有使用外部标注数据，但是我们效果依然比其他模型要好。表3和表4还可以看出这个模型加了语言模型后的提升是最大的。\n\n### 3.2 分析\n为了解释我们的TagLM的特性，我们在CoNLL 2003 NER上做了许多额外的实验。\n#### 怎样使用语言模型表示？\n在这个实验中，我们将语言模型产生的表示连接到序列模型的不同位置：\n* 连接到第一个RNN的输入层：\n\\\\[{x_k} = [{c_k};{w_k};{h_k}^{LM}]\\\\]\n* 连接到第一个RNN的输出层：\n\\\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\\\]\n* 连接到第二个RNN的输出层：\n\\\\[{h_{k,2}} = [{ {\\vec h}_{k,2}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,2}};{h_k}^{LM}]\\\\]\n\n表5显示出第二种位置是效果最好的，我们猜测原因可能是因为第二层RNN可以捕获第一层RNN产生的任务特定的上下文和语言模型产生的通用的上下文之间的互相联系。\n![](5.jpg)\n#### 用哪一种语言模型重要吗？\n从表6可以看出，前向传播使用CNN-BIG-LSTM，后向传播使用LSTM-2048-512效果是最好的，但是我们没有测试后向也是CNN-BIG-LSTM的，那样效果估计会更好。\n![](6.jpg)\n#### 任务特定RNN的重要性\n我们把任务特定的RNN去掉了，只用语言模型和稠密层和CRF来预测输出标签，结果非常的差。说明还是需要任务特定RNN来对标注数据编码产生必要的信息的。\n#### 数据集的大小\n通过在大数据和小数据上做实验，得出如下结论：\n以往的模型在小数据上从无语言模型到有语言模型提升都是很大的，但是在大数据上提升就非常的少了。\n而我们的TagLM不论是小数据还是大数据性能提升都非常的大。\n#### 参数个数\n由于第二层RNN的输入加入了语言模型表示，所以维数增加了，但是对实验效果几乎没有影响的。\n我们通过两个实验来验证：\n* 增加不包含语言模型的序列模型的第二层RNN维数。\n* 减少TagLM的第二层RNN维数。\n\n性能提升都非常的少，而且还说明了TagLM增加的参数对性能是有略微削弱的。\n#### 语言模型要跟随语料库领域而改变吗？\n答案是不需要，之前都是在新闻语料上做的训练，我们直接把它应用到了科技语料库上，性能依然有很大提升。\n\n# 4 相关工作\n---\n#### 未标注数据\n#### 神经语言模型\n#### 解释RNN状态\n#### 其他序列标注模型\n\n# 5 总结\n---\n* 提出了一种简单、通用的半监督方法，使用预训练的神经语言模型，来给序列标注模型增加上下文表示。\n* 我们的方法在NER和chunking任务上比其他的方法都要好。\n* 多使用一个后向的语言模型效果更好。\n* 即使语言模型在不同领域的语料库上训练，或者序列模型在大数据量的标注数据上训练，效果依然有很大提升。\n","slug":"ACL17-1161","published":1,"updated":"2019-07-20T04:01:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9822h00057swe7c90d436","content":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-1161.pdf\" target=\"_blank\" rel=\"noopener\">P17-1161</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>从未标注文本中学习到的预训练词向量已经成为NLP任务神经网络结构的重要组成部分。<br>但是大多数情况下，现在的循环神经网络还是从极少的标注数据中学习上下文相关的表示。<br>所以这篇论文研究一种通用的半监督学习方法，将从双向语言模型中预训练出来的词向量加到NLP系统中，把它应用到序列标注任务中。<br>我们在两个NLP任务上做实验：NER和chunking。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>这篇论文我们探讨一种半监督学习方法，不需要额外的标注数据。<br>我们使用一个神经语言模型，在大量未标注数据上训练，计算出每个位置上下文的编码，然后应用到半监督的标注模型中。<br>我们第一个主要贡献是证明了语言模型训练出的上下文相关表示在半监督标注模型中是很有用的。<br>第二个贡献是多使用一个后向的语言模型效果更好。<br>同时我们发现没必要针对某个领域数据来专门训练。</p>\n<h1 id=\"2-语言模型增强的序列标注\"><a href=\"#2-语言模型增强的序列标注\" class=\"headerlink\" title=\"2 语言模型增强的序列标注\"></a>2 语言模型增强的序列标注</h1><hr>\n<h3 id=\"2-1-概览\"><a href=\"#2-1-概览\" class=\"headerlink\" title=\"2.1 概览\"></a>2.1 概览</h3><p>这个模型的主要结构如图所示：<br><img src=\"1.jpg\" alt><br>主要过程可以分为3步：</p>\n<ul>\n<li>首先在大量的未标注数据上训练词向量和一个神经语言模型</li>\n<li>然后提取一个句子中每个单词的词向量表示与语言模型表示</li>\n<li>最后将它们应用到监督序列标注模型中。</li>\n</ul>\n<p>具体的结构如下图所示：<br><img src=\"2.jpg\" alt></p>\n<h3 id=\"2-2-基本的序列标注模型\"><a href=\"#2-2-基本的序列标注模型\" class=\"headerlink\" title=\"2.2 基本的序列标注模型\"></a>2.2 基本的序列标注模型</h3><p>我们用到的基本的序列标注模型是一个分层的神经序列标注模型，如上图左半部分所示。<br>给定一个句子$({t_1},{t_2}, \\ldots ,{t_N})$，首先对于每个单词${t_k}$产生一个表示${x_k}$，其中${x_k}$是由这个单词基于字符的表示${c_k}$和词向量表示${w_k}$连接而成：<br>\\[\\begin{array}{l}{c_k} = C({t_k};{\\theta _c})\\\\{w_k} = E({t_k};{\\theta _w})\\\\{x_k} = [{c_k};{w_k}]\\end{array}\\]字符表示${c_k}$捕获的是这个单词的形态信息，可以用CNN或者RNN来实现。<br>词向量表示${w_k}$是从预训练的词向量表中直接提取的。<br>为了学习到上下文相关的表示，我们采用多层双向RNN。<br>对于每个单词${x_k}$，第${i}$层隐含层${h_{k,i}}$是由前向隐含层状态${ {\\vec h}_{k,i}}$和后向隐含层状态${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,i}}$连接而成。<br>对于第一层隐含层，${h_{k,1}}$由${x_k}$经过如下运算获得：<br>\\[\\begin{array}{l}{ {\\vec h}_{k,1}} = { {\\vec R}_1}({x_k},{ {\\vec h}_{k - 1,1}};{\\theta _{ { {\\vec R}_1}}})\\\\{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}} = { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}({x_k},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k + 1,1}};{\\theta _{ { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}}})\\\\{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}}]\\end{array}\\]这个实验中我们使用2层隐含层，并且使用GRU或者LSTM作为双向RNN。<br>最后，最后一层隐含层的输出${h_{k,L}}$被输出到一个稠密层，用来预测每个标签的评分。<br>由于在我们的序列标注任务中，连续的标签之间是有依赖性的，所以联合起来预测一整个句子的标签比单独预测每个单词的标签更好。<br>因此，我们增加了额外的一层来计算相邻两个标签之间的条件随机场损失，然后用Viterbi算法来寻找概率最大的标签序列。</p>\n<h3 id=\"2-3-双向语言模型\"><a href=\"#2-3-双向语言模型\" class=\"headerlink\" title=\"2.3 双向语言模型\"></a>2.3 双向语言模型</h3><p>一个语言模型是用来计算一个句子$({t_1},{t_2}, \\ldots ,{t_N})$的概率：<br>\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_1},{t_2}, \\ldots ,{t_{k - 1}})} \\]之前的研究将每个单词的字符表示或者词向量表示送到多层LSTM中，用$({t_1},{t_2}, \\ldots ,{t_k})$来求出隐含层${ {\\vec h}^{LM}}_k$，这就是第$k$个单词的前向语言模型表示，同时也是语言模型LSTM层最顶端的输出。最后用softmax层来预测${t_{k + 1}}$的概率。<br>当然再加上一个后向语言模型表示效果就更好了：<br>\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_{k + 1}},{t_{k + 2}}, \\ldots ,{t_N})} \\]后向语言模型表示实现方式和前向相似，产生输出${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }^{LM}}_k$<br>注意到在这个模型中，前向后向语言模型是独立的，不共享任何参数。</p>\n<h3 id=\"2-4-结合语言模型和序列模型\"><a href=\"#2-4-结合语言模型和序列模型\" class=\"headerlink\" title=\"2.4 结合语言模型和序列模型\"></a>2.4 结合语言模型和序列模型</h3><p>我们结合的模型TagLM是将语言模型的词表示当作额外的输入传送到序列标注模型中。<br>在实验中，我们发现将语言模型表示和序列模型第一层隐含层输出结合效果最好。表示如下：<br>\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\]有许多方法可以结合语言模型表示和序列模型第一层隐含层输出，比如用一个非线性函数来结合：<br>\\[{h_{k,1}} = f([{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}])\\]另一种可能的方法是用类似注意力模型的机制，给每个单词的语言模型表示加上权重，然后再加进序列模型中。<br>本次实验中直接结合效果已经很好了，所以没有尝试其他方法。</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3 实验\"></a>3 实验</h1><hr>\n<p>我们在两个NLP任务上做实验：NER和chunking，使用F1评价指标和BIOES标注体系。<br>我们对数据做了预处理，对所有字母小写处理，将所有数字替换成0。</p>\n<h4 id=\"CoNLL-2003-NER\"><a href=\"#CoNLL-2003-NER\" class=\"headerlink\" title=\"CoNLL 2003 NER\"></a>CoNLL 2003 NER</h4><p>CoNLL 2003 NER任务包含了路透社RCV1语料库，它是由4种不同的实体类型标注的：PER、LOC、ORG、MISC，包含了标准的训练集、验证集和测试集。<br>我们的序列模型的字符表示使用了80个隐含层和25维字符表示的双向GRU。上面的序列层使用了两个300个隐含层的双向GRU。为了正则化，每个GRU的输入都添加了25%的dropout。</p>\n<h4 id=\"CoNLL-2000-chunking\"><a href=\"#CoNLL-2000-chunking\" class=\"headerlink\" title=\"CoNLL 2000 chunking\"></a>CoNLL 2000 chunking</h4><p>CoNLL 2000 chunking任务使用华尔街日报第15~18章训练，第20章测试。定义了11种句法分块类型，我们从训练集随机标记出1000个句子作为验证集。<br>序列模型字符表示使用了30维字符表示和带有30个宽度为3字符滤波器的CNN。上面的序列层使用了两个200个隐含层的双向GRU。每个GRU的输入都添加了50%的dropout。</p>\n<h4 id=\"预训练语言模型\"><a href=\"#预训练语言模型\" class=\"headerlink\" title=\"预训练语言模型\"></a>预训练语言模型</h4><p>我们在1B Word Benchmark上面训练语言模型，包含了8亿个单词。<br>我们使用两个2048个单元，512维的LSTM，在4个GPU上进行参数的同步更新，在10轮训练后就停止训练。</p>\n<h4 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h4><p>所有的实验都采用Adam优化器在5.0处进行梯度截断。<br>提前结束训练来防止过拟合，采用以下方法来决定什么时候停止训练：开始时学习率设为0.001，观察验证集每一轮的性能，当验证集上的性能达到最高时，将学习率降低一个数量级，再训练5次，再降低一个数量级，再训练5次，最后停止训练。</p>\n<h3 id=\"3-1-综合系统结果\"><a href=\"#3-1-综合系统结果\" class=\"headerlink\" title=\"3.1 综合系统结果\"></a>3.1 综合系统结果</h3><p>表1和表2比较的是TagLM和其他没有额外标注数据的模型结果。<br>表3和表4比较的是TagLM和其他包含额外标注数据的模型结果。<br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt></p>\n<ul>\n<li>增加外部标注数据<br>尽管我们没有使用外部标注数据，但是我们效果依然比其他模型要好。表3和表4还可以看出这个模型加了语言模型后的提升是最大的。</li>\n</ul>\n<h3 id=\"3-2-分析\"><a href=\"#3-2-分析\" class=\"headerlink\" title=\"3.2 分析\"></a>3.2 分析</h3><p>为了解释我们的TagLM的特性，我们在CoNLL 2003 NER上做了许多额外的实验。</p>\n<h4 id=\"怎样使用语言模型表示？\"><a href=\"#怎样使用语言模型表示？\" class=\"headerlink\" title=\"怎样使用语言模型表示？\"></a>怎样使用语言模型表示？</h4><p>在这个实验中，我们将语言模型产生的表示连接到序列模型的不同位置：</p>\n<ul>\n<li>连接到第一个RNN的输入层：<br>\\[{x_k} = [{c_k};{w_k};{h_k}^{LM}]\\]</li>\n<li>连接到第一个RNN的输出层：<br>\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\]</li>\n<li>连接到第二个RNN的输出层：<br>\\[{h_{k,2}} = [{ {\\vec h}_{k,2}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,2}};{h_k}^{LM}]\\]</li>\n</ul>\n<p>表5显示出第二种位置是效果最好的，我们猜测原因可能是因为第二层RNN可以捕获第一层RNN产生的任务特定的上下文和语言模型产生的通用的上下文之间的互相联系。<br><img src=\"5.jpg\" alt></p>\n<h4 id=\"用哪一种语言模型重要吗？\"><a href=\"#用哪一种语言模型重要吗？\" class=\"headerlink\" title=\"用哪一种语言模型重要吗？\"></a>用哪一种语言模型重要吗？</h4><p>从表6可以看出，前向传播使用CNN-BIG-LSTM，后向传播使用LSTM-2048-512效果是最好的，但是我们没有测试后向也是CNN-BIG-LSTM的，那样效果估计会更好。<br><img src=\"6.jpg\" alt></p>\n<h4 id=\"任务特定RNN的重要性\"><a href=\"#任务特定RNN的重要性\" class=\"headerlink\" title=\"任务特定RNN的重要性\"></a>任务特定RNN的重要性</h4><p>我们把任务特定的RNN去掉了，只用语言模型和稠密层和CRF来预测输出标签，结果非常的差。说明还是需要任务特定RNN来对标注数据编码产生必要的信息的。</p>\n<h4 id=\"数据集的大小\"><a href=\"#数据集的大小\" class=\"headerlink\" title=\"数据集的大小\"></a>数据集的大小</h4><p>通过在大数据和小数据上做实验，得出如下结论：<br>以往的模型在小数据上从无语言模型到有语言模型提升都是很大的，但是在大数据上提升就非常的少了。<br>而我们的TagLM不论是小数据还是大数据性能提升都非常的大。</p>\n<h4 id=\"参数个数\"><a href=\"#参数个数\" class=\"headerlink\" title=\"参数个数\"></a>参数个数</h4><p>由于第二层RNN的输入加入了语言模型表示，所以维数增加了，但是对实验效果几乎没有影响的。<br>我们通过两个实验来验证：</p>\n<ul>\n<li>增加不包含语言模型的序列模型的第二层RNN维数。</li>\n<li>减少TagLM的第二层RNN维数。</li>\n</ul>\n<p>性能提升都非常的少，而且还说明了TagLM增加的参数对性能是有略微削弱的。</p>\n<h4 id=\"语言模型要跟随语料库领域而改变吗？\"><a href=\"#语言模型要跟随语料库领域而改变吗？\" class=\"headerlink\" title=\"语言模型要跟随语料库领域而改变吗？\"></a>语言模型要跟随语料库领域而改变吗？</h4><p>答案是不需要，之前都是在新闻语料上做的训练，我们直接把它应用到了科技语料库上，性能依然有很大提升。</p>\n<h1 id=\"4-相关工作\"><a href=\"#4-相关工作\" class=\"headerlink\" title=\"4 相关工作\"></a>4 相关工作</h1><hr>\n<h4 id=\"未标注数据\"><a href=\"#未标注数据\" class=\"headerlink\" title=\"未标注数据\"></a>未标注数据</h4><h4 id=\"神经语言模型\"><a href=\"#神经语言模型\" class=\"headerlink\" title=\"神经语言模型\"></a>神经语言模型</h4><h4 id=\"解释RNN状态\"><a href=\"#解释RNN状态\" class=\"headerlink\" title=\"解释RNN状态\"></a>解释RNN状态</h4><h4 id=\"其他序列标注模型\"><a href=\"#其他序列标注模型\" class=\"headerlink\" title=\"其他序列标注模型\"></a>其他序列标注模型</h4><h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h1><hr>\n<ul>\n<li>提出了一种简单、通用的半监督方法，使用预训练的神经语言模型，来给序列标注模型增加上下文表示。</li>\n<li>我们的方法在NER和chunking任务上比其他的方法都要好。</li>\n<li>多使用一个后向的语言模型效果更好。</li>\n<li>即使语言模型在不同领域的语料库上训练，或者序列模型在大数据量的标注数据上训练，效果依然有很大提升。</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-1161.pdf\" target=\"_blank\" rel=\"noopener\">P17-1161</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>从未标注文本中学习到的预训练词向量已经成为NLP任务神经网络结构的重要组成部分。<br>但是大多数情况下，现在的循环神经网络还是从极少的标注数据中学习上下文相关的表示。<br>所以这篇论文研究一种通用的半监督学习方法，将从双向语言模型中预训练出来的词向量加到NLP系统中，把它应用到序列标注任务中。<br>我们在两个NLP任务上做实验：NER和chunking。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>这篇论文我们探讨一种半监督学习方法，不需要额外的标注数据。<br>我们使用一个神经语言模型，在大量未标注数据上训练，计算出每个位置上下文的编码，然后应用到半监督的标注模型中。<br>我们第一个主要贡献是证明了语言模型训练出的上下文相关表示在半监督标注模型中是很有用的。<br>第二个贡献是多使用一个后向的语言模型效果更好。<br>同时我们发现没必要针对某个领域数据来专门训练。</p>\n<h1 id=\"2-语言模型增强的序列标注\"><a href=\"#2-语言模型增强的序列标注\" class=\"headerlink\" title=\"2 语言模型增强的序列标注\"></a>2 语言模型增强的序列标注</h1><hr>\n<h3 id=\"2-1-概览\"><a href=\"#2-1-概览\" class=\"headerlink\" title=\"2.1 概览\"></a>2.1 概览</h3><p>这个模型的主要结构如图所示：<br><img src=\"1.jpg\" alt><br>主要过程可以分为3步：</p>\n<ul>\n<li>首先在大量的未标注数据上训练词向量和一个神经语言模型</li>\n<li>然后提取一个句子中每个单词的词向量表示与语言模型表示</li>\n<li>最后将它们应用到监督序列标注模型中。</li>\n</ul>\n<p>具体的结构如下图所示：<br><img src=\"2.jpg\" alt></p>\n<h3 id=\"2-2-基本的序列标注模型\"><a href=\"#2-2-基本的序列标注模型\" class=\"headerlink\" title=\"2.2 基本的序列标注模型\"></a>2.2 基本的序列标注模型</h3><p>我们用到的基本的序列标注模型是一个分层的神经序列标注模型，如上图左半部分所示。<br>给定一个句子$({t_1},{t_2}, \\ldots ,{t_N})$，首先对于每个单词${t_k}$产生一个表示${x_k}$，其中${x_k}$是由这个单词基于字符的表示${c_k}$和词向量表示${w_k}$连接而成：<br>\\[\\begin{array}{l}{c_k} = C({t_k};{\\theta _c})\\\\{w_k} = E({t_k};{\\theta _w})\\\\{x_k} = [{c_k};{w_k}]\\end{array}\\]字符表示${c_k}$捕获的是这个单词的形态信息，可以用CNN或者RNN来实现。<br>词向量表示${w_k}$是从预训练的词向量表中直接提取的。<br>为了学习到上下文相关的表示，我们采用多层双向RNN。<br>对于每个单词${x_k}$，第${i}$层隐含层${h_{k,i}}$是由前向隐含层状态${ {\\vec h}_{k,i}}$和后向隐含层状态${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,i}}$连接而成。<br>对于第一层隐含层，${h_{k,1}}$由${x_k}$经过如下运算获得：<br>\\[\\begin{array}{l}{ {\\vec h}_{k,1}} = { {\\vec R}_1}({x_k},{ {\\vec h}_{k - 1,1}};{\\theta _{ { {\\vec R}_1}}})\\\\{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}} = { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}({x_k},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k + 1,1}};{\\theta _{ { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over R} }_1}}})\\\\{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}}]\\end{array}\\]这个实验中我们使用2层隐含层，并且使用GRU或者LSTM作为双向RNN。<br>最后，最后一层隐含层的输出${h_{k,L}}$被输出到一个稠密层，用来预测每个标签的评分。<br>由于在我们的序列标注任务中，连续的标签之间是有依赖性的，所以联合起来预测一整个句子的标签比单独预测每个单词的标签更好。<br>因此，我们增加了额外的一层来计算相邻两个标签之间的条件随机场损失，然后用Viterbi算法来寻找概率最大的标签序列。</p>\n<h3 id=\"2-3-双向语言模型\"><a href=\"#2-3-双向语言模型\" class=\"headerlink\" title=\"2.3 双向语言模型\"></a>2.3 双向语言模型</h3><p>一个语言模型是用来计算一个句子$({t_1},{t_2}, \\ldots ,{t_N})$的概率：<br>\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_1},{t_2}, \\ldots ,{t_{k - 1}})} \\]之前的研究将每个单词的字符表示或者词向量表示送到多层LSTM中，用$({t_1},{t_2}, \\ldots ,{t_k})$来求出隐含层${ {\\vec h}^{LM}}_k$，这就是第$k$个单词的前向语言模型表示，同时也是语言模型LSTM层最顶端的输出。最后用softmax层来预测${t_{k + 1}}$的概率。<br>当然再加上一个后向语言模型表示效果就更好了：<br>\\[p({t_1},{t_2}, \\ldots ,{t_N}) = \\prod\\limits_{k - 1}^N {p({t_k}|{t_{k + 1}},{t_{k + 2}}, \\ldots ,{t_N})} \\]后向语言模型表示实现方式和前向相似，产生输出${ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }^{LM}}_k$<br>注意到在这个模型中，前向后向语言模型是独立的，不共享任何参数。</p>\n<h3 id=\"2-4-结合语言模型和序列模型\"><a href=\"#2-4-结合语言模型和序列模型\" class=\"headerlink\" title=\"2.4 结合语言模型和序列模型\"></a>2.4 结合语言模型和序列模型</h3><p>我们结合的模型TagLM是将语言模型的词表示当作额外的输入传送到序列标注模型中。<br>在实验中，我们发现将语言模型表示和序列模型第一层隐含层输出结合效果最好。表示如下：<br>\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\]有许多方法可以结合语言模型表示和序列模型第一层隐含层输出，比如用一个非线性函数来结合：<br>\\[{h_{k,1}} = f([{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}])\\]另一种可能的方法是用类似注意力模型的机制，给每个单词的语言模型表示加上权重，然后再加进序列模型中。<br>本次实验中直接结合效果已经很好了，所以没有尝试其他方法。</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3 实验\"></a>3 实验</h1><hr>\n<p>我们在两个NLP任务上做实验：NER和chunking，使用F1评价指标和BIOES标注体系。<br>我们对数据做了预处理，对所有字母小写处理，将所有数字替换成0。</p>\n<h4 id=\"CoNLL-2003-NER\"><a href=\"#CoNLL-2003-NER\" class=\"headerlink\" title=\"CoNLL 2003 NER\"></a>CoNLL 2003 NER</h4><p>CoNLL 2003 NER任务包含了路透社RCV1语料库，它是由4种不同的实体类型标注的：PER、LOC、ORG、MISC，包含了标准的训练集、验证集和测试集。<br>我们的序列模型的字符表示使用了80个隐含层和25维字符表示的双向GRU。上面的序列层使用了两个300个隐含层的双向GRU。为了正则化，每个GRU的输入都添加了25%的dropout。</p>\n<h4 id=\"CoNLL-2000-chunking\"><a href=\"#CoNLL-2000-chunking\" class=\"headerlink\" title=\"CoNLL 2000 chunking\"></a>CoNLL 2000 chunking</h4><p>CoNLL 2000 chunking任务使用华尔街日报第15~18章训练，第20章测试。定义了11种句法分块类型，我们从训练集随机标记出1000个句子作为验证集。<br>序列模型字符表示使用了30维字符表示和带有30个宽度为3字符滤波器的CNN。上面的序列层使用了两个200个隐含层的双向GRU。每个GRU的输入都添加了50%的dropout。</p>\n<h4 id=\"预训练语言模型\"><a href=\"#预训练语言模型\" class=\"headerlink\" title=\"预训练语言模型\"></a>预训练语言模型</h4><p>我们在1B Word Benchmark上面训练语言模型，包含了8亿个单词。<br>我们使用两个2048个单元，512维的LSTM，在4个GPU上进行参数的同步更新，在10轮训练后就停止训练。</p>\n<h4 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h4><p>所有的实验都采用Adam优化器在5.0处进行梯度截断。<br>提前结束训练来防止过拟合，采用以下方法来决定什么时候停止训练：开始时学习率设为0.001，观察验证集每一轮的性能，当验证集上的性能达到最高时，将学习率降低一个数量级，再训练5次，再降低一个数量级，再训练5次，最后停止训练。</p>\n<h3 id=\"3-1-综合系统结果\"><a href=\"#3-1-综合系统结果\" class=\"headerlink\" title=\"3.1 综合系统结果\"></a>3.1 综合系统结果</h3><p>表1和表2比较的是TagLM和其他没有额外标注数据的模型结果。<br>表3和表4比较的是TagLM和其他包含额外标注数据的模型结果。<br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt></p>\n<ul>\n<li>增加外部标注数据<br>尽管我们没有使用外部标注数据，但是我们效果依然比其他模型要好。表3和表4还可以看出这个模型加了语言模型后的提升是最大的。</li>\n</ul>\n<h3 id=\"3-2-分析\"><a href=\"#3-2-分析\" class=\"headerlink\" title=\"3.2 分析\"></a>3.2 分析</h3><p>为了解释我们的TagLM的特性，我们在CoNLL 2003 NER上做了许多额外的实验。</p>\n<h4 id=\"怎样使用语言模型表示？\"><a href=\"#怎样使用语言模型表示？\" class=\"headerlink\" title=\"怎样使用语言模型表示？\"></a>怎样使用语言模型表示？</h4><p>在这个实验中，我们将语言模型产生的表示连接到序列模型的不同位置：</p>\n<ul>\n<li>连接到第一个RNN的输入层：<br>\\[{x_k} = [{c_k};{w_k};{h_k}^{LM}]\\]</li>\n<li>连接到第一个RNN的输出层：<br>\\[{h_{k,1}} = [{ {\\vec h}_{k,1}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,1}};{h_k}^{LM}]\\]</li>\n<li>连接到第二个RNN的输出层：<br>\\[{h_{k,2}} = [{ {\\vec h}_{k,2}};{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over h} }_{k,2}};{h_k}^{LM}]\\]</li>\n</ul>\n<p>表5显示出第二种位置是效果最好的，我们猜测原因可能是因为第二层RNN可以捕获第一层RNN产生的任务特定的上下文和语言模型产生的通用的上下文之间的互相联系。<br><img src=\"5.jpg\" alt></p>\n<h4 id=\"用哪一种语言模型重要吗？\"><a href=\"#用哪一种语言模型重要吗？\" class=\"headerlink\" title=\"用哪一种语言模型重要吗？\"></a>用哪一种语言模型重要吗？</h4><p>从表6可以看出，前向传播使用CNN-BIG-LSTM，后向传播使用LSTM-2048-512效果是最好的，但是我们没有测试后向也是CNN-BIG-LSTM的，那样效果估计会更好。<br><img src=\"6.jpg\" alt></p>\n<h4 id=\"任务特定RNN的重要性\"><a href=\"#任务特定RNN的重要性\" class=\"headerlink\" title=\"任务特定RNN的重要性\"></a>任务特定RNN的重要性</h4><p>我们把任务特定的RNN去掉了，只用语言模型和稠密层和CRF来预测输出标签，结果非常的差。说明还是需要任务特定RNN来对标注数据编码产生必要的信息的。</p>\n<h4 id=\"数据集的大小\"><a href=\"#数据集的大小\" class=\"headerlink\" title=\"数据集的大小\"></a>数据集的大小</h4><p>通过在大数据和小数据上做实验，得出如下结论：<br>以往的模型在小数据上从无语言模型到有语言模型提升都是很大的，但是在大数据上提升就非常的少了。<br>而我们的TagLM不论是小数据还是大数据性能提升都非常的大。</p>\n<h4 id=\"参数个数\"><a href=\"#参数个数\" class=\"headerlink\" title=\"参数个数\"></a>参数个数</h4><p>由于第二层RNN的输入加入了语言模型表示，所以维数增加了，但是对实验效果几乎没有影响的。<br>我们通过两个实验来验证：</p>\n<ul>\n<li>增加不包含语言模型的序列模型的第二层RNN维数。</li>\n<li>减少TagLM的第二层RNN维数。</li>\n</ul>\n<p>性能提升都非常的少，而且还说明了TagLM增加的参数对性能是有略微削弱的。</p>\n<h4 id=\"语言模型要跟随语料库领域而改变吗？\"><a href=\"#语言模型要跟随语料库领域而改变吗？\" class=\"headerlink\" title=\"语言模型要跟随语料库领域而改变吗？\"></a>语言模型要跟随语料库领域而改变吗？</h4><p>答案是不需要，之前都是在新闻语料上做的训练，我们直接把它应用到了科技语料库上，性能依然有很大提升。</p>\n<h1 id=\"4-相关工作\"><a href=\"#4-相关工作\" class=\"headerlink\" title=\"4 相关工作\"></a>4 相关工作</h1><hr>\n<h4 id=\"未标注数据\"><a href=\"#未标注数据\" class=\"headerlink\" title=\"未标注数据\"></a>未标注数据</h4><h4 id=\"神经语言模型\"><a href=\"#神经语言模型\" class=\"headerlink\" title=\"神经语言模型\"></a>神经语言模型</h4><h4 id=\"解释RNN状态\"><a href=\"#解释RNN状态\" class=\"headerlink\" title=\"解释RNN状态\"></a>解释RNN状态</h4><h4 id=\"其他序列标注模型\"><a href=\"#其他序列标注模型\" class=\"headerlink\" title=\"其他序列标注模型\"></a>其他序列标注模型</h4><h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h1><hr>\n<ul>\n<li>提出了一种简单、通用的半监督方法，使用预训练的神经语言模型，来给序列标注模型增加上下文表示。</li>\n<li>我们的方法在NER和chunking任务上比其他的方法都要好。</li>\n<li>多使用一个后向的语言模型效果更好。</li>\n<li>即使语言模型在不同领域的语料库上训练，或者序列模型在大数据量的标注数据上训练，效果依然有很大提升。</li>\n</ul>\n"},{"title":"Linear-Time Constituency Parsing with RNNs and Dynamic Programming","date":"2018-10-15T14:45:01.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=533259686&auto=1&height=66\"></iframe></div>\n\n> 好像已经很久没有看论文了呢，开学了一堆事情，以后还是要抽空阅读论文，保持一定的阅读量，并且不能光看最新的论文，还得去前人传统的方法中去寻找有没有能应用于深度学习的东西，说不定就发ACL了呢（手动滑稽）。\n\n**论文地址：**[Linear-Time Constituency Parsing with RNNs and Dynamic Programming](http://aclweb.org/anthology/P18-2076)\n**代码地址：**[github](https://github.com/junekihong/beam-span-parser)\n\n# 介绍\n---\n这次要介绍的论文是huang liang发表在ACL18的一篇短文，提出了一个基于转移系统的线性时间句法分析器。本文的主要贡献点主要有如下几点：\n* 传统的基于转移的句法分析模型都是贪心解码，不能考虑到所有的状态空间，所以本文的模型采用beam search将状态空间提升到了指数级别。\n* 首次采用cube pruning将分析的时间复杂度降低到了$O(nb \\log b)$。\n* 采用max-violation损失函数代替原来的求和的损失函数，并且对cross-span的span进行了惩罚。\n* 在单模型上取得了最高的F1值。\n* 采用图结构的栈（GSS）代替了原来的stack，这样不需要时刻保存历史信息。\n\n# 模型基础\n---\n## 基于span的转移系统\n这个我已经在之前的文章[成分句法分析综述](https://godweiyang.com/2018/09/26/constituent-parsing-summary/#系统改进)中详细阐述过了。核心思想就是stack里面保存的不再是短语结构树，而是span的左右边界下标$(i, j)$，初始时stack里面是$(0, 0)$，终止状态栈里是$(0, n)$，SHIFT之后栈顶变为$(j, j + 1)$，REDUCE之后栈顶变为$(k, j)$（假设之前栈顶两个元素是$(k, i)$和$(i, j)$）。\n\n## Bi-LSTM特征\n状态转移时用双向LSTM两端的差值计算每个span的表示，然后计算出得分，用来预测action。\n\n# 动态规划\n---\n## 句法树得分\n还是和之前chart-based模型一样，用每个span的label得分之和作为句法树的总得分。\n\n## 图结构栈（Graph-Struct Stack, GSS）\n因为要采用动态规划来枚举每个时刻所有的状态，不是用普通的stack，使用GSS来保存每个时刻的状态。GSS每个时刻只需要保存栈顶的span就行了，假设为$(i, j)$。如果action是SHIFT，那么下一步就变成了$(j, j + 1)$，如果action是REDUCE，那么还需要知道栈顶第二个元素是什么。因为考虑到了所有的状态空间，所以所有的$(k, i)$都是有可能的。\n\nGSS的具体结构如下图所示：\n![](1.jpg)\n每个时刻的状态仅用一个span表示，在具体实现的时候，每个span还保存了一个span指针数组，指向它前面所有可能的span，还保存了当前span以及之前所有span的分数之和$c$和当前span子树的分数之和$v$。每个状态还保存了一个时刻标记$l$，易知一共有$2n - 1$个时刻。\n\n当采取SHIFT动作时，状态变为了$(j, j + 1)$，并且新的span$(j, j + 1)$的指针数组中新增加一个span也就是$(i, j)$。prefix分数变为$c + \\xi$，其中$\\xi$是span$(j, j + 1)$的最高label得分，而inside分数就是span$(j, j + 1)$的分数$\\xi$。\n\n当采取REDUCE动作时，枚举span$(i, j)$指针数组中所有的前一个span$(k, i)$，然后合并成一个span$(k, j)$，prefix分数变为$c' + v + \\sigma$，其中$\\sigma$就是span$(k, j)$的最高label得分，inside分数变为了$v' + v + \\sigma$。实际代码实现中，REDUCE完了后，span$(k, j)$的指针数组要更新为span$(k, i)$的指针数组。\n\n## Beam Search和Cube Pruning\n在每个时刻，只保存prefix得分最高的前b个span状态，这样时间复杂度可以降为$nb^2$，但是$b^2$相对于句子长度来说还是太大了，所以采用cube pruning继续降到$nb \\log b$。\n\ncube pruning原理是这样的：普通的beam search每个时刻枚举至多b个span，每个span和之前的至多b个span结合，所以一共最多产生$b^2$个span。\n\n而cube pruning在每个时刻都建立一个堆，首先用上一个时刻的beam里的b个span，来产生b个SHIFT的span，送入堆里。理论上来说还应该产生至多$b^2$个REDUCE的span，但是在这里对于每个span，只取它的指针数组里得分最高的那个span，来和它结合产生新的span，送入堆里。然后在产生好的堆里，每次取出得分最高的span，出堆，如果它是REDUCE得到的span，那么就继续按照它的指针数组得分从高到低顺序产生一个span，REDUCE完之后送入堆里。依次下去，直到出栈了b个span为止。\n\n# 训练\n---\n还是使用max-margin loss来训练，但是有几点小小的改进。\n## cross-span损失\n以往的损失函数里有个$\\Delta (t,t')$，衡量的是预测树和标准树不同的span的数量。但是这有个问题，因为用了隐式二叉化，所以在预测树里存在label为空的情况。如果这个span在标准树中label也是空，那么原来的损失就不惩罚这一项了，但是要考虑到如果这个span在标准树中与某个标准的span产生了交叉，那么它根本就不可能是对的，也得进行惩罚。\n\n## max violation updates\n这是huang liang在2012提出来的，其实就是计算出每个时刻预测得分和标准得分的差距，然后取差距最大的那个时刻的得分差距作为最终的损失函数，之前都是用每个时刻得分差距之和来作为损失函数的。\n\n# 实验\n---\n下图是不同的beam大小对不同长度句子分析速度的影响：\n![](2.jpg)\n最终综合考虑速度和准确率，选择beam大小为20。\n\n最后是beam-span模型在PTB测试集上的准确率，在单模型上取得了最好的结果：\n![](3.jpg)\n\n# 总结\n---\n这篇论文是短论文，所以相比之下创新没有那么的大吧，主要还是速度上比chart-based有了提升，准确率上比普通的转移系统有了提升，另外还提出了几点小的改进吧，例如cross-span问题、max-violation损失之类的，转移系统也改成了适合用来进行beam search的GSS，为了进一步加快速度，还用了cube剪枝。\n\n这么多改进其实个人感觉也是影响不大的，不是很通用，cross-span和max-violation损失可以考虑拿来用一下。下一步的工作还是考虑如何增加特征表示、加入头结点之类的吧。","source":"_posts/ACL18-BeamSpanParser.md","raw":"---\ntitle: Linear-Time Constituency Parsing with RNNs and Dynamic Programming\ndate: 2018-10-15 22:45:01\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=533259686&auto=1&height=66\"></iframe></div>\n\n> 好像已经很久没有看论文了呢，开学了一堆事情，以后还是要抽空阅读论文，保持一定的阅读量，并且不能光看最新的论文，还得去前人传统的方法中去寻找有没有能应用于深度学习的东西，说不定就发ACL了呢（手动滑稽）。\n\n**论文地址：**[Linear-Time Constituency Parsing with RNNs and Dynamic Programming](http://aclweb.org/anthology/P18-2076)\n**代码地址：**[github](https://github.com/junekihong/beam-span-parser)\n\n# 介绍\n---\n这次要介绍的论文是huang liang发表在ACL18的一篇短文，提出了一个基于转移系统的线性时间句法分析器。本文的主要贡献点主要有如下几点：\n* 传统的基于转移的句法分析模型都是贪心解码，不能考虑到所有的状态空间，所以本文的模型采用beam search将状态空间提升到了指数级别。\n* 首次采用cube pruning将分析的时间复杂度降低到了$O(nb \\log b)$。\n* 采用max-violation损失函数代替原来的求和的损失函数，并且对cross-span的span进行了惩罚。\n* 在单模型上取得了最高的F1值。\n* 采用图结构的栈（GSS）代替了原来的stack，这样不需要时刻保存历史信息。\n\n# 模型基础\n---\n## 基于span的转移系统\n这个我已经在之前的文章[成分句法分析综述](https://godweiyang.com/2018/09/26/constituent-parsing-summary/#系统改进)中详细阐述过了。核心思想就是stack里面保存的不再是短语结构树，而是span的左右边界下标$(i, j)$，初始时stack里面是$(0, 0)$，终止状态栈里是$(0, n)$，SHIFT之后栈顶变为$(j, j + 1)$，REDUCE之后栈顶变为$(k, j)$（假设之前栈顶两个元素是$(k, i)$和$(i, j)$）。\n\n## Bi-LSTM特征\n状态转移时用双向LSTM两端的差值计算每个span的表示，然后计算出得分，用来预测action。\n\n# 动态规划\n---\n## 句法树得分\n还是和之前chart-based模型一样，用每个span的label得分之和作为句法树的总得分。\n\n## 图结构栈（Graph-Struct Stack, GSS）\n因为要采用动态规划来枚举每个时刻所有的状态，不是用普通的stack，使用GSS来保存每个时刻的状态。GSS每个时刻只需要保存栈顶的span就行了，假设为$(i, j)$。如果action是SHIFT，那么下一步就变成了$(j, j + 1)$，如果action是REDUCE，那么还需要知道栈顶第二个元素是什么。因为考虑到了所有的状态空间，所以所有的$(k, i)$都是有可能的。\n\nGSS的具体结构如下图所示：\n![](1.jpg)\n每个时刻的状态仅用一个span表示，在具体实现的时候，每个span还保存了一个span指针数组，指向它前面所有可能的span，还保存了当前span以及之前所有span的分数之和$c$和当前span子树的分数之和$v$。每个状态还保存了一个时刻标记$l$，易知一共有$2n - 1$个时刻。\n\n当采取SHIFT动作时，状态变为了$(j, j + 1)$，并且新的span$(j, j + 1)$的指针数组中新增加一个span也就是$(i, j)$。prefix分数变为$c + \\xi$，其中$\\xi$是span$(j, j + 1)$的最高label得分，而inside分数就是span$(j, j + 1)$的分数$\\xi$。\n\n当采取REDUCE动作时，枚举span$(i, j)$指针数组中所有的前一个span$(k, i)$，然后合并成一个span$(k, j)$，prefix分数变为$c' + v + \\sigma$，其中$\\sigma$就是span$(k, j)$的最高label得分，inside分数变为了$v' + v + \\sigma$。实际代码实现中，REDUCE完了后，span$(k, j)$的指针数组要更新为span$(k, i)$的指针数组。\n\n## Beam Search和Cube Pruning\n在每个时刻，只保存prefix得分最高的前b个span状态，这样时间复杂度可以降为$nb^2$，但是$b^2$相对于句子长度来说还是太大了，所以采用cube pruning继续降到$nb \\log b$。\n\ncube pruning原理是这样的：普通的beam search每个时刻枚举至多b个span，每个span和之前的至多b个span结合，所以一共最多产生$b^2$个span。\n\n而cube pruning在每个时刻都建立一个堆，首先用上一个时刻的beam里的b个span，来产生b个SHIFT的span，送入堆里。理论上来说还应该产生至多$b^2$个REDUCE的span，但是在这里对于每个span，只取它的指针数组里得分最高的那个span，来和它结合产生新的span，送入堆里。然后在产生好的堆里，每次取出得分最高的span，出堆，如果它是REDUCE得到的span，那么就继续按照它的指针数组得分从高到低顺序产生一个span，REDUCE完之后送入堆里。依次下去，直到出栈了b个span为止。\n\n# 训练\n---\n还是使用max-margin loss来训练，但是有几点小小的改进。\n## cross-span损失\n以往的损失函数里有个$\\Delta (t,t')$，衡量的是预测树和标准树不同的span的数量。但是这有个问题，因为用了隐式二叉化，所以在预测树里存在label为空的情况。如果这个span在标准树中label也是空，那么原来的损失就不惩罚这一项了，但是要考虑到如果这个span在标准树中与某个标准的span产生了交叉，那么它根本就不可能是对的，也得进行惩罚。\n\n## max violation updates\n这是huang liang在2012提出来的，其实就是计算出每个时刻预测得分和标准得分的差距，然后取差距最大的那个时刻的得分差距作为最终的损失函数，之前都是用每个时刻得分差距之和来作为损失函数的。\n\n# 实验\n---\n下图是不同的beam大小对不同长度句子分析速度的影响：\n![](2.jpg)\n最终综合考虑速度和准确率，选择beam大小为20。\n\n最后是beam-span模型在PTB测试集上的准确率，在单模型上取得了最好的结果：\n![](3.jpg)\n\n# 总结\n---\n这篇论文是短论文，所以相比之下创新没有那么的大吧，主要还是速度上比chart-based有了提升，准确率上比普通的转移系统有了提升，另外还提出了几点小的改进吧，例如cross-span问题、max-violation损失之类的，转移系统也改成了适合用来进行beam search的GSS，为了进一步加快速度，还用了cube剪枝。\n\n这么多改进其实个人感觉也是影响不大的，不是很通用，cross-span和max-violation损失可以考虑拿来用一下。下一步的工作还是考虑如何增加特征表示、加入头结点之类的吧。","slug":"ACL18-BeamSpanParser","published":1,"updated":"2019-07-20T04:01:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9822q00067swezejw3z8g","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=533259686&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>好像已经很久没有看论文了呢，开学了一堆事情，以后还是要抽空阅读论文，保持一定的阅读量，并且不能光看最新的论文，还得去前人传统的方法中去寻找有没有能应用于深度学习的东西，说不定就发ACL了呢（手动滑稽）。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/P18-2076\" target=\"_blank\" rel=\"noopener\">Linear-Time Constituency Parsing with RNNs and Dynamic Programming</a><br><strong>代码地址：</strong><a href=\"https://github.com/junekihong/beam-span-parser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这次要介绍的论文是huang liang发表在ACL18的一篇短文，提出了一个基于转移系统的线性时间句法分析器。本文的主要贡献点主要有如下几点：</p>\n<ul>\n<li>传统的基于转移的句法分析模型都是贪心解码，不能考虑到所有的状态空间，所以本文的模型采用beam search将状态空间提升到了指数级别。</li>\n<li>首次采用cube pruning将分析的时间复杂度降低到了$O(nb \\log b)$。</li>\n<li>采用max-violation损失函数代替原来的求和的损失函数，并且对cross-span的span进行了惩罚。</li>\n<li>在单模型上取得了最高的F1值。</li>\n<li>采用图结构的栈（GSS）代替了原来的stack，这样不需要时刻保存历史信息。</li>\n</ul>\n<h1 id=\"模型基础\"><a href=\"#模型基础\" class=\"headerlink\" title=\"模型基础\"></a>模型基础</h1><hr>\n<h2 id=\"基于span的转移系统\"><a href=\"#基于span的转移系统\" class=\"headerlink\" title=\"基于span的转移系统\"></a>基于span的转移系统</h2><p>这个我已经在之前的文章<a href=\"https://godweiyang.com/2018/09/26/constituent-parsing-summary/#系统改进\">成分句法分析综述</a>中详细阐述过了。核心思想就是stack里面保存的不再是短语结构树，而是span的左右边界下标$(i, j)$，初始时stack里面是$(0, 0)$，终止状态栈里是$(0, n)$，SHIFT之后栈顶变为$(j, j + 1)$，REDUCE之后栈顶变为$(k, j)$（假设之前栈顶两个元素是$(k, i)$和$(i, j)$）。</p>\n<h2 id=\"Bi-LSTM特征\"><a href=\"#Bi-LSTM特征\" class=\"headerlink\" title=\"Bi-LSTM特征\"></a>Bi-LSTM特征</h2><p>状态转移时用双向LSTM两端的差值计算每个span的表示，然后计算出得分，用来预测action。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><hr>\n<h2 id=\"句法树得分\"><a href=\"#句法树得分\" class=\"headerlink\" title=\"句法树得分\"></a>句法树得分</h2><p>还是和之前chart-based模型一样，用每个span的label得分之和作为句法树的总得分。</p>\n<h2 id=\"图结构栈（Graph-Struct-Stack-GSS）\"><a href=\"#图结构栈（Graph-Struct-Stack-GSS）\" class=\"headerlink\" title=\"图结构栈（Graph-Struct Stack, GSS）\"></a>图结构栈（Graph-Struct Stack, GSS）</h2><p>因为要采用动态规划来枚举每个时刻所有的状态，不是用普通的stack，使用GSS来保存每个时刻的状态。GSS每个时刻只需要保存栈顶的span就行了，假设为$(i, j)$。如果action是SHIFT，那么下一步就变成了$(j, j + 1)$，如果action是REDUCE，那么还需要知道栈顶第二个元素是什么。因为考虑到了所有的状态空间，所以所有的$(k, i)$都是有可能的。</p>\n<p>GSS的具体结构如下图所示：<br><img src=\"1.jpg\" alt><br>每个时刻的状态仅用一个span表示，在具体实现的时候，每个span还保存了一个span指针数组，指向它前面所有可能的span，还保存了当前span以及之前所有span的分数之和$c$和当前span子树的分数之和$v$。每个状态还保存了一个时刻标记$l$，易知一共有$2n - 1$个时刻。</p>\n<p>当采取SHIFT动作时，状态变为了$(j, j + 1)$，并且新的span$(j, j + 1)$的指针数组中新增加一个span也就是$(i, j)$。prefix分数变为$c + \\xi$，其中$\\xi$是span$(j, j + 1)$的最高label得分，而inside分数就是span$(j, j + 1)$的分数$\\xi$。</p>\n<p>当采取REDUCE动作时，枚举span$(i, j)$指针数组中所有的前一个span$(k, i)$，然后合并成一个span$(k, j)$，prefix分数变为$c’ + v + \\sigma$，其中$\\sigma$就是span$(k, j)$的最高label得分，inside分数变为了$v’ + v + \\sigma$。实际代码实现中，REDUCE完了后，span$(k, j)$的指针数组要更新为span$(k, i)$的指针数组。</p>\n<h2 id=\"Beam-Search和Cube-Pruning\"><a href=\"#Beam-Search和Cube-Pruning\" class=\"headerlink\" title=\"Beam Search和Cube Pruning\"></a>Beam Search和Cube Pruning</h2><p>在每个时刻，只保存prefix得分最高的前b个span状态，这样时间复杂度可以降为$nb^2$，但是$b^2$相对于句子长度来说还是太大了，所以采用cube pruning继续降到$nb \\log b$。</p>\n<p>cube pruning原理是这样的：普通的beam search每个时刻枚举至多b个span，每个span和之前的至多b个span结合，所以一共最多产生$b^2$个span。</p>\n<p>而cube pruning在每个时刻都建立一个堆，首先用上一个时刻的beam里的b个span，来产生b个SHIFT的span，送入堆里。理论上来说还应该产生至多$b^2$个REDUCE的span，但是在这里对于每个span，只取它的指针数组里得分最高的那个span，来和它结合产生新的span，送入堆里。然后在产生好的堆里，每次取出得分最高的span，出堆，如果它是REDUCE得到的span，那么就继续按照它的指针数组得分从高到低顺序产生一个span，REDUCE完之后送入堆里。依次下去，直到出栈了b个span为止。</p>\n<h1 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h1><hr>\n<p>还是使用max-margin loss来训练，但是有几点小小的改进。</p>\n<h2 id=\"cross-span损失\"><a href=\"#cross-span损失\" class=\"headerlink\" title=\"cross-span损失\"></a>cross-span损失</h2><p>以往的损失函数里有个$\\Delta (t,t’)$，衡量的是预测树和标准树不同的span的数量。但是这有个问题，因为用了隐式二叉化，所以在预测树里存在label为空的情况。如果这个span在标准树中label也是空，那么原来的损失就不惩罚这一项了，但是要考虑到如果这个span在标准树中与某个标准的span产生了交叉，那么它根本就不可能是对的，也得进行惩罚。</p>\n<h2 id=\"max-violation-updates\"><a href=\"#max-violation-updates\" class=\"headerlink\" title=\"max violation updates\"></a>max violation updates</h2><p>这是huang liang在2012提出来的，其实就是计算出每个时刻预测得分和标准得分的差距，然后取差距最大的那个时刻的得分差距作为最终的损失函数，之前都是用每个时刻得分差距之和来作为损失函数的。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>下图是不同的beam大小对不同长度句子分析速度的影响：<br><img src=\"2.jpg\" alt><br>最终综合考虑速度和准确率，选择beam大小为20。</p>\n<p>最后是beam-span模型在PTB测试集上的准确率，在单模型上取得了最好的结果：<br><img src=\"3.jpg\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文是短论文，所以相比之下创新没有那么的大吧，主要还是速度上比chart-based有了提升，准确率上比普通的转移系统有了提升，另外还提出了几点小的改进吧，例如cross-span问题、max-violation损失之类的，转移系统也改成了适合用来进行beam search的GSS，为了进一步加快速度，还用了cube剪枝。</p>\n<p>这么多改进其实个人感觉也是影响不大的，不是很通用，cross-span和max-violation损失可以考虑拿来用一下。下一步的工作还是考虑如何增加特征表示、加入头结点之类的吧。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=533259686&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>好像已经很久没有看论文了呢，开学了一堆事情，以后还是要抽空阅读论文，保持一定的阅读量，并且不能光看最新的论文，还得去前人传统的方法中去寻找有没有能应用于深度学习的东西，说不定就发ACL了呢（手动滑稽）。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/P18-2076\" target=\"_blank\" rel=\"noopener\">Linear-Time Constituency Parsing with RNNs and Dynamic Programming</a><br><strong>代码地址：</strong><a href=\"https://github.com/junekihong/beam-span-parser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这次要介绍的论文是huang liang发表在ACL18的一篇短文，提出了一个基于转移系统的线性时间句法分析器。本文的主要贡献点主要有如下几点：</p>\n<ul>\n<li>传统的基于转移的句法分析模型都是贪心解码，不能考虑到所有的状态空间，所以本文的模型采用beam search将状态空间提升到了指数级别。</li>\n<li>首次采用cube pruning将分析的时间复杂度降低到了$O(nb \\log b)$。</li>\n<li>采用max-violation损失函数代替原来的求和的损失函数，并且对cross-span的span进行了惩罚。</li>\n<li>在单模型上取得了最高的F1值。</li>\n<li>采用图结构的栈（GSS）代替了原来的stack，这样不需要时刻保存历史信息。</li>\n</ul>\n<h1 id=\"模型基础\"><a href=\"#模型基础\" class=\"headerlink\" title=\"模型基础\"></a>模型基础</h1><hr>\n<h2 id=\"基于span的转移系统\"><a href=\"#基于span的转移系统\" class=\"headerlink\" title=\"基于span的转移系统\"></a>基于span的转移系统</h2><p>这个我已经在之前的文章<a href=\"https://godweiyang.com/2018/09/26/constituent-parsing-summary/#系统改进\">成分句法分析综述</a>中详细阐述过了。核心思想就是stack里面保存的不再是短语结构树，而是span的左右边界下标$(i, j)$，初始时stack里面是$(0, 0)$，终止状态栈里是$(0, n)$，SHIFT之后栈顶变为$(j, j + 1)$，REDUCE之后栈顶变为$(k, j)$（假设之前栈顶两个元素是$(k, i)$和$(i, j)$）。</p>\n<h2 id=\"Bi-LSTM特征\"><a href=\"#Bi-LSTM特征\" class=\"headerlink\" title=\"Bi-LSTM特征\"></a>Bi-LSTM特征</h2><p>状态转移时用双向LSTM两端的差值计算每个span的表示，然后计算出得分，用来预测action。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><hr>\n<h2 id=\"句法树得分\"><a href=\"#句法树得分\" class=\"headerlink\" title=\"句法树得分\"></a>句法树得分</h2><p>还是和之前chart-based模型一样，用每个span的label得分之和作为句法树的总得分。</p>\n<h2 id=\"图结构栈（Graph-Struct-Stack-GSS）\"><a href=\"#图结构栈（Graph-Struct-Stack-GSS）\" class=\"headerlink\" title=\"图结构栈（Graph-Struct Stack, GSS）\"></a>图结构栈（Graph-Struct Stack, GSS）</h2><p>因为要采用动态规划来枚举每个时刻所有的状态，不是用普通的stack，使用GSS来保存每个时刻的状态。GSS每个时刻只需要保存栈顶的span就行了，假设为$(i, j)$。如果action是SHIFT，那么下一步就变成了$(j, j + 1)$，如果action是REDUCE，那么还需要知道栈顶第二个元素是什么。因为考虑到了所有的状态空间，所以所有的$(k, i)$都是有可能的。</p>\n<p>GSS的具体结构如下图所示：<br><img src=\"1.jpg\" alt><br>每个时刻的状态仅用一个span表示，在具体实现的时候，每个span还保存了一个span指针数组，指向它前面所有可能的span，还保存了当前span以及之前所有span的分数之和$c$和当前span子树的分数之和$v$。每个状态还保存了一个时刻标记$l$，易知一共有$2n - 1$个时刻。</p>\n<p>当采取SHIFT动作时，状态变为了$(j, j + 1)$，并且新的span$(j, j + 1)$的指针数组中新增加一个span也就是$(i, j)$。prefix分数变为$c + \\xi$，其中$\\xi$是span$(j, j + 1)$的最高label得分，而inside分数就是span$(j, j + 1)$的分数$\\xi$。</p>\n<p>当采取REDUCE动作时，枚举span$(i, j)$指针数组中所有的前一个span$(k, i)$，然后合并成一个span$(k, j)$，prefix分数变为$c’ + v + \\sigma$，其中$\\sigma$就是span$(k, j)$的最高label得分，inside分数变为了$v’ + v + \\sigma$。实际代码实现中，REDUCE完了后，span$(k, j)$的指针数组要更新为span$(k, i)$的指针数组。</p>\n<h2 id=\"Beam-Search和Cube-Pruning\"><a href=\"#Beam-Search和Cube-Pruning\" class=\"headerlink\" title=\"Beam Search和Cube Pruning\"></a>Beam Search和Cube Pruning</h2><p>在每个时刻，只保存prefix得分最高的前b个span状态，这样时间复杂度可以降为$nb^2$，但是$b^2$相对于句子长度来说还是太大了，所以采用cube pruning继续降到$nb \\log b$。</p>\n<p>cube pruning原理是这样的：普通的beam search每个时刻枚举至多b个span，每个span和之前的至多b个span结合，所以一共最多产生$b^2$个span。</p>\n<p>而cube pruning在每个时刻都建立一个堆，首先用上一个时刻的beam里的b个span，来产生b个SHIFT的span，送入堆里。理论上来说还应该产生至多$b^2$个REDUCE的span，但是在这里对于每个span，只取它的指针数组里得分最高的那个span，来和它结合产生新的span，送入堆里。然后在产生好的堆里，每次取出得分最高的span，出堆，如果它是REDUCE得到的span，那么就继续按照它的指针数组得分从高到低顺序产生一个span，REDUCE完之后送入堆里。依次下去，直到出栈了b个span为止。</p>\n<h1 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h1><hr>\n<p>还是使用max-margin loss来训练，但是有几点小小的改进。</p>\n<h2 id=\"cross-span损失\"><a href=\"#cross-span损失\" class=\"headerlink\" title=\"cross-span损失\"></a>cross-span损失</h2><p>以往的损失函数里有个$\\Delta (t,t’)$，衡量的是预测树和标准树不同的span的数量。但是这有个问题，因为用了隐式二叉化，所以在预测树里存在label为空的情况。如果这个span在标准树中label也是空，那么原来的损失就不惩罚这一项了，但是要考虑到如果这个span在标准树中与某个标准的span产生了交叉，那么它根本就不可能是对的，也得进行惩罚。</p>\n<h2 id=\"max-violation-updates\"><a href=\"#max-violation-updates\" class=\"headerlink\" title=\"max violation updates\"></a>max violation updates</h2><p>这是huang liang在2012提出来的，其实就是计算出每个时刻预测得分和标准得分的差距，然后取差距最大的那个时刻的得分差距作为最终的损失函数，之前都是用每个时刻得分差距之和来作为损失函数的。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>下图是不同的beam大小对不同长度句子分析速度的影响：<br><img src=\"2.jpg\" alt><br>最终综合考虑速度和准确率，选择beam大小为20。</p>\n<p>最后是beam-span模型在PTB测试集上的准确率，在单模型上取得了最好的结果：<br><img src=\"3.jpg\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文是短论文，所以相比之下创新没有那么的大吧，主要还是速度上比chart-based有了提升，准确率上比普通的转移系统有了提升，另外还提出了几点小的改进吧，例如cross-span问题、max-violation损失之类的，转移系统也改成了适合用来进行beam search的GSS，为了进一步加快速度，还用了cube剪枝。</p>\n<p>这么多改进其实个人感觉也是影响不大的，不是很通用，cross-span和max-violation损失可以考虑拿来用一下。下一步的工作还是考虑如何增加特征表示、加入头结点之类的吧。</p>\n"},{"title":"A Minimal Span-Based Neural Constituency Parser","date":"2018-06-28T09:10:59.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=41500990&auto=1&height=66\"></iframe></div>\n\n论文地址：[ACL17](https://www.aclweb.org/anthology/P/P17/P17-1076.pdf)\n代码地址：[github](https://github.com/mitchellstern/minimal-span-parser)\n\n今天要分享的是伯克利2017年发表在ACL的一篇成分句法分析论文，论文和代码地址都已经放在上面了，代码里还给出了处理过的PTB数据集，使用起来非常方便。\n\n# 摘要\n---\n本文提出了一种不同于传统方法的成分句法分析方法。\n\n传统的句法分析器需要预处理出语法规则集合，然后利用语法规则来进行各种句法分析，这类方法的弊端有很多，我列举了主要的三点：\n* 语法规则集合构造的好坏直接影响到分析效果的好坏。\n* 不仅如此，利用语法规则的方法时间复杂度高，因为每次都要遍历一遍语法规则集合来决定每个短语采用哪一条语法规则。\n* 还有一种弊端就是利用语法规则的方法无法产生新的产生式，也就是说如果测试集中的语法规则没有在训练集中出现过，那么是无法预测出来的。\n\n而本文提出的模型不需要预先构造出语法规则集合，只需要预测出每个短语的label和split就行了，这样就能构造出一棵完整的句法树。\n\n该模型分为编码与解码两部分，其中编码部分就是利用双向LSTM将每个词和短语表示成向量，解码部分提出了两种模型，一种是chart模型，类似于CKY算法，另一种是top-down模型，就是自顶向下的贪心算法，具体模型之后介绍。\n\n# 编码模型\n---\n一棵句法分析树可以看做是$(label, span)$的集合，也就是句法树中的每一个结点的类别是label，该结点对应的短语在句子中的下标范围就是span。所以模型的任务就是要预测这个集合，给每一个label和span一个得分，找出使得一个句子得分最高的$(label, span)$集合即可。\n\n那么我们的编码模型任务就是要得出每一个短语的表示，并将其转换为短语的label得分和span得分。这里用到的就是最简单的双向LSTM，对于句子的第$i$个位置，得到它的双向表示$f_i$和$b_i$，那么$span(i,j)$就可以表示为$[f_j-f_i,b_i-b_j]$。\n\n然后将短语表示输入到两个单独的单层前馈神经网络中，就能分别得到label得分和span得分了。假设用$s_{ij}$表示$span(i,j)$的短语表示，那么label得分和span得分可以分别表示为：\n\\\\[\\begin{array}{\\*{20}{l}}{ {s_{labels}}(i,j) = {V_l}g({W_l}{s_{ij}} + {b_l})}\\\\\\ { {s_{span}}(i,j) = {v_s}^{\\rm{T}}g({W_s}{s_{ij}} + {b_s})}\\end{array}\\\\]\n注意到这里计算出来的label得分是一个向量，维数为label的类别数，而span得分计算出来就是一个标量了。而对于某一个特定的类别，它的得分就可以直接从label得分向量中取出对应的那一维就行了：\n\n\\\\[{s_{label}}(i,j,l) = {[{s_{labels}}(i,j)]\\_l}\\\\]\n\n还有个重要的问题就是一元和$n$元的产生式怎么处理，对于一元产生式，可以将所有的类别合并为一个新的类别，然后加入类别集合中共同预测就行了，在实现代码中，将一元的产生式链上面的类别合并成了一个元组作为这棵子树的label。对于$n$元的产生式，可以添加一个临时类别$\\emptyset $，相当于进行了二叉化，所有的新增节点全部预测为$\\emptyset $。\n\n# chart解码模型\n---\nchart模型本质上就是一个动态规划算法，类似于CKY算法。\n\n首先一棵句法树的总得分可以表示为组成它的$(label, span)$集合的label得分与span得分之和：\n\\\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} {[{s_{label}}(i,j,l) + {s_{span}}(i,j)]} \\\\]\n我们目的就是寻找使得该式最大的集合$T$，利用动态规划可以将时间复杂度降到$O(n^3)$。\n\n对于叶子结点的情况，因为没有split，所以我们只需要预测最大得分的label就行了：\n\\\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\\\]\n而对于一般的$span(i,j)$，我们不仅要预测label，还得预测split。对于split$k$，我们可以将split得分表示为：\n\\\\[{s_{split}}(i,k,j) = {s_{span}}(i,k) + {s_{span}}(k,j)\\\\]\n那么最大得分可以表示为：\n\\\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l [{s_{label}}(i,j,l)] + \\mathop {\\max }\\limits_k [{s_{split}}(i,k,j) + {s_{best}}(i,k) + {s_{best}}(k,j)]\\\\]\n这样就可以对label和split单独预测，在实际代码实现中，去掉了${s_{split}}(i,k,j)$这一部分，也就是只预测label得分之和最高的split。这样做的一个好处就是防止了二叉化过程中，从左边开始合并和从右边开始合并得到的分数不一样，从而导致偏差，另外加上这部分效果提升也不大，所以为了简便就删掉了。\n\n训练的话采用的还是Max-Margin：\n\\\\[max\\left( {0,\\Delta (\\hat T,{T^\\*}) - {s_{tree}}({T^\\*}) + {s_{tree}}(\\hat T)} \\right)\\\\]\n至于句法树差异${\\Delta (\\hat T,{T^\\*})}$，可以方便的将${s_{label}}(i,j,l)$替换为${s_{label}}(i,j,l) + {\\bf{1}}(l \\ne l_{ij}^\\*)$，其中$l_{ij}^\\*$就是$span(i,j)$在标准树中的label。\n\n# top-down解码模型\n---\ntop-down模型其实就是自顶向下贪心的选择每一个短语的最大label和split。\n\n其中叶子结点处依然还是直接找得分最高的那一维：\n\\\\[\\hat l = \\mathop {arg\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\\\]\n对于一般的$span(i,j)$，直接贪心的寻找得分最高的label和split就行了：\n\\\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,j)]\\end{array}\\\\]\n虽然这种贪心的方法看上去并不十分科学，但是实际效果却比动态规划算法还要好一点，并且它的时间复杂度只有$O(n^2)$。\n\n下面是top-down模型进行解析的一个例子：\n![](1.png)\n其中$\\emptyset $在构造句法树的时候就直接忽略，最后可以还原成$n$元的产生式。并且一元产生式$S \\to VP$被直接替换为了新的类别$S-VP$。\n\n训练过程类似，对标准树中的每一个$span(i,j)$，分别计算label和split的loss就行了：\n\\\\[\\begin{array}{l}\\max \\left( {0,1 - {s_{label}}(i,j,{l^\\*}) + {s_{label}}(i,j,\\hat l)} \\right)\\\\\\max \\left( {0,1 - {s_{split}}(i,{k^\\*},j) + {s_{split}}(i,\\hat k,j)} \\right)\\end{array}\\\\]\n最后累加求出总的loss即可。\n\n**动态Oracle**\ntop-down模型在每一个$span(i,j)$处都计算出得分最高的label和split，然后与标准树对应的$span(i,j)$作比较，计算出loss。但是这样存在一个很严重的问题，就是如果这个预测出来的$span(i,j)$没有出现在标准树中，那么他在标准树中的label和split是什么呢？这时候就要用到这里提到的动态Oracle技术了。\n\n对于label而言，如果$span(i,j)$出现在标准树中，那么label就是标准树中的label，否则的话就是$\\emptyset $。\n\n对于split而言，定义$b(i,j)$为$span(i,j)$的split集合，因为可能是$n$元的，所以split可能不止一个。如果$span(i,j)$在标准树中，那么$b(i,j)$显然就是标准树中$span(i,j)$的split集合。如果$span(i,j)$不在标准树中，那么就寻找一个标准树中包含$span(i,j)$的最小span，该span的split集合中位于$i,j$之间的split就构成了$b(i,j)$。\n\n形式化定义为，寻找：\n\\\\[({i^\\*},{j^\\*}) = \\min \\left\\{ {(i',j') \\in T:i' \\le i < j \\le j'} \\right\\}\\\\]\n其中这里的最小是定义在区间长度上的偏序关系。所以$b(i,j)$就可以定义为：\n\\\\[b(i,j) = \\left\\{ {k \\in b({i^\\*},{j^\\*}):i < k < j} \\right\\}\\\\]\n\n这样对于任意的$span(i,j)$，都能在标准树中找到对应的split集合，然后计算出loss。这样也能解决因为$n$叉树不同的二叉化导致的不同的split产生的问题。在实际的代码中，直接采用了$b(i,j)$集合中最左边的split作为标准树中的split，当然也可以选择得分最高的一个split，不过提升不大没有必要。\n\n采用动态Oracle有两个好处：\n* 一个就是上面说到的，训练的时候不需要每次都预测的和标准树一样了，就算不一样也能给出评判标准。\n* 另一个就是在预测不准的时候，可以给出在该span里的标准树中的split，这样可以将贪心预测从错误中逐渐“拉回正轨”。\n\n\n\n# 其他的得分计算方法\n---\n**Top-Middle-Bottom label得分**\n其实就是将每个span的label拆分为三元组$(top,middle,bottom)$，主要用来应对一元产生式的：\n* 如果不是一元产生式，那么父结点label就可以写为$(X,\\emptyset,\\emptyset)$。\n* 如果产生式为$X \\to Y$，那么label可以合并写为$(X,\\emptyset,Y)$。\n* 如果产生式为$X \\to {Z_1} \\to  \\cdots  \\to {Z_k} \\to Y$，那么label可以合并写为$(X,{Z_1} -  \\cdots  - {Z_k},Y)$。\n\nlabel的得分也由三部分求和得到：\n\\\\[{s_{label}}(i,j,({l_t},{l_m},{l_b})) = {s_{top}}(i,j,{l_t}) + {s_{middle}}(i,j,{l_m}) + {s_{bottom}}(i,j,{l_b})\\\\]\n求最大得分的时候也可以三部分分开求。\n\n**左右span得分**\n其实就是在计算split得分时，将左右span的得分区别为left和right两部分：\n\\\\[{s_{split}}(i,k,j) = {s_{left}}(i,k) + {s_{right}}(k,j)\\\\]\n\n**span连接得分**\n之前计算split得分都是将左右span得分直接相加，当然也可以将他们拼接起来，输入到单层前馈神经网络里，输出作为得分：\n\\\\[{s_{split}}(i,k,j) = {v^{\\rm{T}}}g({W_s}[{s_{ik}};{s_{kj}}] + {b_s})\\\\]\n\n**深度双仿射span得分**\n首先令${h_{ik}} = {f_{left}}({s_{ik}}),{h_{kj}} = {f_{right}}({s_{kj}})$，然后split得分可以计算为：\n\\\\[{s_{split}}(i,k,j) = h_{ik}^{\\rm{T}}{W_s}{h_{kj}} + v_{left}^{\\rm{T}}{h_{ik}} + v_{right}^{\\rm{T}}{h_{kj}}\\\\]\n\n**结构化label损失**\n对于两个label集合，定义它们之间的结构化Hamming损失为：\n\\\\[\\left| { {l_1}\\backslash {l_2}} \\right| + \\left| { {l_2}\\backslash {l_1}} \\right|\\\\]\n这个loss可以被用在之前的训练过程中。\n\n# 实验\n---\n具体代码细节以及超参数设置请参看代码。\n\n首先实验对不同的得分计算方式以及loss计算方式进行了对比，发现效果最好的chart模型用的是原始label，0-1标签损失，split得分用的是拼接得分，而top-down模型效果最好的是原始label，结构化label损失，split得分用的是左右span得分。\n\n当然提升都不是很大，实验为了简便，用了最简单原始的设置：原始label，0-1标签损失，split得分用的是直接求和。\n\n实验对比结果如下图所示：\n![](2.png)\n\n在PTB数据集上，实验结果都要好于之前的所有parser，结果如下：\n![](3.png)\n\n不仅结果更好，处理速度也有很大提升，chart模型一秒钟能处理20.3句话，top-down模型一秒钟能处理75.5句话。\n\n# 总结\n---\n近些年来，效果最好的成分句法分析器基本都是基于转移系统的，还有诸如基于CRF之类的句法分析器。本文提出的基于span表示与得分，从而进行chart解析或者top-down解析的模型是当时结果最好的模型。而且该模型非常的简单，不再需要复杂的语法规则。模型仍然有很多改进之处，体现在span表示的计算方式，各种得分的计算方式。在下一篇博客中，我将为大家介绍一篇伯克利最新的成分句法分析论文，使用的是自注意力机制的编码器，F1值达到了惊人的95.15%。","source":"_posts/ACL17-ConParsing.md","raw":"---\ntitle: A Minimal Span-Based Neural Constituency Parser\ndate: 2018-06-28 17:10:59\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=41500990&auto=1&height=66\"></iframe></div>\n\n论文地址：[ACL17](https://www.aclweb.org/anthology/P/P17/P17-1076.pdf)\n代码地址：[github](https://github.com/mitchellstern/minimal-span-parser)\n\n今天要分享的是伯克利2017年发表在ACL的一篇成分句法分析论文，论文和代码地址都已经放在上面了，代码里还给出了处理过的PTB数据集，使用起来非常方便。\n\n# 摘要\n---\n本文提出了一种不同于传统方法的成分句法分析方法。\n\n传统的句法分析器需要预处理出语法规则集合，然后利用语法规则来进行各种句法分析，这类方法的弊端有很多，我列举了主要的三点：\n* 语法规则集合构造的好坏直接影响到分析效果的好坏。\n* 不仅如此，利用语法规则的方法时间复杂度高，因为每次都要遍历一遍语法规则集合来决定每个短语采用哪一条语法规则。\n* 还有一种弊端就是利用语法规则的方法无法产生新的产生式，也就是说如果测试集中的语法规则没有在训练集中出现过，那么是无法预测出来的。\n\n而本文提出的模型不需要预先构造出语法规则集合，只需要预测出每个短语的label和split就行了，这样就能构造出一棵完整的句法树。\n\n该模型分为编码与解码两部分，其中编码部分就是利用双向LSTM将每个词和短语表示成向量，解码部分提出了两种模型，一种是chart模型，类似于CKY算法，另一种是top-down模型，就是自顶向下的贪心算法，具体模型之后介绍。\n\n# 编码模型\n---\n一棵句法分析树可以看做是$(label, span)$的集合，也就是句法树中的每一个结点的类别是label，该结点对应的短语在句子中的下标范围就是span。所以模型的任务就是要预测这个集合，给每一个label和span一个得分，找出使得一个句子得分最高的$(label, span)$集合即可。\n\n那么我们的编码模型任务就是要得出每一个短语的表示，并将其转换为短语的label得分和span得分。这里用到的就是最简单的双向LSTM，对于句子的第$i$个位置，得到它的双向表示$f_i$和$b_i$，那么$span(i,j)$就可以表示为$[f_j-f_i,b_i-b_j]$。\n\n然后将短语表示输入到两个单独的单层前馈神经网络中，就能分别得到label得分和span得分了。假设用$s_{ij}$表示$span(i,j)$的短语表示，那么label得分和span得分可以分别表示为：\n\\\\[\\begin{array}{\\*{20}{l}}{ {s_{labels}}(i,j) = {V_l}g({W_l}{s_{ij}} + {b_l})}\\\\\\ { {s_{span}}(i,j) = {v_s}^{\\rm{T}}g({W_s}{s_{ij}} + {b_s})}\\end{array}\\\\]\n注意到这里计算出来的label得分是一个向量，维数为label的类别数，而span得分计算出来就是一个标量了。而对于某一个特定的类别，它的得分就可以直接从label得分向量中取出对应的那一维就行了：\n\n\\\\[{s_{label}}(i,j,l) = {[{s_{labels}}(i,j)]\\_l}\\\\]\n\n还有个重要的问题就是一元和$n$元的产生式怎么处理，对于一元产生式，可以将所有的类别合并为一个新的类别，然后加入类别集合中共同预测就行了，在实现代码中，将一元的产生式链上面的类别合并成了一个元组作为这棵子树的label。对于$n$元的产生式，可以添加一个临时类别$\\emptyset $，相当于进行了二叉化，所有的新增节点全部预测为$\\emptyset $。\n\n# chart解码模型\n---\nchart模型本质上就是一个动态规划算法，类似于CKY算法。\n\n首先一棵句法树的总得分可以表示为组成它的$(label, span)$集合的label得分与span得分之和：\n\\\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} {[{s_{label}}(i,j,l) + {s_{span}}(i,j)]} \\\\]\n我们目的就是寻找使得该式最大的集合$T$，利用动态规划可以将时间复杂度降到$O(n^3)$。\n\n对于叶子结点的情况，因为没有split，所以我们只需要预测最大得分的label就行了：\n\\\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\\\]\n而对于一般的$span(i,j)$，我们不仅要预测label，还得预测split。对于split$k$，我们可以将split得分表示为：\n\\\\[{s_{split}}(i,k,j) = {s_{span}}(i,k) + {s_{span}}(k,j)\\\\]\n那么最大得分可以表示为：\n\\\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l [{s_{label}}(i,j,l)] + \\mathop {\\max }\\limits_k [{s_{split}}(i,k,j) + {s_{best}}(i,k) + {s_{best}}(k,j)]\\\\]\n这样就可以对label和split单独预测，在实际代码实现中，去掉了${s_{split}}(i,k,j)$这一部分，也就是只预测label得分之和最高的split。这样做的一个好处就是防止了二叉化过程中，从左边开始合并和从右边开始合并得到的分数不一样，从而导致偏差，另外加上这部分效果提升也不大，所以为了简便就删掉了。\n\n训练的话采用的还是Max-Margin：\n\\\\[max\\left( {0,\\Delta (\\hat T,{T^\\*}) - {s_{tree}}({T^\\*}) + {s_{tree}}(\\hat T)} \\right)\\\\]\n至于句法树差异${\\Delta (\\hat T,{T^\\*})}$，可以方便的将${s_{label}}(i,j,l)$替换为${s_{label}}(i,j,l) + {\\bf{1}}(l \\ne l_{ij}^\\*)$，其中$l_{ij}^\\*$就是$span(i,j)$在标准树中的label。\n\n# top-down解码模型\n---\ntop-down模型其实就是自顶向下贪心的选择每一个短语的最大label和split。\n\n其中叶子结点处依然还是直接找得分最高的那一维：\n\\\\[\\hat l = \\mathop {arg\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\\\]\n对于一般的$span(i,j)$，直接贪心的寻找得分最高的label和split就行了：\n\\\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,j)]\\end{array}\\\\]\n虽然这种贪心的方法看上去并不十分科学，但是实际效果却比动态规划算法还要好一点，并且它的时间复杂度只有$O(n^2)$。\n\n下面是top-down模型进行解析的一个例子：\n![](1.png)\n其中$\\emptyset $在构造句法树的时候就直接忽略，最后可以还原成$n$元的产生式。并且一元产生式$S \\to VP$被直接替换为了新的类别$S-VP$。\n\n训练过程类似，对标准树中的每一个$span(i,j)$，分别计算label和split的loss就行了：\n\\\\[\\begin{array}{l}\\max \\left( {0,1 - {s_{label}}(i,j,{l^\\*}) + {s_{label}}(i,j,\\hat l)} \\right)\\\\\\max \\left( {0,1 - {s_{split}}(i,{k^\\*},j) + {s_{split}}(i,\\hat k,j)} \\right)\\end{array}\\\\]\n最后累加求出总的loss即可。\n\n**动态Oracle**\ntop-down模型在每一个$span(i,j)$处都计算出得分最高的label和split，然后与标准树对应的$span(i,j)$作比较，计算出loss。但是这样存在一个很严重的问题，就是如果这个预测出来的$span(i,j)$没有出现在标准树中，那么他在标准树中的label和split是什么呢？这时候就要用到这里提到的动态Oracle技术了。\n\n对于label而言，如果$span(i,j)$出现在标准树中，那么label就是标准树中的label，否则的话就是$\\emptyset $。\n\n对于split而言，定义$b(i,j)$为$span(i,j)$的split集合，因为可能是$n$元的，所以split可能不止一个。如果$span(i,j)$在标准树中，那么$b(i,j)$显然就是标准树中$span(i,j)$的split集合。如果$span(i,j)$不在标准树中，那么就寻找一个标准树中包含$span(i,j)$的最小span，该span的split集合中位于$i,j$之间的split就构成了$b(i,j)$。\n\n形式化定义为，寻找：\n\\\\[({i^\\*},{j^\\*}) = \\min \\left\\{ {(i',j') \\in T:i' \\le i < j \\le j'} \\right\\}\\\\]\n其中这里的最小是定义在区间长度上的偏序关系。所以$b(i,j)$就可以定义为：\n\\\\[b(i,j) = \\left\\{ {k \\in b({i^\\*},{j^\\*}):i < k < j} \\right\\}\\\\]\n\n这样对于任意的$span(i,j)$，都能在标准树中找到对应的split集合，然后计算出loss。这样也能解决因为$n$叉树不同的二叉化导致的不同的split产生的问题。在实际的代码中，直接采用了$b(i,j)$集合中最左边的split作为标准树中的split，当然也可以选择得分最高的一个split，不过提升不大没有必要。\n\n采用动态Oracle有两个好处：\n* 一个就是上面说到的，训练的时候不需要每次都预测的和标准树一样了，就算不一样也能给出评判标准。\n* 另一个就是在预测不准的时候，可以给出在该span里的标准树中的split，这样可以将贪心预测从错误中逐渐“拉回正轨”。\n\n\n\n# 其他的得分计算方法\n---\n**Top-Middle-Bottom label得分**\n其实就是将每个span的label拆分为三元组$(top,middle,bottom)$，主要用来应对一元产生式的：\n* 如果不是一元产生式，那么父结点label就可以写为$(X,\\emptyset,\\emptyset)$。\n* 如果产生式为$X \\to Y$，那么label可以合并写为$(X,\\emptyset,Y)$。\n* 如果产生式为$X \\to {Z_1} \\to  \\cdots  \\to {Z_k} \\to Y$，那么label可以合并写为$(X,{Z_1} -  \\cdots  - {Z_k},Y)$。\n\nlabel的得分也由三部分求和得到：\n\\\\[{s_{label}}(i,j,({l_t},{l_m},{l_b})) = {s_{top}}(i,j,{l_t}) + {s_{middle}}(i,j,{l_m}) + {s_{bottom}}(i,j,{l_b})\\\\]\n求最大得分的时候也可以三部分分开求。\n\n**左右span得分**\n其实就是在计算split得分时，将左右span的得分区别为left和right两部分：\n\\\\[{s_{split}}(i,k,j) = {s_{left}}(i,k) + {s_{right}}(k,j)\\\\]\n\n**span连接得分**\n之前计算split得分都是将左右span得分直接相加，当然也可以将他们拼接起来，输入到单层前馈神经网络里，输出作为得分：\n\\\\[{s_{split}}(i,k,j) = {v^{\\rm{T}}}g({W_s}[{s_{ik}};{s_{kj}}] + {b_s})\\\\]\n\n**深度双仿射span得分**\n首先令${h_{ik}} = {f_{left}}({s_{ik}}),{h_{kj}} = {f_{right}}({s_{kj}})$，然后split得分可以计算为：\n\\\\[{s_{split}}(i,k,j) = h_{ik}^{\\rm{T}}{W_s}{h_{kj}} + v_{left}^{\\rm{T}}{h_{ik}} + v_{right}^{\\rm{T}}{h_{kj}}\\\\]\n\n**结构化label损失**\n对于两个label集合，定义它们之间的结构化Hamming损失为：\n\\\\[\\left| { {l_1}\\backslash {l_2}} \\right| + \\left| { {l_2}\\backslash {l_1}} \\right|\\\\]\n这个loss可以被用在之前的训练过程中。\n\n# 实验\n---\n具体代码细节以及超参数设置请参看代码。\n\n首先实验对不同的得分计算方式以及loss计算方式进行了对比，发现效果最好的chart模型用的是原始label，0-1标签损失，split得分用的是拼接得分，而top-down模型效果最好的是原始label，结构化label损失，split得分用的是左右span得分。\n\n当然提升都不是很大，实验为了简便，用了最简单原始的设置：原始label，0-1标签损失，split得分用的是直接求和。\n\n实验对比结果如下图所示：\n![](2.png)\n\n在PTB数据集上，实验结果都要好于之前的所有parser，结果如下：\n![](3.png)\n\n不仅结果更好，处理速度也有很大提升，chart模型一秒钟能处理20.3句话，top-down模型一秒钟能处理75.5句话。\n\n# 总结\n---\n近些年来，效果最好的成分句法分析器基本都是基于转移系统的，还有诸如基于CRF之类的句法分析器。本文提出的基于span表示与得分，从而进行chart解析或者top-down解析的模型是当时结果最好的模型。而且该模型非常的简单，不再需要复杂的语法规则。模型仍然有很多改进之处，体现在span表示的计算方式，各种得分的计算方式。在下一篇博客中，我将为大家介绍一篇伯克利最新的成分句法分析论文，使用的是自注意力机制的编码器，F1值达到了惊人的95.15%。","slug":"ACL17-ConParsing","published":1,"updated":"2019-07-20T04:01:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9822x00077swexxx0bn1b","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=41500990&auto=1&height=66\"></iframe></div>\n\n<p>论文地址：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-1076.pdf\" target=\"_blank\" rel=\"noopener\">ACL17</a><br>代码地址：<a href=\"https://github.com/mitchellstern/minimal-span-parser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要分享的是伯克利2017年发表在ACL的一篇成分句法分析论文，论文和代码地址都已经放在上面了，代码里还给出了处理过的PTB数据集，使用起来非常方便。</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>本文提出了一种不同于传统方法的成分句法分析方法。</p>\n<p>传统的句法分析器需要预处理出语法规则集合，然后利用语法规则来进行各种句法分析，这类方法的弊端有很多，我列举了主要的三点：</p>\n<ul>\n<li>语法规则集合构造的好坏直接影响到分析效果的好坏。</li>\n<li>不仅如此，利用语法规则的方法时间复杂度高，因为每次都要遍历一遍语法规则集合来决定每个短语采用哪一条语法规则。</li>\n<li>还有一种弊端就是利用语法规则的方法无法产生新的产生式，也就是说如果测试集中的语法规则没有在训练集中出现过，那么是无法预测出来的。</li>\n</ul>\n<p>而本文提出的模型不需要预先构造出语法规则集合，只需要预测出每个短语的label和split就行了，这样就能构造出一棵完整的句法树。</p>\n<p>该模型分为编码与解码两部分，其中编码部分就是利用双向LSTM将每个词和短语表示成向量，解码部分提出了两种模型，一种是chart模型，类似于CKY算法，另一种是top-down模型，就是自顶向下的贪心算法，具体模型之后介绍。</p>\n<h1 id=\"编码模型\"><a href=\"#编码模型\" class=\"headerlink\" title=\"编码模型\"></a>编码模型</h1><hr>\n<p>一棵句法分析树可以看做是$(label, span)$的集合，也就是句法树中的每一个结点的类别是label，该结点对应的短语在句子中的下标范围就是span。所以模型的任务就是要预测这个集合，给每一个label和span一个得分，找出使得一个句子得分最高的$(label, span)$集合即可。</p>\n<p>那么我们的编码模型任务就是要得出每一个短语的表示，并将其转换为短语的label得分和span得分。这里用到的就是最简单的双向LSTM，对于句子的第$i$个位置，得到它的双向表示$f_i$和$b_i$，那么$span(i,j)$就可以表示为$[f_j-f_i,b_i-b_j]$。</p>\n<p>然后将短语表示输入到两个单独的单层前馈神经网络中，就能分别得到label得分和span得分了。假设用$s_{ij}$表示$span(i,j)$的短语表示，那么label得分和span得分可以分别表示为：<br>\\[\\begin{array}{*{20}{l}}{ {s_{labels}}(i,j) = {V_l}g({W_l}{s_{ij}} + {b_l})}\\\\\\ { {s_{span}}(i,j) = {v_s}^{\\rm{T}}g({W_s}{s_{ij}} + {b_s})}\\end{array}\\]<br>注意到这里计算出来的label得分是一个向量，维数为label的类别数，而span得分计算出来就是一个标量了。而对于某一个特定的类别，它的得分就可以直接从label得分向量中取出对应的那一维就行了：</p>\n<p>\\[{s_{label}}(i,j,l) = {[{s_{labels}}(i,j)]_l}\\]</p>\n<p>还有个重要的问题就是一元和$n$元的产生式怎么处理，对于一元产生式，可以将所有的类别合并为一个新的类别，然后加入类别集合中共同预测就行了，在实现代码中，将一元的产生式链上面的类别合并成了一个元组作为这棵子树的label。对于$n$元的产生式，可以添加一个临时类别$\\emptyset $，相当于进行了二叉化，所有的新增节点全部预测为$\\emptyset $。</p>\n<h1 id=\"chart解码模型\"><a href=\"#chart解码模型\" class=\"headerlink\" title=\"chart解码模型\"></a>chart解码模型</h1><hr>\n<p>chart模型本质上就是一个动态规划算法，类似于CKY算法。</p>\n<p>首先一棵句法树的总得分可以表示为组成它的$(label, span)$集合的label得分与span得分之和：<br>\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} {[{s_{label}}(i,j,l) + {s_{span}}(i,j)]} \\]<br>我们目的就是寻找使得该式最大的集合$T$，利用动态规划可以将时间复杂度降到$O(n^3)$。</p>\n<p>对于叶子结点的情况，因为没有split，所以我们只需要预测最大得分的label就行了：<br>\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\]<br>而对于一般的$span(i,j)$，我们不仅要预测label，还得预测split。对于split$k$，我们可以将split得分表示为：<br>\\[{s_{split}}(i,k,j) = {s_{span}}(i,k) + {s_{span}}(k,j)\\]<br>那么最大得分可以表示为：<br>\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l [{s_{label}}(i,j,l)] + \\mathop {\\max }\\limits_k [{s_{split}}(i,k,j) + {s_{best}}(i,k) + {s_{best}}(k,j)]\\]<br>这样就可以对label和split单独预测，在实际代码实现中，去掉了${s_{split}}(i,k,j)$这一部分，也就是只预测label得分之和最高的split。这样做的一个好处就是防止了二叉化过程中，从左边开始合并和从右边开始合并得到的分数不一样，从而导致偏差，另外加上这部分效果提升也不大，所以为了简便就删掉了。</p>\n<p>训练的话采用的还是Max-Margin：<br>\\[max\\left( {0,\\Delta (\\hat T,{T^*}) - {s_{tree}}({T^*}) + {s_{tree}}(\\hat T)} \\right)\\]<br>至于句法树差异${\\Delta (\\hat T,{T^*})}$，可以方便的将${s_{label}}(i,j,l)$替换为${s_{label}}(i,j,l) + {\\bf{1}}(l \\ne l_{ij}^*)$，其中$l_{ij}^*$就是$span(i,j)$在标准树中的label。</p>\n<h1 id=\"top-down解码模型\"><a href=\"#top-down解码模型\" class=\"headerlink\" title=\"top-down解码模型\"></a>top-down解码模型</h1><hr>\n<p>top-down模型其实就是自顶向下贪心的选择每一个短语的最大label和split。</p>\n<p>其中叶子结点处依然还是直接找得分最高的那一维：<br>\\[\\hat l = \\mathop {arg\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\]<br>对于一般的$span(i,j)$，直接贪心的寻找得分最高的label和split就行了：<br>\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,j)]\\end{array}\\]<br>虽然这种贪心的方法看上去并不十分科学，但是实际效果却比动态规划算法还要好一点，并且它的时间复杂度只有$O(n^2)$。</p>\n<p>下面是top-down模型进行解析的一个例子：<br><img src=\"1.png\" alt><br>其中$\\emptyset $在构造句法树的时候就直接忽略，最后可以还原成$n$元的产生式。并且一元产生式$S \\to VP$被直接替换为了新的类别$S-VP$。</p>\n<p>训练过程类似，对标准树中的每一个$span(i,j)$，分别计算label和split的loss就行了：<br>\\[\\begin{array}{l}\\max \\left( {0,1 - {s_{label}}(i,j,{l^*}) + {s_{label}}(i,j,\\hat l)} \\right)\\\\\\max \\left( {0,1 - {s_{split}}(i,{k^*},j) + {s_{split}}(i,\\hat k,j)} \\right)\\end{array}\\]<br>最后累加求出总的loss即可。</p>\n<p><strong>动态Oracle</strong><br>top-down模型在每一个$span(i,j)$处都计算出得分最高的label和split，然后与标准树对应的$span(i,j)$作比较，计算出loss。但是这样存在一个很严重的问题，就是如果这个预测出来的$span(i,j)$没有出现在标准树中，那么他在标准树中的label和split是什么呢？这时候就要用到这里提到的动态Oracle技术了。</p>\n<p>对于label而言，如果$span(i,j)$出现在标准树中，那么label就是标准树中的label，否则的话就是$\\emptyset $。</p>\n<p>对于split而言，定义$b(i,j)$为$span(i,j)$的split集合，因为可能是$n$元的，所以split可能不止一个。如果$span(i,j)$在标准树中，那么$b(i,j)$显然就是标准树中$span(i,j)$的split集合。如果$span(i,j)$不在标准树中，那么就寻找一个标准树中包含$span(i,j)$的最小span，该span的split集合中位于$i,j$之间的split就构成了$b(i,j)$。</p>\n<p>形式化定义为，寻找：<br>\\[({i^*},{j^*}) = \\min \\left\\{ {(i’,j’) \\in T:i’ \\le i &lt; j \\le j’} \\right\\}\\]<br>其中这里的最小是定义在区间长度上的偏序关系。所以$b(i,j)$就可以定义为：<br>\\[b(i,j) = \\left\\{ {k \\in b({i^*},{j^*}):i &lt; k &lt; j} \\right\\}\\]</p>\n<p>这样对于任意的$span(i,j)$，都能在标准树中找到对应的split集合，然后计算出loss。这样也能解决因为$n$叉树不同的二叉化导致的不同的split产生的问题。在实际的代码中，直接采用了$b(i,j)$集合中最左边的split作为标准树中的split，当然也可以选择得分最高的一个split，不过提升不大没有必要。</p>\n<p>采用动态Oracle有两个好处：</p>\n<ul>\n<li>一个就是上面说到的，训练的时候不需要每次都预测的和标准树一样了，就算不一样也能给出评判标准。</li>\n<li>另一个就是在预测不准的时候，可以给出在该span里的标准树中的split，这样可以将贪心预测从错误中逐渐“拉回正轨”。</li>\n</ul>\n<h1 id=\"其他的得分计算方法\"><a href=\"#其他的得分计算方法\" class=\"headerlink\" title=\"其他的得分计算方法\"></a>其他的得分计算方法</h1><hr>\n<p><strong>Top-Middle-Bottom label得分</strong><br>其实就是将每个span的label拆分为三元组$(top,middle,bottom)$，主要用来应对一元产生式的：</p>\n<ul>\n<li>如果不是一元产生式，那么父结点label就可以写为$(X,\\emptyset,\\emptyset)$。</li>\n<li>如果产生式为$X \\to Y$，那么label可以合并写为$(X,\\emptyset,Y)$。</li>\n<li>如果产生式为$X \\to {Z_1} \\to  \\cdots  \\to {Z_k} \\to Y$，那么label可以合并写为$(X,{Z_1} -  \\cdots  - {Z_k},Y)$。</li>\n</ul>\n<p>label的得分也由三部分求和得到：<br>\\[{s_{label}}(i,j,({l_t},{l_m},{l_b})) = {s_{top}}(i,j,{l_t}) + {s_{middle}}(i,j,{l_m}) + {s_{bottom}}(i,j,{l_b})\\]<br>求最大得分的时候也可以三部分分开求。</p>\n<p><strong>左右span得分</strong><br>其实就是在计算split得分时，将左右span的得分区别为left和right两部分：<br>\\[{s_{split}}(i,k,j) = {s_{left}}(i,k) + {s_{right}}(k,j)\\]</p>\n<p><strong>span连接得分</strong><br>之前计算split得分都是将左右span得分直接相加，当然也可以将他们拼接起来，输入到单层前馈神经网络里，输出作为得分：<br>\\[{s_{split}}(i,k,j) = {v^{\\rm{T}}}g({W_s}[{s_{ik}};{s_{kj}}] + {b_s})\\]</p>\n<p><strong>深度双仿射span得分</strong><br>首先令${h_{ik}} = {f_{left}}({s_{ik}}),{h_{kj}} = {f_{right}}({s_{kj}})$，然后split得分可以计算为：<br>\\[{s_{split}}(i,k,j) = h_{ik}^{\\rm{T}}{W_s}{h_{kj}} + v_{left}^{\\rm{T}}{h_{ik}} + v_{right}^{\\rm{T}}{h_{kj}}\\]</p>\n<p><strong>结构化label损失</strong><br>对于两个label集合，定义它们之间的结构化Hamming损失为：<br>\\[\\left| { {l_1}\\backslash {l_2}} \\right| + \\left| { {l_2}\\backslash {l_1}} \\right|\\]<br>这个loss可以被用在之前的训练过程中。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>具体代码细节以及超参数设置请参看代码。</p>\n<p>首先实验对不同的得分计算方式以及loss计算方式进行了对比，发现效果最好的chart模型用的是原始label，0-1标签损失，split得分用的是拼接得分，而top-down模型效果最好的是原始label，结构化label损失，split得分用的是左右span得分。</p>\n<p>当然提升都不是很大，实验为了简便，用了最简单原始的设置：原始label，0-1标签损失，split得分用的是直接求和。</p>\n<p>实验对比结果如下图所示：<br><img src=\"2.png\" alt></p>\n<p>在PTB数据集上，实验结果都要好于之前的所有parser，结果如下：<br><img src=\"3.png\" alt></p>\n<p>不仅结果更好，处理速度也有很大提升，chart模型一秒钟能处理20.3句话，top-down模型一秒钟能处理75.5句话。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>近些年来，效果最好的成分句法分析器基本都是基于转移系统的，还有诸如基于CRF之类的句法分析器。本文提出的基于span表示与得分，从而进行chart解析或者top-down解析的模型是当时结果最好的模型。而且该模型非常的简单，不再需要复杂的语法规则。模型仍然有很多改进之处，体现在span表示的计算方式，各种得分的计算方式。在下一篇博客中，我将为大家介绍一篇伯克利最新的成分句法分析论文，使用的是自注意力机制的编码器，F1值达到了惊人的95.15%。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=41500990&auto=1&height=66\"></iframe></div>\n\n<p>论文地址：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-1076.pdf\" target=\"_blank\" rel=\"noopener\">ACL17</a><br>代码地址：<a href=\"https://github.com/mitchellstern/minimal-span-parser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要分享的是伯克利2017年发表在ACL的一篇成分句法分析论文，论文和代码地址都已经放在上面了，代码里还给出了处理过的PTB数据集，使用起来非常方便。</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>本文提出了一种不同于传统方法的成分句法分析方法。</p>\n<p>传统的句法分析器需要预处理出语法规则集合，然后利用语法规则来进行各种句法分析，这类方法的弊端有很多，我列举了主要的三点：</p>\n<ul>\n<li>语法规则集合构造的好坏直接影响到分析效果的好坏。</li>\n<li>不仅如此，利用语法规则的方法时间复杂度高，因为每次都要遍历一遍语法规则集合来决定每个短语采用哪一条语法规则。</li>\n<li>还有一种弊端就是利用语法规则的方法无法产生新的产生式，也就是说如果测试集中的语法规则没有在训练集中出现过，那么是无法预测出来的。</li>\n</ul>\n<p>而本文提出的模型不需要预先构造出语法规则集合，只需要预测出每个短语的label和split就行了，这样就能构造出一棵完整的句法树。</p>\n<p>该模型分为编码与解码两部分，其中编码部分就是利用双向LSTM将每个词和短语表示成向量，解码部分提出了两种模型，一种是chart模型，类似于CKY算法，另一种是top-down模型，就是自顶向下的贪心算法，具体模型之后介绍。</p>\n<h1 id=\"编码模型\"><a href=\"#编码模型\" class=\"headerlink\" title=\"编码模型\"></a>编码模型</h1><hr>\n<p>一棵句法分析树可以看做是$(label, span)$的集合，也就是句法树中的每一个结点的类别是label，该结点对应的短语在句子中的下标范围就是span。所以模型的任务就是要预测这个集合，给每一个label和span一个得分，找出使得一个句子得分最高的$(label, span)$集合即可。</p>\n<p>那么我们的编码模型任务就是要得出每一个短语的表示，并将其转换为短语的label得分和span得分。这里用到的就是最简单的双向LSTM，对于句子的第$i$个位置，得到它的双向表示$f_i$和$b_i$，那么$span(i,j)$就可以表示为$[f_j-f_i,b_i-b_j]$。</p>\n<p>然后将短语表示输入到两个单独的单层前馈神经网络中，就能分别得到label得分和span得分了。假设用$s_{ij}$表示$span(i,j)$的短语表示，那么label得分和span得分可以分别表示为：<br>\\[\\begin{array}{*{20}{l}}{ {s_{labels}}(i,j) = {V_l}g({W_l}{s_{ij}} + {b_l})}\\\\\\ { {s_{span}}(i,j) = {v_s}^{\\rm{T}}g({W_s}{s_{ij}} + {b_s})}\\end{array}\\]<br>注意到这里计算出来的label得分是一个向量，维数为label的类别数，而span得分计算出来就是一个标量了。而对于某一个特定的类别，它的得分就可以直接从label得分向量中取出对应的那一维就行了：</p>\n<p>\\[{s_{label}}(i,j,l) = {[{s_{labels}}(i,j)]_l}\\]</p>\n<p>还有个重要的问题就是一元和$n$元的产生式怎么处理，对于一元产生式，可以将所有的类别合并为一个新的类别，然后加入类别集合中共同预测就行了，在实现代码中，将一元的产生式链上面的类别合并成了一个元组作为这棵子树的label。对于$n$元的产生式，可以添加一个临时类别$\\emptyset $，相当于进行了二叉化，所有的新增节点全部预测为$\\emptyset $。</p>\n<h1 id=\"chart解码模型\"><a href=\"#chart解码模型\" class=\"headerlink\" title=\"chart解码模型\"></a>chart解码模型</h1><hr>\n<p>chart模型本质上就是一个动态规划算法，类似于CKY算法。</p>\n<p>首先一棵句法树的总得分可以表示为组成它的$(label, span)$集合的label得分与span得分之和：<br>\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} {[{s_{label}}(i,j,l) + {s_{span}}(i,j)]} \\]<br>我们目的就是寻找使得该式最大的集合$T$，利用动态规划可以将时间复杂度降到$O(n^3)$。</p>\n<p>对于叶子结点的情况，因为没有split，所以我们只需要预测最大得分的label就行了：<br>\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\]<br>而对于一般的$span(i,j)$，我们不仅要预测label，还得预测split。对于split$k$，我们可以将split得分表示为：<br>\\[{s_{split}}(i,k,j) = {s_{span}}(i,k) + {s_{span}}(k,j)\\]<br>那么最大得分可以表示为：<br>\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l [{s_{label}}(i,j,l)] + \\mathop {\\max }\\limits_k [{s_{split}}(i,k,j) + {s_{best}}(i,k) + {s_{best}}(k,j)]\\]<br>这样就可以对label和split单独预测，在实际代码实现中，去掉了${s_{split}}(i,k,j)$这一部分，也就是只预测label得分之和最高的split。这样做的一个好处就是防止了二叉化过程中，从左边开始合并和从右边开始合并得到的分数不一样，从而导致偏差，另外加上这部分效果提升也不大，所以为了简便就删掉了。</p>\n<p>训练的话采用的还是Max-Margin：<br>\\[max\\left( {0,\\Delta (\\hat T,{T^*}) - {s_{tree}}({T^*}) + {s_{tree}}(\\hat T)} \\right)\\]<br>至于句法树差异${\\Delta (\\hat T,{T^*})}$，可以方便的将${s_{label}}(i,j,l)$替换为${s_{label}}(i,j,l) + {\\bf{1}}(l \\ne l_{ij}^*)$，其中$l_{ij}^*$就是$span(i,j)$在标准树中的label。</p>\n<h1 id=\"top-down解码模型\"><a href=\"#top-down解码模型\" class=\"headerlink\" title=\"top-down解码模型\"></a>top-down解码模型</h1><hr>\n<p>top-down模型其实就是自顶向下贪心的选择每一个短语的最大label和split。</p>\n<p>其中叶子结点处依然还是直接找得分最高的那一维：<br>\\[\\hat l = \\mathop {arg\\max }\\limits_l [{s_{label}}(i,i + 1,l)]\\]<br>对于一般的$span(i,j)$，直接贪心的寻找得分最高的label和split就行了：<br>\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,j)]\\end{array}\\]<br>虽然这种贪心的方法看上去并不十分科学，但是实际效果却比动态规划算法还要好一点，并且它的时间复杂度只有$O(n^2)$。</p>\n<p>下面是top-down模型进行解析的一个例子：<br><img src=\"1.png\" alt><br>其中$\\emptyset $在构造句法树的时候就直接忽略，最后可以还原成$n$元的产生式。并且一元产生式$S \\to VP$被直接替换为了新的类别$S-VP$。</p>\n<p>训练过程类似，对标准树中的每一个$span(i,j)$，分别计算label和split的loss就行了：<br>\\[\\begin{array}{l}\\max \\left( {0,1 - {s_{label}}(i,j,{l^*}) + {s_{label}}(i,j,\\hat l)} \\right)\\\\\\max \\left( {0,1 - {s_{split}}(i,{k^*},j) + {s_{split}}(i,\\hat k,j)} \\right)\\end{array}\\]<br>最后累加求出总的loss即可。</p>\n<p><strong>动态Oracle</strong><br>top-down模型在每一个$span(i,j)$处都计算出得分最高的label和split，然后与标准树对应的$span(i,j)$作比较，计算出loss。但是这样存在一个很严重的问题，就是如果这个预测出来的$span(i,j)$没有出现在标准树中，那么他在标准树中的label和split是什么呢？这时候就要用到这里提到的动态Oracle技术了。</p>\n<p>对于label而言，如果$span(i,j)$出现在标准树中，那么label就是标准树中的label，否则的话就是$\\emptyset $。</p>\n<p>对于split而言，定义$b(i,j)$为$span(i,j)$的split集合，因为可能是$n$元的，所以split可能不止一个。如果$span(i,j)$在标准树中，那么$b(i,j)$显然就是标准树中$span(i,j)$的split集合。如果$span(i,j)$不在标准树中，那么就寻找一个标准树中包含$span(i,j)$的最小span，该span的split集合中位于$i,j$之间的split就构成了$b(i,j)$。</p>\n<p>形式化定义为，寻找：<br>\\[({i^*},{j^*}) = \\min \\left\\{ {(i’,j’) \\in T:i’ \\le i &lt; j \\le j’} \\right\\}\\]<br>其中这里的最小是定义在区间长度上的偏序关系。所以$b(i,j)$就可以定义为：<br>\\[b(i,j) = \\left\\{ {k \\in b({i^*},{j^*}):i &lt; k &lt; j} \\right\\}\\]</p>\n<p>这样对于任意的$span(i,j)$，都能在标准树中找到对应的split集合，然后计算出loss。这样也能解决因为$n$叉树不同的二叉化导致的不同的split产生的问题。在实际的代码中，直接采用了$b(i,j)$集合中最左边的split作为标准树中的split，当然也可以选择得分最高的一个split，不过提升不大没有必要。</p>\n<p>采用动态Oracle有两个好处：</p>\n<ul>\n<li>一个就是上面说到的，训练的时候不需要每次都预测的和标准树一样了，就算不一样也能给出评判标准。</li>\n<li>另一个就是在预测不准的时候，可以给出在该span里的标准树中的split，这样可以将贪心预测从错误中逐渐“拉回正轨”。</li>\n</ul>\n<h1 id=\"其他的得分计算方法\"><a href=\"#其他的得分计算方法\" class=\"headerlink\" title=\"其他的得分计算方法\"></a>其他的得分计算方法</h1><hr>\n<p><strong>Top-Middle-Bottom label得分</strong><br>其实就是将每个span的label拆分为三元组$(top,middle,bottom)$，主要用来应对一元产生式的：</p>\n<ul>\n<li>如果不是一元产生式，那么父结点label就可以写为$(X,\\emptyset,\\emptyset)$。</li>\n<li>如果产生式为$X \\to Y$，那么label可以合并写为$(X,\\emptyset,Y)$。</li>\n<li>如果产生式为$X \\to {Z_1} \\to  \\cdots  \\to {Z_k} \\to Y$，那么label可以合并写为$(X,{Z_1} -  \\cdots  - {Z_k},Y)$。</li>\n</ul>\n<p>label的得分也由三部分求和得到：<br>\\[{s_{label}}(i,j,({l_t},{l_m},{l_b})) = {s_{top}}(i,j,{l_t}) + {s_{middle}}(i,j,{l_m}) + {s_{bottom}}(i,j,{l_b})\\]<br>求最大得分的时候也可以三部分分开求。</p>\n<p><strong>左右span得分</strong><br>其实就是在计算split得分时，将左右span的得分区别为left和right两部分：<br>\\[{s_{split}}(i,k,j) = {s_{left}}(i,k) + {s_{right}}(k,j)\\]</p>\n<p><strong>span连接得分</strong><br>之前计算split得分都是将左右span得分直接相加，当然也可以将他们拼接起来，输入到单层前馈神经网络里，输出作为得分：<br>\\[{s_{split}}(i,k,j) = {v^{\\rm{T}}}g({W_s}[{s_{ik}};{s_{kj}}] + {b_s})\\]</p>\n<p><strong>深度双仿射span得分</strong><br>首先令${h_{ik}} = {f_{left}}({s_{ik}}),{h_{kj}} = {f_{right}}({s_{kj}})$，然后split得分可以计算为：<br>\\[{s_{split}}(i,k,j) = h_{ik}^{\\rm{T}}{W_s}{h_{kj}} + v_{left}^{\\rm{T}}{h_{ik}} + v_{right}^{\\rm{T}}{h_{kj}}\\]</p>\n<p><strong>结构化label损失</strong><br>对于两个label集合，定义它们之间的结构化Hamming损失为：<br>\\[\\left| { {l_1}\\backslash {l_2}} \\right| + \\left| { {l_2}\\backslash {l_1}} \\right|\\]<br>这个loss可以被用在之前的训练过程中。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>具体代码细节以及超参数设置请参看代码。</p>\n<p>首先实验对不同的得分计算方式以及loss计算方式进行了对比，发现效果最好的chart模型用的是原始label，0-1标签损失，split得分用的是拼接得分，而top-down模型效果最好的是原始label，结构化label损失，split得分用的是左右span得分。</p>\n<p>当然提升都不是很大，实验为了简便，用了最简单原始的设置：原始label，0-1标签损失，split得分用的是直接求和。</p>\n<p>实验对比结果如下图所示：<br><img src=\"2.png\" alt></p>\n<p>在PTB数据集上，实验结果都要好于之前的所有parser，结果如下：<br><img src=\"3.png\" alt></p>\n<p>不仅结果更好，处理速度也有很大提升，chart模型一秒钟能处理20.3句话，top-down模型一秒钟能处理75.5句话。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>近些年来，效果最好的成分句法分析器基本都是基于转移系统的，还有诸如基于CRF之类的句法分析器。本文提出的基于span表示与得分，从而进行chart解析或者top-down解析的模型是当时结果最好的模型。而且该模型非常的简单，不再需要复杂的语法规则。模型仍然有很多改进之处，体现在span表示的计算方式，各种得分的计算方式。在下一篇博客中，我将为大家介绍一篇伯克利最新的成分句法分析论文，使用的是自注意力机制的编码器，F1值达到了惊人的95.15%。</p>\n"},{"title":"Implicitly-Defined Neural Networks for Sequence Labeling","date":"2017-10-24T16:50:25.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"论文链接：[P17-2027](https://www.aclweb.org/anthology/P/P17/P17-2027.pdf)\n\n# 摘要\n---\n这篇论文介绍了一种新奇的、隐式定义神经网络，并且描述了计算它的方法。\n\n# 1 介绍\n---\n传统的双向RNN只能单独计算两个方向的隐含层，现在介绍一种新的机制，将两个方向的信息直接结合起来计算。\n\n# 2 INN\n---\n### 2.1 传统的RNN\n经典的RNN给定一个输入序列$[{\\xi _1},{\\xi _2}, \\ldots ,{\\xi _n}]$和初始隐含层状态${h_s}$，然后迭代产生后续的隐含层状态：\n\\\\[\\begin{array}{l}{h_1} = f({\\xi _1},{h_s})\\\\{h_2} = f({\\xi _2},{h_1})\\\\ \\cdots \\\\{h_n} = f({\\xi _n},{h_{n - 1}})\\end{array}\\\\]LSTM、GRU和其他的相关变体计算方法也都类似，都是像下图这样线性计算，每一时刻的状态只依赖于当前输入和前一时刻的状态。\n![](1.png)\n\n### 2.2 改进结构\n这篇论文中这样计算隐含层状态：\n\\\\[{h_t} = f({\\xi _t},{h_{t - 1}},{h_{t + 1}})\\\\]这样整个隐含层状态序列的等式就是隐式的，记为：\n\\\\[H = [{h_1},{h_2}, \\ldots ,{h_n}]\\\\]在这个神经网络中，定义如下变量：数据$X$、标签$Y$、参数$\\theta$，定义如下函数：\n输入层变换：\n\\\\[\\xi  = g(\\theta ,X)\\\\]隐式隐含层：\n\\\\[H = F(\\theta ,\\xi ,H)\\\\]损失函数：\n\\\\[L = \\ell (\\theta ,H,Y)\\\\]定义${h_s}$和${h_e}$为边界状态，$n$为输入序列长度，$F$函数构造出了一系列非线性等式：\n\\\\[\\begin{array}{l}{h_1} = f({h_s},{h_2},{\\xi _1})\\\\ \\cdots \\\\{h_i} = f({h_{i - 1}},{h_{i + 1}},{\\xi _i})\\\\ \\cdots \\\\{h_n} = f({h_{n - 1}},{h_e},{\\xi _n})\\end{array}\\\\]INN结构如下图：\n![](2.png)\n\n### 2.3 计算前向传播\n为了计算等式$H = F(H)$，采用拟牛顿法。\n令$G = H - F(H)$，转化为计算等式$G = 0$。\n\\\\[\\begin{array}{l}{H_{n + 1}} = {H_n} - {({\\nabla _H}G)^{ - 1}}G\\\\{H_{n + 1}} = {H_n} - {(I - {\\nabla _H}F)^{ - 1}}({H_n} - F({H_n}))\\end{array}\\\\]注意到$(I - {\\nabla _H}F)$是一个稀疏矩阵，所以采用Krylov子空间方法，具体是稳定双共轭梯度法(BICG-STAB)算法来计算。\n\n### 2.4 梯度\n为了训练模型，采用随机梯度下降，定义损失函数：\n\\\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {\\nabla _\\theta }H\\\\]其中\n\\\\[{\\nabla _\\theta }H = {\\nabla _\\theta }F + {\\nabla _H}F{\\nabla _\\theta }H + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi \\\\]所以\n\\\\[{\\nabla _\\theta }H = {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\\\]所以整个梯度就是\n\\\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\\\]\n\n### 2.5 转换函数\n回忆在GRU中，有如下转换函数：\n\\\\[\\begin{array}{l}{h_t} = (1 - {z_t}){ {\\hat h}_t} + {z_t}{ {\\tilde h}_t}\\\\{ {\\tilde h}_t} = \\tanh (W{x_t} + U({r_t}{ {\\hat h}_t}) + \\tilde b)\\\\{z_t} = \\sigma ({W_z}{x_t} + {U_z}{ {\\hat h}_t} + {b_z})\\\\{r_t} = \\sigma ({W_r}{x_t} + {U_r}{ {\\hat h}_t} + {b_r})\\end{array}\\\\]其中在GRU中${ {\\hat h}_t} = {h_{t - 1}}$，在INN中做一个替代：\n\\\\[\\begin{array}{l}{ {\\hat h}_t} = s{h_{t - 1}} + (1 - s){h_{t + 1}}\\\\s = \\frac{ { {s_p}}}{ { {s_p} + {s_n}}}\\\\{s_p} = \\sigma ({W_p}{x_t} + {U_p}{h_{t - 1}} + {b_p})\\\\{s_n} = \\sigma ({W_n}{x_t} + {U_n}{h_{t + 1}} + {b_n})\\end{array}\\\\]\n\n# 3 实验\n---\n### 序列标注\n如下图所示，这个模型的效果甚至比标准的序列标注器还要好！\n![](3.png)\n\n# 4 结论\n---\n介绍了一种隐式定义神经网络，应用到了序列标注任务上，效果比双向LSTM、双向GRU等还要好。\n还有一些工作可以改进，比如可以在双向LSTM上面改造INN，加速计算${(I - {\\nabla _H}F)^{ - 1}}$等等。","source":"_posts/ACL17-2027.md","raw":"---\ntitle: Implicitly-Defined Neural Networks for Sequence Labeling\ndate: 2017-10-25 00:50:25\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 序列标注\ncategories:\n- 序列标注\n---\n论文链接：[P17-2027](https://www.aclweb.org/anthology/P/P17/P17-2027.pdf)\n\n# 摘要\n---\n这篇论文介绍了一种新奇的、隐式定义神经网络，并且描述了计算它的方法。\n\n# 1 介绍\n---\n传统的双向RNN只能单独计算两个方向的隐含层，现在介绍一种新的机制，将两个方向的信息直接结合起来计算。\n\n# 2 INN\n---\n### 2.1 传统的RNN\n经典的RNN给定一个输入序列$[{\\xi _1},{\\xi _2}, \\ldots ,{\\xi _n}]$和初始隐含层状态${h_s}$，然后迭代产生后续的隐含层状态：\n\\\\[\\begin{array}{l}{h_1} = f({\\xi _1},{h_s})\\\\{h_2} = f({\\xi _2},{h_1})\\\\ \\cdots \\\\{h_n} = f({\\xi _n},{h_{n - 1}})\\end{array}\\\\]LSTM、GRU和其他的相关变体计算方法也都类似，都是像下图这样线性计算，每一时刻的状态只依赖于当前输入和前一时刻的状态。\n![](1.png)\n\n### 2.2 改进结构\n这篇论文中这样计算隐含层状态：\n\\\\[{h_t} = f({\\xi _t},{h_{t - 1}},{h_{t + 1}})\\\\]这样整个隐含层状态序列的等式就是隐式的，记为：\n\\\\[H = [{h_1},{h_2}, \\ldots ,{h_n}]\\\\]在这个神经网络中，定义如下变量：数据$X$、标签$Y$、参数$\\theta$，定义如下函数：\n输入层变换：\n\\\\[\\xi  = g(\\theta ,X)\\\\]隐式隐含层：\n\\\\[H = F(\\theta ,\\xi ,H)\\\\]损失函数：\n\\\\[L = \\ell (\\theta ,H,Y)\\\\]定义${h_s}$和${h_e}$为边界状态，$n$为输入序列长度，$F$函数构造出了一系列非线性等式：\n\\\\[\\begin{array}{l}{h_1} = f({h_s},{h_2},{\\xi _1})\\\\ \\cdots \\\\{h_i} = f({h_{i - 1}},{h_{i + 1}},{\\xi _i})\\\\ \\cdots \\\\{h_n} = f({h_{n - 1}},{h_e},{\\xi _n})\\end{array}\\\\]INN结构如下图：\n![](2.png)\n\n### 2.3 计算前向传播\n为了计算等式$H = F(H)$，采用拟牛顿法。\n令$G = H - F(H)$，转化为计算等式$G = 0$。\n\\\\[\\begin{array}{l}{H_{n + 1}} = {H_n} - {({\\nabla _H}G)^{ - 1}}G\\\\{H_{n + 1}} = {H_n} - {(I - {\\nabla _H}F)^{ - 1}}({H_n} - F({H_n}))\\end{array}\\\\]注意到$(I - {\\nabla _H}F)$是一个稀疏矩阵，所以采用Krylov子空间方法，具体是稳定双共轭梯度法(BICG-STAB)算法来计算。\n\n### 2.4 梯度\n为了训练模型，采用随机梯度下降，定义损失函数：\n\\\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {\\nabla _\\theta }H\\\\]其中\n\\\\[{\\nabla _\\theta }H = {\\nabla _\\theta }F + {\\nabla _H}F{\\nabla _\\theta }H + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi \\\\]所以\n\\\\[{\\nabla _\\theta }H = {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\\\]所以整个梯度就是\n\\\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\\\]\n\n### 2.5 转换函数\n回忆在GRU中，有如下转换函数：\n\\\\[\\begin{array}{l}{h_t} = (1 - {z_t}){ {\\hat h}_t} + {z_t}{ {\\tilde h}_t}\\\\{ {\\tilde h}_t} = \\tanh (W{x_t} + U({r_t}{ {\\hat h}_t}) + \\tilde b)\\\\{z_t} = \\sigma ({W_z}{x_t} + {U_z}{ {\\hat h}_t} + {b_z})\\\\{r_t} = \\sigma ({W_r}{x_t} + {U_r}{ {\\hat h}_t} + {b_r})\\end{array}\\\\]其中在GRU中${ {\\hat h}_t} = {h_{t - 1}}$，在INN中做一个替代：\n\\\\[\\begin{array}{l}{ {\\hat h}_t} = s{h_{t - 1}} + (1 - s){h_{t + 1}}\\\\s = \\frac{ { {s_p}}}{ { {s_p} + {s_n}}}\\\\{s_p} = \\sigma ({W_p}{x_t} + {U_p}{h_{t - 1}} + {b_p})\\\\{s_n} = \\sigma ({W_n}{x_t} + {U_n}{h_{t + 1}} + {b_n})\\end{array}\\\\]\n\n# 3 实验\n---\n### 序列标注\n如下图所示，这个模型的效果甚至比标准的序列标注器还要好！\n![](3.png)\n\n# 4 结论\n---\n介绍了一种隐式定义神经网络，应用到了序列标注任务上，效果比双向LSTM、双向GRU等还要好。\n还有一些工作可以改进，比如可以在双向LSTM上面改造INN，加速计算${(I - {\\nabla _H}F)^{ - 1}}$等等。","slug":"ACL17-2027","published":1,"updated":"2019-07-20T04:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk98232000b7swehljmyxdr","content":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-2027.pdf\" target=\"_blank\" rel=\"noopener\">P17-2027</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>这篇论文介绍了一种新奇的、隐式定义神经网络，并且描述了计算它的方法。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>传统的双向RNN只能单独计算两个方向的隐含层，现在介绍一种新的机制，将两个方向的信息直接结合起来计算。</p>\n<h1 id=\"2-INN\"><a href=\"#2-INN\" class=\"headerlink\" title=\"2 INN\"></a>2 INN</h1><hr>\n<h3 id=\"2-1-传统的RNN\"><a href=\"#2-1-传统的RNN\" class=\"headerlink\" title=\"2.1 传统的RNN\"></a>2.1 传统的RNN</h3><p>经典的RNN给定一个输入序列$[{\\xi _1},{\\xi _2}, \\ldots ,{\\xi _n}]$和初始隐含层状态${h_s}$，然后迭代产生后续的隐含层状态：<br>\\[\\begin{array}{l}{h_1} = f({\\xi _1},{h_s})\\\\{h_2} = f({\\xi _2},{h_1})\\\\ \\cdots \\\\{h_n} = f({\\xi _n},{h_{n - 1}})\\end{array}\\]LSTM、GRU和其他的相关变体计算方法也都类似，都是像下图这样线性计算，每一时刻的状态只依赖于当前输入和前一时刻的状态。<br><img src=\"1.png\" alt></p>\n<h3 id=\"2-2-改进结构\"><a href=\"#2-2-改进结构\" class=\"headerlink\" title=\"2.2 改进结构\"></a>2.2 改进结构</h3><p>这篇论文中这样计算隐含层状态：<br>\\[{h_t} = f({\\xi _t},{h_{t - 1}},{h_{t + 1}})\\]这样整个隐含层状态序列的等式就是隐式的，记为：<br>\\[H = [{h_1},{h_2}, \\ldots ,{h_n}]\\]在这个神经网络中，定义如下变量：数据$X$、标签$Y$、参数$\\theta$，定义如下函数：<br>输入层变换：<br>\\[\\xi  = g(\\theta ,X)\\]隐式隐含层：<br>\\[H = F(\\theta ,\\xi ,H)\\]损失函数：<br>\\[L = \\ell (\\theta ,H,Y)\\]定义${h_s}$和${h_e}$为边界状态，$n$为输入序列长度，$F$函数构造出了一系列非线性等式：<br>\\[\\begin{array}{l}{h_1} = f({h_s},{h_2},{\\xi _1})\\\\ \\cdots \\\\{h_i} = f({h_{i - 1}},{h_{i + 1}},{\\xi _i})\\\\ \\cdots \\\\{h_n} = f({h_{n - 1}},{h_e},{\\xi _n})\\end{array}\\]INN结构如下图：<br><img src=\"2.png\" alt></p>\n<h3 id=\"2-3-计算前向传播\"><a href=\"#2-3-计算前向传播\" class=\"headerlink\" title=\"2.3 计算前向传播\"></a>2.3 计算前向传播</h3><p>为了计算等式$H = F(H)$，采用拟牛顿法。<br>令$G = H - F(H)$，转化为计算等式$G = 0$。<br>\\[\\begin{array}{l}{H_{n + 1}} = {H_n} - {({\\nabla _H}G)^{ - 1}}G\\\\{H_{n + 1}} = {H_n} - {(I - {\\nabla _H}F)^{ - 1}}({H_n} - F({H_n}))\\end{array}\\]注意到$(I - {\\nabla _H}F)$是一个稀疏矩阵，所以采用Krylov子空间方法，具体是稳定双共轭梯度法(BICG-STAB)算法来计算。</p>\n<h3 id=\"2-4-梯度\"><a href=\"#2-4-梯度\" class=\"headerlink\" title=\"2.4 梯度\"></a>2.4 梯度</h3><p>为了训练模型，采用随机梯度下降，定义损失函数：<br>\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {\\nabla _\\theta }H\\]其中<br>\\[{\\nabla _\\theta }H = {\\nabla _\\theta }F + {\\nabla _H}F{\\nabla _\\theta }H + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi \\]所以<br>\\[{\\nabla _\\theta }H = {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\]所以整个梯度就是<br>\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\]</p>\n<h3 id=\"2-5-转换函数\"><a href=\"#2-5-转换函数\" class=\"headerlink\" title=\"2.5 转换函数\"></a>2.5 转换函数</h3><p>回忆在GRU中，有如下转换函数：<br>\\[\\begin{array}{l}{h_t} = (1 - {z_t}){ {\\hat h}_t} + {z_t}{ {\\tilde h}_t}\\\\{ {\\tilde h}_t} = \\tanh (W{x_t} + U({r_t}{ {\\hat h}_t}) + \\tilde b)\\\\{z_t} = \\sigma ({W_z}{x_t} + {U_z}{ {\\hat h}_t} + {b_z})\\\\{r_t} = \\sigma ({W_r}{x_t} + {U_r}{ {\\hat h}_t} + {b_r})\\end{array}\\]其中在GRU中${ {\\hat h}_t} = {h_{t - 1}}$，在INN中做一个替代：<br>\\[\\begin{array}{l}{ {\\hat h}_t} = s{h_{t - 1}} + (1 - s){h_{t + 1}}\\\\s = \\frac{ { {s_p}}}{ { {s_p} + {s_n}}}\\\\{s_p} = \\sigma ({W_p}{x_t} + {U_p}{h_{t - 1}} + {b_p})\\\\{s_n} = \\sigma ({W_n}{x_t} + {U_n}{h_{t + 1}} + {b_n})\\end{array}\\]</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3 实验\"></a>3 实验</h1><hr>\n<h3 id=\"序列标注\"><a href=\"#序列标注\" class=\"headerlink\" title=\"序列标注\"></a>序列标注</h3><p>如下图所示，这个模型的效果甚至比标准的序列标注器还要好！<br><img src=\"3.png\" alt></p>\n<h1 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4 结论\"></a>4 结论</h1><hr>\n<p>介绍了一种隐式定义神经网络，应用到了序列标注任务上，效果比双向LSTM、双向GRU等还要好。<br>还有一些工作可以改进，比如可以在双向LSTM上面改造INN，加速计算${(I - {\\nabla _H}F)^{ - 1}}$等等。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-2027.pdf\" target=\"_blank\" rel=\"noopener\">P17-2027</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>这篇论文介绍了一种新奇的、隐式定义神经网络，并且描述了计算它的方法。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>传统的双向RNN只能单独计算两个方向的隐含层，现在介绍一种新的机制，将两个方向的信息直接结合起来计算。</p>\n<h1 id=\"2-INN\"><a href=\"#2-INN\" class=\"headerlink\" title=\"2 INN\"></a>2 INN</h1><hr>\n<h3 id=\"2-1-传统的RNN\"><a href=\"#2-1-传统的RNN\" class=\"headerlink\" title=\"2.1 传统的RNN\"></a>2.1 传统的RNN</h3><p>经典的RNN给定一个输入序列$[{\\xi _1},{\\xi _2}, \\ldots ,{\\xi _n}]$和初始隐含层状态${h_s}$，然后迭代产生后续的隐含层状态：<br>\\[\\begin{array}{l}{h_1} = f({\\xi _1},{h_s})\\\\{h_2} = f({\\xi _2},{h_1})\\\\ \\cdots \\\\{h_n} = f({\\xi _n},{h_{n - 1}})\\end{array}\\]LSTM、GRU和其他的相关变体计算方法也都类似，都是像下图这样线性计算，每一时刻的状态只依赖于当前输入和前一时刻的状态。<br><img src=\"1.png\" alt></p>\n<h3 id=\"2-2-改进结构\"><a href=\"#2-2-改进结构\" class=\"headerlink\" title=\"2.2 改进结构\"></a>2.2 改进结构</h3><p>这篇论文中这样计算隐含层状态：<br>\\[{h_t} = f({\\xi _t},{h_{t - 1}},{h_{t + 1}})\\]这样整个隐含层状态序列的等式就是隐式的，记为：<br>\\[H = [{h_1},{h_2}, \\ldots ,{h_n}]\\]在这个神经网络中，定义如下变量：数据$X$、标签$Y$、参数$\\theta$，定义如下函数：<br>输入层变换：<br>\\[\\xi  = g(\\theta ,X)\\]隐式隐含层：<br>\\[H = F(\\theta ,\\xi ,H)\\]损失函数：<br>\\[L = \\ell (\\theta ,H,Y)\\]定义${h_s}$和${h_e}$为边界状态，$n$为输入序列长度，$F$函数构造出了一系列非线性等式：<br>\\[\\begin{array}{l}{h_1} = f({h_s},{h_2},{\\xi _1})\\\\ \\cdots \\\\{h_i} = f({h_{i - 1}},{h_{i + 1}},{\\xi _i})\\\\ \\cdots \\\\{h_n} = f({h_{n - 1}},{h_e},{\\xi _n})\\end{array}\\]INN结构如下图：<br><img src=\"2.png\" alt></p>\n<h3 id=\"2-3-计算前向传播\"><a href=\"#2-3-计算前向传播\" class=\"headerlink\" title=\"2.3 计算前向传播\"></a>2.3 计算前向传播</h3><p>为了计算等式$H = F(H)$，采用拟牛顿法。<br>令$G = H - F(H)$，转化为计算等式$G = 0$。<br>\\[\\begin{array}{l}{H_{n + 1}} = {H_n} - {({\\nabla _H}G)^{ - 1}}G\\\\{H_{n + 1}} = {H_n} - {(I - {\\nabla _H}F)^{ - 1}}({H_n} - F({H_n}))\\end{array}\\]注意到$(I - {\\nabla _H}F)$是一个稀疏矩阵，所以采用Krylov子空间方法，具体是稳定双共轭梯度法(BICG-STAB)算法来计算。</p>\n<h3 id=\"2-4-梯度\"><a href=\"#2-4-梯度\" class=\"headerlink\" title=\"2.4 梯度\"></a>2.4 梯度</h3><p>为了训练模型，采用随机梯度下降，定义损失函数：<br>\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {\\nabla _\\theta }H\\]其中<br>\\[{\\nabla _\\theta }H = {\\nabla _\\theta }F + {\\nabla _H}F{\\nabla _\\theta }H + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi \\]所以<br>\\[{\\nabla _\\theta }H = {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\]所以整个梯度就是<br>\\[{\\nabla _\\theta }L = {\\nabla _\\theta }\\ell  + {\\nabla _H}\\ell {(I - {\\nabla _H}F)^{ - 1}}({\\nabla _\\theta }F + {\\nabla _\\xi }F{\\nabla _\\theta }\\xi )\\]</p>\n<h3 id=\"2-5-转换函数\"><a href=\"#2-5-转换函数\" class=\"headerlink\" title=\"2.5 转换函数\"></a>2.5 转换函数</h3><p>回忆在GRU中，有如下转换函数：<br>\\[\\begin{array}{l}{h_t} = (1 - {z_t}){ {\\hat h}_t} + {z_t}{ {\\tilde h}_t}\\\\{ {\\tilde h}_t} = \\tanh (W{x_t} + U({r_t}{ {\\hat h}_t}) + \\tilde b)\\\\{z_t} = \\sigma ({W_z}{x_t} + {U_z}{ {\\hat h}_t} + {b_z})\\\\{r_t} = \\sigma ({W_r}{x_t} + {U_r}{ {\\hat h}_t} + {b_r})\\end{array}\\]其中在GRU中${ {\\hat h}_t} = {h_{t - 1}}$，在INN中做一个替代：<br>\\[\\begin{array}{l}{ {\\hat h}_t} = s{h_{t - 1}} + (1 - s){h_{t + 1}}\\\\s = \\frac{ { {s_p}}}{ { {s_p} + {s_n}}}\\\\{s_p} = \\sigma ({W_p}{x_t} + {U_p}{h_{t - 1}} + {b_p})\\\\{s_n} = \\sigma ({W_n}{x_t} + {U_n}{h_{t + 1}} + {b_n})\\end{array}\\]</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3 实验\"></a>3 实验</h1><hr>\n<h3 id=\"序列标注\"><a href=\"#序列标注\" class=\"headerlink\" title=\"序列标注\"></a>序列标注</h3><p>如下图所示，这个模型的效果甚至比标准的序列标注器还要好！<br><img src=\"3.png\" alt></p>\n<h1 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4 结论\"></a>4 结论</h1><hr>\n<p>介绍了一种隐式定义神经网络，应用到了序列标注任务上，效果比双向LSTM、双向GRU等还要好。<br>还有一些工作可以改进，比如可以在双向LSTM上面改造INN，加速计算${(I - {\\nabla _H}F)^{ - 1}}$等等。</p>\n"},{"title":"Two Local Models for Neural Constituent Parsing","date":"2018-10-18T08:29:18.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=167876&auto=1&height=66\"></iframe></div>\n\n> 我们究竟是活了365天，还是活了1天，重复了364遍。\n\n**论文地址：**[Two Local Models for Neural Constituent Parsing](http://aclweb.org/anthology/C18-1011)\n**代码地址：**[github](https://github.com/zeeeyang/two-local-neural-conparsers)\n\n今天要介绍的论文来自COLING 2018，本文主要探讨了局部特征对成分句法分析到底有多大的影响，并同时提出了两种局部特征模型，在PTB上面取得了92.4的F1值。\n\n# 介绍\n---\n对于传统句法分析模型，需要使用大量的全局特征来指导每一步的决策。同时全局的损失函数也是必不可少的，可以用来避免预测偏差的问题，也就是loss mismatch问题。但是随着神经网络的加入，越来越多的模型使用了局部的特征来进行句法分析，主要原因是可以采用双向LSTM预先对句子进行编码，从而捕获全部特征。\n\n因此本文主要探讨局部特征对句法分析的影响，顺带提出了两个句法分析模型。模型是chart-based的，但是将结构预测和标签预测分成了两个模型，首先通过双仿射模型来产生一棵无标签的句法树，然后再上面跑一遍Tree-LSTM来产生每一个结点的label。\n\n# 模型\n---\n模型分为两部分，第一部分是无标签模型，用来预测不带label的句法树，第二部分是标签模型，用来在无标签模型预测出来的句法树上预测出每一个结点的label。\n\n对于无标签模型，有两种方法来生成句法树，第一种叫做span模型，预测任意span是否属于标准树，也就是二分类。第二种叫做rule模型，也就是普通的chart-based方法，类似于CKY算法，预测每个span的得分最高的split。\n\n对于标签模型，在生成的句法树上跑一遍Tree-LSTM，计算出每个结点的向量表示，这是Encoder部分。然后对于每个结点，运行一遍Decoder，也就是一个LSTM，解码出该结点处的label，如果label只有一个，那么就解码出“X - <\\L>”，其中<\\L>是结束符，而如果label不止一个，也就是一元产生式，那么就会解码出一系列非终结符。\n\n下面我们一个个介绍编码和解码模型，我尽量不使用太多的公式来解释模型，一是因为本质上模型也都是很老的了，二是因为公式太多了我也懒得打嘻嘻。\n\n## Span模型\n主要思想就是对于句子的每一个可能的span，预测它是否属于标准树，属于标签就是1，不属于就是0。因为一共有$n(n + 1) / 2$个span，所以时间复杂度为$O(n^2)$。在代码实现中，因为长度为1和长度为n的span一定属于标准树，所以不考虑这两种span。\n\n模型通过一个双向LSTM来对短语进行编码，这个之前的文章已经说过很多次了，可以用来捕获全局信息。span$(i, j)$的向量表示和之前略有不同，这里不是用两端的差值，而是改用直接拼接得到：\n\\\\[v[i, j] = [f_{i + 1}; r_i; f_{j + 1}; r_j]\\\\]\n然后将每个span的表示输入到一个两层的前馈神经网络中，最后通过一个softmax进行二分类：\n\\\\[\\begin{array}{l}o[i,j] = \\tanh ({W_o}v[i,j] + {b_o})\\\\\\\\u[i,j] = {W_u}o[i,j] + {b_u}\\\\\\\\P({Y_{[i,j]}}|S,\\Theta ) = softmax(u[i,j])\\end{array}\\\\]\n其中$Y_{[i, j]}$可以取值1或者0，最终要使得正确span标签为1的概率与错误span标签为0的概率之和最高。\n\n训练完毕之后，在预测阶段，使用CKY算法求解最优的句法树。注意这里不能直接采用$Y_{[i, j]} = 1$概率比较大的那些span组成句法树，因为可能根本就是一棵不合法的句法树。对于span$(i, j)$，它的split为k的概率为：\n\\\\[P(r|S, \\Theta) = P(Y_{[i, k]} = 1|S, \\Theta)P(Y_{[k + 1, j]} = 1|S, \\Theta)\\\\]\n\n模型还有个扩展版本，就是在softmax层改二分类为预测每个label的概率。然后损失函数也稍做修改，对于每个标准树中的span，对所有label求和（求和主要针对的是一元产生式的多个label），使概率之和最大。在预测阶段解码时，依然使用CKY算法，只不过span的概率要修改为：$Y_{[i, j]} = 1$的概率为label不为终结符的概率之和，$Y_{[i, j]} = 0$的概率为label是终结符的概率。\n\n## Rule模型\nspan模型是训练出每个span属于标准树的概率，然后预测时计算出产生式的概率。而rule模型就直接训练每个产生式的概率，对于span$(i, j)$，假设它的split为k的分数为$ps_k$，那么产生式的概率就为：\n\\\\[P([i, j] \\to [i, k]\\[k + 1, j] | S, \\Theta) = \\frac{\\exp (ps_k)}{\\sum\\nolimits_{k' = i}^{j - 1} {\\exp (p{s_{k'}})} }\\\\]\n最终的损失函数就是标准树中所有产生式概率的负对数之和。解码依然使用CKY算法，只是这里产生式概率直接得到了，所以直接计算即可。\n\n这种方法本质上其实就是用神经网络来拟合PCFG，得到和它类似的效果，最后再用CKY算法解码出句法树。\n\n而上面的$ps_k$是怎么得到的呢？这里首先还是用双向LSTM的边界差值作为span的表示（我也不知道这里为什么又突然用这个表示了）：\n\\\\[s[i, j] = [f_{j + 1} - f_i; r_i - r_{j + 1}]\\\\]\n然后将span之前和span和span之后三部分的表示拼接起来：\n\\\\[sr[i, j] = [s[0, i - 1]; s[i, j]; s[j + 1, n - 1]]\\\\]\n然后将它输入到一个单层前馈神经网络：\n\\\\[r[i, j] = \\phi (W_r^M sr[i, j] + b_r^M)\\\\]\n注意到这里的W和b是分为三种：父结点、左儿子、右儿子。\n\n然后就是最后一步了，终于可以得到最终的span表示了。。。这里又有两种方法，一种是线性模型，直接对左右儿子的r向量加权求和。另一种是双仿射模型，这个方法也可以解决span长度不一导致的类别数可变的多分类问题，双仿射模型得分首先在父结点和左儿子向量上进行操作：\n\\\\[lps_k = {[r[i,j];1]^T}{W_{pl}}[r[i,k];1]\\\\]\n然后在父结点和右儿子向量上进行类似操作得到$rps_k$，最后相加得到最终的split得分：\n\\\\[ps_k = lps_k + rps_k\\\\]\n\n## 标签生成模型\n首先用Tree-LSTM得到每个span的向量表示，然后再通过一个LSTM依次得到span的一个或者若干个label，这个就不详细解释了。\n\n## 联合训练\n整个模型总的损失函数是无标签模型损失加上标签生成模型的损失，其中无标签模型分为三种：二分类、多分类、rule模型。\n\n整个模型的流程如下图所示：\n![](1.jpg)\nspan模型和rule模型的span得分计算如下图所示：\n![](2.jpg)\n\n# 实验结果\n---\n几种模型在PTB上的F1值如下：\n![](3.jpg)\n可以看出对于二分类span模型，用$v[i, j]$作为span表示效果最好，而对于rule模型，采用的是双仿射，那么用$sr[i, j]$，也就是拼接上span左右的span效果更好。总体来说，多分类的span模型F1值是最高的。\n\n而和其他模型的比较如下表所示：\n![](4.jpg)\n左侧是多模型融合的结果，右侧是单模型，本文的几个模型结果都是最高的。\n\n# 总结\n---\n这篇论文模型和变体有点多，其实仔细分析下来可以发现本质上也还是那么些东西，在这里简单总结一下几种模型：\n首先是结构预测：\n* 二分类span模型：预测每个span属于标准树的概率，测试阶段使用CKY算法解码，通过span正确的概率计算得到产生式概率。\n* 多分类span模型：在二分类的基础上，预测每个span是每个label的概率，最后求和得到它属于标准树的概率，测试过程和二分类相同。\n* 线性组合rule模型：通过split的得分直接预测每个产生式的概率，采用线性组合计算概率，解码采用CKY算法。\n* 双仿射rule模型：除了概率计算采用双仿射，其他部分和线性组合rule模型完全相同。\n\n然后是标签预测：\n都是采用Tree-LSTM产生每个结点的编码，然后创新地使用LSTM来预测label，而不是用传统的label列表。\n\n这篇论文可借鉴的地方还挺多的，结构和标签分开预测，span特征继续堆叠，双仿射变换等等。准备之后在以往模型上加上去试试，然后可以想想神经网络训练PCFG这类点子，其实本质上和chart-based的没啥大区别。","source":"_posts/COLING18-2LocalModels.md","raw":"---\ntitle: Two Local Models for Neural Constituent Parsing\ndate: 2018-10-18 16:29:18\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- COLING\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=167876&auto=1&height=66\"></iframe></div>\n\n> 我们究竟是活了365天，还是活了1天，重复了364遍。\n\n**论文地址：**[Two Local Models for Neural Constituent Parsing](http://aclweb.org/anthology/C18-1011)\n**代码地址：**[github](https://github.com/zeeeyang/two-local-neural-conparsers)\n\n今天要介绍的论文来自COLING 2018，本文主要探讨了局部特征对成分句法分析到底有多大的影响，并同时提出了两种局部特征模型，在PTB上面取得了92.4的F1值。\n\n# 介绍\n---\n对于传统句法分析模型，需要使用大量的全局特征来指导每一步的决策。同时全局的损失函数也是必不可少的，可以用来避免预测偏差的问题，也就是loss mismatch问题。但是随着神经网络的加入，越来越多的模型使用了局部的特征来进行句法分析，主要原因是可以采用双向LSTM预先对句子进行编码，从而捕获全部特征。\n\n因此本文主要探讨局部特征对句法分析的影响，顺带提出了两个句法分析模型。模型是chart-based的，但是将结构预测和标签预测分成了两个模型，首先通过双仿射模型来产生一棵无标签的句法树，然后再上面跑一遍Tree-LSTM来产生每一个结点的label。\n\n# 模型\n---\n模型分为两部分，第一部分是无标签模型，用来预测不带label的句法树，第二部分是标签模型，用来在无标签模型预测出来的句法树上预测出每一个结点的label。\n\n对于无标签模型，有两种方法来生成句法树，第一种叫做span模型，预测任意span是否属于标准树，也就是二分类。第二种叫做rule模型，也就是普通的chart-based方法，类似于CKY算法，预测每个span的得分最高的split。\n\n对于标签模型，在生成的句法树上跑一遍Tree-LSTM，计算出每个结点的向量表示，这是Encoder部分。然后对于每个结点，运行一遍Decoder，也就是一个LSTM，解码出该结点处的label，如果label只有一个，那么就解码出“X - <\\L>”，其中<\\L>是结束符，而如果label不止一个，也就是一元产生式，那么就会解码出一系列非终结符。\n\n下面我们一个个介绍编码和解码模型，我尽量不使用太多的公式来解释模型，一是因为本质上模型也都是很老的了，二是因为公式太多了我也懒得打嘻嘻。\n\n## Span模型\n主要思想就是对于句子的每一个可能的span，预测它是否属于标准树，属于标签就是1，不属于就是0。因为一共有$n(n + 1) / 2$个span，所以时间复杂度为$O(n^2)$。在代码实现中，因为长度为1和长度为n的span一定属于标准树，所以不考虑这两种span。\n\n模型通过一个双向LSTM来对短语进行编码，这个之前的文章已经说过很多次了，可以用来捕获全局信息。span$(i, j)$的向量表示和之前略有不同，这里不是用两端的差值，而是改用直接拼接得到：\n\\\\[v[i, j] = [f_{i + 1}; r_i; f_{j + 1}; r_j]\\\\]\n然后将每个span的表示输入到一个两层的前馈神经网络中，最后通过一个softmax进行二分类：\n\\\\[\\begin{array}{l}o[i,j] = \\tanh ({W_o}v[i,j] + {b_o})\\\\\\\\u[i,j] = {W_u}o[i,j] + {b_u}\\\\\\\\P({Y_{[i,j]}}|S,\\Theta ) = softmax(u[i,j])\\end{array}\\\\]\n其中$Y_{[i, j]}$可以取值1或者0，最终要使得正确span标签为1的概率与错误span标签为0的概率之和最高。\n\n训练完毕之后，在预测阶段，使用CKY算法求解最优的句法树。注意这里不能直接采用$Y_{[i, j]} = 1$概率比较大的那些span组成句法树，因为可能根本就是一棵不合法的句法树。对于span$(i, j)$，它的split为k的概率为：\n\\\\[P(r|S, \\Theta) = P(Y_{[i, k]} = 1|S, \\Theta)P(Y_{[k + 1, j]} = 1|S, \\Theta)\\\\]\n\n模型还有个扩展版本，就是在softmax层改二分类为预测每个label的概率。然后损失函数也稍做修改，对于每个标准树中的span，对所有label求和（求和主要针对的是一元产生式的多个label），使概率之和最大。在预测阶段解码时，依然使用CKY算法，只不过span的概率要修改为：$Y_{[i, j]} = 1$的概率为label不为终结符的概率之和，$Y_{[i, j]} = 0$的概率为label是终结符的概率。\n\n## Rule模型\nspan模型是训练出每个span属于标准树的概率，然后预测时计算出产生式的概率。而rule模型就直接训练每个产生式的概率，对于span$(i, j)$，假设它的split为k的分数为$ps_k$，那么产生式的概率就为：\n\\\\[P([i, j] \\to [i, k]\\[k + 1, j] | S, \\Theta) = \\frac{\\exp (ps_k)}{\\sum\\nolimits_{k' = i}^{j - 1} {\\exp (p{s_{k'}})} }\\\\]\n最终的损失函数就是标准树中所有产生式概率的负对数之和。解码依然使用CKY算法，只是这里产生式概率直接得到了，所以直接计算即可。\n\n这种方法本质上其实就是用神经网络来拟合PCFG，得到和它类似的效果，最后再用CKY算法解码出句法树。\n\n而上面的$ps_k$是怎么得到的呢？这里首先还是用双向LSTM的边界差值作为span的表示（我也不知道这里为什么又突然用这个表示了）：\n\\\\[s[i, j] = [f_{j + 1} - f_i; r_i - r_{j + 1}]\\\\]\n然后将span之前和span和span之后三部分的表示拼接起来：\n\\\\[sr[i, j] = [s[0, i - 1]; s[i, j]; s[j + 1, n - 1]]\\\\]\n然后将它输入到一个单层前馈神经网络：\n\\\\[r[i, j] = \\phi (W_r^M sr[i, j] + b_r^M)\\\\]\n注意到这里的W和b是分为三种：父结点、左儿子、右儿子。\n\n然后就是最后一步了，终于可以得到最终的span表示了。。。这里又有两种方法，一种是线性模型，直接对左右儿子的r向量加权求和。另一种是双仿射模型，这个方法也可以解决span长度不一导致的类别数可变的多分类问题，双仿射模型得分首先在父结点和左儿子向量上进行操作：\n\\\\[lps_k = {[r[i,j];1]^T}{W_{pl}}[r[i,k];1]\\\\]\n然后在父结点和右儿子向量上进行类似操作得到$rps_k$，最后相加得到最终的split得分：\n\\\\[ps_k = lps_k + rps_k\\\\]\n\n## 标签生成模型\n首先用Tree-LSTM得到每个span的向量表示，然后再通过一个LSTM依次得到span的一个或者若干个label，这个就不详细解释了。\n\n## 联合训练\n整个模型总的损失函数是无标签模型损失加上标签生成模型的损失，其中无标签模型分为三种：二分类、多分类、rule模型。\n\n整个模型的流程如下图所示：\n![](1.jpg)\nspan模型和rule模型的span得分计算如下图所示：\n![](2.jpg)\n\n# 实验结果\n---\n几种模型在PTB上的F1值如下：\n![](3.jpg)\n可以看出对于二分类span模型，用$v[i, j]$作为span表示效果最好，而对于rule模型，采用的是双仿射，那么用$sr[i, j]$，也就是拼接上span左右的span效果更好。总体来说，多分类的span模型F1值是最高的。\n\n而和其他模型的比较如下表所示：\n![](4.jpg)\n左侧是多模型融合的结果，右侧是单模型，本文的几个模型结果都是最高的。\n\n# 总结\n---\n这篇论文模型和变体有点多，其实仔细分析下来可以发现本质上也还是那么些东西，在这里简单总结一下几种模型：\n首先是结构预测：\n* 二分类span模型：预测每个span属于标准树的概率，测试阶段使用CKY算法解码，通过span正确的概率计算得到产生式概率。\n* 多分类span模型：在二分类的基础上，预测每个span是每个label的概率，最后求和得到它属于标准树的概率，测试过程和二分类相同。\n* 线性组合rule模型：通过split的得分直接预测每个产生式的概率，采用线性组合计算概率，解码采用CKY算法。\n* 双仿射rule模型：除了概率计算采用双仿射，其他部分和线性组合rule模型完全相同。\n\n然后是标签预测：\n都是采用Tree-LSTM产生每个结点的编码，然后创新地使用LSTM来预测label，而不是用传统的label列表。\n\n这篇论文可借鉴的地方还挺多的，结构和标签分开预测，span特征继续堆叠，双仿射变换等等。准备之后在以往模型上加上去试试，然后可以想想神经网络训练PCFG这类点子，其实本质上和chart-based的没啥大区别。","slug":"COLING18-2LocalModels","published":1,"updated":"2019-07-20T04:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk98235000c7sweajadp08h","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=167876&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>我们究竟是活了365天，还是活了1天，重复了364遍。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/C18-1011\" target=\"_blank\" rel=\"noopener\">Two Local Models for Neural Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/zeeeyang/two-local-neural-conparsers\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的论文来自COLING 2018，本文主要探讨了局部特征对成分句法分析到底有多大的影响，并同时提出了两种局部特征模型，在PTB上面取得了92.4的F1值。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>对于传统句法分析模型，需要使用大量的全局特征来指导每一步的决策。同时全局的损失函数也是必不可少的，可以用来避免预测偏差的问题，也就是loss mismatch问题。但是随着神经网络的加入，越来越多的模型使用了局部的特征来进行句法分析，主要原因是可以采用双向LSTM预先对句子进行编码，从而捕获全部特征。</p>\n<p>因此本文主要探讨局部特征对句法分析的影响，顺带提出了两个句法分析模型。模型是chart-based的，但是将结构预测和标签预测分成了两个模型，首先通过双仿射模型来产生一棵无标签的句法树，然后再上面跑一遍Tree-LSTM来产生每一个结点的label。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>模型分为两部分，第一部分是无标签模型，用来预测不带label的句法树，第二部分是标签模型，用来在无标签模型预测出来的句法树上预测出每一个结点的label。</p>\n<p>对于无标签模型，有两种方法来生成句法树，第一种叫做span模型，预测任意span是否属于标准树，也就是二分类。第二种叫做rule模型，也就是普通的chart-based方法，类似于CKY算法，预测每个span的得分最高的split。</p>\n<p>对于标签模型，在生成的句法树上跑一遍Tree-LSTM，计算出每个结点的向量表示，这是Encoder部分。然后对于每个结点，运行一遍Decoder，也就是一个LSTM，解码出该结点处的label，如果label只有一个，那么就解码出“X - &lt;\\L&gt;”，其中&lt;\\L&gt;是结束符，而如果label不止一个，也就是一元产生式，那么就会解码出一系列非终结符。</p>\n<p>下面我们一个个介绍编码和解码模型，我尽量不使用太多的公式来解释模型，一是因为本质上模型也都是很老的了，二是因为公式太多了我也懒得打嘻嘻。</p>\n<h2 id=\"Span模型\"><a href=\"#Span模型\" class=\"headerlink\" title=\"Span模型\"></a>Span模型</h2><p>主要思想就是对于句子的每一个可能的span，预测它是否属于标准树，属于标签就是1，不属于就是0。因为一共有$n(n + 1) / 2$个span，所以时间复杂度为$O(n^2)$。在代码实现中，因为长度为1和长度为n的span一定属于标准树，所以不考虑这两种span。</p>\n<p>模型通过一个双向LSTM来对短语进行编码，这个之前的文章已经说过很多次了，可以用来捕获全局信息。span$(i, j)$的向量表示和之前略有不同，这里不是用两端的差值，而是改用直接拼接得到：<br>\\[v[i, j] = [f_{i + 1}; r_i; f_{j + 1}; r_j]\\]<br>然后将每个span的表示输入到一个两层的前馈神经网络中，最后通过一个softmax进行二分类：<br>\\[\\begin{array}{l}o[i,j] = \\tanh ({W_o}v[i,j] + {b_o})\\\\\\\\u[i,j] = {W_u}o[i,j] + {b_u}\\\\\\\\P({Y_{[i,j]}}|S,\\Theta ) = softmax(u[i,j])\\end{array}\\]<br>其中$Y_{[i, j]}$可以取值1或者0，最终要使得正确span标签为1的概率与错误span标签为0的概率之和最高。</p>\n<p>训练完毕之后，在预测阶段，使用CKY算法求解最优的句法树。注意这里不能直接采用$Y_{[i, j]} = 1$概率比较大的那些span组成句法树，因为可能根本就是一棵不合法的句法树。对于span$(i, j)$，它的split为k的概率为：<br>\\[P(r|S, \\Theta) = P(Y_{[i, k]} = 1|S, \\Theta)P(Y_{[k + 1, j]} = 1|S, \\Theta)\\]</p>\n<p>模型还有个扩展版本，就是在softmax层改二分类为预测每个label的概率。然后损失函数也稍做修改，对于每个标准树中的span，对所有label求和（求和主要针对的是一元产生式的多个label），使概率之和最大。在预测阶段解码时，依然使用CKY算法，只不过span的概率要修改为：$Y_{[i, j]} = 1$的概率为label不为终结符的概率之和，$Y_{[i, j]} = 0$的概率为label是终结符的概率。</p>\n<h2 id=\"Rule模型\"><a href=\"#Rule模型\" class=\"headerlink\" title=\"Rule模型\"></a>Rule模型</h2><p>span模型是训练出每个span属于标准树的概率，然后预测时计算出产生式的概率。而rule模型就直接训练每个产生式的概率，对于span$(i, j)$，假设它的split为k的分数为$ps_k$，那么产生式的概率就为：<br>\\[P([i, j] \\to [i, k][k + 1, j] | S, \\Theta) = \\frac{\\exp (ps_k)}{\\sum\\nolimits_{k’ = i}^{j - 1} {\\exp (p{s_{k’}})} }\\]<br>最终的损失函数就是标准树中所有产生式概率的负对数之和。解码依然使用CKY算法，只是这里产生式概率直接得到了，所以直接计算即可。</p>\n<p>这种方法本质上其实就是用神经网络来拟合PCFG，得到和它类似的效果，最后再用CKY算法解码出句法树。</p>\n<p>而上面的$ps_k$是怎么得到的呢？这里首先还是用双向LSTM的边界差值作为span的表示（我也不知道这里为什么又突然用这个表示了）：<br>\\[s[i, j] = [f_{j + 1} - f_i; r_i - r_{j + 1}]\\]<br>然后将span之前和span和span之后三部分的表示拼接起来：<br>\\[sr[i, j] = [s[0, i - 1]; s[i, j]; s[j + 1, n - 1]]\\]<br>然后将它输入到一个单层前馈神经网络：<br>\\[r[i, j] = \\phi (W_r^M sr[i, j] + b_r^M)\\]<br>注意到这里的W和b是分为三种：父结点、左儿子、右儿子。</p>\n<p>然后就是最后一步了，终于可以得到最终的span表示了。。。这里又有两种方法，一种是线性模型，直接对左右儿子的r向量加权求和。另一种是双仿射模型，这个方法也可以解决span长度不一导致的类别数可变的多分类问题，双仿射模型得分首先在父结点和左儿子向量上进行操作：<br>\\[lps_k = {[r[i,j];1]^T}{W_{pl}}[r[i,k];1]\\]<br>然后在父结点和右儿子向量上进行类似操作得到$rps_k$，最后相加得到最终的split得分：<br>\\[ps_k = lps_k + rps_k\\]</p>\n<h2 id=\"标签生成模型\"><a href=\"#标签生成模型\" class=\"headerlink\" title=\"标签生成模型\"></a>标签生成模型</h2><p>首先用Tree-LSTM得到每个span的向量表示，然后再通过一个LSTM依次得到span的一个或者若干个label，这个就不详细解释了。</p>\n<h2 id=\"联合训练\"><a href=\"#联合训练\" class=\"headerlink\" title=\"联合训练\"></a>联合训练</h2><p>整个模型总的损失函数是无标签模型损失加上标签生成模型的损失，其中无标签模型分为三种：二分类、多分类、rule模型。</p>\n<p>整个模型的流程如下图所示：<br><img src=\"1.jpg\" alt><br>span模型和rule模型的span得分计算如下图所示：<br><img src=\"2.jpg\" alt></p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>几种模型在PTB上的F1值如下：<br><img src=\"3.jpg\" alt><br>可以看出对于二分类span模型，用$v[i, j]$作为span表示效果最好，而对于rule模型，采用的是双仿射，那么用$sr[i, j]$，也就是拼接上span左右的span效果更好。总体来说，多分类的span模型F1值是最高的。</p>\n<p>而和其他模型的比较如下表所示：<br><img src=\"4.jpg\" alt><br>左侧是多模型融合的结果，右侧是单模型，本文的几个模型结果都是最高的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文模型和变体有点多，其实仔细分析下来可以发现本质上也还是那么些东西，在这里简单总结一下几种模型：<br>首先是结构预测：</p>\n<ul>\n<li>二分类span模型：预测每个span属于标准树的概率，测试阶段使用CKY算法解码，通过span正确的概率计算得到产生式概率。</li>\n<li>多分类span模型：在二分类的基础上，预测每个span是每个label的概率，最后求和得到它属于标准树的概率，测试过程和二分类相同。</li>\n<li>线性组合rule模型：通过split的得分直接预测每个产生式的概率，采用线性组合计算概率，解码采用CKY算法。</li>\n<li>双仿射rule模型：除了概率计算采用双仿射，其他部分和线性组合rule模型完全相同。</li>\n</ul>\n<p>然后是标签预测：<br>都是采用Tree-LSTM产生每个结点的编码，然后创新地使用LSTM来预测label，而不是用传统的label列表。</p>\n<p>这篇论文可借鉴的地方还挺多的，结构和标签分开预测，span特征继续堆叠，双仿射变换等等。准备之后在以往模型上加上去试试，然后可以想想神经网络训练PCFG这类点子，其实本质上和chart-based的没啥大区别。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=167876&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>我们究竟是活了365天，还是活了1天，重复了364遍。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/C18-1011\" target=\"_blank\" rel=\"noopener\">Two Local Models for Neural Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/zeeeyang/two-local-neural-conparsers\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的论文来自COLING 2018，本文主要探讨了局部特征对成分句法分析到底有多大的影响，并同时提出了两种局部特征模型，在PTB上面取得了92.4的F1值。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>对于传统句法分析模型，需要使用大量的全局特征来指导每一步的决策。同时全局的损失函数也是必不可少的，可以用来避免预测偏差的问题，也就是loss mismatch问题。但是随着神经网络的加入，越来越多的模型使用了局部的特征来进行句法分析，主要原因是可以采用双向LSTM预先对句子进行编码，从而捕获全部特征。</p>\n<p>因此本文主要探讨局部特征对句法分析的影响，顺带提出了两个句法分析模型。模型是chart-based的，但是将结构预测和标签预测分成了两个模型，首先通过双仿射模型来产生一棵无标签的句法树，然后再上面跑一遍Tree-LSTM来产生每一个结点的label。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>模型分为两部分，第一部分是无标签模型，用来预测不带label的句法树，第二部分是标签模型，用来在无标签模型预测出来的句法树上预测出每一个结点的label。</p>\n<p>对于无标签模型，有两种方法来生成句法树，第一种叫做span模型，预测任意span是否属于标准树，也就是二分类。第二种叫做rule模型，也就是普通的chart-based方法，类似于CKY算法，预测每个span的得分最高的split。</p>\n<p>对于标签模型，在生成的句法树上跑一遍Tree-LSTM，计算出每个结点的向量表示，这是Encoder部分。然后对于每个结点，运行一遍Decoder，也就是一个LSTM，解码出该结点处的label，如果label只有一个，那么就解码出“X - &lt;\\L&gt;”，其中&lt;\\L&gt;是结束符，而如果label不止一个，也就是一元产生式，那么就会解码出一系列非终结符。</p>\n<p>下面我们一个个介绍编码和解码模型，我尽量不使用太多的公式来解释模型，一是因为本质上模型也都是很老的了，二是因为公式太多了我也懒得打嘻嘻。</p>\n<h2 id=\"Span模型\"><a href=\"#Span模型\" class=\"headerlink\" title=\"Span模型\"></a>Span模型</h2><p>主要思想就是对于句子的每一个可能的span，预测它是否属于标准树，属于标签就是1，不属于就是0。因为一共有$n(n + 1) / 2$个span，所以时间复杂度为$O(n^2)$。在代码实现中，因为长度为1和长度为n的span一定属于标准树，所以不考虑这两种span。</p>\n<p>模型通过一个双向LSTM来对短语进行编码，这个之前的文章已经说过很多次了，可以用来捕获全局信息。span$(i, j)$的向量表示和之前略有不同，这里不是用两端的差值，而是改用直接拼接得到：<br>\\[v[i, j] = [f_{i + 1}; r_i; f_{j + 1}; r_j]\\]<br>然后将每个span的表示输入到一个两层的前馈神经网络中，最后通过一个softmax进行二分类：<br>\\[\\begin{array}{l}o[i,j] = \\tanh ({W_o}v[i,j] + {b_o})\\\\\\\\u[i,j] = {W_u}o[i,j] + {b_u}\\\\\\\\P({Y_{[i,j]}}|S,\\Theta ) = softmax(u[i,j])\\end{array}\\]<br>其中$Y_{[i, j]}$可以取值1或者0，最终要使得正确span标签为1的概率与错误span标签为0的概率之和最高。</p>\n<p>训练完毕之后，在预测阶段，使用CKY算法求解最优的句法树。注意这里不能直接采用$Y_{[i, j]} = 1$概率比较大的那些span组成句法树，因为可能根本就是一棵不合法的句法树。对于span$(i, j)$，它的split为k的概率为：<br>\\[P(r|S, \\Theta) = P(Y_{[i, k]} = 1|S, \\Theta)P(Y_{[k + 1, j]} = 1|S, \\Theta)\\]</p>\n<p>模型还有个扩展版本，就是在softmax层改二分类为预测每个label的概率。然后损失函数也稍做修改，对于每个标准树中的span，对所有label求和（求和主要针对的是一元产生式的多个label），使概率之和最大。在预测阶段解码时，依然使用CKY算法，只不过span的概率要修改为：$Y_{[i, j]} = 1$的概率为label不为终结符的概率之和，$Y_{[i, j]} = 0$的概率为label是终结符的概率。</p>\n<h2 id=\"Rule模型\"><a href=\"#Rule模型\" class=\"headerlink\" title=\"Rule模型\"></a>Rule模型</h2><p>span模型是训练出每个span属于标准树的概率，然后预测时计算出产生式的概率。而rule模型就直接训练每个产生式的概率，对于span$(i, j)$，假设它的split为k的分数为$ps_k$，那么产生式的概率就为：<br>\\[P([i, j] \\to [i, k][k + 1, j] | S, \\Theta) = \\frac{\\exp (ps_k)}{\\sum\\nolimits_{k’ = i}^{j - 1} {\\exp (p{s_{k’}})} }\\]<br>最终的损失函数就是标准树中所有产生式概率的负对数之和。解码依然使用CKY算法，只是这里产生式概率直接得到了，所以直接计算即可。</p>\n<p>这种方法本质上其实就是用神经网络来拟合PCFG，得到和它类似的效果，最后再用CKY算法解码出句法树。</p>\n<p>而上面的$ps_k$是怎么得到的呢？这里首先还是用双向LSTM的边界差值作为span的表示（我也不知道这里为什么又突然用这个表示了）：<br>\\[s[i, j] = [f_{j + 1} - f_i; r_i - r_{j + 1}]\\]<br>然后将span之前和span和span之后三部分的表示拼接起来：<br>\\[sr[i, j] = [s[0, i - 1]; s[i, j]; s[j + 1, n - 1]]\\]<br>然后将它输入到一个单层前馈神经网络：<br>\\[r[i, j] = \\phi (W_r^M sr[i, j] + b_r^M)\\]<br>注意到这里的W和b是分为三种：父结点、左儿子、右儿子。</p>\n<p>然后就是最后一步了，终于可以得到最终的span表示了。。。这里又有两种方法，一种是线性模型，直接对左右儿子的r向量加权求和。另一种是双仿射模型，这个方法也可以解决span长度不一导致的类别数可变的多分类问题，双仿射模型得分首先在父结点和左儿子向量上进行操作：<br>\\[lps_k = {[r[i,j];1]^T}{W_{pl}}[r[i,k];1]\\]<br>然后在父结点和右儿子向量上进行类似操作得到$rps_k$，最后相加得到最终的split得分：<br>\\[ps_k = lps_k + rps_k\\]</p>\n<h2 id=\"标签生成模型\"><a href=\"#标签生成模型\" class=\"headerlink\" title=\"标签生成模型\"></a>标签生成模型</h2><p>首先用Tree-LSTM得到每个span的向量表示，然后再通过一个LSTM依次得到span的一个或者若干个label，这个就不详细解释了。</p>\n<h2 id=\"联合训练\"><a href=\"#联合训练\" class=\"headerlink\" title=\"联合训练\"></a>联合训练</h2><p>整个模型总的损失函数是无标签模型损失加上标签生成模型的损失，其中无标签模型分为三种：二分类、多分类、rule模型。</p>\n<p>整个模型的流程如下图所示：<br><img src=\"1.jpg\" alt><br>span模型和rule模型的span得分计算如下图所示：<br><img src=\"2.jpg\" alt></p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>几种模型在PTB上的F1值如下：<br><img src=\"3.jpg\" alt><br>可以看出对于二分类span模型，用$v[i, j]$作为span表示效果最好，而对于rule模型，采用的是双仿射，那么用$sr[i, j]$，也就是拼接上span左右的span效果更好。总体来说，多分类的span模型F1值是最高的。</p>\n<p>而和其他模型的比较如下表所示：<br><img src=\"4.jpg\" alt><br>左侧是多模型融合的结果，右侧是单模型，本文的几个模型结果都是最高的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文模型和变体有点多，其实仔细分析下来可以发现本质上也还是那么些东西，在这里简单总结一下几种模型：<br>首先是结构预测：</p>\n<ul>\n<li>二分类span模型：预测每个span属于标准树的概率，测试阶段使用CKY算法解码，通过span正确的概率计算得到产生式概率。</li>\n<li>多分类span模型：在二分类的基础上，预测每个span是每个label的概率，最后求和得到它属于标准树的概率，测试过程和二分类相同。</li>\n<li>线性组合rule模型：通过split的得分直接预测每个产生式的概率，采用线性组合计算概率，解码采用CKY算法。</li>\n<li>双仿射rule模型：除了概率计算采用双仿射，其他部分和线性组合rule模型完全相同。</li>\n</ul>\n<p>然后是标签预测：<br>都是采用Tree-LSTM产生每个结点的编码，然后创新地使用LSTM来预测label，而不是用传统的label列表。</p>\n<p>这篇论文可借鉴的地方还挺多的，结构和标签分开预测，span特征继续堆叠，双仿射变换等等。准备之后在以往模型上加上去试试，然后可以想想神经网络训练PCFG这类点子，其实本质上和chart-based的没啥大区别。</p>\n"},{"title":"Constituency Parsing with a Self-Attentive Encoder","date":"2018-07-04T14:22:06.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=493316158&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Constituency Parsing with a Self-Attentive Encoder](https://arxiv.org/pdf/1805.01052.pdf)\n**代码地址：**[github](https://github.com/nikitakit/self-attentive-parser)\n\n今天要介绍的这篇论文是成分句法分析领域目前的state-of-the-art，结果最高的几篇paper可以参见ruder在github整理的列表：[github](https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md)。\n下面就是成分句法分析目前排名：\n\n| Model | F1 score | Paper / Source |\n| ------------- | :-----:| --- |\n| Self-attentive encoder + ELMo (Kitaev and Klein, 2018) | 95.13 | [Constituency Parsing with a Self-Attentive Encoder](https://arxiv.org/abs/1805.01052) |\n| Model combination (Fried et al., 2017) | 94.66 | [Improving Neural Parsing by Disentangling Model Combination and Reranking Effects](https://arxiv.org/abs/1707.03058) |\n| In-order (Liu and Zhang, 2017) | 94.2 | [In-Order Transition-based Constituent Parsing](http://aclweb.org/anthology/Q17-1029) |\n| Semi-supervised LSTM-LM (Choe and Charniak, 2016) | 93.8 | [Parsing as Language Modeling](http://www.aclweb.org/anthology/D16-1257) | \n| Stack-only RNNG (Kuncoro et al., 2017) | 93.6 | [What Do Recurrent Neural Network Grammars Learn About Syntax?](https://arxiv.org/abs/1611.05774) |\n| RNN Grammar (Dyer et al., 2016) | ﻿93.3 | [Recurrent Neural Network Grammars](https://www.aclweb.org/anthology/N16-1024) |\n| Transformer (Vaswani et al., 2017) | 92.7 | [Attention Is All You Need](https://arxiv.org/abs/1706.03762) |\n| Semi-supervised LSTM (Vinyals et al., 2015) | 92.1  | [Grammar as a Foreign Language](https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf) |\n| Self-trained parser (McClosky et al., 2006) | 92.1 | [Effective Self-Training for Parsing](https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf) |\n\n# 摘要\n---\n本篇论文将之前[A Minimal Span-Based Neural Constituency Parser](http://godweiyang.com/2018/06/28/ACL17-ConParsing/)这篇论文中模型的编码器部分由LSTM替换为了Self-Attentive，来捕捉句子单词内容(content)与位置(position)之间的联系。实验结果可以达到93.55%的F1值，如果再加上预训练的词向量ELMo，那么F1值可以提升到95.13%。这是目前效果最好的一个模型了。\n\nAttention的主要想法借鉴了谷歌的神作：[Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)，这篇论文网上也有很多讲解了，我挑选了一篇讲解比较好的，大家可以先看看：[Attention Is All You Need](https://yq.aliyun.com/articles/342508?utm_content=m_39938)。\n\n# 模型\n---\n## 基本模型\n这部分详见我之前写的一篇笔记：[A Minimal Span-Based Neural Constituency Parser](http://godweiyang.com/2018/06/28/ACL17-ConParsing/)，解码器部分和之前模型基本一致。本文主要探讨的是编码器的构造，也就是如何求出每个span的向量表示，从而得到span的得分$s(i,j,l)$，然后应用解码器进行解码，生成成分句法分析树。\n\n## 词向量表示\n第$t$个单词的词向量由三个部分组成：\n* word embdding：$w_t$，这部分可以用随机初始化的向量，也可以用CharLSTM，也可以用预训练的词向量。\n* tag embdding：$m_t$\n* 位置向量：$p_t$\n\n最终词向量为三部分的加和：\n\\\\[z_t = w_t + m_t + p_t\\\\]\n\n## Self-Attentive\n模型结构如下图所示：\n![](1.png)\n这一部分是不同位置单词互相联系的唯一方式，采用谷歌[Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)中的Self-Attentive模型。\n\n模型一共由8个SingleHead组成，每个SingleHead结构如下图：\n![](2.png)\n计算方式如下：\n\\\\[{\\rm{SingleHead}}(X) = \\left[ { {\\rm{Softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_o}\\\\]\n其中$Q = X{W_Q};K = X{W_K};V = X{W_V}$，而$W_O$用来将输出映射到与输入相同的维度。\n\n详细分析一下计算过程，首先输入矩阵$X = [{z_1},{z_2}, \\ldots ,{z_T}]$是由一个句子中所有词向量组成的矩阵，拼接在一起是为了并行，加快计算速度，$X \\in {\\mathbb{R}^{T \\times {d_{ {model}}}}}$。\n\n然后将$X$映射为三个矩阵，query矩阵$Q$，key矩阵$K$，value矩阵$V$，其中$Q,K \\in {\\mathbb{R}^{ {d_{ {model}}} \\times {d_k}}}$。\n\n我们想要计算单词$i$和单词$j$之间的Attention大小，可以用两者query向量和key向量元素乘得到：\n\\\\[p(i \\to j) \\propto \\exp \\left( {\\frac{ { {q_i} \\cdot {k_j}}}{ {\\sqrt { {d_k}} }}} \\right)\\\\]\n所有单词的value向量乘以单词$i$对它的Attention值，加权求和之后得到的结果就是单词$i$最后的向量表示：\n\\\\[{ {\\bar v}\\_i} = \\sum\\nolimits_j {p(i \\to j){v_j}} \\\\]\n最后乘以$W_O$映射到与输入$X$相同的维度。\n\n整个过程如果写成矩阵形式就是最开始的那个矩阵式子。注意到式子中$Q{K^{\\rm{T}}} \\in {\\mathbb{R}^{ {\\rm{T \\times T}}}}$，矩阵中的每个元素恰好就是Attention值$p(i \\to j)$。$\\sqrt { {d_k}}$是归一化因子。\n\n最后将8个SingleHead的结果求和得到MultiHead结果，注意这8个SingleHead参数不共享：\n\\\\[{\\rm{MultiHead(}}X) = \\sum\\limits_{i = 1}^8 { {\\rm{SingleHea}}{ {\\rm{d}}^{(i)}}(X)} \\\\]\n\n注意到Attention模型有一个很严重的问题，就是无论单词的顺序是怎么样的，都不影响最终的结果。所以在输入中要添加位置向量$p_t$，否则之后会有实验表明，不加的话效果大大下降。\n\n图一中还有一个前馈神经网络的部分，使用的是一个双层前馈神经网络：\n\\\\[{\\rm{FeedForward}}(x) = {W_2}{\\rm{relu}}({W_1}x + {b_1}) + {b_2}\\\\]\n\n## Span得分\n最终的span得分计算方式如下：\n\\\\[s(i,j, \\cdot ) = {M_2}{\\rm{relu}}({\\rm{LayerNorm}}({M_1}v + {c_1})) + {c_2}\\\\]\n其中$v$就是短语的向量表示，由之前的每个单词的向量输出得到：\n\\\\[v = [{ {\\vec y}\\_j} - { {\\vec y}\\_i},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{j + 1}} - { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{i + 1}}]\\\\]\n在之前的LSTM模型中前向后向表示很容易得到，在这里只能通过将输出向量一分为二，一半作为前向表示，一半作为后向表示，实际实现中，偶数维度作为前向表示，奇数维度作为后向表示。\n\n# 模型分析\n---\n## Content vs Position Attention\n之前的模型中，我们采用元素加将三个输入向量求和作为输入，期待模型自己训练出它们之间的权重，将它们很好地分开，但是实际上效果并不好。\n\n下面论文做了许多实验来探讨content和position的重要性。\n\n首先修改模型输入，令$Q=PW_Q,K=PW_K$，也就是丢弃了content信息，但是最后结果只下降了0.27个百分点，说明了content信息对模型影响不是很大。\n\n然后为了验证是不是元素加导致content和position信息混合在一起模型无法分开，实验将输入向量显示分开，输入改为\n\\\\[z_t=[w_t+m_t;p_t]\\\\]\n但是实验结果只下降了0.07个百分点，说明不是这个因素导致的。事实上元素加和拼接操作在高维度上面是相似的，特别是之后立即乘上了一个矩阵，这就会混合里面的信息。\n\n所以最好的解决办法就是将content和position向量分开计算attention，最后求和。这样attention矩阵就可以表示为：\n\\\\[QK^{\\rm{T}} = {Q_c}K_c^{\\rm{T}} + {Q_p}K_p^{\\rm{T}}\\\\]\n这时的权重矩阵$W$就可以写为\n\\\\[W = \\left[ {\\begin{array}{\\*{20}{c}}{ {W_c}}&0\\\\0&{ {W_p}}\\end{array}} \\right]\\\\]\n\n通过将content和position信息分开，模型的效果从92.67%提升到了93.15%，模型示意图如下：\n![](3.png)\n\n最后的实验在测试阶段的8层模型中，每一层手动选择采不采用content或者position attention，实验结果如下：\n![](4.png)\n可以发现，不用position信息的话结果大大下降，接近传统的CKY算法，这也说明了普通的CKY算法是无法捕捉到全局的信息的。还有就是content信息主要作用在最后几层，这也说明了前面几层有点类似于扩张卷积网络。\n\n\n## 窗口Attention\n这一部分也不是什么新鲜玩意了，谷歌的论文中也有提到，主要思想就是限制attention的范围，每个单词只与周围窗口大小内的单词进行计算。在本文中还提出一个relaxed变体，就是除了窗口大小范围外，再加入首尾各两个单词进行attention操作。\n\n如果只在测试阶段进行窗口attention的话，实验结果如下：\n![](5.png)\n可以看出，首尾的4个单词对模型效果有很大的影响，如果加上的话，即使窗口很小，效果下降也不会很多。\n\n然后如果训练和测试阶段都采用窗口attention，结果如下：\n![](6.png)\n这时结果下降反而不是很明显了，其实模型的8层就类似于卷积操作，假设窗口大小为10，那么经过8层计算之后，窗口其实可以覆盖到长度为80的句子，这已经足够了，所以性能没有下降太多不足为奇。\n\n# 模型的一些改进\n---\n## Subword Features\n可以尝试加入CharLSTM来代替随机初始化的tag embdding，并且可以直接删除随机初始化的word embdding，只保留tag embdding和位置向量，效果反而能有提升。\n\n受到其他工作的启发，还可以将每个单词的前后各8个字符向量拼接起来作为输入，但是实验结果不如CharLSTM。\n\n上面的实验结果如下图所示：\n![](7.png)\n可以看出，采用CharLSTM输出作为tag embdding，并且不采用word embdding的效果最好。\n\n## 外部词向量\n---\n如果采用另一项关于词向量的工作成果ELMo，将其预训练的结果作为word embdding，实验结果可以更高。因为该词向量已经很好的学习到了全局的信息，所以模型可以减少到4层，效果比8层更好，结果如下：\n![](8.png)\nF1值大大提高，达到了惊人的95.21%。\n\n# 实验结果\n---\n在PTB数据集上，无论是单模型还是多模型或者加入外部词向量，本文的模型结果都是近来最好的，单模型93.55%，多模型95.13%，对比结果如下：\n![](9.png)\n本文开头已经提到了最高的几个排名，大家可以去看看其他的方法学习学习。\n\n# 总结\n---\n之前的工作大多数围绕解码器的算法优化，但是本文对编码器进行了改进，使其能更好的捕捉全局信息。\n\n同时提出了几点重要的改进：\n* subword的信息（CharLSTM）和预训练的词向量非常重要。\n* 将content和position信息分开可以提升实验结果。\n\n同时在阅读[Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)的同时，我也发现了谷歌的attention模型其实还是有很多问题的，例如模型本身无法捕捉位置信息，需要加入position embdding来表示位置信息，但这只是临时应付措施，今后工作可以探讨更好的解决方案。\n","source":"_posts/ACL18-AttConParsing.md","raw":"---\ntitle: Constituency Parsing with a Self-Attentive Encoder\ndate: 2018-07-04 22:22:06\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=493316158&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Constituency Parsing with a Self-Attentive Encoder](https://arxiv.org/pdf/1805.01052.pdf)\n**代码地址：**[github](https://github.com/nikitakit/self-attentive-parser)\n\n今天要介绍的这篇论文是成分句法分析领域目前的state-of-the-art，结果最高的几篇paper可以参见ruder在github整理的列表：[github](https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md)。\n下面就是成分句法分析目前排名：\n\n| Model | F1 score | Paper / Source |\n| ------------- | :-----:| --- |\n| Self-attentive encoder + ELMo (Kitaev and Klein, 2018) | 95.13 | [Constituency Parsing with a Self-Attentive Encoder](https://arxiv.org/abs/1805.01052) |\n| Model combination (Fried et al., 2017) | 94.66 | [Improving Neural Parsing by Disentangling Model Combination and Reranking Effects](https://arxiv.org/abs/1707.03058) |\n| In-order (Liu and Zhang, 2017) | 94.2 | [In-Order Transition-based Constituent Parsing](http://aclweb.org/anthology/Q17-1029) |\n| Semi-supervised LSTM-LM (Choe and Charniak, 2016) | 93.8 | [Parsing as Language Modeling](http://www.aclweb.org/anthology/D16-1257) | \n| Stack-only RNNG (Kuncoro et al., 2017) | 93.6 | [What Do Recurrent Neural Network Grammars Learn About Syntax?](https://arxiv.org/abs/1611.05774) |\n| RNN Grammar (Dyer et al., 2016) | ﻿93.3 | [Recurrent Neural Network Grammars](https://www.aclweb.org/anthology/N16-1024) |\n| Transformer (Vaswani et al., 2017) | 92.7 | [Attention Is All You Need](https://arxiv.org/abs/1706.03762) |\n| Semi-supervised LSTM (Vinyals et al., 2015) | 92.1  | [Grammar as a Foreign Language](https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf) |\n| Self-trained parser (McClosky et al., 2006) | 92.1 | [Effective Self-Training for Parsing](https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf) |\n\n# 摘要\n---\n本篇论文将之前[A Minimal Span-Based Neural Constituency Parser](http://godweiyang.com/2018/06/28/ACL17-ConParsing/)这篇论文中模型的编码器部分由LSTM替换为了Self-Attentive，来捕捉句子单词内容(content)与位置(position)之间的联系。实验结果可以达到93.55%的F1值，如果再加上预训练的词向量ELMo，那么F1值可以提升到95.13%。这是目前效果最好的一个模型了。\n\nAttention的主要想法借鉴了谷歌的神作：[Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)，这篇论文网上也有很多讲解了，我挑选了一篇讲解比较好的，大家可以先看看：[Attention Is All You Need](https://yq.aliyun.com/articles/342508?utm_content=m_39938)。\n\n# 模型\n---\n## 基本模型\n这部分详见我之前写的一篇笔记：[A Minimal Span-Based Neural Constituency Parser](http://godweiyang.com/2018/06/28/ACL17-ConParsing/)，解码器部分和之前模型基本一致。本文主要探讨的是编码器的构造，也就是如何求出每个span的向量表示，从而得到span的得分$s(i,j,l)$，然后应用解码器进行解码，生成成分句法分析树。\n\n## 词向量表示\n第$t$个单词的词向量由三个部分组成：\n* word embdding：$w_t$，这部分可以用随机初始化的向量，也可以用CharLSTM，也可以用预训练的词向量。\n* tag embdding：$m_t$\n* 位置向量：$p_t$\n\n最终词向量为三部分的加和：\n\\\\[z_t = w_t + m_t + p_t\\\\]\n\n## Self-Attentive\n模型结构如下图所示：\n![](1.png)\n这一部分是不同位置单词互相联系的唯一方式，采用谷歌[Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)中的Self-Attentive模型。\n\n模型一共由8个SingleHead组成，每个SingleHead结构如下图：\n![](2.png)\n计算方式如下：\n\\\\[{\\rm{SingleHead}}(X) = \\left[ { {\\rm{Softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_o}\\\\]\n其中$Q = X{W_Q};K = X{W_K};V = X{W_V}$，而$W_O$用来将输出映射到与输入相同的维度。\n\n详细分析一下计算过程，首先输入矩阵$X = [{z_1},{z_2}, \\ldots ,{z_T}]$是由一个句子中所有词向量组成的矩阵，拼接在一起是为了并行，加快计算速度，$X \\in {\\mathbb{R}^{T \\times {d_{ {model}}}}}$。\n\n然后将$X$映射为三个矩阵，query矩阵$Q$，key矩阵$K$，value矩阵$V$，其中$Q,K \\in {\\mathbb{R}^{ {d_{ {model}}} \\times {d_k}}}$。\n\n我们想要计算单词$i$和单词$j$之间的Attention大小，可以用两者query向量和key向量元素乘得到：\n\\\\[p(i \\to j) \\propto \\exp \\left( {\\frac{ { {q_i} \\cdot {k_j}}}{ {\\sqrt { {d_k}} }}} \\right)\\\\]\n所有单词的value向量乘以单词$i$对它的Attention值，加权求和之后得到的结果就是单词$i$最后的向量表示：\n\\\\[{ {\\bar v}\\_i} = \\sum\\nolimits_j {p(i \\to j){v_j}} \\\\]\n最后乘以$W_O$映射到与输入$X$相同的维度。\n\n整个过程如果写成矩阵形式就是最开始的那个矩阵式子。注意到式子中$Q{K^{\\rm{T}}} \\in {\\mathbb{R}^{ {\\rm{T \\times T}}}}$，矩阵中的每个元素恰好就是Attention值$p(i \\to j)$。$\\sqrt { {d_k}}$是归一化因子。\n\n最后将8个SingleHead的结果求和得到MultiHead结果，注意这8个SingleHead参数不共享：\n\\\\[{\\rm{MultiHead(}}X) = \\sum\\limits_{i = 1}^8 { {\\rm{SingleHea}}{ {\\rm{d}}^{(i)}}(X)} \\\\]\n\n注意到Attention模型有一个很严重的问题，就是无论单词的顺序是怎么样的，都不影响最终的结果。所以在输入中要添加位置向量$p_t$，否则之后会有实验表明，不加的话效果大大下降。\n\n图一中还有一个前馈神经网络的部分，使用的是一个双层前馈神经网络：\n\\\\[{\\rm{FeedForward}}(x) = {W_2}{\\rm{relu}}({W_1}x + {b_1}) + {b_2}\\\\]\n\n## Span得分\n最终的span得分计算方式如下：\n\\\\[s(i,j, \\cdot ) = {M_2}{\\rm{relu}}({\\rm{LayerNorm}}({M_1}v + {c_1})) + {c_2}\\\\]\n其中$v$就是短语的向量表示，由之前的每个单词的向量输出得到：\n\\\\[v = [{ {\\vec y}\\_j} - { {\\vec y}\\_i},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{j + 1}} - { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{i + 1}}]\\\\]\n在之前的LSTM模型中前向后向表示很容易得到，在这里只能通过将输出向量一分为二，一半作为前向表示，一半作为后向表示，实际实现中，偶数维度作为前向表示，奇数维度作为后向表示。\n\n# 模型分析\n---\n## Content vs Position Attention\n之前的模型中，我们采用元素加将三个输入向量求和作为输入，期待模型自己训练出它们之间的权重，将它们很好地分开，但是实际上效果并不好。\n\n下面论文做了许多实验来探讨content和position的重要性。\n\n首先修改模型输入，令$Q=PW_Q,K=PW_K$，也就是丢弃了content信息，但是最后结果只下降了0.27个百分点，说明了content信息对模型影响不是很大。\n\n然后为了验证是不是元素加导致content和position信息混合在一起模型无法分开，实验将输入向量显示分开，输入改为\n\\\\[z_t=[w_t+m_t;p_t]\\\\]\n但是实验结果只下降了0.07个百分点，说明不是这个因素导致的。事实上元素加和拼接操作在高维度上面是相似的，特别是之后立即乘上了一个矩阵，这就会混合里面的信息。\n\n所以最好的解决办法就是将content和position向量分开计算attention，最后求和。这样attention矩阵就可以表示为：\n\\\\[QK^{\\rm{T}} = {Q_c}K_c^{\\rm{T}} + {Q_p}K_p^{\\rm{T}}\\\\]\n这时的权重矩阵$W$就可以写为\n\\\\[W = \\left[ {\\begin{array}{\\*{20}{c}}{ {W_c}}&0\\\\0&{ {W_p}}\\end{array}} \\right]\\\\]\n\n通过将content和position信息分开，模型的效果从92.67%提升到了93.15%，模型示意图如下：\n![](3.png)\n\n最后的实验在测试阶段的8层模型中，每一层手动选择采不采用content或者position attention，实验结果如下：\n![](4.png)\n可以发现，不用position信息的话结果大大下降，接近传统的CKY算法，这也说明了普通的CKY算法是无法捕捉到全局的信息的。还有就是content信息主要作用在最后几层，这也说明了前面几层有点类似于扩张卷积网络。\n\n\n## 窗口Attention\n这一部分也不是什么新鲜玩意了，谷歌的论文中也有提到，主要思想就是限制attention的范围，每个单词只与周围窗口大小内的单词进行计算。在本文中还提出一个relaxed变体，就是除了窗口大小范围外，再加入首尾各两个单词进行attention操作。\n\n如果只在测试阶段进行窗口attention的话，实验结果如下：\n![](5.png)\n可以看出，首尾的4个单词对模型效果有很大的影响，如果加上的话，即使窗口很小，效果下降也不会很多。\n\n然后如果训练和测试阶段都采用窗口attention，结果如下：\n![](6.png)\n这时结果下降反而不是很明显了，其实模型的8层就类似于卷积操作，假设窗口大小为10，那么经过8层计算之后，窗口其实可以覆盖到长度为80的句子，这已经足够了，所以性能没有下降太多不足为奇。\n\n# 模型的一些改进\n---\n## Subword Features\n可以尝试加入CharLSTM来代替随机初始化的tag embdding，并且可以直接删除随机初始化的word embdding，只保留tag embdding和位置向量，效果反而能有提升。\n\n受到其他工作的启发，还可以将每个单词的前后各8个字符向量拼接起来作为输入，但是实验结果不如CharLSTM。\n\n上面的实验结果如下图所示：\n![](7.png)\n可以看出，采用CharLSTM输出作为tag embdding，并且不采用word embdding的效果最好。\n\n## 外部词向量\n---\n如果采用另一项关于词向量的工作成果ELMo，将其预训练的结果作为word embdding，实验结果可以更高。因为该词向量已经很好的学习到了全局的信息，所以模型可以减少到4层，效果比8层更好，结果如下：\n![](8.png)\nF1值大大提高，达到了惊人的95.21%。\n\n# 实验结果\n---\n在PTB数据集上，无论是单模型还是多模型或者加入外部词向量，本文的模型结果都是近来最好的，单模型93.55%，多模型95.13%，对比结果如下：\n![](9.png)\n本文开头已经提到了最高的几个排名，大家可以去看看其他的方法学习学习。\n\n# 总结\n---\n之前的工作大多数围绕解码器的算法优化，但是本文对编码器进行了改进，使其能更好的捕捉全局信息。\n\n同时提出了几点重要的改进：\n* subword的信息（CharLSTM）和预训练的词向量非常重要。\n* 将content和position信息分开可以提升实验结果。\n\n同时在阅读[Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)的同时，我也发现了谷歌的attention模型其实还是有很多问题的，例如模型本身无法捕捉位置信息，需要加入position embdding来表示位置信息，但这只是临时应付措施，今后工作可以探讨更好的解决方案。\n","slug":"ACL18-AttConParsing","published":1,"updated":"2019-07-20T04:01:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9823a000h7swe62coip1m","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=493316158&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/pdf/1805.01052.pdf\" target=\"_blank\" rel=\"noopener\">Constituency Parsing with a Self-Attentive Encoder</a><br><strong>代码地址：</strong><a href=\"https://github.com/nikitakit/self-attentive-parser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的这篇论文是成分句法分析领域目前的state-of-the-art，结果最高的几篇paper可以参见ruder在github整理的列表：<a href=\"https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md\" target=\"_blank\" rel=\"noopener\">github</a>。<br>下面就是成分句法分析目前排名：</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th align=\"center\">F1 score</th>\n<th>Paper / Source</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Self-attentive encoder + ELMo (Kitaev and Klein, 2018)</td>\n<td align=\"center\">95.13</td>\n<td><a href=\"https://arxiv.org/abs/1805.01052\" target=\"_blank\" rel=\"noopener\">Constituency Parsing with a Self-Attentive Encoder</a></td>\n</tr>\n<tr>\n<td>Model combination (Fried et al., 2017)</td>\n<td align=\"center\">94.66</td>\n<td><a href=\"https://arxiv.org/abs/1707.03058\" target=\"_blank\" rel=\"noopener\">Improving Neural Parsing by Disentangling Model Combination and Reranking Effects</a></td>\n</tr>\n<tr>\n<td>In-order (Liu and Zhang, 2017)</td>\n<td align=\"center\">94.2</td>\n<td><a href=\"http://aclweb.org/anthology/Q17-1029\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM-LM (Choe and Charniak, 2016)</td>\n<td align=\"center\">93.8</td>\n<td><a href=\"http://www.aclweb.org/anthology/D16-1257\" target=\"_blank\" rel=\"noopener\">Parsing as Language Modeling</a></td>\n</tr>\n<tr>\n<td>Stack-only RNNG (Kuncoro et al., 2017)</td>\n<td align=\"center\">93.6</td>\n<td><a href=\"https://arxiv.org/abs/1611.05774\" target=\"_blank\" rel=\"noopener\">What Do Recurrent Neural Network Grammars Learn About Syntax?</a></td>\n</tr>\n<tr>\n<td>RNN Grammar (Dyer et al., 2016)</td>\n<td align=\"center\">93.3</td>\n<td><a href=\"https://www.aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a></td>\n</tr>\n<tr>\n<td>Transformer (Vaswani et al., 2017)</td>\n<td align=\"center\">92.7</td>\n<td><a href=\"https://arxiv.org/abs/1706.03762\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM (Vinyals et al., 2015)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf\" target=\"_blank\" rel=\"noopener\">Grammar as a Foreign Language</a></td>\n</tr>\n<tr>\n<td>Self-trained parser (McClosky et al., 2006)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf\" target=\"_blank\" rel=\"noopener\">Effective Self-Training for Parsing</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>本篇论文将之前<a href=\"http://godweiyang.com/2018/06/28/ACL17-ConParsing/\">A Minimal Span-Based Neural Constituency Parser</a>这篇论文中模型的编码器部分由LSTM替换为了Self-Attentive，来捕捉句子单词内容(content)与位置(position)之间的联系。实验结果可以达到93.55%的F1值，如果再加上预训练的词向量ELMo，那么F1值可以提升到95.13%。这是目前效果最好的一个模型了。</p>\n<p>Attention的主要想法借鉴了谷歌的神作：<a href=\"https://arxiv.org/pdf/1706.03762.pdf\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>，这篇论文网上也有很多讲解了，我挑选了一篇讲解比较好的，大家可以先看看：<a href=\"https://yq.aliyun.com/articles/342508?utm_content=m_39938\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<h2 id=\"基本模型\"><a href=\"#基本模型\" class=\"headerlink\" title=\"基本模型\"></a>基本模型</h2><p>这部分详见我之前写的一篇笔记：<a href=\"http://godweiyang.com/2018/06/28/ACL17-ConParsing/\">A Minimal Span-Based Neural Constituency Parser</a>，解码器部分和之前模型基本一致。本文主要探讨的是编码器的构造，也就是如何求出每个span的向量表示，从而得到span的得分$s(i,j,l)$，然后应用解码器进行解码，生成成分句法分析树。</p>\n<h2 id=\"词向量表示\"><a href=\"#词向量表示\" class=\"headerlink\" title=\"词向量表示\"></a>词向量表示</h2><p>第$t$个单词的词向量由三个部分组成：</p>\n<ul>\n<li>word embdding：$w_t$，这部分可以用随机初始化的向量，也可以用CharLSTM，也可以用预训练的词向量。</li>\n<li>tag embdding：$m_t$</li>\n<li>位置向量：$p_t$</li>\n</ul>\n<p>最终词向量为三部分的加和：<br>\\[z_t = w_t + m_t + p_t\\]</p>\n<h2 id=\"Self-Attentive\"><a href=\"#Self-Attentive\" class=\"headerlink\" title=\"Self-Attentive\"></a>Self-Attentive</h2><p>模型结构如下图所示：<br><img src=\"1.png\" alt><br>这一部分是不同位置单词互相联系的唯一方式，采用谷歌<a href=\"https://arxiv.org/pdf/1706.03762.pdf\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>中的Self-Attentive模型。</p>\n<p>模型一共由8个SingleHead组成，每个SingleHead结构如下图：<br><img src=\"2.png\" alt><br>计算方式如下：<br>\\[{\\rm{SingleHead}}(X) = \\left[ { {\\rm{Softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_o}\\]<br>其中$Q = X{W_Q};K = X{W_K};V = X{W_V}$，而$W_O$用来将输出映射到与输入相同的维度。</p>\n<p>详细分析一下计算过程，首先输入矩阵$X = [{z_1},{z_2}, \\ldots ,{z_T}]$是由一个句子中所有词向量组成的矩阵，拼接在一起是为了并行，加快计算速度，$X \\in {\\mathbb{R}^{T \\times {d_{ {model}}}}}$。</p>\n<p>然后将$X$映射为三个矩阵，query矩阵$Q$，key矩阵$K$，value矩阵$V$，其中$Q,K \\in {\\mathbb{R}^{ {d_{ {model}}} \\times {d_k}}}$。</p>\n<p>我们想要计算单词$i$和单词$j$之间的Attention大小，可以用两者query向量和key向量元素乘得到：<br>\\[p(i \\to j) \\propto \\exp \\left( {\\frac{ { {q_i} \\cdot {k_j}}}{ {\\sqrt { {d_k}} }}} \\right)\\]<br>所有单词的value向量乘以单词$i$对它的Attention值，加权求和之后得到的结果就是单词$i$最后的向量表示：<br>\\[{ {\\bar v}_i} = \\sum\\nolimits_j {p(i \\to j){v_j}} \\]<br>最后乘以$W_O$映射到与输入$X$相同的维度。</p>\n<p>整个过程如果写成矩阵形式就是最开始的那个矩阵式子。注意到式子中$Q{K^{\\rm{T}}} \\in {\\mathbb{R}^{ {\\rm{T \\times T}}}}$，矩阵中的每个元素恰好就是Attention值$p(i \\to j)$。$\\sqrt { {d_k}}$是归一化因子。</p>\n<p>最后将8个SingleHead的结果求和得到MultiHead结果，注意这8个SingleHead参数不共享：<br>\\[{\\rm{MultiHead(}}X) = \\sum\\limits_{i = 1}^8 { {\\rm{SingleHea}}{ {\\rm{d}}^{(i)}}(X)} \\]</p>\n<p>注意到Attention模型有一个很严重的问题，就是无论单词的顺序是怎么样的，都不影响最终的结果。所以在输入中要添加位置向量$p_t$，否则之后会有实验表明，不加的话效果大大下降。</p>\n<p>图一中还有一个前馈神经网络的部分，使用的是一个双层前馈神经网络：<br>\\[{\\rm{FeedForward}}(x) = {W_2}{\\rm{relu}}({W_1}x + {b_1}) + {b_2}\\]</p>\n<h2 id=\"Span得分\"><a href=\"#Span得分\" class=\"headerlink\" title=\"Span得分\"></a>Span得分</h2><p>最终的span得分计算方式如下：<br>\\[s(i,j, \\cdot ) = {M_2}{\\rm{relu}}({\\rm{LayerNorm}}({M_1}v + {c_1})) + {c_2}\\]<br>其中$v$就是短语的向量表示，由之前的每个单词的向量输出得到：<br>\\[v = [{ {\\vec y}_j} - { {\\vec y}_i},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{j + 1}} - { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{i + 1}}]\\]<br>在之前的LSTM模型中前向后向表示很容易得到，在这里只能通过将输出向量一分为二，一半作为前向表示，一半作为后向表示，实际实现中，偶数维度作为前向表示，奇数维度作为后向表示。</p>\n<h1 id=\"模型分析\"><a href=\"#模型分析\" class=\"headerlink\" title=\"模型分析\"></a>模型分析</h1><hr>\n<h2 id=\"Content-vs-Position-Attention\"><a href=\"#Content-vs-Position-Attention\" class=\"headerlink\" title=\"Content vs Position Attention\"></a>Content vs Position Attention</h2><p>之前的模型中，我们采用元素加将三个输入向量求和作为输入，期待模型自己训练出它们之间的权重，将它们很好地分开，但是实际上效果并不好。</p>\n<p>下面论文做了许多实验来探讨content和position的重要性。</p>\n<p>首先修改模型输入，令$Q=PW_Q,K=PW_K$，也就是丢弃了content信息，但是最后结果只下降了0.27个百分点，说明了content信息对模型影响不是很大。</p>\n<p>然后为了验证是不是元素加导致content和position信息混合在一起模型无法分开，实验将输入向量显示分开，输入改为<br>\\[z_t=[w_t+m_t;p_t]\\]<br>但是实验结果只下降了0.07个百分点，说明不是这个因素导致的。事实上元素加和拼接操作在高维度上面是相似的，特别是之后立即乘上了一个矩阵，这就会混合里面的信息。</p>\n<p>所以最好的解决办法就是将content和position向量分开计算attention，最后求和。这样attention矩阵就可以表示为：<br>\\[QK^{\\rm{T}} = {Q_c}K_c^{\\rm{T}} + {Q_p}K_p^{\\rm{T}}\\]<br>这时的权重矩阵$W$就可以写为<br>\\[W = \\left[ {\\begin{array}{*{20}{c}}{ {W_c}}&amp;0\\\\0&amp;{ {W_p}}\\end{array}} \\right]\\]</p>\n<p>通过将content和position信息分开，模型的效果从92.67%提升到了93.15%，模型示意图如下：<br><img src=\"3.png\" alt></p>\n<p>最后的实验在测试阶段的8层模型中，每一层手动选择采不采用content或者position attention，实验结果如下：<br><img src=\"4.png\" alt><br>可以发现，不用position信息的话结果大大下降，接近传统的CKY算法，这也说明了普通的CKY算法是无法捕捉到全局的信息的。还有就是content信息主要作用在最后几层，这也说明了前面几层有点类似于扩张卷积网络。</p>\n<h2 id=\"窗口Attention\"><a href=\"#窗口Attention\" class=\"headerlink\" title=\"窗口Attention\"></a>窗口Attention</h2><p>这一部分也不是什么新鲜玩意了，谷歌的论文中也有提到，主要思想就是限制attention的范围，每个单词只与周围窗口大小内的单词进行计算。在本文中还提出一个relaxed变体，就是除了窗口大小范围外，再加入首尾各两个单词进行attention操作。</p>\n<p>如果只在测试阶段进行窗口attention的话，实验结果如下：<br><img src=\"5.png\" alt><br>可以看出，首尾的4个单词对模型效果有很大的影响，如果加上的话，即使窗口很小，效果下降也不会很多。</p>\n<p>然后如果训练和测试阶段都采用窗口attention，结果如下：<br><img src=\"6.png\" alt><br>这时结果下降反而不是很明显了，其实模型的8层就类似于卷积操作，假设窗口大小为10，那么经过8层计算之后，窗口其实可以覆盖到长度为80的句子，这已经足够了，所以性能没有下降太多不足为奇。</p>\n<h1 id=\"模型的一些改进\"><a href=\"#模型的一些改进\" class=\"headerlink\" title=\"模型的一些改进\"></a>模型的一些改进</h1><hr>\n<h2 id=\"Subword-Features\"><a href=\"#Subword-Features\" class=\"headerlink\" title=\"Subword Features\"></a>Subword Features</h2><p>可以尝试加入CharLSTM来代替随机初始化的tag embdding，并且可以直接删除随机初始化的word embdding，只保留tag embdding和位置向量，效果反而能有提升。</p>\n<p>受到其他工作的启发，还可以将每个单词的前后各8个字符向量拼接起来作为输入，但是实验结果不如CharLSTM。</p>\n<p>上面的实验结果如下图所示：<br><img src=\"7.png\" alt><br>可以看出，采用CharLSTM输出作为tag embdding，并且不采用word embdding的效果最好。</p>\n<h2 id=\"外部词向量\"><a href=\"#外部词向量\" class=\"headerlink\" title=\"外部词向量\"></a>外部词向量</h2><hr>\n<p>如果采用另一项关于词向量的工作成果ELMo，将其预训练的结果作为word embdding，实验结果可以更高。因为该词向量已经很好的学习到了全局的信息，所以模型可以减少到4层，效果比8层更好，结果如下：<br><img src=\"8.png\" alt><br>F1值大大提高，达到了惊人的95.21%。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>在PTB数据集上，无论是单模型还是多模型或者加入外部词向量，本文的模型结果都是近来最好的，单模型93.55%，多模型95.13%，对比结果如下：<br><img src=\"9.png\" alt><br>本文开头已经提到了最高的几个排名，大家可以去看看其他的方法学习学习。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>之前的工作大多数围绕解码器的算法优化，但是本文对编码器进行了改进，使其能更好的捕捉全局信息。</p>\n<p>同时提出了几点重要的改进：</p>\n<ul>\n<li>subword的信息（CharLSTM）和预训练的词向量非常重要。</li>\n<li>将content和position信息分开可以提升实验结果。</li>\n</ul>\n<p>同时在阅读<a href=\"https://arxiv.org/pdf/1706.03762.pdf\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>的同时，我也发现了谷歌的attention模型其实还是有很多问题的，例如模型本身无法捕捉位置信息，需要加入position embdding来表示位置信息，但这只是临时应付措施，今后工作可以探讨更好的解决方案。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=493316158&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/pdf/1805.01052.pdf\" target=\"_blank\" rel=\"noopener\">Constituency Parsing with a Self-Attentive Encoder</a><br><strong>代码地址：</strong><a href=\"https://github.com/nikitakit/self-attentive-parser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的这篇论文是成分句法分析领域目前的state-of-the-art，结果最高的几篇paper可以参见ruder在github整理的列表：<a href=\"https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md\" target=\"_blank\" rel=\"noopener\">github</a>。<br>下面就是成分句法分析目前排名：</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th align=\"center\">F1 score</th>\n<th>Paper / Source</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Self-attentive encoder + ELMo (Kitaev and Klein, 2018)</td>\n<td align=\"center\">95.13</td>\n<td><a href=\"https://arxiv.org/abs/1805.01052\" target=\"_blank\" rel=\"noopener\">Constituency Parsing with a Self-Attentive Encoder</a></td>\n</tr>\n<tr>\n<td>Model combination (Fried et al., 2017)</td>\n<td align=\"center\">94.66</td>\n<td><a href=\"https://arxiv.org/abs/1707.03058\" target=\"_blank\" rel=\"noopener\">Improving Neural Parsing by Disentangling Model Combination and Reranking Effects</a></td>\n</tr>\n<tr>\n<td>In-order (Liu and Zhang, 2017)</td>\n<td align=\"center\">94.2</td>\n<td><a href=\"http://aclweb.org/anthology/Q17-1029\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM-LM (Choe and Charniak, 2016)</td>\n<td align=\"center\">93.8</td>\n<td><a href=\"http://www.aclweb.org/anthology/D16-1257\" target=\"_blank\" rel=\"noopener\">Parsing as Language Modeling</a></td>\n</tr>\n<tr>\n<td>Stack-only RNNG (Kuncoro et al., 2017)</td>\n<td align=\"center\">93.6</td>\n<td><a href=\"https://arxiv.org/abs/1611.05774\" target=\"_blank\" rel=\"noopener\">What Do Recurrent Neural Network Grammars Learn About Syntax?</a></td>\n</tr>\n<tr>\n<td>RNN Grammar (Dyer et al., 2016)</td>\n<td align=\"center\">93.3</td>\n<td><a href=\"https://www.aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a></td>\n</tr>\n<tr>\n<td>Transformer (Vaswani et al., 2017)</td>\n<td align=\"center\">92.7</td>\n<td><a href=\"https://arxiv.org/abs/1706.03762\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM (Vinyals et al., 2015)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf\" target=\"_blank\" rel=\"noopener\">Grammar as a Foreign Language</a></td>\n</tr>\n<tr>\n<td>Self-trained parser (McClosky et al., 2006)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf\" target=\"_blank\" rel=\"noopener\">Effective Self-Training for Parsing</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>本篇论文将之前<a href=\"http://godweiyang.com/2018/06/28/ACL17-ConParsing/\">A Minimal Span-Based Neural Constituency Parser</a>这篇论文中模型的编码器部分由LSTM替换为了Self-Attentive，来捕捉句子单词内容(content)与位置(position)之间的联系。实验结果可以达到93.55%的F1值，如果再加上预训练的词向量ELMo，那么F1值可以提升到95.13%。这是目前效果最好的一个模型了。</p>\n<p>Attention的主要想法借鉴了谷歌的神作：<a href=\"https://arxiv.org/pdf/1706.03762.pdf\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>，这篇论文网上也有很多讲解了，我挑选了一篇讲解比较好的，大家可以先看看：<a href=\"https://yq.aliyun.com/articles/342508?utm_content=m_39938\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<h2 id=\"基本模型\"><a href=\"#基本模型\" class=\"headerlink\" title=\"基本模型\"></a>基本模型</h2><p>这部分详见我之前写的一篇笔记：<a href=\"http://godweiyang.com/2018/06/28/ACL17-ConParsing/\">A Minimal Span-Based Neural Constituency Parser</a>，解码器部分和之前模型基本一致。本文主要探讨的是编码器的构造，也就是如何求出每个span的向量表示，从而得到span的得分$s(i,j,l)$，然后应用解码器进行解码，生成成分句法分析树。</p>\n<h2 id=\"词向量表示\"><a href=\"#词向量表示\" class=\"headerlink\" title=\"词向量表示\"></a>词向量表示</h2><p>第$t$个单词的词向量由三个部分组成：</p>\n<ul>\n<li>word embdding：$w_t$，这部分可以用随机初始化的向量，也可以用CharLSTM，也可以用预训练的词向量。</li>\n<li>tag embdding：$m_t$</li>\n<li>位置向量：$p_t$</li>\n</ul>\n<p>最终词向量为三部分的加和：<br>\\[z_t = w_t + m_t + p_t\\]</p>\n<h2 id=\"Self-Attentive\"><a href=\"#Self-Attentive\" class=\"headerlink\" title=\"Self-Attentive\"></a>Self-Attentive</h2><p>模型结构如下图所示：<br><img src=\"1.png\" alt><br>这一部分是不同位置单词互相联系的唯一方式，采用谷歌<a href=\"https://arxiv.org/pdf/1706.03762.pdf\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>中的Self-Attentive模型。</p>\n<p>模型一共由8个SingleHead组成，每个SingleHead结构如下图：<br><img src=\"2.png\" alt><br>计算方式如下：<br>\\[{\\rm{SingleHead}}(X) = \\left[ { {\\rm{Softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_o}\\]<br>其中$Q = X{W_Q};K = X{W_K};V = X{W_V}$，而$W_O$用来将输出映射到与输入相同的维度。</p>\n<p>详细分析一下计算过程，首先输入矩阵$X = [{z_1},{z_2}, \\ldots ,{z_T}]$是由一个句子中所有词向量组成的矩阵，拼接在一起是为了并行，加快计算速度，$X \\in {\\mathbb{R}^{T \\times {d_{ {model}}}}}$。</p>\n<p>然后将$X$映射为三个矩阵，query矩阵$Q$，key矩阵$K$，value矩阵$V$，其中$Q,K \\in {\\mathbb{R}^{ {d_{ {model}}} \\times {d_k}}}$。</p>\n<p>我们想要计算单词$i$和单词$j$之间的Attention大小，可以用两者query向量和key向量元素乘得到：<br>\\[p(i \\to j) \\propto \\exp \\left( {\\frac{ { {q_i} \\cdot {k_j}}}{ {\\sqrt { {d_k}} }}} \\right)\\]<br>所有单词的value向量乘以单词$i$对它的Attention值，加权求和之后得到的结果就是单词$i$最后的向量表示：<br>\\[{ {\\bar v}_i} = \\sum\\nolimits_j {p(i \\to j){v_j}} \\]<br>最后乘以$W_O$映射到与输入$X$相同的维度。</p>\n<p>整个过程如果写成矩阵形式就是最开始的那个矩阵式子。注意到式子中$Q{K^{\\rm{T}}} \\in {\\mathbb{R}^{ {\\rm{T \\times T}}}}$，矩阵中的每个元素恰好就是Attention值$p(i \\to j)$。$\\sqrt { {d_k}}$是归一化因子。</p>\n<p>最后将8个SingleHead的结果求和得到MultiHead结果，注意这8个SingleHead参数不共享：<br>\\[{\\rm{MultiHead(}}X) = \\sum\\limits_{i = 1}^8 { {\\rm{SingleHea}}{ {\\rm{d}}^{(i)}}(X)} \\]</p>\n<p>注意到Attention模型有一个很严重的问题，就是无论单词的顺序是怎么样的，都不影响最终的结果。所以在输入中要添加位置向量$p_t$，否则之后会有实验表明，不加的话效果大大下降。</p>\n<p>图一中还有一个前馈神经网络的部分，使用的是一个双层前馈神经网络：<br>\\[{\\rm{FeedForward}}(x) = {W_2}{\\rm{relu}}({W_1}x + {b_1}) + {b_2}\\]</p>\n<h2 id=\"Span得分\"><a href=\"#Span得分\" class=\"headerlink\" title=\"Span得分\"></a>Span得分</h2><p>最终的span得分计算方式如下：<br>\\[s(i,j, \\cdot ) = {M_2}{\\rm{relu}}({\\rm{LayerNorm}}({M_1}v + {c_1})) + {c_2}\\]<br>其中$v$就是短语的向量表示，由之前的每个单词的向量输出得到：<br>\\[v = [{ {\\vec y}_j} - { {\\vec y}_i},{ {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{j + 1}} - { {\\mathord{\\buildrel{\\lower3pt\\hbox{$\\scriptscriptstyle\\leftarrow$}} \\over y} }_{i + 1}}]\\]<br>在之前的LSTM模型中前向后向表示很容易得到，在这里只能通过将输出向量一分为二，一半作为前向表示，一半作为后向表示，实际实现中，偶数维度作为前向表示，奇数维度作为后向表示。</p>\n<h1 id=\"模型分析\"><a href=\"#模型分析\" class=\"headerlink\" title=\"模型分析\"></a>模型分析</h1><hr>\n<h2 id=\"Content-vs-Position-Attention\"><a href=\"#Content-vs-Position-Attention\" class=\"headerlink\" title=\"Content vs Position Attention\"></a>Content vs Position Attention</h2><p>之前的模型中，我们采用元素加将三个输入向量求和作为输入，期待模型自己训练出它们之间的权重，将它们很好地分开，但是实际上效果并不好。</p>\n<p>下面论文做了许多实验来探讨content和position的重要性。</p>\n<p>首先修改模型输入，令$Q=PW_Q,K=PW_K$，也就是丢弃了content信息，但是最后结果只下降了0.27个百分点，说明了content信息对模型影响不是很大。</p>\n<p>然后为了验证是不是元素加导致content和position信息混合在一起模型无法分开，实验将输入向量显示分开，输入改为<br>\\[z_t=[w_t+m_t;p_t]\\]<br>但是实验结果只下降了0.07个百分点，说明不是这个因素导致的。事实上元素加和拼接操作在高维度上面是相似的，特别是之后立即乘上了一个矩阵，这就会混合里面的信息。</p>\n<p>所以最好的解决办法就是将content和position向量分开计算attention，最后求和。这样attention矩阵就可以表示为：<br>\\[QK^{\\rm{T}} = {Q_c}K_c^{\\rm{T}} + {Q_p}K_p^{\\rm{T}}\\]<br>这时的权重矩阵$W$就可以写为<br>\\[W = \\left[ {\\begin{array}{*{20}{c}}{ {W_c}}&amp;0\\\\0&amp;{ {W_p}}\\end{array}} \\right]\\]</p>\n<p>通过将content和position信息分开，模型的效果从92.67%提升到了93.15%，模型示意图如下：<br><img src=\"3.png\" alt></p>\n<p>最后的实验在测试阶段的8层模型中，每一层手动选择采不采用content或者position attention，实验结果如下：<br><img src=\"4.png\" alt><br>可以发现，不用position信息的话结果大大下降，接近传统的CKY算法，这也说明了普通的CKY算法是无法捕捉到全局的信息的。还有就是content信息主要作用在最后几层，这也说明了前面几层有点类似于扩张卷积网络。</p>\n<h2 id=\"窗口Attention\"><a href=\"#窗口Attention\" class=\"headerlink\" title=\"窗口Attention\"></a>窗口Attention</h2><p>这一部分也不是什么新鲜玩意了，谷歌的论文中也有提到，主要思想就是限制attention的范围，每个单词只与周围窗口大小内的单词进行计算。在本文中还提出一个relaxed变体，就是除了窗口大小范围外，再加入首尾各两个单词进行attention操作。</p>\n<p>如果只在测试阶段进行窗口attention的话，实验结果如下：<br><img src=\"5.png\" alt><br>可以看出，首尾的4个单词对模型效果有很大的影响，如果加上的话，即使窗口很小，效果下降也不会很多。</p>\n<p>然后如果训练和测试阶段都采用窗口attention，结果如下：<br><img src=\"6.png\" alt><br>这时结果下降反而不是很明显了，其实模型的8层就类似于卷积操作，假设窗口大小为10，那么经过8层计算之后，窗口其实可以覆盖到长度为80的句子，这已经足够了，所以性能没有下降太多不足为奇。</p>\n<h1 id=\"模型的一些改进\"><a href=\"#模型的一些改进\" class=\"headerlink\" title=\"模型的一些改进\"></a>模型的一些改进</h1><hr>\n<h2 id=\"Subword-Features\"><a href=\"#Subword-Features\" class=\"headerlink\" title=\"Subword Features\"></a>Subword Features</h2><p>可以尝试加入CharLSTM来代替随机初始化的tag embdding，并且可以直接删除随机初始化的word embdding，只保留tag embdding和位置向量，效果反而能有提升。</p>\n<p>受到其他工作的启发，还可以将每个单词的前后各8个字符向量拼接起来作为输入，但是实验结果不如CharLSTM。</p>\n<p>上面的实验结果如下图所示：<br><img src=\"7.png\" alt><br>可以看出，采用CharLSTM输出作为tag embdding，并且不采用word embdding的效果最好。</p>\n<h2 id=\"外部词向量\"><a href=\"#外部词向量\" class=\"headerlink\" title=\"外部词向量\"></a>外部词向量</h2><hr>\n<p>如果采用另一项关于词向量的工作成果ELMo，将其预训练的结果作为word embdding，实验结果可以更高。因为该词向量已经很好的学习到了全局的信息，所以模型可以减少到4层，效果比8层更好，结果如下：<br><img src=\"8.png\" alt><br>F1值大大提高，达到了惊人的95.21%。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>在PTB数据集上，无论是单模型还是多模型或者加入外部词向量，本文的模型结果都是近来最好的，单模型93.55%，多模型95.13%，对比结果如下：<br><img src=\"9.png\" alt><br>本文开头已经提到了最高的几个排名，大家可以去看看其他的方法学习学习。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>之前的工作大多数围绕解码器的算法优化，但是本文对编码器进行了改进，使其能更好的捕捉全局信息。</p>\n<p>同时提出了几点重要的改进：</p>\n<ul>\n<li>subword的信息（CharLSTM）和预训练的词向量非常重要。</li>\n<li>将content和position信息分开可以提升实验结果。</li>\n</ul>\n<p>同时在阅读<a href=\"https://arxiv.org/pdf/1706.03762.pdf\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a>的同时，我也发现了谷歌的attention模型其实还是有很多问题的，例如模型本身无法捕捉位置信息，需要加入position embdding来表示位置信息，但这只是临时应付措施，今后工作可以探讨更好的解决方案。</p>\n"},{"title":"Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources","date":"2017-12-18T16:34:33.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"论文链接：[D17-1302](https://www.aclweb.org/anthology/D/D17/D17-1302.pdf)\n\n# 摘要\n---\n本文介绍了一个跨语言的序列标注迁移模型，和以往不同的是，不需要大量的跨语言语料。\n\n# 1 介绍\n---\n之前正好才看过一篇Yang et al. (2017)的论文Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks，还写了博客笔记[[传送门]](http://godweiyang.com/2017/11/13/ICLR17-1/)。然而本文上来就说，他的模型不好！因为他的模型共享了字符层，其他层都是独立的，这样就导致了两种字符没有交集的语言迁移会很困难。\n于是本文提出了基于一个公有LSTM和一个私有LSTM的模型。不过，我还是没明白这个字符层和前文批判的那个有啥区别。。。\n\n# 2 模型\n---\n模型结构如下图所示：\n![](1.png)\n### 跨语言训练\n整体训练过程是这样的：首先输入一个句子，对于每个单词中的每个字符，输入到双向LSTM中，取前向后向LSTM的最后一个隐含层输出，连接到一起来作为词的表示。然后输入到公有和私有LSTM中训练，最后的损失函数有三个。\n图中蓝色部分是公有部分，红色部分是私有部分。紫色部分是不同语言预测出的结果，三个红色方框是三个损失函数。\n其中softmax层的损失函数定义为：\n![](2.png)\n$S$是句子个数，$N$是当前句子单词数，${p_{i,j}}$第$i$个句子的第$j$个标签，${\\hat p_{i,j}}$是预测标签。\n### 语言对抗训练\n为了让公有的LSTM部分变得语言无关，所以要对他进行语言对抗训练。\n首先对公有LSTM的输出进行CNN/MaxPool编码（其实就是每一个维度取最大值），三个卷积层，得到三个向量，再连接到一起得到最终的向量表示，经过一个梯度反转层，最后输入到语言鉴别器。\n这个语言鉴别器就是一个单隐含层的全连接的神经网络，激活函数用的是Leaky ReLU，具体就是当x>=0时，f(x)=x；当x<0时，f(x)=ax，这里a取0.2。\n最后得到的损失函数定义为：\n![](3.png)\n其中${l_{i}}$是第i个句子的语言，${\\hat l_{i}}$是预测出的语言（原文说的是softmax输出的标签？？？这里不是很理解）。\n由于经过了梯度反转层，所以这个语言鉴别器并不能鉴别出是哪一种语言，反而对两种语言的界限混淆了，使得它变得越来越语言无关了。\n### 双向语言模型\n这个就不用多说了，很多地方都用到了，之前的两篇半监督序列标注的论文也都提到了加入语言模型来提升效果，而且注意的是，就算是没有标注的数据也可以加入进语言模型的训练。\n语言模型的损失函数定义为：\n![](4.png)\n其中f和b分别代表前向和后向LSTM输出。\n最终，三个损失函数合并起来定义一个总的损失函数：\n![](5.png)\n其中$\\lambda $随着训练进行缓慢的从0上升到1，这是为了增加额外损失函数的训练稳定性。\n而$w_{s}$是为了给源语言和目标语言不同的权重的，当训练目标语言是，权重为1，否则权重为目标语言训练集大小/源语言训练集大小。\n\n# 3 实验\n实验针对目标语言训练句子数为1280、320和32分别做了对比。\n其中1280个句子的结果如下：\n![](6.png)\n可以看出加入迁移学习后结果提升还是比较大的，表格中c表示公有LSTM，l表示语言模型，p表示私有LSTM，a表示语言对抗训练。本文的模型(c,p,l+a)结果是最好的。\n320个句子的结果如下：\n![](7.png)\n依然有提升，但是提升很不明显了，而且有几种语言直接采用私有LSTM+语言模型效果反而最好。原因就是目标语言的训练数据太少了，不足以训练出完美的公有和私有模型。\n32个句子的训练数据就没有放出具体结果，结果依然有略微提升的，但是已经可以忽略不计了。\n反过来思考，如果用上全部的目标语言训练数据，那么出来的结果会怎么样？事实是反而下降了，还不如直接用私有LSTM。\n最后还做了一个实验，就是用多种不同的源语言+目标语言来训练模型，发现效果比用单种源语言效果好。","source":"_posts/EMNLP17-1.md","raw":"---\ntitle: Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources\ndate: 2017-12-19 00:34:33\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EMNLP\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 迁移学习\n- 序列标注\ncategories:\n- 序列标注\n---\n论文链接：[D17-1302](https://www.aclweb.org/anthology/D/D17/D17-1302.pdf)\n\n# 摘要\n---\n本文介绍了一个跨语言的序列标注迁移模型，和以往不同的是，不需要大量的跨语言语料。\n\n# 1 介绍\n---\n之前正好才看过一篇Yang et al. (2017)的论文Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks，还写了博客笔记[[传送门]](http://godweiyang.com/2017/11/13/ICLR17-1/)。然而本文上来就说，他的模型不好！因为他的模型共享了字符层，其他层都是独立的，这样就导致了两种字符没有交集的语言迁移会很困难。\n于是本文提出了基于一个公有LSTM和一个私有LSTM的模型。不过，我还是没明白这个字符层和前文批判的那个有啥区别。。。\n\n# 2 模型\n---\n模型结构如下图所示：\n![](1.png)\n### 跨语言训练\n整体训练过程是这样的：首先输入一个句子，对于每个单词中的每个字符，输入到双向LSTM中，取前向后向LSTM的最后一个隐含层输出，连接到一起来作为词的表示。然后输入到公有和私有LSTM中训练，最后的损失函数有三个。\n图中蓝色部分是公有部分，红色部分是私有部分。紫色部分是不同语言预测出的结果，三个红色方框是三个损失函数。\n其中softmax层的损失函数定义为：\n![](2.png)\n$S$是句子个数，$N$是当前句子单词数，${p_{i,j}}$第$i$个句子的第$j$个标签，${\\hat p_{i,j}}$是预测标签。\n### 语言对抗训练\n为了让公有的LSTM部分变得语言无关，所以要对他进行语言对抗训练。\n首先对公有LSTM的输出进行CNN/MaxPool编码（其实就是每一个维度取最大值），三个卷积层，得到三个向量，再连接到一起得到最终的向量表示，经过一个梯度反转层，最后输入到语言鉴别器。\n这个语言鉴别器就是一个单隐含层的全连接的神经网络，激活函数用的是Leaky ReLU，具体就是当x>=0时，f(x)=x；当x<0时，f(x)=ax，这里a取0.2。\n最后得到的损失函数定义为：\n![](3.png)\n其中${l_{i}}$是第i个句子的语言，${\\hat l_{i}}$是预测出的语言（原文说的是softmax输出的标签？？？这里不是很理解）。\n由于经过了梯度反转层，所以这个语言鉴别器并不能鉴别出是哪一种语言，反而对两种语言的界限混淆了，使得它变得越来越语言无关了。\n### 双向语言模型\n这个就不用多说了，很多地方都用到了，之前的两篇半监督序列标注的论文也都提到了加入语言模型来提升效果，而且注意的是，就算是没有标注的数据也可以加入进语言模型的训练。\n语言模型的损失函数定义为：\n![](4.png)\n其中f和b分别代表前向和后向LSTM输出。\n最终，三个损失函数合并起来定义一个总的损失函数：\n![](5.png)\n其中$\\lambda $随着训练进行缓慢的从0上升到1，这是为了增加额外损失函数的训练稳定性。\n而$w_{s}$是为了给源语言和目标语言不同的权重的，当训练目标语言是，权重为1，否则权重为目标语言训练集大小/源语言训练集大小。\n\n# 3 实验\n实验针对目标语言训练句子数为1280、320和32分别做了对比。\n其中1280个句子的结果如下：\n![](6.png)\n可以看出加入迁移学习后结果提升还是比较大的，表格中c表示公有LSTM，l表示语言模型，p表示私有LSTM，a表示语言对抗训练。本文的模型(c,p,l+a)结果是最好的。\n320个句子的结果如下：\n![](7.png)\n依然有提升，但是提升很不明显了，而且有几种语言直接采用私有LSTM+语言模型效果反而最好。原因就是目标语言的训练数据太少了，不足以训练出完美的公有和私有模型。\n32个句子的训练数据就没有放出具体结果，结果依然有略微提升的，但是已经可以忽略不计了。\n反过来思考，如果用上全部的目标语言训练数据，那么出来的结果会怎么样？事实是反而下降了，还不如直接用私有LSTM。\n最后还做了一个实验，就是用多种不同的源语言+目标语言来训练模型，发现效果比用单种源语言效果好。","slug":"EMNLP17-1","published":1,"updated":"2019-07-20T04:14:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9823e000i7sweq0nu9a5d","content":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/D/D17/D17-1302.pdf\" target=\"_blank\" rel=\"noopener\">D17-1302</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>本文介绍了一个跨语言的序列标注迁移模型，和以往不同的是，不需要大量的跨语言语料。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>之前正好才看过一篇Yang et al. (2017)的论文Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks，还写了博客笔记<a href=\"http://godweiyang.com/2017/11/13/ICLR17-1/\">[传送门]</a>。然而本文上来就说，他的模型不好！因为他的模型共享了字符层，其他层都是独立的，这样就导致了两种字符没有交集的语言迁移会很困难。<br>于是本文提出了基于一个公有LSTM和一个私有LSTM的模型。不过，我还是没明白这个字符层和前文批判的那个有啥区别。。。</p>\n<h1 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2 模型\"></a>2 模型</h1><hr>\n<p>模型结构如下图所示：<br><img src=\"1.png\" alt></p>\n<h3 id=\"跨语言训练\"><a href=\"#跨语言训练\" class=\"headerlink\" title=\"跨语言训练\"></a>跨语言训练</h3><p>整体训练过程是这样的：首先输入一个句子，对于每个单词中的每个字符，输入到双向LSTM中，取前向后向LSTM的最后一个隐含层输出，连接到一起来作为词的表示。然后输入到公有和私有LSTM中训练，最后的损失函数有三个。<br>图中蓝色部分是公有部分，红色部分是私有部分。紫色部分是不同语言预测出的结果，三个红色方框是三个损失函数。<br>其中softmax层的损失函数定义为：<br><img src=\"2.png\" alt><br>$S$是句子个数，$N$是当前句子单词数，${p_{i,j}}$第$i$个句子的第$j$个标签，${\\hat p_{i,j}}$是预测标签。</p>\n<h3 id=\"语言对抗训练\"><a href=\"#语言对抗训练\" class=\"headerlink\" title=\"语言对抗训练\"></a>语言对抗训练</h3><p>为了让公有的LSTM部分变得语言无关，所以要对他进行语言对抗训练。<br>首先对公有LSTM的输出进行CNN/MaxPool编码（其实就是每一个维度取最大值），三个卷积层，得到三个向量，再连接到一起得到最终的向量表示，经过一个梯度反转层，最后输入到语言鉴别器。<br>这个语言鉴别器就是一个单隐含层的全连接的神经网络，激活函数用的是Leaky ReLU，具体就是当x&gt;=0时，f(x)=x；当x&lt;0时，f(x)=ax，这里a取0.2。<br>最后得到的损失函数定义为：<br><img src=\"3.png\" alt><br>其中${l_{i}}$是第i个句子的语言，${\\hat l_{i}}$是预测出的语言（原文说的是softmax输出的标签？？？这里不是很理解）。<br>由于经过了梯度反转层，所以这个语言鉴别器并不能鉴别出是哪一种语言，反而对两种语言的界限混淆了，使得它变得越来越语言无关了。</p>\n<h3 id=\"双向语言模型\"><a href=\"#双向语言模型\" class=\"headerlink\" title=\"双向语言模型\"></a>双向语言模型</h3><p>这个就不用多说了，很多地方都用到了，之前的两篇半监督序列标注的论文也都提到了加入语言模型来提升效果，而且注意的是，就算是没有标注的数据也可以加入进语言模型的训练。<br>语言模型的损失函数定义为：<br><img src=\"4.png\" alt><br>其中f和b分别代表前向和后向LSTM输出。<br>最终，三个损失函数合并起来定义一个总的损失函数：<br><img src=\"5.png\" alt><br>其中$\\lambda $随着训练进行缓慢的从0上升到1，这是为了增加额外损失函数的训练稳定性。<br>而$w_{s}$是为了给源语言和目标语言不同的权重的，当训练目标语言是，权重为1，否则权重为目标语言训练集大小/源语言训练集大小。</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3 实验\"></a>3 实验</h1><p>实验针对目标语言训练句子数为1280、320和32分别做了对比。<br>其中1280个句子的结果如下：<br><img src=\"6.png\" alt><br>可以看出加入迁移学习后结果提升还是比较大的，表格中c表示公有LSTM，l表示语言模型，p表示私有LSTM，a表示语言对抗训练。本文的模型(c,p,l+a)结果是最好的。<br>320个句子的结果如下：<br><img src=\"7.png\" alt><br>依然有提升，但是提升很不明显了，而且有几种语言直接采用私有LSTM+语言模型效果反而最好。原因就是目标语言的训练数据太少了，不足以训练出完美的公有和私有模型。<br>32个句子的训练数据就没有放出具体结果，结果依然有略微提升的，但是已经可以忽略不计了。<br>反过来思考，如果用上全部的目标语言训练数据，那么出来的结果会怎么样？事实是反而下降了，还不如直接用私有LSTM。<br>最后还做了一个实验，就是用多种不同的源语言+目标语言来训练模型，发现效果比用单种源语言效果好。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/D/D17/D17-1302.pdf\" target=\"_blank\" rel=\"noopener\">D17-1302</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>本文介绍了一个跨语言的序列标注迁移模型，和以往不同的是，不需要大量的跨语言语料。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>之前正好才看过一篇Yang et al. (2017)的论文Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks，还写了博客笔记<a href=\"http://godweiyang.com/2017/11/13/ICLR17-1/\">[传送门]</a>。然而本文上来就说，他的模型不好！因为他的模型共享了字符层，其他层都是独立的，这样就导致了两种字符没有交集的语言迁移会很困难。<br>于是本文提出了基于一个公有LSTM和一个私有LSTM的模型。不过，我还是没明白这个字符层和前文批判的那个有啥区别。。。</p>\n<h1 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2 模型\"></a>2 模型</h1><hr>\n<p>模型结构如下图所示：<br><img src=\"1.png\" alt></p>\n<h3 id=\"跨语言训练\"><a href=\"#跨语言训练\" class=\"headerlink\" title=\"跨语言训练\"></a>跨语言训练</h3><p>整体训练过程是这样的：首先输入一个句子，对于每个单词中的每个字符，输入到双向LSTM中，取前向后向LSTM的最后一个隐含层输出，连接到一起来作为词的表示。然后输入到公有和私有LSTM中训练，最后的损失函数有三个。<br>图中蓝色部分是公有部分，红色部分是私有部分。紫色部分是不同语言预测出的结果，三个红色方框是三个损失函数。<br>其中softmax层的损失函数定义为：<br><img src=\"2.png\" alt><br>$S$是句子个数，$N$是当前句子单词数，${p_{i,j}}$第$i$个句子的第$j$个标签，${\\hat p_{i,j}}$是预测标签。</p>\n<h3 id=\"语言对抗训练\"><a href=\"#语言对抗训练\" class=\"headerlink\" title=\"语言对抗训练\"></a>语言对抗训练</h3><p>为了让公有的LSTM部分变得语言无关，所以要对他进行语言对抗训练。<br>首先对公有LSTM的输出进行CNN/MaxPool编码（其实就是每一个维度取最大值），三个卷积层，得到三个向量，再连接到一起得到最终的向量表示，经过一个梯度反转层，最后输入到语言鉴别器。<br>这个语言鉴别器就是一个单隐含层的全连接的神经网络，激活函数用的是Leaky ReLU，具体就是当x&gt;=0时，f(x)=x；当x&lt;0时，f(x)=ax，这里a取0.2。<br>最后得到的损失函数定义为：<br><img src=\"3.png\" alt><br>其中${l_{i}}$是第i个句子的语言，${\\hat l_{i}}$是预测出的语言（原文说的是softmax输出的标签？？？这里不是很理解）。<br>由于经过了梯度反转层，所以这个语言鉴别器并不能鉴别出是哪一种语言，反而对两种语言的界限混淆了，使得它变得越来越语言无关了。</p>\n<h3 id=\"双向语言模型\"><a href=\"#双向语言模型\" class=\"headerlink\" title=\"双向语言模型\"></a>双向语言模型</h3><p>这个就不用多说了，很多地方都用到了，之前的两篇半监督序列标注的论文也都提到了加入语言模型来提升效果，而且注意的是，就算是没有标注的数据也可以加入进语言模型的训练。<br>语言模型的损失函数定义为：<br><img src=\"4.png\" alt><br>其中f和b分别代表前向和后向LSTM输出。<br>最终，三个损失函数合并起来定义一个总的损失函数：<br><img src=\"5.png\" alt><br>其中$\\lambda $随着训练进行缓慢的从0上升到1，这是为了增加额外损失函数的训练稳定性。<br>而$w_{s}$是为了给源语言和目标语言不同的权重的，当训练目标语言是，权重为1，否则权重为目标语言训练集大小/源语言训练集大小。</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3 实验\"></a>3 实验</h1><p>实验针对目标语言训练句子数为1280、320和32分别做了对比。<br>其中1280个句子的结果如下：<br><img src=\"6.png\" alt><br>可以看出加入迁移学习后结果提升还是比较大的，表格中c表示公有LSTM，l表示语言模型，p表示私有LSTM，a表示语言对抗训练。本文的模型(c,p,l+a)结果是最好的。<br>320个句子的结果如下：<br><img src=\"7.png\" alt><br>依然有提升，但是提升很不明显了，而且有几种语言直接采用私有LSTM+语言模型效果反而最好。原因就是目标语言的训练数据太少了，不足以训练出完美的公有和私有模型。<br>32个句子的训练数据就没有放出具体结果，结果依然有略微提升的，但是已经可以忽略不计了。<br>反过来思考，如果用上全部的目标语言训练数据，那么出来的结果会怎么样？事实是反而下降了，还不如直接用私有LSTM。<br>最后还做了一个实验，就是用多种不同的源语言+目标语言来训练模型，发现效果比用单种源语言效果好。</p>\n"},{"title":"Straight to the Tree： Constituency Parsing with Neural Syntactic Distance","date":"2018-07-19T15:57:03.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=451169473&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Straight to the Tree: Constituency Parsing with Neural Syntactic Distance](http://aclweb.org/anthology/P18-1108)\n\n# 摘要\n---\n今天要讲的这篇论文发表在ACL18上面，一句话概括，本文就是**将句法树序列化，通过预测序列进行句法分析。**\n\n主要思想是通过预测一个实值向量来构造出成分句法树，该实值向量表示的就是成分句法树的所有split，并且按照中序遍历给出，具体细节之后会讲到。这个方法之前没有见过，很有新意，效果也很不错，虽然比不上之前讲的基于span的方法，但是该模型最大的优点就是可以并行，时间复杂度低。\n\n近些年来，成分句法分析模型大多是通过学习出词和短语的表示，然后用基于转移的或者基于chart的方法进行句法分析，亦或者是上一篇笔记中提到的top-down方法。但是这一类方法都有一些不可避免的缺点，比如基于转移的方法，通过预测转移序列来生成句法分析树，但是一棵句法分析树可能对应着多棵不同的转移序列，所以训练的时候可能产生错误，可以通过动态Oracle技术解决。基于chart的模型缺点就是速度太慢。\n\n本文提出了一种新的概念叫做“syntactic distance”，以下称作句法距离，这个概念首次提出是2017年一篇语言模型的论文中的，本文将其用在了句法分析中。主要思想是这样的：对于一棵二叉树，它的中序遍历的split序列和二叉树是唯一对应的，所以只需要预测这个split序列就行了，而每个split就是用句法距离来表示。下图就是一棵句法树对应的句法距离：\n![](1.png)\n这棵树有两个split，第一个split的高度更高，所以对应的句法距离数值更大。\n\n最后通过top-down顺序进行解码，解码时间复杂度为$O(n\\log n)$。最后模型在PTB上取得了91.8的F1值，CTB上取得了86.5的F1值。\n\n# Syntactic Distances\n---\n一棵句法树的句法距离如下定义：\n对于句法分析树$T$，它的叶子结点也就是句子为$({w_0}, \\ldots ,{w_n})$，记叶子结点$w_i,w_j$的最近公共祖先LCA为$\\tilde d_j^i$，那么句法树$T$的句法距离定义为任意向量$d = ({d_1}, \\ldots ,{d_n})$，并且满足\n\\\\[sign({d_i} - {d_j}) = sign(\\tilde d_i^{i - 1} - \\tilde d_j^{j - 1})\\\\]\n这个定义可能看起来比较难理解，通俗一点讲就是，$({d_1}, \\ldots ,{d_n})$中任意一对元素的大小关系和$(\\tilde d_1^0, \\ldots ,\\tilde d_n^{n - 1})$中下标相同的一对元素的大小关系是完全一样的，也就是说，句法距离大小反映的是一个句子两两相邻元素的LCA的高度大小。\n\n还用上面那张图举个例子，$\\tilde d_1^0 = 2,\\tilde d_2^1 = 1$，那么它的句法距离$d=(d_1,d_2)$就是满足$d_1>d_2$的任意向量。\n\n这样就可以将一棵句法树唯一对应到一个句法距离的序列，只要预测这个序列就可以得到句法树了，这比预测span集合更加直接。\n\n那么训练的时候如何将句法树转化为句法距离呢？这里只考虑二叉树，下面的算法1给出了伪代码，将句法树转化为三元组$(d,c,t)$。其中$d$是两两相邻的叶子结点的LCA的高度向量，可以证明，这和中序遍历得到的结点顺序完全相同。$c$是与之顺序相同的结点的label向量。$t$是叶子结点从左向右的tag标签向量。\n![](2.png)\n从算法中可以看出，采用自顶向下递归的形式，叶子结点高度为0，不存在句法距离和label。而内结点的高度等于左右儿子高度较大的一个加1，句法距离为左儿子句法距离拼接上自身句法距离再拼接上右儿子句法距离，label也是如此。\n\n那么如果得到了一棵句法树的三元组$(d,c,t)$，如何还原出这棵句法树呢？算法2给出了构造方法，其实类似于之前那篇论文的top-down方法。\n![](3.png)\n原理很简单，只要在每一步寻找$d$中最大的元素，也就是寻找高度最大的内结点，该内结点对应的下标就是句法树的split，然后对左右子树递归解析就行了。时间复杂度只要$O(n\\log n)$，而之前的top-down模型时间复杂度为$O(n^2)$。\n![](4.png)\n上图是构造句法树的一个例子，和之前一样，通过$\\emptyset$的label隐式的将句法树二叉化了，一元还是处理成新的label。图中的矩形高度就代表了句法距离的大小，可以看出，除了$d_0,d_5$这两个句子开始结束标记的句法距离以外，$d_1$最大，所以句法树的split就是$w_0$和$w_1$，然后对右子树递归分析。\n\n在子树递归过程中，可以并行计算，理论上时间复杂度可以降到$O(\\log n)$，但是句子长度过短的话，是否与cpu通讯时间都要大于这个数量级了呢？这个并行的意义还有待商榷。\n\n# 训练\n---\n## 模型结构\n下面的问题就是给出一个句子，如何学习出它的三元组$(d,c,t)$呢？\n\n首先将每个单词的词向量和tag向量拼接作为输入，然后送入一个Bi-LSTM，得到隐含层输出为\n\\\\[h_0^w, \\ldots ,h_n^w = {\\rm{BiLST}}{ {\\rm{M}}\\_w}([e_0^w,e_0^t], \\ldots ,[e_n^w,e_n^t])\\\\]\n\n对于每个单词，可能存在一元结点，也可能不存在，不存在的话就标记为$\\emptyset$，用一个前馈神经网络和softmax预测每个单词的一元结点：\n\\\\[p(c_i^w|w) = {\\rm{softmax(FF}}\\_c^w(h_i^w))\\\\]\n\n为了得到每个split的表示，对两两相邻单词进行卷积：\n\\\\[g_1^s, \\ldots ,g_n^s = {\\rm{CONV(}}h_0^w, \\ldots ,h_n^w)\\\\]\n注意输出比输入少一个，因为split数量比单词少一个。\n\n然后再将输出通过一层Bi-LSTM，得到最终的split表示：\n\\\\[h_1^s, \\ldots ,h_n^s = {\\rm{BiLST}}{ {\\rm{M}}\\_s}(g_1^s, \\ldots ,g_n^s)\\\\]\n当然这里也可以选择采用self-attention，详见我的上一篇博客。\n\n最后将输出通过一个两层前馈神经网络，得到每个split的句法距离值：\n\\\\[{ {\\hat d}\\_i} = {\\rm{F}}{ {\\rm{F}}\\_d}(h_i^s)\\\\]\n\n每个内结点的label同样用一个前馈神经网络和softmax预测：\n\\\\[p(c_i^s|w) = {\\rm{softmax(FF}}\\_c^s(h_i^s))\\\\]\n\n## 损失函数\n对于训练样例$\\left\\{ {\\left\\langle { {d_k},{c_k},{t_k},{w_k}} \\right\\rangle } \\right\\}\\_{k = 1}^K$，它的损失函数就是$d$和$c$的损失函数之和。\n\n对于$c$，因为用的是softmax预测的，所以直接用交叉熵即可得到损失${L_{ {\\rm{label}}}}$。\n\n对于$d$，可以用均方误差：\n\\\\[L_{dist}^{mse} = \\sum\\limits_i { { {({d_i} - { {\\hat d}\\_i})}^2}} \\\\]\n然而我们并不在意句法距离的绝对值大小，我们只要它的相对大小是正确的即可，所以均方误差在这里不是很合适，可以换成如下损失函数：\n\\\\[L_{dist}^{rank} = \\sum\\limits_{i,j > i} {\\max (0,1 - sign({d_i} - {d_j})({ {\\hat d}\\_i} - { {\\hat d}\\_j}))} \\\\]\n\n最后总的损失函数为：\n\\\\[L = {L_{ {\\rm{label}}}} + L_{dist}^{rank}\\\\]\n\n下面这张图形象的说明了模型的结构，由下往上，第一层圆圈是单词之间的LSTM，然后每个单词上面的五边形是前馈神经网络用来预测一元label，两个相邻单词之间的三角形是卷积，卷积得到的结果再通过一个LSTM得到split表示，最后每个split上面有两个五边形，一个是前馈神经网络用来预测label，另一个是前馈神经网络用来预测句法距离。\n![](5.png)\n\n# 实验\n---\n在PTB数据集上的实验结果如下：\n![](6.png)\n可以看出，结果还是很有竞争力的，虽然有很多比本文高的模型，但本文解释了，那是因为他们用了Char-LSTM，用了外部数据，用了半监督方法或者重排序方法。。。目前单模型最高的方法依然是上一篇博客讲的span-based模型。\n\n最后值得一提的是模型的运行速度，之前理论分析时间复杂度非常低，而实际上运行速度的确快了许多，结果如下：\n![](7.png)\n\n# 总结\n---\n本文最大的创新点就是应用句法距离进行句法分析，并且时间复杂度很低。至于文章题目为什么叫“Straight to the Tree”，文章最后说因为只通过一个最普通的LSTM和卷积就预测出了句法树，所以是很直接的。。。\n\n本文的模型还比较粗糙，我觉得仍然有许多改进之处：\n* 可以将LSTM替换为self-attention，因为之前博客讲到了，伯克利的self-attention编码器比LSTM编码器准确率高了1个多的百分点。\n* 可以尝试最近新出的词向量模型ELMo，也许会有特别大的提升。\n* 加入词级别的Char-LSTM，可能会有一定提升。\n* 我觉得split的表示可以更加复杂化一点，而不仅仅是一层卷积+一层LSTM这么简单。","source":"_posts/ConParsing-Syntactic-Distance.md","raw":"---\ntitle: Straight to the Tree： Constituency Parsing with Neural Syntactic Distance\ndate: 2018-07-19 23:57:03\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=451169473&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Straight to the Tree: Constituency Parsing with Neural Syntactic Distance](http://aclweb.org/anthology/P18-1108)\n\n# 摘要\n---\n今天要讲的这篇论文发表在ACL18上面，一句话概括，本文就是**将句法树序列化，通过预测序列进行句法分析。**\n\n主要思想是通过预测一个实值向量来构造出成分句法树，该实值向量表示的就是成分句法树的所有split，并且按照中序遍历给出，具体细节之后会讲到。这个方法之前没有见过，很有新意，效果也很不错，虽然比不上之前讲的基于span的方法，但是该模型最大的优点就是可以并行，时间复杂度低。\n\n近些年来，成分句法分析模型大多是通过学习出词和短语的表示，然后用基于转移的或者基于chart的方法进行句法分析，亦或者是上一篇笔记中提到的top-down方法。但是这一类方法都有一些不可避免的缺点，比如基于转移的方法，通过预测转移序列来生成句法分析树，但是一棵句法分析树可能对应着多棵不同的转移序列，所以训练的时候可能产生错误，可以通过动态Oracle技术解决。基于chart的模型缺点就是速度太慢。\n\n本文提出了一种新的概念叫做“syntactic distance”，以下称作句法距离，这个概念首次提出是2017年一篇语言模型的论文中的，本文将其用在了句法分析中。主要思想是这样的：对于一棵二叉树，它的中序遍历的split序列和二叉树是唯一对应的，所以只需要预测这个split序列就行了，而每个split就是用句法距离来表示。下图就是一棵句法树对应的句法距离：\n![](1.png)\n这棵树有两个split，第一个split的高度更高，所以对应的句法距离数值更大。\n\n最后通过top-down顺序进行解码，解码时间复杂度为$O(n\\log n)$。最后模型在PTB上取得了91.8的F1值，CTB上取得了86.5的F1值。\n\n# Syntactic Distances\n---\n一棵句法树的句法距离如下定义：\n对于句法分析树$T$，它的叶子结点也就是句子为$({w_0}, \\ldots ,{w_n})$，记叶子结点$w_i,w_j$的最近公共祖先LCA为$\\tilde d_j^i$，那么句法树$T$的句法距离定义为任意向量$d = ({d_1}, \\ldots ,{d_n})$，并且满足\n\\\\[sign({d_i} - {d_j}) = sign(\\tilde d_i^{i - 1} - \\tilde d_j^{j - 1})\\\\]\n这个定义可能看起来比较难理解，通俗一点讲就是，$({d_1}, \\ldots ,{d_n})$中任意一对元素的大小关系和$(\\tilde d_1^0, \\ldots ,\\tilde d_n^{n - 1})$中下标相同的一对元素的大小关系是完全一样的，也就是说，句法距离大小反映的是一个句子两两相邻元素的LCA的高度大小。\n\n还用上面那张图举个例子，$\\tilde d_1^0 = 2,\\tilde d_2^1 = 1$，那么它的句法距离$d=(d_1,d_2)$就是满足$d_1>d_2$的任意向量。\n\n这样就可以将一棵句法树唯一对应到一个句法距离的序列，只要预测这个序列就可以得到句法树了，这比预测span集合更加直接。\n\n那么训练的时候如何将句法树转化为句法距离呢？这里只考虑二叉树，下面的算法1给出了伪代码，将句法树转化为三元组$(d,c,t)$。其中$d$是两两相邻的叶子结点的LCA的高度向量，可以证明，这和中序遍历得到的结点顺序完全相同。$c$是与之顺序相同的结点的label向量。$t$是叶子结点从左向右的tag标签向量。\n![](2.png)\n从算法中可以看出，采用自顶向下递归的形式，叶子结点高度为0，不存在句法距离和label。而内结点的高度等于左右儿子高度较大的一个加1，句法距离为左儿子句法距离拼接上自身句法距离再拼接上右儿子句法距离，label也是如此。\n\n那么如果得到了一棵句法树的三元组$(d,c,t)$，如何还原出这棵句法树呢？算法2给出了构造方法，其实类似于之前那篇论文的top-down方法。\n![](3.png)\n原理很简单，只要在每一步寻找$d$中最大的元素，也就是寻找高度最大的内结点，该内结点对应的下标就是句法树的split，然后对左右子树递归解析就行了。时间复杂度只要$O(n\\log n)$，而之前的top-down模型时间复杂度为$O(n^2)$。\n![](4.png)\n上图是构造句法树的一个例子，和之前一样，通过$\\emptyset$的label隐式的将句法树二叉化了，一元还是处理成新的label。图中的矩形高度就代表了句法距离的大小，可以看出，除了$d_0,d_5$这两个句子开始结束标记的句法距离以外，$d_1$最大，所以句法树的split就是$w_0$和$w_1$，然后对右子树递归分析。\n\n在子树递归过程中，可以并行计算，理论上时间复杂度可以降到$O(\\log n)$，但是句子长度过短的话，是否与cpu通讯时间都要大于这个数量级了呢？这个并行的意义还有待商榷。\n\n# 训练\n---\n## 模型结构\n下面的问题就是给出一个句子，如何学习出它的三元组$(d,c,t)$呢？\n\n首先将每个单词的词向量和tag向量拼接作为输入，然后送入一个Bi-LSTM，得到隐含层输出为\n\\\\[h_0^w, \\ldots ,h_n^w = {\\rm{BiLST}}{ {\\rm{M}}\\_w}([e_0^w,e_0^t], \\ldots ,[e_n^w,e_n^t])\\\\]\n\n对于每个单词，可能存在一元结点，也可能不存在，不存在的话就标记为$\\emptyset$，用一个前馈神经网络和softmax预测每个单词的一元结点：\n\\\\[p(c_i^w|w) = {\\rm{softmax(FF}}\\_c^w(h_i^w))\\\\]\n\n为了得到每个split的表示，对两两相邻单词进行卷积：\n\\\\[g_1^s, \\ldots ,g_n^s = {\\rm{CONV(}}h_0^w, \\ldots ,h_n^w)\\\\]\n注意输出比输入少一个，因为split数量比单词少一个。\n\n然后再将输出通过一层Bi-LSTM，得到最终的split表示：\n\\\\[h_1^s, \\ldots ,h_n^s = {\\rm{BiLST}}{ {\\rm{M}}\\_s}(g_1^s, \\ldots ,g_n^s)\\\\]\n当然这里也可以选择采用self-attention，详见我的上一篇博客。\n\n最后将输出通过一个两层前馈神经网络，得到每个split的句法距离值：\n\\\\[{ {\\hat d}\\_i} = {\\rm{F}}{ {\\rm{F}}\\_d}(h_i^s)\\\\]\n\n每个内结点的label同样用一个前馈神经网络和softmax预测：\n\\\\[p(c_i^s|w) = {\\rm{softmax(FF}}\\_c^s(h_i^s))\\\\]\n\n## 损失函数\n对于训练样例$\\left\\{ {\\left\\langle { {d_k},{c_k},{t_k},{w_k}} \\right\\rangle } \\right\\}\\_{k = 1}^K$，它的损失函数就是$d$和$c$的损失函数之和。\n\n对于$c$，因为用的是softmax预测的，所以直接用交叉熵即可得到损失${L_{ {\\rm{label}}}}$。\n\n对于$d$，可以用均方误差：\n\\\\[L_{dist}^{mse} = \\sum\\limits_i { { {({d_i} - { {\\hat d}\\_i})}^2}} \\\\]\n然而我们并不在意句法距离的绝对值大小，我们只要它的相对大小是正确的即可，所以均方误差在这里不是很合适，可以换成如下损失函数：\n\\\\[L_{dist}^{rank} = \\sum\\limits_{i,j > i} {\\max (0,1 - sign({d_i} - {d_j})({ {\\hat d}\\_i} - { {\\hat d}\\_j}))} \\\\]\n\n最后总的损失函数为：\n\\\\[L = {L_{ {\\rm{label}}}} + L_{dist}^{rank}\\\\]\n\n下面这张图形象的说明了模型的结构，由下往上，第一层圆圈是单词之间的LSTM，然后每个单词上面的五边形是前馈神经网络用来预测一元label，两个相邻单词之间的三角形是卷积，卷积得到的结果再通过一个LSTM得到split表示，最后每个split上面有两个五边形，一个是前馈神经网络用来预测label，另一个是前馈神经网络用来预测句法距离。\n![](5.png)\n\n# 实验\n---\n在PTB数据集上的实验结果如下：\n![](6.png)\n可以看出，结果还是很有竞争力的，虽然有很多比本文高的模型，但本文解释了，那是因为他们用了Char-LSTM，用了外部数据，用了半监督方法或者重排序方法。。。目前单模型最高的方法依然是上一篇博客讲的span-based模型。\n\n最后值得一提的是模型的运行速度，之前理论分析时间复杂度非常低，而实际上运行速度的确快了许多，结果如下：\n![](7.png)\n\n# 总结\n---\n本文最大的创新点就是应用句法距离进行句法分析，并且时间复杂度很低。至于文章题目为什么叫“Straight to the Tree”，文章最后说因为只通过一个最普通的LSTM和卷积就预测出了句法树，所以是很直接的。。。\n\n本文的模型还比较粗糙，我觉得仍然有许多改进之处：\n* 可以将LSTM替换为self-attention，因为之前博客讲到了，伯克利的self-attention编码器比LSTM编码器准确率高了1个多的百分点。\n* 可以尝试最近新出的词向量模型ELMo，也许会有特别大的提升。\n* 加入词级别的Char-LSTM，可能会有一定提升。\n* 我觉得split的表示可以更加复杂化一点，而不仅仅是一层卷积+一层LSTM这么简单。","slug":"ConParsing-Syntactic-Distance","published":1,"updated":"2019-07-20T04:07:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9823j000m7swexrt09wex","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=451169473&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/P18-1108\" target=\"_blank\" rel=\"noopener\">Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>今天要讲的这篇论文发表在ACL18上面，一句话概括，本文就是<strong>将句法树序列化，通过预测序列进行句法分析。</strong></p>\n<p>主要思想是通过预测一个实值向量来构造出成分句法树，该实值向量表示的就是成分句法树的所有split，并且按照中序遍历给出，具体细节之后会讲到。这个方法之前没有见过，很有新意，效果也很不错，虽然比不上之前讲的基于span的方法，但是该模型最大的优点就是可以并行，时间复杂度低。</p>\n<p>近些年来，成分句法分析模型大多是通过学习出词和短语的表示，然后用基于转移的或者基于chart的方法进行句法分析，亦或者是上一篇笔记中提到的top-down方法。但是这一类方法都有一些不可避免的缺点，比如基于转移的方法，通过预测转移序列来生成句法分析树，但是一棵句法分析树可能对应着多棵不同的转移序列，所以训练的时候可能产生错误，可以通过动态Oracle技术解决。基于chart的模型缺点就是速度太慢。</p>\n<p>本文提出了一种新的概念叫做“syntactic distance”，以下称作句法距离，这个概念首次提出是2017年一篇语言模型的论文中的，本文将其用在了句法分析中。主要思想是这样的：对于一棵二叉树，它的中序遍历的split序列和二叉树是唯一对应的，所以只需要预测这个split序列就行了，而每个split就是用句法距离来表示。下图就是一棵句法树对应的句法距离：<br><img src=\"1.png\" alt><br>这棵树有两个split，第一个split的高度更高，所以对应的句法距离数值更大。</p>\n<p>最后通过top-down顺序进行解码，解码时间复杂度为$O(n\\log n)$。最后模型在PTB上取得了91.8的F1值，CTB上取得了86.5的F1值。</p>\n<h1 id=\"Syntactic-Distances\"><a href=\"#Syntactic-Distances\" class=\"headerlink\" title=\"Syntactic Distances\"></a>Syntactic Distances</h1><hr>\n<p>一棵句法树的句法距离如下定义：<br>对于句法分析树$T$，它的叶子结点也就是句子为$({w_0}, \\ldots ,{w_n})$，记叶子结点$w_i,w_j$的最近公共祖先LCA为$\\tilde d_j^i$，那么句法树$T$的句法距离定义为任意向量$d = ({d_1}, \\ldots ,{d_n})$，并且满足<br>\\[sign({d_i} - {d_j}) = sign(\\tilde d_i^{i - 1} - \\tilde d_j^{j - 1})\\]<br>这个定义可能看起来比较难理解，通俗一点讲就是，$({d_1}, \\ldots ,{d_n})$中任意一对元素的大小关系和$(\\tilde d_1^0, \\ldots ,\\tilde d_n^{n - 1})$中下标相同的一对元素的大小关系是完全一样的，也就是说，句法距离大小反映的是一个句子两两相邻元素的LCA的高度大小。</p>\n<p>还用上面那张图举个例子，$\\tilde d_1^0 = 2,\\tilde d_2^1 = 1$，那么它的句法距离$d=(d_1,d_2)$就是满足$d_1&gt;d_2$的任意向量。</p>\n<p>这样就可以将一棵句法树唯一对应到一个句法距离的序列，只要预测这个序列就可以得到句法树了，这比预测span集合更加直接。</p>\n<p>那么训练的时候如何将句法树转化为句法距离呢？这里只考虑二叉树，下面的算法1给出了伪代码，将句法树转化为三元组$(d,c,t)$。其中$d$是两两相邻的叶子结点的LCA的高度向量，可以证明，这和中序遍历得到的结点顺序完全相同。$c$是与之顺序相同的结点的label向量。$t$是叶子结点从左向右的tag标签向量。<br><img src=\"2.png\" alt><br>从算法中可以看出，采用自顶向下递归的形式，叶子结点高度为0，不存在句法距离和label。而内结点的高度等于左右儿子高度较大的一个加1，句法距离为左儿子句法距离拼接上自身句法距离再拼接上右儿子句法距离，label也是如此。</p>\n<p>那么如果得到了一棵句法树的三元组$(d,c,t)$，如何还原出这棵句法树呢？算法2给出了构造方法，其实类似于之前那篇论文的top-down方法。<br><img src=\"3.png\" alt><br>原理很简单，只要在每一步寻找$d$中最大的元素，也就是寻找高度最大的内结点，该内结点对应的下标就是句法树的split，然后对左右子树递归解析就行了。时间复杂度只要$O(n\\log n)$，而之前的top-down模型时间复杂度为$O(n^2)$。<br><img src=\"4.png\" alt><br>上图是构造句法树的一个例子，和之前一样，通过$\\emptyset$的label隐式的将句法树二叉化了，一元还是处理成新的label。图中的矩形高度就代表了句法距离的大小，可以看出，除了$d_0,d_5$这两个句子开始结束标记的句法距离以外，$d_1$最大，所以句法树的split就是$w_0$和$w_1$，然后对右子树递归分析。</p>\n<p>在子树递归过程中，可以并行计算，理论上时间复杂度可以降到$O(\\log n)$，但是句子长度过短的话，是否与cpu通讯时间都要大于这个数量级了呢？这个并行的意义还有待商榷。</p>\n<h1 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h1><hr>\n<h2 id=\"模型结构\"><a href=\"#模型结构\" class=\"headerlink\" title=\"模型结构\"></a>模型结构</h2><p>下面的问题就是给出一个句子，如何学习出它的三元组$(d,c,t)$呢？</p>\n<p>首先将每个单词的词向量和tag向量拼接作为输入，然后送入一个Bi-LSTM，得到隐含层输出为<br>\\[h_0^w, \\ldots ,h_n^w = {\\rm{BiLST}}{ {\\rm{M}}_w}([e_0^w,e_0^t], \\ldots ,[e_n^w,e_n^t])\\]</p>\n<p>对于每个单词，可能存在一元结点，也可能不存在，不存在的话就标记为$\\emptyset$，用一个前馈神经网络和softmax预测每个单词的一元结点：<br>\\[p(c_i^w|w) = {\\rm{softmax(FF}}_c^w(h_i^w))\\]</p>\n<p>为了得到每个split的表示，对两两相邻单词进行卷积：<br>\\[g_1^s, \\ldots ,g_n^s = {\\rm{CONV(}}h_0^w, \\ldots ,h_n^w)\\]<br>注意输出比输入少一个，因为split数量比单词少一个。</p>\n<p>然后再将输出通过一层Bi-LSTM，得到最终的split表示：<br>\\[h_1^s, \\ldots ,h_n^s = {\\rm{BiLST}}{ {\\rm{M}}_s}(g_1^s, \\ldots ,g_n^s)\\]<br>当然这里也可以选择采用self-attention，详见我的上一篇博客。</p>\n<p>最后将输出通过一个两层前馈神经网络，得到每个split的句法距离值：<br>\\[{ {\\hat d}_i} = {\\rm{F}}{ {\\rm{F}}_d}(h_i^s)\\]</p>\n<p>每个内结点的label同样用一个前馈神经网络和softmax预测：<br>\\[p(c_i^s|w) = {\\rm{softmax(FF}}_c^s(h_i^s))\\]</p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>对于训练样例$\\left\\{ {\\left\\langle { {d_k},{c_k},{t_k},{w_k}} \\right\\rangle } \\right\\}_{k = 1}^K$，它的损失函数就是$d$和$c$的损失函数之和。</p>\n<p>对于$c$，因为用的是softmax预测的，所以直接用交叉熵即可得到损失${L_{ {\\rm{label}}}}$。</p>\n<p>对于$d$，可以用均方误差：<br>\\[L_{dist}^{mse} = \\sum\\limits_i { { {({d_i} - { {\\hat d}_i})}^2}} \\]<br>然而我们并不在意句法距离的绝对值大小，我们只要它的相对大小是正确的即可，所以均方误差在这里不是很合适，可以换成如下损失函数：<br>\\[L_{dist}^{rank} = \\sum\\limits_{i,j &gt; i} {\\max (0,1 - sign({d_i} - {d_j})({ {\\hat d}_i} - { {\\hat d}_j}))} \\]</p>\n<p>最后总的损失函数为：<br>\\[L = {L_{ {\\rm{label}}}} + L_{dist}^{rank}\\]</p>\n<p>下面这张图形象的说明了模型的结构，由下往上，第一层圆圈是单词之间的LSTM，然后每个单词上面的五边形是前馈神经网络用来预测一元label，两个相邻单词之间的三角形是卷积，卷积得到的结果再通过一个LSTM得到split表示，最后每个split上面有两个五边形，一个是前馈神经网络用来预测label，另一个是前馈神经网络用来预测句法距离。<br><img src=\"5.png\" alt></p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>在PTB数据集上的实验结果如下：<br><img src=\"6.png\" alt><br>可以看出，结果还是很有竞争力的，虽然有很多比本文高的模型，但本文解释了，那是因为他们用了Char-LSTM，用了外部数据，用了半监督方法或者重排序方法。。。目前单模型最高的方法依然是上一篇博客讲的span-based模型。</p>\n<p>最后值得一提的是模型的运行速度，之前理论分析时间复杂度非常低，而实际上运行速度的确快了许多，结果如下：<br><img src=\"7.png\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文最大的创新点就是应用句法距离进行句法分析，并且时间复杂度很低。至于文章题目为什么叫“Straight to the Tree”，文章最后说因为只通过一个最普通的LSTM和卷积就预测出了句法树，所以是很直接的。。。</p>\n<p>本文的模型还比较粗糙，我觉得仍然有许多改进之处：</p>\n<ul>\n<li>可以将LSTM替换为self-attention，因为之前博客讲到了，伯克利的self-attention编码器比LSTM编码器准确率高了1个多的百分点。</li>\n<li>可以尝试最近新出的词向量模型ELMo，也许会有特别大的提升。</li>\n<li>加入词级别的Char-LSTM，可能会有一定提升。</li>\n<li>我觉得split的表示可以更加复杂化一点，而不仅仅是一层卷积+一层LSTM这么简单。</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=451169473&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/P18-1108\" target=\"_blank\" rel=\"noopener\">Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>今天要讲的这篇论文发表在ACL18上面，一句话概括，本文就是<strong>将句法树序列化，通过预测序列进行句法分析。</strong></p>\n<p>主要思想是通过预测一个实值向量来构造出成分句法树，该实值向量表示的就是成分句法树的所有split，并且按照中序遍历给出，具体细节之后会讲到。这个方法之前没有见过，很有新意，效果也很不错，虽然比不上之前讲的基于span的方法，但是该模型最大的优点就是可以并行，时间复杂度低。</p>\n<p>近些年来，成分句法分析模型大多是通过学习出词和短语的表示，然后用基于转移的或者基于chart的方法进行句法分析，亦或者是上一篇笔记中提到的top-down方法。但是这一类方法都有一些不可避免的缺点，比如基于转移的方法，通过预测转移序列来生成句法分析树，但是一棵句法分析树可能对应着多棵不同的转移序列，所以训练的时候可能产生错误，可以通过动态Oracle技术解决。基于chart的模型缺点就是速度太慢。</p>\n<p>本文提出了一种新的概念叫做“syntactic distance”，以下称作句法距离，这个概念首次提出是2017年一篇语言模型的论文中的，本文将其用在了句法分析中。主要思想是这样的：对于一棵二叉树，它的中序遍历的split序列和二叉树是唯一对应的，所以只需要预测这个split序列就行了，而每个split就是用句法距离来表示。下图就是一棵句法树对应的句法距离：<br><img src=\"1.png\" alt><br>这棵树有两个split，第一个split的高度更高，所以对应的句法距离数值更大。</p>\n<p>最后通过top-down顺序进行解码，解码时间复杂度为$O(n\\log n)$。最后模型在PTB上取得了91.8的F1值，CTB上取得了86.5的F1值。</p>\n<h1 id=\"Syntactic-Distances\"><a href=\"#Syntactic-Distances\" class=\"headerlink\" title=\"Syntactic Distances\"></a>Syntactic Distances</h1><hr>\n<p>一棵句法树的句法距离如下定义：<br>对于句法分析树$T$，它的叶子结点也就是句子为$({w_0}, \\ldots ,{w_n})$，记叶子结点$w_i,w_j$的最近公共祖先LCA为$\\tilde d_j^i$，那么句法树$T$的句法距离定义为任意向量$d = ({d_1}, \\ldots ,{d_n})$，并且满足<br>\\[sign({d_i} - {d_j}) = sign(\\tilde d_i^{i - 1} - \\tilde d_j^{j - 1})\\]<br>这个定义可能看起来比较难理解，通俗一点讲就是，$({d_1}, \\ldots ,{d_n})$中任意一对元素的大小关系和$(\\tilde d_1^0, \\ldots ,\\tilde d_n^{n - 1})$中下标相同的一对元素的大小关系是完全一样的，也就是说，句法距离大小反映的是一个句子两两相邻元素的LCA的高度大小。</p>\n<p>还用上面那张图举个例子，$\\tilde d_1^0 = 2,\\tilde d_2^1 = 1$，那么它的句法距离$d=(d_1,d_2)$就是满足$d_1&gt;d_2$的任意向量。</p>\n<p>这样就可以将一棵句法树唯一对应到一个句法距离的序列，只要预测这个序列就可以得到句法树了，这比预测span集合更加直接。</p>\n<p>那么训练的时候如何将句法树转化为句法距离呢？这里只考虑二叉树，下面的算法1给出了伪代码，将句法树转化为三元组$(d,c,t)$。其中$d$是两两相邻的叶子结点的LCA的高度向量，可以证明，这和中序遍历得到的结点顺序完全相同。$c$是与之顺序相同的结点的label向量。$t$是叶子结点从左向右的tag标签向量。<br><img src=\"2.png\" alt><br>从算法中可以看出，采用自顶向下递归的形式，叶子结点高度为0，不存在句法距离和label。而内结点的高度等于左右儿子高度较大的一个加1，句法距离为左儿子句法距离拼接上自身句法距离再拼接上右儿子句法距离，label也是如此。</p>\n<p>那么如果得到了一棵句法树的三元组$(d,c,t)$，如何还原出这棵句法树呢？算法2给出了构造方法，其实类似于之前那篇论文的top-down方法。<br><img src=\"3.png\" alt><br>原理很简单，只要在每一步寻找$d$中最大的元素，也就是寻找高度最大的内结点，该内结点对应的下标就是句法树的split，然后对左右子树递归解析就行了。时间复杂度只要$O(n\\log n)$，而之前的top-down模型时间复杂度为$O(n^2)$。<br><img src=\"4.png\" alt><br>上图是构造句法树的一个例子，和之前一样，通过$\\emptyset$的label隐式的将句法树二叉化了，一元还是处理成新的label。图中的矩形高度就代表了句法距离的大小，可以看出，除了$d_0,d_5$这两个句子开始结束标记的句法距离以外，$d_1$最大，所以句法树的split就是$w_0$和$w_1$，然后对右子树递归分析。</p>\n<p>在子树递归过程中，可以并行计算，理论上时间复杂度可以降到$O(\\log n)$，但是句子长度过短的话，是否与cpu通讯时间都要大于这个数量级了呢？这个并行的意义还有待商榷。</p>\n<h1 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h1><hr>\n<h2 id=\"模型结构\"><a href=\"#模型结构\" class=\"headerlink\" title=\"模型结构\"></a>模型结构</h2><p>下面的问题就是给出一个句子，如何学习出它的三元组$(d,c,t)$呢？</p>\n<p>首先将每个单词的词向量和tag向量拼接作为输入，然后送入一个Bi-LSTM，得到隐含层输出为<br>\\[h_0^w, \\ldots ,h_n^w = {\\rm{BiLST}}{ {\\rm{M}}_w}([e_0^w,e_0^t], \\ldots ,[e_n^w,e_n^t])\\]</p>\n<p>对于每个单词，可能存在一元结点，也可能不存在，不存在的话就标记为$\\emptyset$，用一个前馈神经网络和softmax预测每个单词的一元结点：<br>\\[p(c_i^w|w) = {\\rm{softmax(FF}}_c^w(h_i^w))\\]</p>\n<p>为了得到每个split的表示，对两两相邻单词进行卷积：<br>\\[g_1^s, \\ldots ,g_n^s = {\\rm{CONV(}}h_0^w, \\ldots ,h_n^w)\\]<br>注意输出比输入少一个，因为split数量比单词少一个。</p>\n<p>然后再将输出通过一层Bi-LSTM，得到最终的split表示：<br>\\[h_1^s, \\ldots ,h_n^s = {\\rm{BiLST}}{ {\\rm{M}}_s}(g_1^s, \\ldots ,g_n^s)\\]<br>当然这里也可以选择采用self-attention，详见我的上一篇博客。</p>\n<p>最后将输出通过一个两层前馈神经网络，得到每个split的句法距离值：<br>\\[{ {\\hat d}_i} = {\\rm{F}}{ {\\rm{F}}_d}(h_i^s)\\]</p>\n<p>每个内结点的label同样用一个前馈神经网络和softmax预测：<br>\\[p(c_i^s|w) = {\\rm{softmax(FF}}_c^s(h_i^s))\\]</p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>对于训练样例$\\left\\{ {\\left\\langle { {d_k},{c_k},{t_k},{w_k}} \\right\\rangle } \\right\\}_{k = 1}^K$，它的损失函数就是$d$和$c$的损失函数之和。</p>\n<p>对于$c$，因为用的是softmax预测的，所以直接用交叉熵即可得到损失${L_{ {\\rm{label}}}}$。</p>\n<p>对于$d$，可以用均方误差：<br>\\[L_{dist}^{mse} = \\sum\\limits_i { { {({d_i} - { {\\hat d}_i})}^2}} \\]<br>然而我们并不在意句法距离的绝对值大小，我们只要它的相对大小是正确的即可，所以均方误差在这里不是很合适，可以换成如下损失函数：<br>\\[L_{dist}^{rank} = \\sum\\limits_{i,j &gt; i} {\\max (0,1 - sign({d_i} - {d_j})({ {\\hat d}_i} - { {\\hat d}_j}))} \\]</p>\n<p>最后总的损失函数为：<br>\\[L = {L_{ {\\rm{label}}}} + L_{dist}^{rank}\\]</p>\n<p>下面这张图形象的说明了模型的结构，由下往上，第一层圆圈是单词之间的LSTM，然后每个单词上面的五边形是前馈神经网络用来预测一元label，两个相邻单词之间的三角形是卷积，卷积得到的结果再通过一个LSTM得到split表示，最后每个split上面有两个五边形，一个是前馈神经网络用来预测label，另一个是前馈神经网络用来预测句法距离。<br><img src=\"5.png\" alt></p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>在PTB数据集上的实验结果如下：<br><img src=\"6.png\" alt><br>可以看出，结果还是很有竞争力的，虽然有很多比本文高的模型，但本文解释了，那是因为他们用了Char-LSTM，用了外部数据，用了半监督方法或者重排序方法。。。目前单模型最高的方法依然是上一篇博客讲的span-based模型。</p>\n<p>最后值得一提的是模型的运行速度，之前理论分析时间复杂度非常低，而实际上运行速度的确快了许多，结果如下：<br><img src=\"7.png\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文最大的创新点就是应用句法距离进行句法分析，并且时间复杂度很低。至于文章题目为什么叫“Straight to the Tree”，文章最后说因为只通过一个最普通的LSTM和卷积就预测出了句法树，所以是很直接的。。。</p>\n<p>本文的模型还比较粗糙，我觉得仍然有许多改进之处：</p>\n<ul>\n<li>可以将LSTM替换为self-attention，因为之前博客讲到了，伯克利的self-attention编码器比LSTM编码器准确率高了1个多的百分点。</li>\n<li>可以尝试最近新出的词向量模型ELMo，也许会有特别大的提升。</li>\n<li>加入词级别的Char-LSTM，可能会有一定提升。</li>\n<li>我觉得split的表示可以更加复杂化一点，而不仅仅是一层卷积+一层LSTM这么简单。</li>\n</ul>\n"},{"title":"Constituent Parsing as Sequence Labeling","date":"2019-03-11T09:37:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=421885447&auto=1&height=66\"></iframe></div>\n\n> 貌似已经有好几个月没怎么看过论文了，之前一直在写论文，一直没空更新博客，最近闲下来把最后几篇没看完的论文看了。\n\n**论文地址：**[Constituent Parsing as Sequence Labeling](http://aclweb.org/anthology/D18-1162)\n\n**代码地址：**[Code](https://github.com/aghie/tree2labels)\n\n# 介绍\n---\n本文定义了一种新的树的序列化方法，将树结构预测问题转化为了序列预测问题。该序列用相邻两个结点的**公共祖先（CA）数量**和**最近公共祖先（LCA）的label**来表示一棵树，并且证明了这个树到序列的映射是单射但不是满射的，但是提出了一系列方法来解决这个问题。\n\n相比于之前的序列方法，比如[Parsing as Language Modeling](http://www.aclweb.org/anthology/D16-1257)，本文的序列化有所不同，主要体现在之前的方法都是seq2seq的，也就是输入句子，直接输出树的括号表达式序列。但是这种方法输出不是定长的，所以结果可能会比较差。本文的方法将输出长度固定在了句子长度减1上（只针对不存在一元产生式的句法树，这种情况之后讨论），所以可以将每个预测分配到每个单词上，然后用序列标注的方法来解决。\n\n# 树的序列化\n---\n\n## 记号和基础知识\n记输入句子为$\\textbf{w} = [w_1, w_2, \\ldots, w_N]$，其中$w_i \\in V$。$T_N$为拥有$N$个叶子结点的不含有一元产生式的句法树集合。句法分析的任务就是将输入句子$\\textbf{w}$映射到句法树$T_N$。\n\n为了将句法分析转化为序列标注任务，需要定义一个树的序列化方法：$\\Phi_N : T_N \\to L^{N - 1}$，也就是将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列。并且该映射函数还得满足一定的条件，首先它一定得是一个**函数**（*也就是对于所有的句法树，都得找到一个对应的序列*），然后这个函数还得有**单射性**（*也就是句法树和序列要一一对应，不能存在两个句法树对应同一个序列，否则的话预测出来一个序列可能解码出两棵句法树，那就尴尬了*），当然要是还满足**满射性**就最好了（*也就是对于每一个序列，最好都能找到一棵句法树与之对应，不然预测出一个序列无法找到对应的句法树也很尴尬*），当然找不到也没事，后文有解决方法。\n\n然后需要定义一个函数，将句子映射为序列：$F_{N, \\theta} : V^N \\to L^{N - 1}$。这个映射就通过序列标注的LSTM来实现了，$\\theta$就是LSTM的参数。\n\n最后通过函数$F_{N, \\theta} \\circ \\Phi_N^{-1}$将输入句子转化为对应的句法树。那么$F_{N, \\theta}$没什么好说的，就是一个序列标注模型，下面重点就是介绍如何设计函数$\\Phi_N$。\n\n## 编码\n之前说到了将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列，这个序列是这样生成的：对于单词$w_i$，分配给它一个二元label $l_i = (n_i, c_i)$，其中$n_i$为单词$w_i$和$w_{i + 1}$的CA数量，$c_i$为它俩的LCA的label。\n\n![](1.jpg)\n\n如上图所示，这个序列的$n_i$有两种表示方法。一种就表示成CA的绝对数量，如图中第一行所示。还有一种表示成后一个数与前一个数的差值，这样能减少元组的数量，但是会出现负数。当然在这个例子中貌似并不能看出数量减少了。。。\n\n**$k$叉树编码：**如果句法树所有产生式全部是$k$叉的，那么还可以将编码进一步简化，具体做法就是将所有的负数$n_i$统一为一个负数就行。为什么这里就不需要对负数进行区分了呢？这还得从句法树的解码说起，我们看一看是怎么从序列解码成句法树的。\n\n当遇到一个负数$n_i$的时候，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度少$-n_i$个结点。大致结构如下图所示（图画的丑，不要介意）：\n\n![](2.jpg)\n\n可以看出，$w_{i+1}$这棵子树接在了从$w_i$到根结点路径上的第$-n_i + 2$个结点上。但是$w_{i+1}$具体在哪还无法确定，只能确定它的子树根结点位置。另外需要解释的是，为什么这里是常数2？因为$w_i$到$w_{i-1}$与$w_i$的LCA的距离一定是2，如果不是的话，中间就一定会有其他结点，那么就一定存在结点位于$w_{i-1}$与$w_i$之间，这显然不可能。最后可以注意到，这种情况下，\n\n如果$n_i$是正数的话，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度多$n_i$个结点。大致结构如下图所示：\n\n![](3.jpg)\n\n这种情况下，$w_{i+1}$这棵子树接在了从${\\rm LCA}(w_{i-1}, w_i)$到$w_i$路径上的第$n_i + 1$个结点处。同样也无法确定它的准确位置，但是它所在的子树确定了从这分叉出去的。\n\n回到正题，之前说到了对于$k$叉树，所有负数都可以统一起来，为什么呢？继续看上面$n_i$负数那张图，对于$w_{i+1}$所在子树，需要在从$w_i$到根结点这条路径上寻找一个分叉点，也就是它俩的LCA。如果这是一个$k$叉树，那么这个分叉点就一定是第一个孩子数不满$k$个的结点。因为如果再往下的话，孩子数都满了，再加子树孩子数一定大于$k$。再往上的话，就会导致这第一个结点孩子数小于$k$，因为从左到右遍历的，子树之间不会交叉，以后都不会有子树插入到这个结点处了。\n\n下图就是简化序列化后的二叉树例子，第三行将所有的负数都用一个负号替代了：\n\n![](4.jpg)\n\n我尝试过了按照这个序列构建出一棵树的过程，画了个草图给大家看看，可能有点乱（参照的是上面那个非二叉树的图）：\n![](5.jpg)\n\n还有一个小trick就是对于有些直接连到根结点的叶子，用$({\\rm ROOT}, c_i)$作为它们的label。\n\n## 理论证明\n主要证明两个性质，一个就是充分性（即每个句法树都能映射为一个序列），另一个就是单射性（即每个序列只能唯一对应一个句法树）。\n\n**充分性：**\n这个显而易见，对于每个句法树，相邻两个单词一定存在唯一的LCA，且它的label也是唯一的，所以充分性肯定能保证的。\n\n**单射性：**\n为了简便，首先证明不包含非终结符的树结构映射的单射性，再证明加上非终结符也是单射的。\n\n如果用$(\\bullet_i)$表示第$i$个叶子结点，那么句法树可以表示成如下的括号表达式：\n\\\\[\n\\alpha_0 (\\bullet_1) \\alpha_1 (\\bullet_2) \\ldots \\alpha_{\\left| w \\right| - 1} (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|}\n\\\\]\n更进一步，每个$\\alpha_i$形式肯定是$[)]^\\*[(X]^\\*$，因为如果存在一个闭合的括号对，那么中间肯定还存在着一个叶子结点，这显然不可能。所以我们可以用$\\alpha_{i)}$来替代$[)]^\\*$，用$\\alpha_{i(}$来替代$[(X]^\\*$，将$\\alpha_i$改写为$\\alpha_{i)} \\alpha_{i(}$，括号表达式可以重写为：\n\\\\[\n\\alpha_{0)} \\alpha_{0(} (\\bullet_1) \\alpha_{1)} \\alpha_{1(} (\\bullet_2) \\ldots (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|)} \\alpha_{\\left| w \\right|(}\n\\\\]\n注意到首尾两个元素一定是空的，接下来用$\\beta_i$替换$\\alpha_{i-1(}(\\bullet_i)\\alpha_{i)}$，得到序列：\n\\\\[\n\\beta_1 \\beta_2 \\ldots \\beta_{\\left| w \\right|}\n\\\\]\n更进一步，可以证明$\\beta_i$一定只含有$[(X]^\\*(\\bullet_i)$和$(\\bullet_i)[)]^\\*$中的一个。因为如果两个都含有的话，说明存在$(X(\\bullet_i))$这种一元产生式，但是因为一元产生式都提前处理过了，所以不可能存在。\n\n接下来可以给每个$\\beta_i$分配一个值$\\delta(\\beta_i)$，如果$\\beta_i$左右两边都没有括号，那这个值就是0，如果左边有$k$个括号，那值就是$+k$，如果右边有$k$个括号，那值就是$-k$。如果将这些值写成序列：\n\\\\[\n\\delta(\\beta_1)\\delta(\\beta_2)\\ldots\\delta(\\beta_{\\left|w\\right| - 1})\n\\\\]\n这个序列正好对应了之前的第二种编码，也就是编码成LCA的个数之差。这是为什么呢？可以看出，一直到$\\beta_i$结束，没有闭合的括号数量正好就是$w_i$和$w_{i+1}$的LCA数量。所以$\\delta(\\beta_i)$就是$w_i$和$w_{i+1}$的LCA数量与$w_{i-1}$和$w_{i}$的LCA数量的差值。\n\n最后这就验证了括号序列和之前的编码是一一对应的，单射性得证。解码的时候只需要将数字直接转化成对应的括号序列就行了。\n\n而加上了非终结符之后，单射性不会受到影响。因为虽然两棵相同结构但是拥有不同非终结符的句法树，转化成括号序列后是相同的。但是因为之前的定义中，还有一个变量$c_i$来表示这个非终结符了，所以还是能够唯一对应过去的。\n\n## 限制\n上面定义的序列化函数有两个缺点：一是非满射，二是不能处理一元产生式，下面介绍一下解决方法。\n\n**对于一元产生式：**\n有两种一元产生式，一种是中间结点，还有一种是叶子结点的label。\n\n对于中间结点，直接将一条链上的label合并成一个新的label就行了，方法和之前文章介绍的一样。\n\n而对于叶子结点的label，一个方法是在解码之前先用一个函数预测一下每个叶子结点的label，如果为空，说明没有label，否则就加上这个label，然后再进行正常的解码。另一个方法是将之前的序列化的二元组扩展为三元组$(n_i, c_i, u_i)$，其中第三个元素就是每个叶子结点的label。\n\n**非满射：**\n非满射会导致的问题就是产生出来的序列可能无法映射到某一棵句法树。根据文中所说，一共有两种无法映射的情况。\n\n一种情况是对于多叉树，相邻两对叶子结点的LCA的label预测不同。比如在最上面一张图中，“the red toy”如果预测为两个不同的label，那么就会产生矛盾。这种情况很好解决，只要在解码的时候只取第一个label，忽略后一个就行了。\n\n另一种情况是序列可能会产生一元产生式，如下图所示：\n\n![](6.jpg)\n\n根据图中序列，会产生下面那棵句法树，一元结点X并没有预测到。但其实因为一元结点已经提前合并了，所以如果预测到了一元结点，直接删掉不要就行了。\n\n# 序列标注\n---\n这里就不细讲了，用的就是基本的BiLSTM + CRF序列标注模型，具体可以看这篇论文：[End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF](https://arxiv.org/abs/1603.01354)。\n\n# 实验\n---\n\n这篇论文最大的卖点不是效果，而是速度快，下面是和其他模型的速度对比，可以看出，速度的确快了不少，达到了大几百句每秒。但是还是存在序列标注模型的老毛病，效果并不好，虽然比之前的高了，但是还是只有90%的F1。\n\n![](7.jpg)\n\n# 结论与展望\n---\n这篇论文定义了一种新的句法树序列化方法，将句法树序列化为长度减1的序列，其中每个值就是相邻两个单词的CA个数和LCA的label。\n\n看完这篇，我仔细想了想，其实之前的chart-based方法也都可以转化成序列，只不过都得特别处理一下一元产生式和多叉树，比较麻烦。以后可以考虑在这方面有所突破，速度快还是很nice的。","source":"_posts/ConParSeqLab.md","raw":"---\ntitle: Constituent Parsing as Sequence Labeling\ndate: 2019-03-11 17:37:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EMNLP\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=421885447&auto=1&height=66\"></iframe></div>\n\n> 貌似已经有好几个月没怎么看过论文了，之前一直在写论文，一直没空更新博客，最近闲下来把最后几篇没看完的论文看了。\n\n**论文地址：**[Constituent Parsing as Sequence Labeling](http://aclweb.org/anthology/D18-1162)\n\n**代码地址：**[Code](https://github.com/aghie/tree2labels)\n\n# 介绍\n---\n本文定义了一种新的树的序列化方法，将树结构预测问题转化为了序列预测问题。该序列用相邻两个结点的**公共祖先（CA）数量**和**最近公共祖先（LCA）的label**来表示一棵树，并且证明了这个树到序列的映射是单射但不是满射的，但是提出了一系列方法来解决这个问题。\n\n相比于之前的序列方法，比如[Parsing as Language Modeling](http://www.aclweb.org/anthology/D16-1257)，本文的序列化有所不同，主要体现在之前的方法都是seq2seq的，也就是输入句子，直接输出树的括号表达式序列。但是这种方法输出不是定长的，所以结果可能会比较差。本文的方法将输出长度固定在了句子长度减1上（只针对不存在一元产生式的句法树，这种情况之后讨论），所以可以将每个预测分配到每个单词上，然后用序列标注的方法来解决。\n\n# 树的序列化\n---\n\n## 记号和基础知识\n记输入句子为$\\textbf{w} = [w_1, w_2, \\ldots, w_N]$，其中$w_i \\in V$。$T_N$为拥有$N$个叶子结点的不含有一元产生式的句法树集合。句法分析的任务就是将输入句子$\\textbf{w}$映射到句法树$T_N$。\n\n为了将句法分析转化为序列标注任务，需要定义一个树的序列化方法：$\\Phi_N : T_N \\to L^{N - 1}$，也就是将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列。并且该映射函数还得满足一定的条件，首先它一定得是一个**函数**（*也就是对于所有的句法树，都得找到一个对应的序列*），然后这个函数还得有**单射性**（*也就是句法树和序列要一一对应，不能存在两个句法树对应同一个序列，否则的话预测出来一个序列可能解码出两棵句法树，那就尴尬了*），当然要是还满足**满射性**就最好了（*也就是对于每一个序列，最好都能找到一棵句法树与之对应，不然预测出一个序列无法找到对应的句法树也很尴尬*），当然找不到也没事，后文有解决方法。\n\n然后需要定义一个函数，将句子映射为序列：$F_{N, \\theta} : V^N \\to L^{N - 1}$。这个映射就通过序列标注的LSTM来实现了，$\\theta$就是LSTM的参数。\n\n最后通过函数$F_{N, \\theta} \\circ \\Phi_N^{-1}$将输入句子转化为对应的句法树。那么$F_{N, \\theta}$没什么好说的，就是一个序列标注模型，下面重点就是介绍如何设计函数$\\Phi_N$。\n\n## 编码\n之前说到了将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列，这个序列是这样生成的：对于单词$w_i$，分配给它一个二元label $l_i = (n_i, c_i)$，其中$n_i$为单词$w_i$和$w_{i + 1}$的CA数量，$c_i$为它俩的LCA的label。\n\n![](1.jpg)\n\n如上图所示，这个序列的$n_i$有两种表示方法。一种就表示成CA的绝对数量，如图中第一行所示。还有一种表示成后一个数与前一个数的差值，这样能减少元组的数量，但是会出现负数。当然在这个例子中貌似并不能看出数量减少了。。。\n\n**$k$叉树编码：**如果句法树所有产生式全部是$k$叉的，那么还可以将编码进一步简化，具体做法就是将所有的负数$n_i$统一为一个负数就行。为什么这里就不需要对负数进行区分了呢？这还得从句法树的解码说起，我们看一看是怎么从序列解码成句法树的。\n\n当遇到一个负数$n_i$的时候，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度少$-n_i$个结点。大致结构如下图所示（图画的丑，不要介意）：\n\n![](2.jpg)\n\n可以看出，$w_{i+1}$这棵子树接在了从$w_i$到根结点路径上的第$-n_i + 2$个结点上。但是$w_{i+1}$具体在哪还无法确定，只能确定它的子树根结点位置。另外需要解释的是，为什么这里是常数2？因为$w_i$到$w_{i-1}$与$w_i$的LCA的距离一定是2，如果不是的话，中间就一定会有其他结点，那么就一定存在结点位于$w_{i-1}$与$w_i$之间，这显然不可能。最后可以注意到，这种情况下，\n\n如果$n_i$是正数的话，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度多$n_i$个结点。大致结构如下图所示：\n\n![](3.jpg)\n\n这种情况下，$w_{i+1}$这棵子树接在了从${\\rm LCA}(w_{i-1}, w_i)$到$w_i$路径上的第$n_i + 1$个结点处。同样也无法确定它的准确位置，但是它所在的子树确定了从这分叉出去的。\n\n回到正题，之前说到了对于$k$叉树，所有负数都可以统一起来，为什么呢？继续看上面$n_i$负数那张图，对于$w_{i+1}$所在子树，需要在从$w_i$到根结点这条路径上寻找一个分叉点，也就是它俩的LCA。如果这是一个$k$叉树，那么这个分叉点就一定是第一个孩子数不满$k$个的结点。因为如果再往下的话，孩子数都满了，再加子树孩子数一定大于$k$。再往上的话，就会导致这第一个结点孩子数小于$k$，因为从左到右遍历的，子树之间不会交叉，以后都不会有子树插入到这个结点处了。\n\n下图就是简化序列化后的二叉树例子，第三行将所有的负数都用一个负号替代了：\n\n![](4.jpg)\n\n我尝试过了按照这个序列构建出一棵树的过程，画了个草图给大家看看，可能有点乱（参照的是上面那个非二叉树的图）：\n![](5.jpg)\n\n还有一个小trick就是对于有些直接连到根结点的叶子，用$({\\rm ROOT}, c_i)$作为它们的label。\n\n## 理论证明\n主要证明两个性质，一个就是充分性（即每个句法树都能映射为一个序列），另一个就是单射性（即每个序列只能唯一对应一个句法树）。\n\n**充分性：**\n这个显而易见，对于每个句法树，相邻两个单词一定存在唯一的LCA，且它的label也是唯一的，所以充分性肯定能保证的。\n\n**单射性：**\n为了简便，首先证明不包含非终结符的树结构映射的单射性，再证明加上非终结符也是单射的。\n\n如果用$(\\bullet_i)$表示第$i$个叶子结点，那么句法树可以表示成如下的括号表达式：\n\\\\[\n\\alpha_0 (\\bullet_1) \\alpha_1 (\\bullet_2) \\ldots \\alpha_{\\left| w \\right| - 1} (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|}\n\\\\]\n更进一步，每个$\\alpha_i$形式肯定是$[)]^\\*[(X]^\\*$，因为如果存在一个闭合的括号对，那么中间肯定还存在着一个叶子结点，这显然不可能。所以我们可以用$\\alpha_{i)}$来替代$[)]^\\*$，用$\\alpha_{i(}$来替代$[(X]^\\*$，将$\\alpha_i$改写为$\\alpha_{i)} \\alpha_{i(}$，括号表达式可以重写为：\n\\\\[\n\\alpha_{0)} \\alpha_{0(} (\\bullet_1) \\alpha_{1)} \\alpha_{1(} (\\bullet_2) \\ldots (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|)} \\alpha_{\\left| w \\right|(}\n\\\\]\n注意到首尾两个元素一定是空的，接下来用$\\beta_i$替换$\\alpha_{i-1(}(\\bullet_i)\\alpha_{i)}$，得到序列：\n\\\\[\n\\beta_1 \\beta_2 \\ldots \\beta_{\\left| w \\right|}\n\\\\]\n更进一步，可以证明$\\beta_i$一定只含有$[(X]^\\*(\\bullet_i)$和$(\\bullet_i)[)]^\\*$中的一个。因为如果两个都含有的话，说明存在$(X(\\bullet_i))$这种一元产生式，但是因为一元产生式都提前处理过了，所以不可能存在。\n\n接下来可以给每个$\\beta_i$分配一个值$\\delta(\\beta_i)$，如果$\\beta_i$左右两边都没有括号，那这个值就是0，如果左边有$k$个括号，那值就是$+k$，如果右边有$k$个括号，那值就是$-k$。如果将这些值写成序列：\n\\\\[\n\\delta(\\beta_1)\\delta(\\beta_2)\\ldots\\delta(\\beta_{\\left|w\\right| - 1})\n\\\\]\n这个序列正好对应了之前的第二种编码，也就是编码成LCA的个数之差。这是为什么呢？可以看出，一直到$\\beta_i$结束，没有闭合的括号数量正好就是$w_i$和$w_{i+1}$的LCA数量。所以$\\delta(\\beta_i)$就是$w_i$和$w_{i+1}$的LCA数量与$w_{i-1}$和$w_{i}$的LCA数量的差值。\n\n最后这就验证了括号序列和之前的编码是一一对应的，单射性得证。解码的时候只需要将数字直接转化成对应的括号序列就行了。\n\n而加上了非终结符之后，单射性不会受到影响。因为虽然两棵相同结构但是拥有不同非终结符的句法树，转化成括号序列后是相同的。但是因为之前的定义中，还有一个变量$c_i$来表示这个非终结符了，所以还是能够唯一对应过去的。\n\n## 限制\n上面定义的序列化函数有两个缺点：一是非满射，二是不能处理一元产生式，下面介绍一下解决方法。\n\n**对于一元产生式：**\n有两种一元产生式，一种是中间结点，还有一种是叶子结点的label。\n\n对于中间结点，直接将一条链上的label合并成一个新的label就行了，方法和之前文章介绍的一样。\n\n而对于叶子结点的label，一个方法是在解码之前先用一个函数预测一下每个叶子结点的label，如果为空，说明没有label，否则就加上这个label，然后再进行正常的解码。另一个方法是将之前的序列化的二元组扩展为三元组$(n_i, c_i, u_i)$，其中第三个元素就是每个叶子结点的label。\n\n**非满射：**\n非满射会导致的问题就是产生出来的序列可能无法映射到某一棵句法树。根据文中所说，一共有两种无法映射的情况。\n\n一种情况是对于多叉树，相邻两对叶子结点的LCA的label预测不同。比如在最上面一张图中，“the red toy”如果预测为两个不同的label，那么就会产生矛盾。这种情况很好解决，只要在解码的时候只取第一个label，忽略后一个就行了。\n\n另一种情况是序列可能会产生一元产生式，如下图所示：\n\n![](6.jpg)\n\n根据图中序列，会产生下面那棵句法树，一元结点X并没有预测到。但其实因为一元结点已经提前合并了，所以如果预测到了一元结点，直接删掉不要就行了。\n\n# 序列标注\n---\n这里就不细讲了，用的就是基本的BiLSTM + CRF序列标注模型，具体可以看这篇论文：[End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF](https://arxiv.org/abs/1603.01354)。\n\n# 实验\n---\n\n这篇论文最大的卖点不是效果，而是速度快，下面是和其他模型的速度对比，可以看出，速度的确快了不少，达到了大几百句每秒。但是还是存在序列标注模型的老毛病，效果并不好，虽然比之前的高了，但是还是只有90%的F1。\n\n![](7.jpg)\n\n# 结论与展望\n---\n这篇论文定义了一种新的句法树序列化方法，将句法树序列化为长度减1的序列，其中每个值就是相邻两个单词的CA个数和LCA的label。\n\n看完这篇，我仔细想了想，其实之前的chart-based方法也都可以转化成序列，只不过都得特别处理一下一元产生式和多叉树，比较麻烦。以后可以考虑在这方面有所突破，速度快还是很nice的。","slug":"ConParSeqLab","published":1,"updated":"2019-07-20T04:07:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9823q000n7sweoilctfo4","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=421885447&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>貌似已经有好几个月没怎么看过论文了，之前一直在写论文，一直没空更新博客，最近闲下来把最后几篇没看完的论文看了。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/D18-1162\" target=\"_blank\" rel=\"noopener\">Constituent Parsing as Sequence Labeling</a></p>\n<p><strong>代码地址：</strong><a href=\"https://github.com/aghie/tree2labels\" target=\"_blank\" rel=\"noopener\">Code</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>本文定义了一种新的树的序列化方法，将树结构预测问题转化为了序列预测问题。该序列用相邻两个结点的<strong>公共祖先（CA）数量</strong>和<strong>最近公共祖先（LCA）的label</strong>来表示一棵树，并且证明了这个树到序列的映射是单射但不是满射的，但是提出了一系列方法来解决这个问题。</p>\n<p>相比于之前的序列方法，比如<a href=\"http://www.aclweb.org/anthology/D16-1257\" target=\"_blank\" rel=\"noopener\">Parsing as Language Modeling</a>，本文的序列化有所不同，主要体现在之前的方法都是seq2seq的，也就是输入句子，直接输出树的括号表达式序列。但是这种方法输出不是定长的，所以结果可能会比较差。本文的方法将输出长度固定在了句子长度减1上（只针对不存在一元产生式的句法树，这种情况之后讨论），所以可以将每个预测分配到每个单词上，然后用序列标注的方法来解决。</p>\n<h1 id=\"树的序列化\"><a href=\"#树的序列化\" class=\"headerlink\" title=\"树的序列化\"></a>树的序列化</h1><hr>\n<h2 id=\"记号和基础知识\"><a href=\"#记号和基础知识\" class=\"headerlink\" title=\"记号和基础知识\"></a>记号和基础知识</h2><p>记输入句子为$\\textbf{w} = [w_1, w_2, \\ldots, w_N]$，其中$w_i \\in V$。$T_N$为拥有$N$个叶子结点的不含有一元产生式的句法树集合。句法分析的任务就是将输入句子$\\textbf{w}$映射到句法树$T_N$。</p>\n<p>为了将句法分析转化为序列标注任务，需要定义一个树的序列化方法：$\\Phi_N : T_N \\to L^{N - 1}$，也就是将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列。并且该映射函数还得满足一定的条件，首先它一定得是一个<strong>函数</strong>（<em>也就是对于所有的句法树，都得找到一个对应的序列</em>），然后这个函数还得有<strong>单射性</strong>（<em>也就是句法树和序列要一一对应，不能存在两个句法树对应同一个序列，否则的话预测出来一个序列可能解码出两棵句法树，那就尴尬了</em>），当然要是还满足<strong>满射性</strong>就最好了（<em>也就是对于每一个序列，最好都能找到一棵句法树与之对应，不然预测出一个序列无法找到对应的句法树也很尴尬</em>），当然找不到也没事，后文有解决方法。</p>\n<p>然后需要定义一个函数，将句子映射为序列：$F_{N, \\theta} : V^N \\to L^{N - 1}$。这个映射就通过序列标注的LSTM来实现了，$\\theta$就是LSTM的参数。</p>\n<p>最后通过函数$F_{N, \\theta} \\circ \\Phi_N^{-1}$将输入句子转化为对应的句法树。那么$F_{N, \\theta}$没什么好说的，就是一个序列标注模型，下面重点就是介绍如何设计函数$\\Phi_N$。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>之前说到了将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列，这个序列是这样生成的：对于单词$w_i$，分配给它一个二元label $l_i = (n_i, c_i)$，其中$n_i$为单词$w_i$和$w_{i + 1}$的CA数量，$c_i$为它俩的LCA的label。</p>\n<p><img src=\"1.jpg\" alt></p>\n<p>如上图所示，这个序列的$n_i$有两种表示方法。一种就表示成CA的绝对数量，如图中第一行所示。还有一种表示成后一个数与前一个数的差值，这样能减少元组的数量，但是会出现负数。当然在这个例子中貌似并不能看出数量减少了。。。</p>\n<p><strong>$k$叉树编码：</strong>如果句法树所有产生式全部是$k$叉的，那么还可以将编码进一步简化，具体做法就是将所有的负数$n_i$统一为一个负数就行。为什么这里就不需要对负数进行区分了呢？这还得从句法树的解码说起，我们看一看是怎么从序列解码成句法树的。</p>\n<p>当遇到一个负数$n_i$的时候，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度少$-n_i$个结点。大致结构如下图所示（图画的丑，不要介意）：</p>\n<p><img src=\"2.jpg\" alt></p>\n<p>可以看出，$w_{i+1}$这棵子树接在了从$w_i$到根结点路径上的第$-n_i + 2$个结点上。但是$w_{i+1}$具体在哪还无法确定，只能确定它的子树根结点位置。另外需要解释的是，为什么这里是常数2？因为$w_i$到$w_{i-1}$与$w_i$的LCA的距离一定是2，如果不是的话，中间就一定会有其他结点，那么就一定存在结点位于$w_{i-1}$与$w_i$之间，这显然不可能。最后可以注意到，这种情况下，</p>\n<p>如果$n_i$是正数的话，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度多$n_i$个结点。大致结构如下图所示：</p>\n<p><img src=\"3.jpg\" alt></p>\n<p>这种情况下，$w_{i+1}$这棵子树接在了从${\\rm LCA}(w_{i-1}, w_i)$到$w_i$路径上的第$n_i + 1$个结点处。同样也无法确定它的准确位置，但是它所在的子树确定了从这分叉出去的。</p>\n<p>回到正题，之前说到了对于$k$叉树，所有负数都可以统一起来，为什么呢？继续看上面$n_i$负数那张图，对于$w_{i+1}$所在子树，需要在从$w_i$到根结点这条路径上寻找一个分叉点，也就是它俩的LCA。如果这是一个$k$叉树，那么这个分叉点就一定是第一个孩子数不满$k$个的结点。因为如果再往下的话，孩子数都满了，再加子树孩子数一定大于$k$。再往上的话，就会导致这第一个结点孩子数小于$k$，因为从左到右遍历的，子树之间不会交叉，以后都不会有子树插入到这个结点处了。</p>\n<p>下图就是简化序列化后的二叉树例子，第三行将所有的负数都用一个负号替代了：</p>\n<p><img src=\"4.jpg\" alt></p>\n<p>我尝试过了按照这个序列构建出一棵树的过程，画了个草图给大家看看，可能有点乱（参照的是上面那个非二叉树的图）：<br><img src=\"5.jpg\" alt></p>\n<p>还有一个小trick就是对于有些直接连到根结点的叶子，用$({\\rm ROOT}, c_i)$作为它们的label。</p>\n<h2 id=\"理论证明\"><a href=\"#理论证明\" class=\"headerlink\" title=\"理论证明\"></a>理论证明</h2><p>主要证明两个性质，一个就是充分性（即每个句法树都能映射为一个序列），另一个就是单射性（即每个序列只能唯一对应一个句法树）。</p>\n<p><strong>充分性：</strong><br>这个显而易见，对于每个句法树，相邻两个单词一定存在唯一的LCA，且它的label也是唯一的，所以充分性肯定能保证的。</p>\n<p><strong>单射性：</strong><br>为了简便，首先证明不包含非终结符的树结构映射的单射性，再证明加上非终结符也是单射的。</p>\n<p>如果用$(\\bullet_i)$表示第$i$个叶子结点，那么句法树可以表示成如下的括号表达式：<br>\\[<br>\\alpha_0 (\\bullet_1) \\alpha_1 (\\bullet_2) \\ldots \\alpha_{\\left| w \\right| - 1} (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|}<br>\\]<br>更进一步，每个$\\alpha_i$形式肯定是$[)]^*[(X]^*$，因为如果存在一个闭合的括号对，那么中间肯定还存在着一个叶子结点，这显然不可能。所以我们可以用$\\alpha_{i)}$来替代$[)]^*$，用$\\alpha_{i(}$来替代$[(X]^*$，将$\\alpha_i$改写为$\\alpha_{i)} \\alpha_{i(}$，括号表达式可以重写为：<br>\\[<br>\\alpha_{0)} \\alpha_{0(} (\\bullet_1) \\alpha_{1)} \\alpha_{1(} (\\bullet_2) \\ldots (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|)} \\alpha_{\\left| w \\right|(}<br>\\]<br>注意到首尾两个元素一定是空的，接下来用$\\beta_i$替换$\\alpha_{i-1(}(\\bullet_i)\\alpha_{i)}$，得到序列：<br>\\[<br>\\beta_1 \\beta_2 \\ldots \\beta_{\\left| w \\right|}<br>\\]<br>更进一步，可以证明$\\beta_i$一定只含有$[(X]^*(\\bullet_i)$和$(\\bullet_i)[)]^*$中的一个。因为如果两个都含有的话，说明存在$(X(\\bullet_i))$这种一元产生式，但是因为一元产生式都提前处理过了，所以不可能存在。</p>\n<p>接下来可以给每个$\\beta_i$分配一个值$\\delta(\\beta_i)$，如果$\\beta_i$左右两边都没有括号，那这个值就是0，如果左边有$k$个括号，那值就是$+k$，如果右边有$k$个括号，那值就是$-k$。如果将这些值写成序列：<br>\\[<br>\\delta(\\beta_1)\\delta(\\beta_2)\\ldots\\delta(\\beta_{\\left|w\\right| - 1})<br>\\]<br>这个序列正好对应了之前的第二种编码，也就是编码成LCA的个数之差。这是为什么呢？可以看出，一直到$\\beta_i$结束，没有闭合的括号数量正好就是$w_i$和$w_{i+1}$的LCA数量。所以$\\delta(\\beta_i)$就是$w_i$和$w_{i+1}$的LCA数量与$w_{i-1}$和$w_{i}$的LCA数量的差值。</p>\n<p>最后这就验证了括号序列和之前的编码是一一对应的，单射性得证。解码的时候只需要将数字直接转化成对应的括号序列就行了。</p>\n<p>而加上了非终结符之后，单射性不会受到影响。因为虽然两棵相同结构但是拥有不同非终结符的句法树，转化成括号序列后是相同的。但是因为之前的定义中，还有一个变量$c_i$来表示这个非终结符了，所以还是能够唯一对应过去的。</p>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><p>上面定义的序列化函数有两个缺点：一是非满射，二是不能处理一元产生式，下面介绍一下解决方法。</p>\n<p><strong>对于一元产生式：</strong><br>有两种一元产生式，一种是中间结点，还有一种是叶子结点的label。</p>\n<p>对于中间结点，直接将一条链上的label合并成一个新的label就行了，方法和之前文章介绍的一样。</p>\n<p>而对于叶子结点的label，一个方法是在解码之前先用一个函数预测一下每个叶子结点的label，如果为空，说明没有label，否则就加上这个label，然后再进行正常的解码。另一个方法是将之前的序列化的二元组扩展为三元组$(n_i, c_i, u_i)$，其中第三个元素就是每个叶子结点的label。</p>\n<p><strong>非满射：</strong><br>非满射会导致的问题就是产生出来的序列可能无法映射到某一棵句法树。根据文中所说，一共有两种无法映射的情况。</p>\n<p>一种情况是对于多叉树，相邻两对叶子结点的LCA的label预测不同。比如在最上面一张图中，“the red toy”如果预测为两个不同的label，那么就会产生矛盾。这种情况很好解决，只要在解码的时候只取第一个label，忽略后一个就行了。</p>\n<p>另一种情况是序列可能会产生一元产生式，如下图所示：</p>\n<p><img src=\"6.jpg\" alt></p>\n<p>根据图中序列，会产生下面那棵句法树，一元结点X并没有预测到。但其实因为一元结点已经提前合并了，所以如果预测到了一元结点，直接删掉不要就行了。</p>\n<h1 id=\"序列标注\"><a href=\"#序列标注\" class=\"headerlink\" title=\"序列标注\"></a>序列标注</h1><hr>\n<p>这里就不细讲了，用的就是基本的BiLSTM + CRF序列标注模型，具体可以看这篇论文：<a href=\"https://arxiv.org/abs/1603.01354\" target=\"_blank\" rel=\"noopener\">End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF</a>。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>这篇论文最大的卖点不是效果，而是速度快，下面是和其他模型的速度对比，可以看出，速度的确快了不少，达到了大几百句每秒。但是还是存在序列标注模型的老毛病，效果并不好，虽然比之前的高了，但是还是只有90%的F1。</p>\n<p><img src=\"7.jpg\" alt></p>\n<h1 id=\"结论与展望\"><a href=\"#结论与展望\" class=\"headerlink\" title=\"结论与展望\"></a>结论与展望</h1><hr>\n<p>这篇论文定义了一种新的句法树序列化方法，将句法树序列化为长度减1的序列，其中每个值就是相邻两个单词的CA个数和LCA的label。</p>\n<p>看完这篇，我仔细想了想，其实之前的chart-based方法也都可以转化成序列，只不过都得特别处理一下一元产生式和多叉树，比较麻烦。以后可以考虑在这方面有所突破，速度快还是很nice的。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=421885447&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>貌似已经有好几个月没怎么看过论文了，之前一直在写论文，一直没空更新博客，最近闲下来把最后几篇没看完的论文看了。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/D18-1162\" target=\"_blank\" rel=\"noopener\">Constituent Parsing as Sequence Labeling</a></p>\n<p><strong>代码地址：</strong><a href=\"https://github.com/aghie/tree2labels\" target=\"_blank\" rel=\"noopener\">Code</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>本文定义了一种新的树的序列化方法，将树结构预测问题转化为了序列预测问题。该序列用相邻两个结点的<strong>公共祖先（CA）数量</strong>和<strong>最近公共祖先（LCA）的label</strong>来表示一棵树，并且证明了这个树到序列的映射是单射但不是满射的，但是提出了一系列方法来解决这个问题。</p>\n<p>相比于之前的序列方法，比如<a href=\"http://www.aclweb.org/anthology/D16-1257\" target=\"_blank\" rel=\"noopener\">Parsing as Language Modeling</a>，本文的序列化有所不同，主要体现在之前的方法都是seq2seq的，也就是输入句子，直接输出树的括号表达式序列。但是这种方法输出不是定长的，所以结果可能会比较差。本文的方法将输出长度固定在了句子长度减1上（只针对不存在一元产生式的句法树，这种情况之后讨论），所以可以将每个预测分配到每个单词上，然后用序列标注的方法来解决。</p>\n<h1 id=\"树的序列化\"><a href=\"#树的序列化\" class=\"headerlink\" title=\"树的序列化\"></a>树的序列化</h1><hr>\n<h2 id=\"记号和基础知识\"><a href=\"#记号和基础知识\" class=\"headerlink\" title=\"记号和基础知识\"></a>记号和基础知识</h2><p>记输入句子为$\\textbf{w} = [w_1, w_2, \\ldots, w_N]$，其中$w_i \\in V$。$T_N$为拥有$N$个叶子结点的不含有一元产生式的句法树集合。句法分析的任务就是将输入句子$\\textbf{w}$映射到句法树$T_N$。</p>\n<p>为了将句法分析转化为序列标注任务，需要定义一个树的序列化方法：$\\Phi_N : T_N \\to L^{N - 1}$，也就是将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列。并且该映射函数还得满足一定的条件，首先它一定得是一个<strong>函数</strong>（<em>也就是对于所有的句法树，都得找到一个对应的序列</em>），然后这个函数还得有<strong>单射性</strong>（<em>也就是句法树和序列要一一对应，不能存在两个句法树对应同一个序列，否则的话预测出来一个序列可能解码出两棵句法树，那就尴尬了</em>），当然要是还满足<strong>满射性</strong>就最好了（<em>也就是对于每一个序列，最好都能找到一棵句法树与之对应，不然预测出一个序列无法找到对应的句法树也很尴尬</em>），当然找不到也没事，后文有解决方法。</p>\n<p>然后需要定义一个函数，将句子映射为序列：$F_{N, \\theta} : V^N \\to L^{N - 1}$。这个映射就通过序列标注的LSTM来实现了，$\\theta$就是LSTM的参数。</p>\n<p>最后通过函数$F_{N, \\theta} \\circ \\Phi_N^{-1}$将输入句子转化为对应的句法树。那么$F_{N, \\theta}$没什么好说的，就是一个序列标注模型，下面重点就是介绍如何设计函数$\\Phi_N$。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>之前说到了将一棵有$N$个叶子结点的句法树转化为长度为$N - 1$的序列，这个序列是这样生成的：对于单词$w_i$，分配给它一个二元label $l_i = (n_i, c_i)$，其中$n_i$为单词$w_i$和$w_{i + 1}$的CA数量，$c_i$为它俩的LCA的label。</p>\n<p><img src=\"1.jpg\" alt></p>\n<p>如上图所示，这个序列的$n_i$有两种表示方法。一种就表示成CA的绝对数量，如图中第一行所示。还有一种表示成后一个数与前一个数的差值，这样能减少元组的数量，但是会出现负数。当然在这个例子中貌似并不能看出数量减少了。。。</p>\n<p><strong>$k$叉树编码：</strong>如果句法树所有产生式全部是$k$叉的，那么还可以将编码进一步简化，具体做法就是将所有的负数$n_i$统一为一个负数就行。为什么这里就不需要对负数进行区分了呢？这还得从句法树的解码说起，我们看一看是怎么从序列解码成句法树的。</p>\n<p>当遇到一个负数$n_i$的时候，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度少$-n_i$个结点。大致结构如下图所示（图画的丑，不要介意）：</p>\n<p><img src=\"2.jpg\" alt></p>\n<p>可以看出，$w_{i+1}$这棵子树接在了从$w_i$到根结点路径上的第$-n_i + 2$个结点上。但是$w_{i+1}$具体在哪还无法确定，只能确定它的子树根结点位置。另外需要解释的是，为什么这里是常数2？因为$w_i$到$w_{i-1}$与$w_i$的LCA的距离一定是2，如果不是的话，中间就一定会有其他结点，那么就一定存在结点位于$w_{i-1}$与$w_i$之间，这显然不可能。最后可以注意到，这种情况下，</p>\n<p>如果$n_i$是正数的话，说明${\\rm LCA}(w_{i}, w_{i+1})$到根结点路径的长度比${\\rm LCA}(w_{i-1}, w_i)$到根结点路径长度多$n_i$个结点。大致结构如下图所示：</p>\n<p><img src=\"3.jpg\" alt></p>\n<p>这种情况下，$w_{i+1}$这棵子树接在了从${\\rm LCA}(w_{i-1}, w_i)$到$w_i$路径上的第$n_i + 1$个结点处。同样也无法确定它的准确位置，但是它所在的子树确定了从这分叉出去的。</p>\n<p>回到正题，之前说到了对于$k$叉树，所有负数都可以统一起来，为什么呢？继续看上面$n_i$负数那张图，对于$w_{i+1}$所在子树，需要在从$w_i$到根结点这条路径上寻找一个分叉点，也就是它俩的LCA。如果这是一个$k$叉树，那么这个分叉点就一定是第一个孩子数不满$k$个的结点。因为如果再往下的话，孩子数都满了，再加子树孩子数一定大于$k$。再往上的话，就会导致这第一个结点孩子数小于$k$，因为从左到右遍历的，子树之间不会交叉，以后都不会有子树插入到这个结点处了。</p>\n<p>下图就是简化序列化后的二叉树例子，第三行将所有的负数都用一个负号替代了：</p>\n<p><img src=\"4.jpg\" alt></p>\n<p>我尝试过了按照这个序列构建出一棵树的过程，画了个草图给大家看看，可能有点乱（参照的是上面那个非二叉树的图）：<br><img src=\"5.jpg\" alt></p>\n<p>还有一个小trick就是对于有些直接连到根结点的叶子，用$({\\rm ROOT}, c_i)$作为它们的label。</p>\n<h2 id=\"理论证明\"><a href=\"#理论证明\" class=\"headerlink\" title=\"理论证明\"></a>理论证明</h2><p>主要证明两个性质，一个就是充分性（即每个句法树都能映射为一个序列），另一个就是单射性（即每个序列只能唯一对应一个句法树）。</p>\n<p><strong>充分性：</strong><br>这个显而易见，对于每个句法树，相邻两个单词一定存在唯一的LCA，且它的label也是唯一的，所以充分性肯定能保证的。</p>\n<p><strong>单射性：</strong><br>为了简便，首先证明不包含非终结符的树结构映射的单射性，再证明加上非终结符也是单射的。</p>\n<p>如果用$(\\bullet_i)$表示第$i$个叶子结点，那么句法树可以表示成如下的括号表达式：<br>\\[<br>\\alpha_0 (\\bullet_1) \\alpha_1 (\\bullet_2) \\ldots \\alpha_{\\left| w \\right| - 1} (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|}<br>\\]<br>更进一步，每个$\\alpha_i$形式肯定是$[)]^*[(X]^*$，因为如果存在一个闭合的括号对，那么中间肯定还存在着一个叶子结点，这显然不可能。所以我们可以用$\\alpha_{i)}$来替代$[)]^*$，用$\\alpha_{i(}$来替代$[(X]^*$，将$\\alpha_i$改写为$\\alpha_{i)} \\alpha_{i(}$，括号表达式可以重写为：<br>\\[<br>\\alpha_{0)} \\alpha_{0(} (\\bullet_1) \\alpha_{1)} \\alpha_{1(} (\\bullet_2) \\ldots (\\bullet_{\\left| w \\right|}) \\alpha_{\\left| w \\right|)} \\alpha_{\\left| w \\right|(}<br>\\]<br>注意到首尾两个元素一定是空的，接下来用$\\beta_i$替换$\\alpha_{i-1(}(\\bullet_i)\\alpha_{i)}$，得到序列：<br>\\[<br>\\beta_1 \\beta_2 \\ldots \\beta_{\\left| w \\right|}<br>\\]<br>更进一步，可以证明$\\beta_i$一定只含有$[(X]^*(\\bullet_i)$和$(\\bullet_i)[)]^*$中的一个。因为如果两个都含有的话，说明存在$(X(\\bullet_i))$这种一元产生式，但是因为一元产生式都提前处理过了，所以不可能存在。</p>\n<p>接下来可以给每个$\\beta_i$分配一个值$\\delta(\\beta_i)$，如果$\\beta_i$左右两边都没有括号，那这个值就是0，如果左边有$k$个括号，那值就是$+k$，如果右边有$k$个括号，那值就是$-k$。如果将这些值写成序列：<br>\\[<br>\\delta(\\beta_1)\\delta(\\beta_2)\\ldots\\delta(\\beta_{\\left|w\\right| - 1})<br>\\]<br>这个序列正好对应了之前的第二种编码，也就是编码成LCA的个数之差。这是为什么呢？可以看出，一直到$\\beta_i$结束，没有闭合的括号数量正好就是$w_i$和$w_{i+1}$的LCA数量。所以$\\delta(\\beta_i)$就是$w_i$和$w_{i+1}$的LCA数量与$w_{i-1}$和$w_{i}$的LCA数量的差值。</p>\n<p>最后这就验证了括号序列和之前的编码是一一对应的，单射性得证。解码的时候只需要将数字直接转化成对应的括号序列就行了。</p>\n<p>而加上了非终结符之后，单射性不会受到影响。因为虽然两棵相同结构但是拥有不同非终结符的句法树，转化成括号序列后是相同的。但是因为之前的定义中，还有一个变量$c_i$来表示这个非终结符了，所以还是能够唯一对应过去的。</p>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><p>上面定义的序列化函数有两个缺点：一是非满射，二是不能处理一元产生式，下面介绍一下解决方法。</p>\n<p><strong>对于一元产生式：</strong><br>有两种一元产生式，一种是中间结点，还有一种是叶子结点的label。</p>\n<p>对于中间结点，直接将一条链上的label合并成一个新的label就行了，方法和之前文章介绍的一样。</p>\n<p>而对于叶子结点的label，一个方法是在解码之前先用一个函数预测一下每个叶子结点的label，如果为空，说明没有label，否则就加上这个label，然后再进行正常的解码。另一个方法是将之前的序列化的二元组扩展为三元组$(n_i, c_i, u_i)$，其中第三个元素就是每个叶子结点的label。</p>\n<p><strong>非满射：</strong><br>非满射会导致的问题就是产生出来的序列可能无法映射到某一棵句法树。根据文中所说，一共有两种无法映射的情况。</p>\n<p>一种情况是对于多叉树，相邻两对叶子结点的LCA的label预测不同。比如在最上面一张图中，“the red toy”如果预测为两个不同的label，那么就会产生矛盾。这种情况很好解决，只要在解码的时候只取第一个label，忽略后一个就行了。</p>\n<p>另一种情况是序列可能会产生一元产生式，如下图所示：</p>\n<p><img src=\"6.jpg\" alt></p>\n<p>根据图中序列，会产生下面那棵句法树，一元结点X并没有预测到。但其实因为一元结点已经提前合并了，所以如果预测到了一元结点，直接删掉不要就行了。</p>\n<h1 id=\"序列标注\"><a href=\"#序列标注\" class=\"headerlink\" title=\"序列标注\"></a>序列标注</h1><hr>\n<p>这里就不细讲了，用的就是基本的BiLSTM + CRF序列标注模型，具体可以看这篇论文：<a href=\"https://arxiv.org/abs/1603.01354\" target=\"_blank\" rel=\"noopener\">End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF</a>。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>这篇论文最大的卖点不是效果，而是速度快，下面是和其他模型的速度对比，可以看出，速度的确快了不少，达到了大几百句每秒。但是还是存在序列标注模型的老毛病，效果并不好，虽然比之前的高了，但是还是只有90%的F1。</p>\n<p><img src=\"7.jpg\" alt></p>\n<h1 id=\"结论与展望\"><a href=\"#结论与展望\" class=\"headerlink\" title=\"结论与展望\"></a>结论与展望</h1><hr>\n<p>这篇论文定义了一种新的句法树序列化方法，将句法树序列化为长度减1的序列，其中每个值就是相邻两个单词的CA个数和LCA的label。</p>\n<p>看完这篇，我仔细想了想，其实之前的chart-based方法也都可以转化成序列，只不过都得特别处理一下一元产生式和多叉树，比较麻烦。以后可以考虑在这方面有所突破，速度快还是很nice的。</p>\n"},{"title":"Scientific Information Extraction with Semi-supervised Neural Tagging","date":"2017-12-18T16:41:53.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"论文链接：[D17-1279](https://www.aclweb.org/anthology/D/D17/D17-1279.pdf)\n\n# 摘要\n---\n这篇论文研究的是科技论文的信息抽取问题，比如给你一篇paper，你要找出其中的Task（任务）、Process（过程方法）、Material（资料数据）三种实体。\n这个问题可以归类为序列标注问题，但是科技论文的标注数据还是很少的，于是本文提出了一种基于图的半监督序列标注算法。\n\n# 1 介绍\n---\n背景就是近几年来论文发表数量越来越多，要对这些论文进行信息抽取，概括这篇论文的摘要。\n由于标注过的论文很少，大量论文那都是无标注的，所以需要一个半监督的方法来进行序列标注。本文有三大贡献：一是结果比以往的更好啦，二是提出一种半监督序列标注方法，使用基于图的标签传播和可信度数据选择，三是探索了不同的利用无标注数据的方法，比如无监督的表示初始化和半监督的模型训练。\n\n以往的工作大多是基于迁移学习的，本文提出的模型比他们结果都要好（ps.迁移学习和半监督方法都说自己最好。。。）\n\n# 2 模型\n---\n基本的模型就不用说了，就是传统的CNN+LSTM+CRF序列标注模型。\n本文的重点就在于无标注数据的使用上，采用了基于图的标签传播算法，来对无标注数据进行标注，并添加到序列标注模型中进行训练。\n\n# 3 半监督学习\n---\n具体是怎么标注的呢？\n概括起来就是首先计算出每个无标注数据的后验概率，然后改进基本序列标注模型中的CRF，使它能够考虑到标签的不确定性。\n### 基于图的后验估计\n估计后验概率方法如下：\n首先基于词的语义相似度构造出一个图，然后使用CRF边际函数作为正则化因子在图上进行标签传播，最后应用到神经网络中。\n#### 图的构造\n图中的结点代表单词，边代表词之间的语义相似性。整个图的结点数量等于标注数据和未标注数据总单词数。\n单词的表示是用前后共5个单词的词向量、和他最近的动词的词向量、一组离散特征例如词性和大写连接而成，然后用PCA降维到100维。\n定义两个结点之间的边权重等于欧几里得距离，如果两个点中至少一个点在另一个点的K近邻里。","source":"_posts/EMNLP17-2.md","raw":"---\ntitle: Scientific Information Extraction with Semi-supervised Neural Tagging\ndate: 2017-12-19 00:41:53\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EMNLP\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 序列标注\ncategories:\n- 序列标注\n---\n论文链接：[D17-1279](https://www.aclweb.org/anthology/D/D17/D17-1279.pdf)\n\n# 摘要\n---\n这篇论文研究的是科技论文的信息抽取问题，比如给你一篇paper，你要找出其中的Task（任务）、Process（过程方法）、Material（资料数据）三种实体。\n这个问题可以归类为序列标注问题，但是科技论文的标注数据还是很少的，于是本文提出了一种基于图的半监督序列标注算法。\n\n# 1 介绍\n---\n背景就是近几年来论文发表数量越来越多，要对这些论文进行信息抽取，概括这篇论文的摘要。\n由于标注过的论文很少，大量论文那都是无标注的，所以需要一个半监督的方法来进行序列标注。本文有三大贡献：一是结果比以往的更好啦，二是提出一种半监督序列标注方法，使用基于图的标签传播和可信度数据选择，三是探索了不同的利用无标注数据的方法，比如无监督的表示初始化和半监督的模型训练。\n\n以往的工作大多是基于迁移学习的，本文提出的模型比他们结果都要好（ps.迁移学习和半监督方法都说自己最好。。。）\n\n# 2 模型\n---\n基本的模型就不用说了，就是传统的CNN+LSTM+CRF序列标注模型。\n本文的重点就在于无标注数据的使用上，采用了基于图的标签传播算法，来对无标注数据进行标注，并添加到序列标注模型中进行训练。\n\n# 3 半监督学习\n---\n具体是怎么标注的呢？\n概括起来就是首先计算出每个无标注数据的后验概率，然后改进基本序列标注模型中的CRF，使它能够考虑到标签的不确定性。\n### 基于图的后验估计\n估计后验概率方法如下：\n首先基于词的语义相似度构造出一个图，然后使用CRF边际函数作为正则化因子在图上进行标签传播，最后应用到神经网络中。\n#### 图的构造\n图中的结点代表单词，边代表词之间的语义相似性。整个图的结点数量等于标注数据和未标注数据总单词数。\n单词的表示是用前后共5个单词的词向量、和他最近的动词的词向量、一组离散特征例如词性和大写连接而成，然后用PCA降维到100维。\n定义两个结点之间的边权重等于欧几里得距离，如果两个点中至少一个点在另一个点的K近邻里。","slug":"EMNLP17-2","published":1,"updated":"2019-07-20T04:14:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9823w000r7sweiw6bc88i","content":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/D/D17/D17-1279.pdf\" target=\"_blank\" rel=\"noopener\">D17-1279</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>这篇论文研究的是科技论文的信息抽取问题，比如给你一篇paper，你要找出其中的Task（任务）、Process（过程方法）、Material（资料数据）三种实体。<br>这个问题可以归类为序列标注问题，但是科技论文的标注数据还是很少的，于是本文提出了一种基于图的半监督序列标注算法。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>背景就是近几年来论文发表数量越来越多，要对这些论文进行信息抽取，概括这篇论文的摘要。<br>由于标注过的论文很少，大量论文那都是无标注的，所以需要一个半监督的方法来进行序列标注。本文有三大贡献：一是结果比以往的更好啦，二是提出一种半监督序列标注方法，使用基于图的标签传播和可信度数据选择，三是探索了不同的利用无标注数据的方法，比如无监督的表示初始化和半监督的模型训练。</p>\n<p>以往的工作大多是基于迁移学习的，本文提出的模型比他们结果都要好（ps.迁移学习和半监督方法都说自己最好。。。）</p>\n<h1 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2 模型\"></a>2 模型</h1><hr>\n<p>基本的模型就不用说了，就是传统的CNN+LSTM+CRF序列标注模型。<br>本文的重点就在于无标注数据的使用上，采用了基于图的标签传播算法，来对无标注数据进行标注，并添加到序列标注模型中进行训练。</p>\n<h1 id=\"3-半监督学习\"><a href=\"#3-半监督学习\" class=\"headerlink\" title=\"3 半监督学习\"></a>3 半监督学习</h1><hr>\n<p>具体是怎么标注的呢？<br>概括起来就是首先计算出每个无标注数据的后验概率，然后改进基本序列标注模型中的CRF，使它能够考虑到标签的不确定性。</p>\n<h3 id=\"基于图的后验估计\"><a href=\"#基于图的后验估计\" class=\"headerlink\" title=\"基于图的后验估计\"></a>基于图的后验估计</h3><p>估计后验概率方法如下：<br>首先基于词的语义相似度构造出一个图，然后使用CRF边际函数作为正则化因子在图上进行标签传播，最后应用到神经网络中。</p>\n<h4 id=\"图的构造\"><a href=\"#图的构造\" class=\"headerlink\" title=\"图的构造\"></a>图的构造</h4><p>图中的结点代表单词，边代表词之间的语义相似性。整个图的结点数量等于标注数据和未标注数据总单词数。<br>单词的表示是用前后共5个单词的词向量、和他最近的动词的词向量、一组离散特征例如词性和大写连接而成，然后用PCA降维到100维。<br>定义两个结点之间的边权重等于欧几里得距离，如果两个点中至少一个点在另一个点的K近邻里。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/D/D17/D17-1279.pdf\" target=\"_blank\" rel=\"noopener\">D17-1279</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>这篇论文研究的是科技论文的信息抽取问题，比如给你一篇paper，你要找出其中的Task（任务）、Process（过程方法）、Material（资料数据）三种实体。<br>这个问题可以归类为序列标注问题，但是科技论文的标注数据还是很少的，于是本文提出了一种基于图的半监督序列标注算法。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>背景就是近几年来论文发表数量越来越多，要对这些论文进行信息抽取，概括这篇论文的摘要。<br>由于标注过的论文很少，大量论文那都是无标注的，所以需要一个半监督的方法来进行序列标注。本文有三大贡献：一是结果比以往的更好啦，二是提出一种半监督序列标注方法，使用基于图的标签传播和可信度数据选择，三是探索了不同的利用无标注数据的方法，比如无监督的表示初始化和半监督的模型训练。</p>\n<p>以往的工作大多是基于迁移学习的，本文提出的模型比他们结果都要好（ps.迁移学习和半监督方法都说自己最好。。。）</p>\n<h1 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2 模型\"></a>2 模型</h1><hr>\n<p>基本的模型就不用说了，就是传统的CNN+LSTM+CRF序列标注模型。<br>本文的重点就在于无标注数据的使用上，采用了基于图的标签传播算法，来对无标注数据进行标注，并添加到序列标注模型中进行训练。</p>\n<h1 id=\"3-半监督学习\"><a href=\"#3-半监督学习\" class=\"headerlink\" title=\"3 半监督学习\"></a>3 半监督学习</h1><hr>\n<p>具体是怎么标注的呢？<br>概括起来就是首先计算出每个无标注数据的后验概率，然后改进基本序列标注模型中的CRF，使它能够考虑到标签的不确定性。</p>\n<h3 id=\"基于图的后验估计\"><a href=\"#基于图的后验估计\" class=\"headerlink\" title=\"基于图的后验估计\"></a>基于图的后验估计</h3><p>估计后验概率方法如下：<br>首先基于词的语义相似度构造出一个图，然后使用CRF边际函数作为正则化因子在图上进行标签传播，最后应用到神经网络中。</p>\n<h4 id=\"图的构造\"><a href=\"#图的构造\" class=\"headerlink\" title=\"图的构造\"></a>图的构造</h4><p>图中的结点代表单词，边代表词之间的语义相似性。整个图的结点数量等于标注数据和未标注数据总单词数。<br>单词的表示是用前后共5个单词的词向量、和他最近的动词的词向量、一组离散特征例如词性和大写连接而成，然后用PCA降维到100维。<br>定义两个结点之间的边权重等于欧几里得距离，如果两个点中至少一个点在另一个点的K近邻里。</p>\n"},{"title":"Dynamic Oracles for Top-Down and In-Order Shift-Reduce Constituent Parsing","date":"2018-11-07T11:57:38.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=240141&auto=1&height=66\"></iframe></div>\n\n> 有一句话，宾语是你。“吉下两点一口，又有欠字相依。”\n\n**论文地址：**[Dynamic Oracles for Top-Down and In-Order Shift-Reduce Constituent Parsing](http://aclweb.org/anthology/D18-1161)\n**代码地址：**[github](https://github.com/danifg/Dynamic-InOrderParser)\n\n本文是发表在EMNLP18上的一篇关于Dynamic Oracle的论文，主要介绍了针对自顶向下和中序两种移进归约成分句法分析模型的Dynamic Oracles。在PTB数据集上，取得了单模型最高的F1值92.0（截至论文发稿时是最高的，张岳TACL18的论文已经取得了92.4的最高F1值）。\n\n# 介绍\n---\nDynamic Oracle是用在转移系统中，防止错误传播的一种手段。而转移系统主要有分为三种：bottom-up、top-down和in-order的转移系统。\n\n其中bottom-up转移系统的Dynamic Oracle在[Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles](http://aclweb.org/anthology/D16-1001)中有很详细的证明，也可以参看我之前的博客[Deep Understanding of Dynamic Oracle in Constituent Parsing](https://godweiyang.com/2018/08/03/dynamic-oracles/)。\n\n而本文就提出了另外两种转移系统的Dynamic Oracle，其中top-down转移系统主要基于[Recurrent Neural Network Grammars](http://aclweb.org/anthology/N16-1024)，in-order转移系统主要基于[In-Order Transition-based Constituent Parsing](http://aclweb.org/anthology/Q17-1029)。\n\n# 基础知识\n---\n## 形式化定义\nbottom-up的转移系统这里就不讨论了，这里主要讨论另外两种转移系统。转移系统的状态用五元组$c = \\left\\langle {\\sum ,i,f,\\gamma ,\\alpha } \\right\\rangle $表示，五元组内元素分别表示stack、buffer第一个单词的下标、in-order转移系统中结束标记、已经生成的短语成分集合、stack中非终结符集合。\n\n每个短语成分用三元组$(X, l, r)$表示，其中X是非终结符，l和r是短语的边界下标。而非终结符用二元组$(X, j)$表示，其中j表示X入栈后下一个入栈的单词的下标。\n\n![](1.jpg)\n\n例如对于上图中的句法树，它的gold短语成分集合是\n\\\\[(S,0,6),(NP,0,2),(VP,2,5),(ADVP,3,4),(ADJP,4,5)\\\\]如果采用top-down的转移系统，非终结符入栈的顺序为\n\\\\[(S, 0), (NP, 0), (VP, 2), (ADVP, 3), (ADJP, 4)\\\\]如果采用in-order的转移系统，非终结符入栈的顺序为\n\\\\[(NP, 1), (S, 2), (VP, 3), (ADVP, 4), (ADJP, 5)\\\\]\n正如之前所说，top-down中非终结符的下标就是短语的第一个单词的下标，但是in-order不是的，因为短语的第一个子结点已经在非终结符入栈之前形成了，所以它的下标是第二个子结点表示的短语的第一个单词的下标。\n\n之前的top-down和in-order转移系统中并没有用到预测的短语集合$\\gamma$和stack里的非终结符集合$\\alpha$，但是在本文的转移系统中需要用到，因为本文要用它来改进loss函数，以此来实现Dynamic Oracle。\n\n## top-down转移系统\n![](2.jpg)\n![](3.jpg)\n\n上面两张图分别是top-down转移系统的转移过程和具体的转移示例。注意到REDUCE动作会将新的短语加入到$\\gamma$集合中，并且从非终结符集合$\\alpha$中删去该非终结符。而NT-X动作会将新的非终结符X加入到非终结符集合$\\alpha$中。\n\n## in-order转移系统\n![](4.jpg)\n![](5.jpg)\n\n上面两张图分别是in-order转移系统的转移过程和具体的转移示例，大致细节和top-down转移系统类似。\n\n## Dynamic Oracles简介\n最后再解释一下Dynamic Oracle是干嘛用的，传统的Static Oracle就是在转移的每一步按照标准转移序列中的action进行转移，但是这样会有一个问题，如果预测的时候某一步预测错了，遇到了一个训练阶段没有出现过的状态，那么该怎么进行转移呢？这时候就要用到Dynamic Oracle，用来针对不同的错误情况进行动态的指导，引导它转移到正确的状态中去。另外在训练时可以手动加入一些错误状态，来训练模型，不然的话遇到的错误状态还是太少了，不足以训练好模型。\n\n# Dynamic Oracles\n---\nGoldberg (2012)证明了Dynamic Oracle可以通过定义一个损失函数来直接实现，而这个损失函数可以用来衡量当前状态可以产生的最优句法树和标准句法树的距离。最小化这个距离就会使得错误状态也会转移到最终错误最少的状态。而这个损失函数就要和当前状态c挂钩了，这样才能达到和传统的Dynamic Oracle类似的效果。\n\n## 损失函数\n传统的损失函数定义为预测短语成分集合和标准短语成分集合不相交的元素数量，即：\n\\\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { {\\gamma \\_G}\\backslash \\gamma } \\right| + \\left| {\\gamma \\backslash {\\gamma \\_G}} \\right|\\\\]\n\n根据[上一篇博文](https://godweiyang.com/2018/11/06/arxiv-18-SR-CP-bottom-up/)的推导，该损失函数可以计算为\n\\\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma \\_G}} \\right|\\\\]\n\n上面的损失函数是上一篇论文中介绍的bottom-up的转移系统的Dynamic Oracle，但是本文主要讨论top-down和in-order的转移系统，因为转移系统多了non-terminal，所以需要新加入两项损失，用来衡量当前状态可以产生的最优句法树与标准句法树之间的汉明损失。\n\n这两项新加的损失分别是：\n* 当前栈中已经生成的non-terminal集合$\\alpha_c$中不包含在标准non-terminal集合$\\alpha_G$中的non-terminal数量，即$\\left| \\alpha_c \\backslash \\alpha_G \\right|$。\n* 当前栈中违反了标准树中non-terminal顺序的non-terminal数量。\n\n所以最终的损失函数为：\n\\\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma \\_G}} \\right| + \\left| \\alpha_c \\backslash \\alpha_G \\right| + out \\\\_ of \\\\_ order(\\alpha_c, \\alpha_G)\\\\]\n\n前面三项都很容易求得，至于最后一项，可以通过计算栈里的gold non-terminal序列的最长上升子序列来得到，而序列中每个non-terminal的标号就是它在标准树转移序列的non-terminal顺序标号。\n\n## 短语的可达性\n在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：\n\n对于top-down转移系统：\n* $(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。\n* $j \\le l < r \\wedge (X, l) \\notin \\alpha_c$（因为短语还在buffer中，并且短语的non-terminal还没有入栈，所以可以通过入栈$(X, l)$，再不断SHIFT然后REDUCE得到）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, l) \\in \\alpha_c$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的，当然这些前提条件当然是non-terminal$(X, l)$已经在栈里了）。\n\n对于in-order转移系统：\n* $(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。\n* $j \\le l < r$（因为短语还在buffer中，所以可以通过入栈第一个左儿子，再入栈$(X, m)$，再不断SHIFT然后REDUCE得到）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\notin \\alpha_c$（这种情况表明了第一个左儿子已经生成了一部分或者完全生成了，并且根结点non-terminal还没有入栈，所以依然可以生成）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\in \\alpha_c \\wedge \\exists (Y,l,m) \\in \\sum $（这种情况表明了第一个左儿子已经完全生成了，并且根结点non-terminal在栈里，所以依然可以生成）。\n\n枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。\n\n关于这两个Dynamic Oracles的正确性，这里就不再证明了，证明过程和上一篇bottom-up的差不多。\n\n# 实验结果\n---\n本文和基础的几个转移系统做了对比，代码也是在他们基础上进行修改的，结果如下：\n![](5.jpg)\n可以发现，加了Dynamic Oracles之后，结果还是有略微提高的。\n","source":"_posts/EMNLP18-dynamic-oracle.md","raw":"---\ntitle: Dynamic Oracles for Top-Down and In-Order Shift-Reduce Constituent Parsing\ndate: 2018-11-07 19:57:38\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EMNLP\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=240141&auto=1&height=66\"></iframe></div>\n\n> 有一句话，宾语是你。“吉下两点一口，又有欠字相依。”\n\n**论文地址：**[Dynamic Oracles for Top-Down and In-Order Shift-Reduce Constituent Parsing](http://aclweb.org/anthology/D18-1161)\n**代码地址：**[github](https://github.com/danifg/Dynamic-InOrderParser)\n\n本文是发表在EMNLP18上的一篇关于Dynamic Oracle的论文，主要介绍了针对自顶向下和中序两种移进归约成分句法分析模型的Dynamic Oracles。在PTB数据集上，取得了单模型最高的F1值92.0（截至论文发稿时是最高的，张岳TACL18的论文已经取得了92.4的最高F1值）。\n\n# 介绍\n---\nDynamic Oracle是用在转移系统中，防止错误传播的一种手段。而转移系统主要有分为三种：bottom-up、top-down和in-order的转移系统。\n\n其中bottom-up转移系统的Dynamic Oracle在[Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles](http://aclweb.org/anthology/D16-1001)中有很详细的证明，也可以参看我之前的博客[Deep Understanding of Dynamic Oracle in Constituent Parsing](https://godweiyang.com/2018/08/03/dynamic-oracles/)。\n\n而本文就提出了另外两种转移系统的Dynamic Oracle，其中top-down转移系统主要基于[Recurrent Neural Network Grammars](http://aclweb.org/anthology/N16-1024)，in-order转移系统主要基于[In-Order Transition-based Constituent Parsing](http://aclweb.org/anthology/Q17-1029)。\n\n# 基础知识\n---\n## 形式化定义\nbottom-up的转移系统这里就不讨论了，这里主要讨论另外两种转移系统。转移系统的状态用五元组$c = \\left\\langle {\\sum ,i,f,\\gamma ,\\alpha } \\right\\rangle $表示，五元组内元素分别表示stack、buffer第一个单词的下标、in-order转移系统中结束标记、已经生成的短语成分集合、stack中非终结符集合。\n\n每个短语成分用三元组$(X, l, r)$表示，其中X是非终结符，l和r是短语的边界下标。而非终结符用二元组$(X, j)$表示，其中j表示X入栈后下一个入栈的单词的下标。\n\n![](1.jpg)\n\n例如对于上图中的句法树，它的gold短语成分集合是\n\\\\[(S,0,6),(NP,0,2),(VP,2,5),(ADVP,3,4),(ADJP,4,5)\\\\]如果采用top-down的转移系统，非终结符入栈的顺序为\n\\\\[(S, 0), (NP, 0), (VP, 2), (ADVP, 3), (ADJP, 4)\\\\]如果采用in-order的转移系统，非终结符入栈的顺序为\n\\\\[(NP, 1), (S, 2), (VP, 3), (ADVP, 4), (ADJP, 5)\\\\]\n正如之前所说，top-down中非终结符的下标就是短语的第一个单词的下标，但是in-order不是的，因为短语的第一个子结点已经在非终结符入栈之前形成了，所以它的下标是第二个子结点表示的短语的第一个单词的下标。\n\n之前的top-down和in-order转移系统中并没有用到预测的短语集合$\\gamma$和stack里的非终结符集合$\\alpha$，但是在本文的转移系统中需要用到，因为本文要用它来改进loss函数，以此来实现Dynamic Oracle。\n\n## top-down转移系统\n![](2.jpg)\n![](3.jpg)\n\n上面两张图分别是top-down转移系统的转移过程和具体的转移示例。注意到REDUCE动作会将新的短语加入到$\\gamma$集合中，并且从非终结符集合$\\alpha$中删去该非终结符。而NT-X动作会将新的非终结符X加入到非终结符集合$\\alpha$中。\n\n## in-order转移系统\n![](4.jpg)\n![](5.jpg)\n\n上面两张图分别是in-order转移系统的转移过程和具体的转移示例，大致细节和top-down转移系统类似。\n\n## Dynamic Oracles简介\n最后再解释一下Dynamic Oracle是干嘛用的，传统的Static Oracle就是在转移的每一步按照标准转移序列中的action进行转移，但是这样会有一个问题，如果预测的时候某一步预测错了，遇到了一个训练阶段没有出现过的状态，那么该怎么进行转移呢？这时候就要用到Dynamic Oracle，用来针对不同的错误情况进行动态的指导，引导它转移到正确的状态中去。另外在训练时可以手动加入一些错误状态，来训练模型，不然的话遇到的错误状态还是太少了，不足以训练好模型。\n\n# Dynamic Oracles\n---\nGoldberg (2012)证明了Dynamic Oracle可以通过定义一个损失函数来直接实现，而这个损失函数可以用来衡量当前状态可以产生的最优句法树和标准句法树的距离。最小化这个距离就会使得错误状态也会转移到最终错误最少的状态。而这个损失函数就要和当前状态c挂钩了，这样才能达到和传统的Dynamic Oracle类似的效果。\n\n## 损失函数\n传统的损失函数定义为预测短语成分集合和标准短语成分集合不相交的元素数量，即：\n\\\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { {\\gamma \\_G}\\backslash \\gamma } \\right| + \\left| {\\gamma \\backslash {\\gamma \\_G}} \\right|\\\\]\n\n根据[上一篇博文](https://godweiyang.com/2018/11/06/arxiv-18-SR-CP-bottom-up/)的推导，该损失函数可以计算为\n\\\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma \\_G}} \\right|\\\\]\n\n上面的损失函数是上一篇论文中介绍的bottom-up的转移系统的Dynamic Oracle，但是本文主要讨论top-down和in-order的转移系统，因为转移系统多了non-terminal，所以需要新加入两项损失，用来衡量当前状态可以产生的最优句法树与标准句法树之间的汉明损失。\n\n这两项新加的损失分别是：\n* 当前栈中已经生成的non-terminal集合$\\alpha_c$中不包含在标准non-terminal集合$\\alpha_G$中的non-terminal数量，即$\\left| \\alpha_c \\backslash \\alpha_G \\right|$。\n* 当前栈中违反了标准树中non-terminal顺序的non-terminal数量。\n\n所以最终的损失函数为：\n\\\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma \\_G}} \\right| + \\left| \\alpha_c \\backslash \\alpha_G \\right| + out \\\\_ of \\\\_ order(\\alpha_c, \\alpha_G)\\\\]\n\n前面三项都很容易求得，至于最后一项，可以通过计算栈里的gold non-terminal序列的最长上升子序列来得到，而序列中每个non-terminal的标号就是它在标准树转移序列的non-terminal顺序标号。\n\n## 短语的可达性\n在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：\n\n对于top-down转移系统：\n* $(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。\n* $j \\le l < r \\wedge (X, l) \\notin \\alpha_c$（因为短语还在buffer中，并且短语的non-terminal还没有入栈，所以可以通过入栈$(X, l)$，再不断SHIFT然后REDUCE得到）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, l) \\in \\alpha_c$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的，当然这些前提条件当然是non-terminal$(X, l)$已经在栈里了）。\n\n对于in-order转移系统：\n* $(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。\n* $j \\le l < r$（因为短语还在buffer中，所以可以通过入栈第一个左儿子，再入栈$(X, m)$，再不断SHIFT然后REDUCE得到）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\notin \\alpha_c$（这种情况表明了第一个左儿子已经生成了一部分或者完全生成了，并且根结点non-terminal还没有入栈，所以依然可以生成）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\in \\alpha_c \\wedge \\exists (Y,l,m) \\in \\sum $（这种情况表明了第一个左儿子已经完全生成了，并且根结点non-terminal在栈里，所以依然可以生成）。\n\n枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。\n\n关于这两个Dynamic Oracles的正确性，这里就不再证明了，证明过程和上一篇bottom-up的差不多。\n\n# 实验结果\n---\n本文和基础的几个转移系统做了对比，代码也是在他们基础上进行修改的，结果如下：\n![](5.jpg)\n可以发现，加了Dynamic Oracles之后，结果还是有略微提高的。\n","slug":"EMNLP18-dynamic-oracle","published":1,"updated":"2019-07-20T04:14:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk98242000t7swelvvw2qt3","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=240141&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>有一句话，宾语是你。“吉下两点一口，又有欠字相依。”</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/D18-1161\" target=\"_blank\" rel=\"noopener\">Dynamic Oracles for Top-Down and In-Order Shift-Reduce Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/danifg/Dynamic-InOrderParser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>本文是发表在EMNLP18上的一篇关于Dynamic Oracle的论文，主要介绍了针对自顶向下和中序两种移进归约成分句法分析模型的Dynamic Oracles。在PTB数据集上，取得了单模型最高的F1值92.0（截至论文发稿时是最高的，张岳TACL18的论文已经取得了92.4的最高F1值）。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>Dynamic Oracle是用在转移系统中，防止错误传播的一种手段。而转移系统主要有分为三种：bottom-up、top-down和in-order的转移系统。</p>\n<p>其中bottom-up转移系统的Dynamic Oracle在<a href=\"http://aclweb.org/anthology/D16-1001\" target=\"_blank\" rel=\"noopener\">Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles</a>中有很详细的证明，也可以参看我之前的博客<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\">Deep Understanding of Dynamic Oracle in Constituent Parsing</a>。</p>\n<p>而本文就提出了另外两种转移系统的Dynamic Oracle，其中top-down转移系统主要基于<a href=\"http://aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a>，in-order转移系统主要基于<a href=\"http://aclweb.org/anthology/Q17-1029\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a>。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><hr>\n<h2 id=\"形式化定义\"><a href=\"#形式化定义\" class=\"headerlink\" title=\"形式化定义\"></a>形式化定义</h2><p>bottom-up的转移系统这里就不讨论了，这里主要讨论另外两种转移系统。转移系统的状态用五元组$c = \\left\\langle {\\sum ,i,f,\\gamma ,\\alpha } \\right\\rangle $表示，五元组内元素分别表示stack、buffer第一个单词的下标、in-order转移系统中结束标记、已经生成的短语成分集合、stack中非终结符集合。</p>\n<p>每个短语成分用三元组$(X, l, r)$表示，其中X是非终结符，l和r是短语的边界下标。而非终结符用二元组$(X, j)$表示，其中j表示X入栈后下一个入栈的单词的下标。</p>\n<p><img src=\"1.jpg\" alt></p>\n<p>例如对于上图中的句法树，它的gold短语成分集合是<br>\\[(S,0,6),(NP,0,2),(VP,2,5),(ADVP,3,4),(ADJP,4,5)\\]如果采用top-down的转移系统，非终结符入栈的顺序为<br>\\[(S, 0), (NP, 0), (VP, 2), (ADVP, 3), (ADJP, 4)\\]如果采用in-order的转移系统，非终结符入栈的顺序为<br>\\[(NP, 1), (S, 2), (VP, 3), (ADVP, 4), (ADJP, 5)\\]<br>正如之前所说，top-down中非终结符的下标就是短语的第一个单词的下标，但是in-order不是的，因为短语的第一个子结点已经在非终结符入栈之前形成了，所以它的下标是第二个子结点表示的短语的第一个单词的下标。</p>\n<p>之前的top-down和in-order转移系统中并没有用到预测的短语集合$\\gamma$和stack里的非终结符集合$\\alpha$，但是在本文的转移系统中需要用到，因为本文要用它来改进loss函数，以此来实现Dynamic Oracle。</p>\n<h2 id=\"top-down转移系统\"><a href=\"#top-down转移系统\" class=\"headerlink\" title=\"top-down转移系统\"></a>top-down转移系统</h2><p><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt></p>\n<p>上面两张图分别是top-down转移系统的转移过程和具体的转移示例。注意到REDUCE动作会将新的短语加入到$\\gamma$集合中，并且从非终结符集合$\\alpha$中删去该非终结符。而NT-X动作会将新的非终结符X加入到非终结符集合$\\alpha$中。</p>\n<h2 id=\"in-order转移系统\"><a href=\"#in-order转移系统\" class=\"headerlink\" title=\"in-order转移系统\"></a>in-order转移系统</h2><p><img src=\"4.jpg\" alt><br><img src=\"5.jpg\" alt></p>\n<p>上面两张图分别是in-order转移系统的转移过程和具体的转移示例，大致细节和top-down转移系统类似。</p>\n<h2 id=\"Dynamic-Oracles简介\"><a href=\"#Dynamic-Oracles简介\" class=\"headerlink\" title=\"Dynamic Oracles简介\"></a>Dynamic Oracles简介</h2><p>最后再解释一下Dynamic Oracle是干嘛用的，传统的Static Oracle就是在转移的每一步按照标准转移序列中的action进行转移，但是这样会有一个问题，如果预测的时候某一步预测错了，遇到了一个训练阶段没有出现过的状态，那么该怎么进行转移呢？这时候就要用到Dynamic Oracle，用来针对不同的错误情况进行动态的指导，引导它转移到正确的状态中去。另外在训练时可以手动加入一些错误状态，来训练模型，不然的话遇到的错误状态还是太少了，不足以训练好模型。</p>\n<h1 id=\"Dynamic-Oracles\"><a href=\"#Dynamic-Oracles\" class=\"headerlink\" title=\"Dynamic Oracles\"></a>Dynamic Oracles</h1><hr>\n<p>Goldberg (2012)证明了Dynamic Oracle可以通过定义一个损失函数来直接实现，而这个损失函数可以用来衡量当前状态可以产生的最优句法树和标准句法树的距离。最小化这个距离就会使得错误状态也会转移到最终错误最少的状态。而这个损失函数就要和当前状态c挂钩了，这样才能达到和传统的Dynamic Oracle类似的效果。</p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>传统的损失函数定义为预测短语成分集合和标准短语成分集合不相交的元素数量，即：<br>\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { {\\gamma _G}\\backslash \\gamma } \\right| + \\left| {\\gamma \\backslash {\\gamma _G}} \\right|\\]</p>\n<p>根据<a href=\"https://godweiyang.com/2018/11/06/arxiv-18-SR-CP-bottom-up/\">上一篇博文</a>的推导，该损失函数可以计算为<br>\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma _G}} \\right|\\]</p>\n<p>上面的损失函数是上一篇论文中介绍的bottom-up的转移系统的Dynamic Oracle，但是本文主要讨论top-down和in-order的转移系统，因为转移系统多了non-terminal，所以需要新加入两项损失，用来衡量当前状态可以产生的最优句法树与标准句法树之间的汉明损失。</p>\n<p>这两项新加的损失分别是：</p>\n<ul>\n<li>当前栈中已经生成的non-terminal集合$\\alpha_c$中不包含在标准non-terminal集合$\\alpha_G$中的non-terminal数量，即$\\left| \\alpha_c \\backslash \\alpha_G \\right|$。</li>\n<li>当前栈中违反了标准树中non-terminal顺序的non-terminal数量。</li>\n</ul>\n<p>所以最终的损失函数为：<br>\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma _G}} \\right| + \\left| \\alpha_c \\backslash \\alpha_G \\right| + out \\_ of \\_ order(\\alpha_c, \\alpha_G)\\]</p>\n<p>前面三项都很容易求得，至于最后一项，可以通过计算栈里的gold non-terminal序列的最长上升子序列来得到，而序列中每个non-terminal的标号就是它在标准树转移序列的non-terminal顺序标号。</p>\n<h2 id=\"短语的可达性\"><a href=\"#短语的可达性\" class=\"headerlink\" title=\"短语的可达性\"></a>短语的可达性</h2><p>在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：</p>\n<p>对于top-down转移系统：</p>\n<ul>\n<li>$(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。</li>\n<li>$j \\le l &lt; r \\wedge (X, l) \\notin \\alpha_c$（因为短语还在buffer中，并且短语的non-terminal还没有入栈，所以可以通过入栈$(X, l)$，再不断SHIFT然后REDUCE得到）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, l) \\in \\alpha_c$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的，当然这些前提条件当然是non-terminal$(X, l)$已经在栈里了）。</li>\n</ul>\n<p>对于in-order转移系统：</p>\n<ul>\n<li>$(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。</li>\n<li>$j \\le l &lt; r$（因为短语还在buffer中，所以可以通过入栈第一个左儿子，再入栈$(X, m)$，再不断SHIFT然后REDUCE得到）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\notin \\alpha_c$（这种情况表明了第一个左儿子已经生成了一部分或者完全生成了，并且根结点non-terminal还没有入栈，所以依然可以生成）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\in \\alpha_c \\wedge \\exists (Y,l,m) \\in \\sum $（这种情况表明了第一个左儿子已经完全生成了，并且根结点non-terminal在栈里，所以依然可以生成）。</li>\n</ul>\n<p>枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。</p>\n<p>关于这两个Dynamic Oracles的正确性，这里就不再证明了，证明过程和上一篇bottom-up的差不多。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>本文和基础的几个转移系统做了对比，代码也是在他们基础上进行修改的，结果如下：<br><img src=\"5.jpg\" alt><br>可以发现，加了Dynamic Oracles之后，结果还是有略微提高的。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=240141&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>有一句话，宾语是你。“吉下两点一口，又有欠字相依。”</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"http://aclweb.org/anthology/D18-1161\" target=\"_blank\" rel=\"noopener\">Dynamic Oracles for Top-Down and In-Order Shift-Reduce Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/danifg/Dynamic-InOrderParser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>本文是发表在EMNLP18上的一篇关于Dynamic Oracle的论文，主要介绍了针对自顶向下和中序两种移进归约成分句法分析模型的Dynamic Oracles。在PTB数据集上，取得了单模型最高的F1值92.0（截至论文发稿时是最高的，张岳TACL18的论文已经取得了92.4的最高F1值）。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>Dynamic Oracle是用在转移系统中，防止错误传播的一种手段。而转移系统主要有分为三种：bottom-up、top-down和in-order的转移系统。</p>\n<p>其中bottom-up转移系统的Dynamic Oracle在<a href=\"http://aclweb.org/anthology/D16-1001\" target=\"_blank\" rel=\"noopener\">Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles</a>中有很详细的证明，也可以参看我之前的博客<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\">Deep Understanding of Dynamic Oracle in Constituent Parsing</a>。</p>\n<p>而本文就提出了另外两种转移系统的Dynamic Oracle，其中top-down转移系统主要基于<a href=\"http://aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a>，in-order转移系统主要基于<a href=\"http://aclweb.org/anthology/Q17-1029\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a>。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><hr>\n<h2 id=\"形式化定义\"><a href=\"#形式化定义\" class=\"headerlink\" title=\"形式化定义\"></a>形式化定义</h2><p>bottom-up的转移系统这里就不讨论了，这里主要讨论另外两种转移系统。转移系统的状态用五元组$c = \\left\\langle {\\sum ,i,f,\\gamma ,\\alpha } \\right\\rangle $表示，五元组内元素分别表示stack、buffer第一个单词的下标、in-order转移系统中结束标记、已经生成的短语成分集合、stack中非终结符集合。</p>\n<p>每个短语成分用三元组$(X, l, r)$表示，其中X是非终结符，l和r是短语的边界下标。而非终结符用二元组$(X, j)$表示，其中j表示X入栈后下一个入栈的单词的下标。</p>\n<p><img src=\"1.jpg\" alt></p>\n<p>例如对于上图中的句法树，它的gold短语成分集合是<br>\\[(S,0,6),(NP,0,2),(VP,2,5),(ADVP,3,4),(ADJP,4,5)\\]如果采用top-down的转移系统，非终结符入栈的顺序为<br>\\[(S, 0), (NP, 0), (VP, 2), (ADVP, 3), (ADJP, 4)\\]如果采用in-order的转移系统，非终结符入栈的顺序为<br>\\[(NP, 1), (S, 2), (VP, 3), (ADVP, 4), (ADJP, 5)\\]<br>正如之前所说，top-down中非终结符的下标就是短语的第一个单词的下标，但是in-order不是的，因为短语的第一个子结点已经在非终结符入栈之前形成了，所以它的下标是第二个子结点表示的短语的第一个单词的下标。</p>\n<p>之前的top-down和in-order转移系统中并没有用到预测的短语集合$\\gamma$和stack里的非终结符集合$\\alpha$，但是在本文的转移系统中需要用到，因为本文要用它来改进loss函数，以此来实现Dynamic Oracle。</p>\n<h2 id=\"top-down转移系统\"><a href=\"#top-down转移系统\" class=\"headerlink\" title=\"top-down转移系统\"></a>top-down转移系统</h2><p><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt></p>\n<p>上面两张图分别是top-down转移系统的转移过程和具体的转移示例。注意到REDUCE动作会将新的短语加入到$\\gamma$集合中，并且从非终结符集合$\\alpha$中删去该非终结符。而NT-X动作会将新的非终结符X加入到非终结符集合$\\alpha$中。</p>\n<h2 id=\"in-order转移系统\"><a href=\"#in-order转移系统\" class=\"headerlink\" title=\"in-order转移系统\"></a>in-order转移系统</h2><p><img src=\"4.jpg\" alt><br><img src=\"5.jpg\" alt></p>\n<p>上面两张图分别是in-order转移系统的转移过程和具体的转移示例，大致细节和top-down转移系统类似。</p>\n<h2 id=\"Dynamic-Oracles简介\"><a href=\"#Dynamic-Oracles简介\" class=\"headerlink\" title=\"Dynamic Oracles简介\"></a>Dynamic Oracles简介</h2><p>最后再解释一下Dynamic Oracle是干嘛用的，传统的Static Oracle就是在转移的每一步按照标准转移序列中的action进行转移，但是这样会有一个问题，如果预测的时候某一步预测错了，遇到了一个训练阶段没有出现过的状态，那么该怎么进行转移呢？这时候就要用到Dynamic Oracle，用来针对不同的错误情况进行动态的指导，引导它转移到正确的状态中去。另外在训练时可以手动加入一些错误状态，来训练模型，不然的话遇到的错误状态还是太少了，不足以训练好模型。</p>\n<h1 id=\"Dynamic-Oracles\"><a href=\"#Dynamic-Oracles\" class=\"headerlink\" title=\"Dynamic Oracles\"></a>Dynamic Oracles</h1><hr>\n<p>Goldberg (2012)证明了Dynamic Oracle可以通过定义一个损失函数来直接实现，而这个损失函数可以用来衡量当前状态可以产生的最优句法树和标准句法树的距离。最小化这个距离就会使得错误状态也会转移到最终错误最少的状态。而这个损失函数就要和当前状态c挂钩了，这样才能达到和传统的Dynamic Oracle类似的效果。</p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>传统的损失函数定义为预测短语成分集合和标准短语成分集合不相交的元素数量，即：<br>\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { {\\gamma _G}\\backslash \\gamma } \\right| + \\left| {\\gamma \\backslash {\\gamma _G}} \\right|\\]</p>\n<p>根据<a href=\"https://godweiyang.com/2018/11/06/arxiv-18-SR-CP-bottom-up/\">上一篇博文</a>的推导，该损失函数可以计算为<br>\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma _G}} \\right|\\]</p>\n<p>上面的损失函数是上一篇论文中介绍的bottom-up的转移系统的Dynamic Oracle，但是本文主要讨论top-down和in-order的转移系统，因为转移系统多了non-terminal，所以需要新加入两项损失，用来衡量当前状态可以产生的最优句法树与标准句法树之间的汉明损失。</p>\n<p>这两项新加的损失分别是：</p>\n<ul>\n<li>当前栈中已经生成的non-terminal集合$\\alpha_c$中不包含在标准non-terminal集合$\\alpha_G$中的non-terminal数量，即$\\left| \\alpha_c \\backslash \\alpha_G \\right|$。</li>\n<li>当前栈中违反了标准树中non-terminal顺序的non-terminal数量。</li>\n</ul>\n<p>所以最终的损失函数为：<br>\\[\\mathcal{l}(c) = \\min_{\\gamma | c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| \\mathcal{U}(c, \\gamma_G) \\right| + \\left| {\\gamma_c \\backslash {\\gamma _G}} \\right| + \\left| \\alpha_c \\backslash \\alpha_G \\right| + out \\_ of \\_ order(\\alpha_c, \\alpha_G)\\]</p>\n<p>前面三项都很容易求得，至于最后一项，可以通过计算栈里的gold non-terminal序列的最长上升子序列来得到，而序列中每个non-terminal的标号就是它在标准树转移序列的non-terminal顺序标号。</p>\n<h2 id=\"短语的可达性\"><a href=\"#短语的可达性\" class=\"headerlink\" title=\"短语的可达性\"></a>短语的可达性</h2><p>在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：</p>\n<p>对于top-down转移系统：</p>\n<ul>\n<li>$(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。</li>\n<li>$j \\le l &lt; r \\wedge (X, l) \\notin \\alpha_c$（因为短语还在buffer中，并且短语的non-terminal还没有入栈，所以可以通过入栈$(X, l)$，再不断SHIFT然后REDUCE得到）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, l) \\in \\alpha_c$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的，当然这些前提条件当然是non-terminal$(X, l)$已经在栈里了）。</li>\n</ul>\n<p>对于in-order转移系统：</p>\n<ul>\n<li>$(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。</li>\n<li>$j \\le l &lt; r$（因为短语还在buffer中，所以可以通过入栈第一个左儿子，再入栈$(X, m)$，再不断SHIFT然后REDUCE得到）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\notin \\alpha_c$（这种情况表明了第一个左儿子已经生成了一部分或者完全生成了，并且根结点non-terminal还没有入栈，所以依然可以生成）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r \\wedge (X, m) \\in \\alpha_c \\wedge \\exists (Y,l,m) \\in \\sum $（这种情况表明了第一个左儿子已经完全生成了，并且根结点non-terminal在栈里，所以依然可以生成）。</li>\n</ul>\n<p>枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。</p>\n<p>关于这两个Dynamic Oracles的正确性，这里就不再证明了，证明过程和上一篇bottom-up的差不多。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>本文和基础的几个转移系统做了对比，代码也是在他们基础上进行修改的，结果如下：<br><img src=\"5.jpg\" alt><br>可以发现，加了Dynamic Oracles之后，结果还是有略微提高的。</p>\n"},{"title":"Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks","date":"2017-11-13T05:41:13.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"论文链接：[链接](https://arxiv.org/pdf/1703.06345.pdf)\n\n# 摘要\n---\n探索一种神经序列标注的迁移学习方法，适用于源任务有大量标注标签，但是目标任务标注标签很少的情况，主要有三个方面：跨领域、跨应用、跨语言。\n\n# 1 介绍\n---\n序列标注任务的一个难点就是怎样将知识从一个任务迁移到另一个任务上面去，通常被叫做“迁移学习”。\n这里对三种任务（跨领域、跨应用、跨语言）分别提出了参数共享的神经网络结构，实验结果也很好。即使标注标签很多，结果也比以前的结果更好。\n\n# 2 相关工作\n---\nNLP迁移学习通常有两种方法，一种是基于资源的迁移，另一种是基于模型的迁移。\n基于资源的迁移需要大量的跨语言语料，而且通常只用在跨语言任务了，在跨领域和跨应用方面还没什么应用。\n基于模型的迁移就不需要大量的额外资源了，只要探索源任务和目标任务之间的相似性和相关性，通过修改模型结构、训练算法、特征表示。\n这里的模型就是基于模型的迁移。和以往不同的是，这个模型利用了深度递归神经网之间的一般性，可以在跨领域、跨应用、跨语言之间转换。\n\n# 3 方法\n---\n![](1.png)\n上图分别是基本模型、跨领域模型、跨应用模型、跨语言模型。\n### 3.1 基本模型\n首先字符层输入每个字符表示，输出单词的字符层表示，然后和词向量结合作为每个词的表示，然后经过一个CNN或者RNN，隐含层输出再经过一个CRF得到每个词的标签。\n### 3.2 迁移学习结构\n跨领域、跨应用、跨语言每种一个迁移结构，和基本模型不同的是，共享的参数不同。\n#### 3.2.1 跨领域迁移\n跨领域迁移有两种情况，一种是两个领域标签存在映射关系，一种是不存在映射关系。\n第一种情况结构如图b所示，可以共享CRF层以及下面的所有层，最后加一个标签映射的步骤就行了\n第二种情况结构如图c所示，CRF层独立训练。\n#### 3.2.2 跨应用迁移\n这里假设两种应用是同一种语言，所以和跨领域标签无映射关系类似，用的是图c的结构。\n#### 3.2.3 跨语言迁移\n这里重点放在两种字母表相同的语言上，比如英语和西班牙语。\n由于字符相同，所以采用图d结构，共享字符层和词向量。\n### 3.3 训练\n假设从任务$s$迁移到任务$t$，训练集分为$X_s$和$X_t$，参数分为$W_s$和$W_t$。其中模型参数还分为任务特定参数和共享参数：\n\\\\[{W_s} = {W_{s,spec}} \\cup {W_{shared}},{W_t} = {W_{t,spec}} \\cup {W_{shared}}\\\\]训练过程如下：\n每一次迭代，都采用二项分布随机抽取一个任务$s$或$t$，然后训练该任务特定模型参数和共享参数。由于源任务和目标任务收敛速度不一定一样，所以对目标任务提前停止。\n### 3.4 模型实现\nRNN采用GRU，假设隐含层输出为$h$，输出标签为$y$，定义CRF的目标函数为\n\\\\[f(h,y) - \\log \\sum\\limits_{y' \\in \\gamma (h)} {\\exp (f(h,y') + \\cos {\\rm{t}}(y,y'))} \\\\]\n\n# 4 实验\n![](2.png)\n![](3.png)\n上图是实验结果，其中跨领域迁移：ade，跨应用迁移：fgh，跨语言迁移：ij，跨领域和应用：b，跨领域、应用和语言：c。\n![](4.png)\n上表是各类任务在不同标签率下迁移学习和无迁移学习的性能对比。\n可以看出三种迁移结构性能提升的顺序是A>B>C，因为结构C比如跨语言模型，源任务和目标任务相似性很小。\n![](5.png)\n上图是和其他模型比较的结果。\n\n# 5 结论\n---\n提出一种神经序列标注的迁移学习方法，主要有三个方面：跨领域、跨应用、跨语言。\n以下三个因素对迁移学习性能有很大影响：目标任务标签数量、源任务和目标任务相关性、能够共享的参数数量。\n在以后的工作中，可以在跨语言迁移学习中尝试结合基于模型的迁移和基于资源的迁移。","source":"_posts/ICLR17-1.md","raw":"---\ntitle: Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks\ndate: 2017-11-13 13:41:13\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ICLR\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 序列标注\ncategories:\n- 序列标注\n---\n论文链接：[链接](https://arxiv.org/pdf/1703.06345.pdf)\n\n# 摘要\n---\n探索一种神经序列标注的迁移学习方法，适用于源任务有大量标注标签，但是目标任务标注标签很少的情况，主要有三个方面：跨领域、跨应用、跨语言。\n\n# 1 介绍\n---\n序列标注任务的一个难点就是怎样将知识从一个任务迁移到另一个任务上面去，通常被叫做“迁移学习”。\n这里对三种任务（跨领域、跨应用、跨语言）分别提出了参数共享的神经网络结构，实验结果也很好。即使标注标签很多，结果也比以前的结果更好。\n\n# 2 相关工作\n---\nNLP迁移学习通常有两种方法，一种是基于资源的迁移，另一种是基于模型的迁移。\n基于资源的迁移需要大量的跨语言语料，而且通常只用在跨语言任务了，在跨领域和跨应用方面还没什么应用。\n基于模型的迁移就不需要大量的额外资源了，只要探索源任务和目标任务之间的相似性和相关性，通过修改模型结构、训练算法、特征表示。\n这里的模型就是基于模型的迁移。和以往不同的是，这个模型利用了深度递归神经网之间的一般性，可以在跨领域、跨应用、跨语言之间转换。\n\n# 3 方法\n---\n![](1.png)\n上图分别是基本模型、跨领域模型、跨应用模型、跨语言模型。\n### 3.1 基本模型\n首先字符层输入每个字符表示，输出单词的字符层表示，然后和词向量结合作为每个词的表示，然后经过一个CNN或者RNN，隐含层输出再经过一个CRF得到每个词的标签。\n### 3.2 迁移学习结构\n跨领域、跨应用、跨语言每种一个迁移结构，和基本模型不同的是，共享的参数不同。\n#### 3.2.1 跨领域迁移\n跨领域迁移有两种情况，一种是两个领域标签存在映射关系，一种是不存在映射关系。\n第一种情况结构如图b所示，可以共享CRF层以及下面的所有层，最后加一个标签映射的步骤就行了\n第二种情况结构如图c所示，CRF层独立训练。\n#### 3.2.2 跨应用迁移\n这里假设两种应用是同一种语言，所以和跨领域标签无映射关系类似，用的是图c的结构。\n#### 3.2.3 跨语言迁移\n这里重点放在两种字母表相同的语言上，比如英语和西班牙语。\n由于字符相同，所以采用图d结构，共享字符层和词向量。\n### 3.3 训练\n假设从任务$s$迁移到任务$t$，训练集分为$X_s$和$X_t$，参数分为$W_s$和$W_t$。其中模型参数还分为任务特定参数和共享参数：\n\\\\[{W_s} = {W_{s,spec}} \\cup {W_{shared}},{W_t} = {W_{t,spec}} \\cup {W_{shared}}\\\\]训练过程如下：\n每一次迭代，都采用二项分布随机抽取一个任务$s$或$t$，然后训练该任务特定模型参数和共享参数。由于源任务和目标任务收敛速度不一定一样，所以对目标任务提前停止。\n### 3.4 模型实现\nRNN采用GRU，假设隐含层输出为$h$，输出标签为$y$，定义CRF的目标函数为\n\\\\[f(h,y) - \\log \\sum\\limits_{y' \\in \\gamma (h)} {\\exp (f(h,y') + \\cos {\\rm{t}}(y,y'))} \\\\]\n\n# 4 实验\n![](2.png)\n![](3.png)\n上图是实验结果，其中跨领域迁移：ade，跨应用迁移：fgh，跨语言迁移：ij，跨领域和应用：b，跨领域、应用和语言：c。\n![](4.png)\n上表是各类任务在不同标签率下迁移学习和无迁移学习的性能对比。\n可以看出三种迁移结构性能提升的顺序是A>B>C，因为结构C比如跨语言模型，源任务和目标任务相似性很小。\n![](5.png)\n上图是和其他模型比较的结果。\n\n# 5 结论\n---\n提出一种神经序列标注的迁移学习方法，主要有三个方面：跨领域、跨应用、跨语言。\n以下三个因素对迁移学习性能有很大影响：目标任务标签数量、源任务和目标任务相关性、能够共享的参数数量。\n在以后的工作中，可以在跨语言迁移学习中尝试结合基于模型的迁移和基于资源的迁移。","slug":"ICLR17-1","published":1,"updated":"2019-07-20T04:17:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk9824j000x7swevcmae2do","content":"<p>论文链接：<a href=\"https://arxiv.org/pdf/1703.06345.pdf\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>探索一种神经序列标注的迁移学习方法，适用于源任务有大量标注标签，但是目标任务标注标签很少的情况，主要有三个方面：跨领域、跨应用、跨语言。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>序列标注任务的一个难点就是怎样将知识从一个任务迁移到另一个任务上面去，通常被叫做“迁移学习”。<br>这里对三种任务（跨领域、跨应用、跨语言）分别提出了参数共享的神经网络结构，实验结果也很好。即使标注标签很多，结果也比以前的结果更好。</p>\n<h1 id=\"2-相关工作\"><a href=\"#2-相关工作\" class=\"headerlink\" title=\"2 相关工作\"></a>2 相关工作</h1><hr>\n<p>NLP迁移学习通常有两种方法，一种是基于资源的迁移，另一种是基于模型的迁移。<br>基于资源的迁移需要大量的跨语言语料，而且通常只用在跨语言任务了，在跨领域和跨应用方面还没什么应用。<br>基于模型的迁移就不需要大量的额外资源了，只要探索源任务和目标任务之间的相似性和相关性，通过修改模型结构、训练算法、特征表示。<br>这里的模型就是基于模型的迁移。和以往不同的是，这个模型利用了深度递归神经网之间的一般性，可以在跨领域、跨应用、跨语言之间转换。</p>\n<h1 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3 方法\"></a>3 方法</h1><hr>\n<p><img src=\"1.png\" alt><br>上图分别是基本模型、跨领域模型、跨应用模型、跨语言模型。</p>\n<h3 id=\"3-1-基本模型\"><a href=\"#3-1-基本模型\" class=\"headerlink\" title=\"3.1 基本模型\"></a>3.1 基本模型</h3><p>首先字符层输入每个字符表示，输出单词的字符层表示，然后和词向量结合作为每个词的表示，然后经过一个CNN或者RNN，隐含层输出再经过一个CRF得到每个词的标签。</p>\n<h3 id=\"3-2-迁移学习结构\"><a href=\"#3-2-迁移学习结构\" class=\"headerlink\" title=\"3.2 迁移学习结构\"></a>3.2 迁移学习结构</h3><p>跨领域、跨应用、跨语言每种一个迁移结构，和基本模型不同的是，共享的参数不同。</p>\n<h4 id=\"3-2-1-跨领域迁移\"><a href=\"#3-2-1-跨领域迁移\" class=\"headerlink\" title=\"3.2.1 跨领域迁移\"></a>3.2.1 跨领域迁移</h4><p>跨领域迁移有两种情况，一种是两个领域标签存在映射关系，一种是不存在映射关系。<br>第一种情况结构如图b所示，可以共享CRF层以及下面的所有层，最后加一个标签映射的步骤就行了<br>第二种情况结构如图c所示，CRF层独立训练。</p>\n<h4 id=\"3-2-2-跨应用迁移\"><a href=\"#3-2-2-跨应用迁移\" class=\"headerlink\" title=\"3.2.2 跨应用迁移\"></a>3.2.2 跨应用迁移</h4><p>这里假设两种应用是同一种语言，所以和跨领域标签无映射关系类似，用的是图c的结构。</p>\n<h4 id=\"3-2-3-跨语言迁移\"><a href=\"#3-2-3-跨语言迁移\" class=\"headerlink\" title=\"3.2.3 跨语言迁移\"></a>3.2.3 跨语言迁移</h4><p>这里重点放在两种字母表相同的语言上，比如英语和西班牙语。<br>由于字符相同，所以采用图d结构，共享字符层和词向量。</p>\n<h3 id=\"3-3-训练\"><a href=\"#3-3-训练\" class=\"headerlink\" title=\"3.3 训练\"></a>3.3 训练</h3><p>假设从任务$s$迁移到任务$t$，训练集分为$X_s$和$X_t$，参数分为$W_s$和$W_t$。其中模型参数还分为任务特定参数和共享参数：<br>\\[{W_s} = {W_{s,spec}} \\cup {W_{shared}},{W_t} = {W_{t,spec}} \\cup {W_{shared}}\\]训练过程如下：<br>每一次迭代，都采用二项分布随机抽取一个任务$s$或$t$，然后训练该任务特定模型参数和共享参数。由于源任务和目标任务收敛速度不一定一样，所以对目标任务提前停止。</p>\n<h3 id=\"3-4-模型实现\"><a href=\"#3-4-模型实现\" class=\"headerlink\" title=\"3.4 模型实现\"></a>3.4 模型实现</h3><p>RNN采用GRU，假设隐含层输出为$h$，输出标签为$y$，定义CRF的目标函数为<br>\\[f(h,y) - \\log \\sum\\limits_{y’ \\in \\gamma (h)} {\\exp (f(h,y’) + \\cos {\\rm{t}}(y,y’))} \\]</p>\n<h1 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4 实验\"></a>4 实验</h1><p><img src=\"2.png\" alt><br><img src=\"3.png\" alt><br>上图是实验结果，其中跨领域迁移：ade，跨应用迁移：fgh，跨语言迁移：ij，跨领域和应用：b，跨领域、应用和语言：c。<br><img src=\"4.png\" alt><br>上表是各类任务在不同标签率下迁移学习和无迁移学习的性能对比。<br>可以看出三种迁移结构性能提升的顺序是A&gt;B&gt;C，因为结构C比如跨语言模型，源任务和目标任务相似性很小。<br><img src=\"5.png\" alt><br>上图是和其他模型比较的结果。</p>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5 结论\"></a>5 结论</h1><hr>\n<p>提出一种神经序列标注的迁移学习方法，主要有三个方面：跨领域、跨应用、跨语言。<br>以下三个因素对迁移学习性能有很大影响：目标任务标签数量、源任务和目标任务相关性、能够共享的参数数量。<br>在以后的工作中，可以在跨语言迁移学习中尝试结合基于模型的迁移和基于资源的迁移。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>论文链接：<a href=\"https://arxiv.org/pdf/1703.06345.pdf\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>探索一种神经序列标注的迁移学习方法，适用于源任务有大量标注标签，但是目标任务标注标签很少的情况，主要有三个方面：跨领域、跨应用、跨语言。</p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1 介绍\"></a>1 介绍</h1><hr>\n<p>序列标注任务的一个难点就是怎样将知识从一个任务迁移到另一个任务上面去，通常被叫做“迁移学习”。<br>这里对三种任务（跨领域、跨应用、跨语言）分别提出了参数共享的神经网络结构，实验结果也很好。即使标注标签很多，结果也比以前的结果更好。</p>\n<h1 id=\"2-相关工作\"><a href=\"#2-相关工作\" class=\"headerlink\" title=\"2 相关工作\"></a>2 相关工作</h1><hr>\n<p>NLP迁移学习通常有两种方法，一种是基于资源的迁移，另一种是基于模型的迁移。<br>基于资源的迁移需要大量的跨语言语料，而且通常只用在跨语言任务了，在跨领域和跨应用方面还没什么应用。<br>基于模型的迁移就不需要大量的额外资源了，只要探索源任务和目标任务之间的相似性和相关性，通过修改模型结构、训练算法、特征表示。<br>这里的模型就是基于模型的迁移。和以往不同的是，这个模型利用了深度递归神经网之间的一般性，可以在跨领域、跨应用、跨语言之间转换。</p>\n<h1 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3 方法\"></a>3 方法</h1><hr>\n<p><img src=\"1.png\" alt><br>上图分别是基本模型、跨领域模型、跨应用模型、跨语言模型。</p>\n<h3 id=\"3-1-基本模型\"><a href=\"#3-1-基本模型\" class=\"headerlink\" title=\"3.1 基本模型\"></a>3.1 基本模型</h3><p>首先字符层输入每个字符表示，输出单词的字符层表示，然后和词向量结合作为每个词的表示，然后经过一个CNN或者RNN，隐含层输出再经过一个CRF得到每个词的标签。</p>\n<h3 id=\"3-2-迁移学习结构\"><a href=\"#3-2-迁移学习结构\" class=\"headerlink\" title=\"3.2 迁移学习结构\"></a>3.2 迁移学习结构</h3><p>跨领域、跨应用、跨语言每种一个迁移结构，和基本模型不同的是，共享的参数不同。</p>\n<h4 id=\"3-2-1-跨领域迁移\"><a href=\"#3-2-1-跨领域迁移\" class=\"headerlink\" title=\"3.2.1 跨领域迁移\"></a>3.2.1 跨领域迁移</h4><p>跨领域迁移有两种情况，一种是两个领域标签存在映射关系，一种是不存在映射关系。<br>第一种情况结构如图b所示，可以共享CRF层以及下面的所有层，最后加一个标签映射的步骤就行了<br>第二种情况结构如图c所示，CRF层独立训练。</p>\n<h4 id=\"3-2-2-跨应用迁移\"><a href=\"#3-2-2-跨应用迁移\" class=\"headerlink\" title=\"3.2.2 跨应用迁移\"></a>3.2.2 跨应用迁移</h4><p>这里假设两种应用是同一种语言，所以和跨领域标签无映射关系类似，用的是图c的结构。</p>\n<h4 id=\"3-2-3-跨语言迁移\"><a href=\"#3-2-3-跨语言迁移\" class=\"headerlink\" title=\"3.2.3 跨语言迁移\"></a>3.2.3 跨语言迁移</h4><p>这里重点放在两种字母表相同的语言上，比如英语和西班牙语。<br>由于字符相同，所以采用图d结构，共享字符层和词向量。</p>\n<h3 id=\"3-3-训练\"><a href=\"#3-3-训练\" class=\"headerlink\" title=\"3.3 训练\"></a>3.3 训练</h3><p>假设从任务$s$迁移到任务$t$，训练集分为$X_s$和$X_t$，参数分为$W_s$和$W_t$。其中模型参数还分为任务特定参数和共享参数：<br>\\[{W_s} = {W_{s,spec}} \\cup {W_{shared}},{W_t} = {W_{t,spec}} \\cup {W_{shared}}\\]训练过程如下：<br>每一次迭代，都采用二项分布随机抽取一个任务$s$或$t$，然后训练该任务特定模型参数和共享参数。由于源任务和目标任务收敛速度不一定一样，所以对目标任务提前停止。</p>\n<h3 id=\"3-4-模型实现\"><a href=\"#3-4-模型实现\" class=\"headerlink\" title=\"3.4 模型实现\"></a>3.4 模型实现</h3><p>RNN采用GRU，假设隐含层输出为$h$，输出标签为$y$，定义CRF的目标函数为<br>\\[f(h,y) - \\log \\sum\\limits_{y’ \\in \\gamma (h)} {\\exp (f(h,y’) + \\cos {\\rm{t}}(y,y’))} \\]</p>\n<h1 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4 实验\"></a>4 实验</h1><p><img src=\"2.png\" alt><br><img src=\"3.png\" alt><br>上图是实验结果，其中跨领域迁移：ade，跨应用迁移：fgh，跨语言迁移：ij，跨领域和应用：b，跨领域、应用和语言：c。<br><img src=\"4.png\" alt><br>上表是各类任务在不同标签率下迁移学习和无迁移学习的性能对比。<br>可以看出三种迁移结构性能提升的顺序是A&gt;B&gt;C，因为结构C比如跨语言模型，源任务和目标任务相似性很小。<br><img src=\"5.png\" alt><br>上图是和其他模型比较的结果。</p>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5 结论\"></a>5 结论</h1><hr>\n<p>提出一种神经序列标注的迁移学习方法，主要有三个方面：跨领域、跨应用、跨语言。<br>以下三个因素对迁移学习性能有很大影响：目标任务标签数量、源任务和目标任务相关性、能够共享的参数数量。<br>在以后的工作中，可以在跨语言迁移学习中尝试结合基于模型的迁移和基于资源的迁移。</p>\n"},{"title":"Meta Multi-Task Learning for Sequence Modeling","date":"2018-10-25T14:50:40.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n> 这篇文章是知识分析课准备讲的论文，随便拿来看一看了，简单介绍一下吧，论文是复旦邱锡鹏老师组写的。\n\n**论文地址：**[Meta Multi-Task Learning for Sequence Modeling](https://arxiv.org/pdf/1802.08969.pdf)\n\n# 介绍\n---\n多任务学习一般的模型是共享特征表示层，也就是最底层的特征表示层是共享的，上层的神经网络都是随具体任务而不同的。但是这有个问题，比如用LSTM对句子进行建模的时候，不同的短语的组合函数是一样的，比如动词+名词、形容词+名词。但是组合函数应该定义成不同的比较好，于是这篇文章提出了针对不同的任务，不同的时刻产生不同的参数矩阵的动态参数生成方法。\n\n本文主要有如下三个贡献点：\n* 不同于以往的特征层的共享，本文模型提出了函数层的共享，也就是针对不同任务动态的生成不同的组合函数。\n* 不仅对于多任务，Meta-LSTM对于单任务也有提升，因为是动态生成参数，所以每个时刻的参数都不一样，可以更好地表示不同的短语语义。\n* 模型还可以被用作迁移学习，Meta-LSTM在训练完成后可以直接被用于新任务上面作为先验知识，而任务特定的LSTM就作为后验知识。\n\n# 模型\n---\n## 任务介绍\n本文主要在序列标注和文本分类两个任务上面做实验，而且是多任务的，序列标注包括NER和POS tagging，文本分类包括多个不同领域的文本分类。\n\n## 传统模型\n传统的多任务模型共享一个私有LSTM特征表示层，用这个私有LSTM学习出句子的表示，然后和词向量拼接共同输入到任务特定的公有LSTM去。具体结构如下图所示：\n![](1.jpg)\n输出层每个任务都是不共享的，和一般的模型一样，这里就不介绍了。最终的损失函数为所有任务的损失函数加权之和。\n\n多任务模型的训练策略如下所示：\n* 首先随机选择一个任务。\n* 然后从这个任务的数据集中随机选择一个mini-batch。\n* 然后用这个任务的mini-batch数据去训练并更新参数。\n* 不断重复以上三个过程。\n\n这样就可以训练出一个适用于所有任务的多任务模型。\n\n## 元多任务学习\n传统模型只共享了特征表示层，也就是共享了私有LSTM。本文的模型创新就是通过Meta-LSTM动态生成针对每个任务、每个时刻不同的参数，然后用每个任务特定的Basic-LSTM进行编码。具体结构如下图所示：\n![](2.jpg)\n其中Basic-LSTM的结构和普通的LSTM基本一样，唯一区别就是每个时刻的参数W和b是通过Meta-LSTM动态生成的，形式化定义如下：\n![](3.jpg)\n因为W维度过大，计算复杂度太高，并且也容易导致过拟合，所以这里采用了SVD分解：\n![](4.jpg)\n而这里的$z_t$就是通过Meta-LSTM动态生成的，形式化定义如下：\n![](5.jpg)\n如果精简的表示出这个LSTM之间的关系，可以写成如下形式：\n![](6.jpg)\n概括起来就是：**Basic-LSTM上一个时刻的输出$h_{t - 1}$、Meta-LSTM上一个时刻的输出$\\hat h_{t - 1}$和当前时刻的单词表示$x_t$作为Meta-LSTM当前时刻的输入，产生的输出$z_t$用来产生Basic-LSTM当前时刻的参数矩阵。**\n\nMeta-LSTM主要有如下两个优点：\n* 一个就是每个时刻的参数动态生成。\n* 另一个就是比普通的LSTM参数数量更少，因为有SVD分解。\n\n# 实验\n---\n## 文本分类\n文本分类任务是在16个购物网站评论数据集上做的，数据集大小如下所示：\n![](7.jpg)\n最后在大多数数据集上，Meta-LSTM都能做到最好结果，具体结果如下：\n![](8.jpg)\n\n## 序列标注\n---\n序列标注任务是在三个数据集上面做的，两个是NER数据集，一个是POS tagging数据集，具体结果如下：\n![](9.jpg)\n只能说比最基础的LSTM+CRF模型高了那么一丢丢吧。\n\n# 总结\n---\n本文提出了一种function-level的多任务共享机制，即使用Meta-LSTM来动态产生Basic-LSTM每个时刻的参数矩阵。\n\n> 看完后我在想，这个动态参数生成的机制能不能用在成分句法分析上面，例如对于top-down的chart-based模型，可以自顶向下通过Tree-LSTM动态产生每一个树结点的参数矩阵，然后用这个参数矩阵来预测结点的label和split。","source":"_posts/MetaMTL.md","raw":"---\ntitle: Meta Multi-Task Learning for Sequence Modeling\ndate: 2018-10-25 22:50:40\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- AAAI\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 迁移学习\ncategories:\n- 元学习\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n> 这篇文章是知识分析课准备讲的论文，随便拿来看一看了，简单介绍一下吧，论文是复旦邱锡鹏老师组写的。\n\n**论文地址：**[Meta Multi-Task Learning for Sequence Modeling](https://arxiv.org/pdf/1802.08969.pdf)\n\n# 介绍\n---\n多任务学习一般的模型是共享特征表示层，也就是最底层的特征表示层是共享的，上层的神经网络都是随具体任务而不同的。但是这有个问题，比如用LSTM对句子进行建模的时候，不同的短语的组合函数是一样的，比如动词+名词、形容词+名词。但是组合函数应该定义成不同的比较好，于是这篇文章提出了针对不同的任务，不同的时刻产生不同的参数矩阵的动态参数生成方法。\n\n本文主要有如下三个贡献点：\n* 不同于以往的特征层的共享，本文模型提出了函数层的共享，也就是针对不同任务动态的生成不同的组合函数。\n* 不仅对于多任务，Meta-LSTM对于单任务也有提升，因为是动态生成参数，所以每个时刻的参数都不一样，可以更好地表示不同的短语语义。\n* 模型还可以被用作迁移学习，Meta-LSTM在训练完成后可以直接被用于新任务上面作为先验知识，而任务特定的LSTM就作为后验知识。\n\n# 模型\n---\n## 任务介绍\n本文主要在序列标注和文本分类两个任务上面做实验，而且是多任务的，序列标注包括NER和POS tagging，文本分类包括多个不同领域的文本分类。\n\n## 传统模型\n传统的多任务模型共享一个私有LSTM特征表示层，用这个私有LSTM学习出句子的表示，然后和词向量拼接共同输入到任务特定的公有LSTM去。具体结构如下图所示：\n![](1.jpg)\n输出层每个任务都是不共享的，和一般的模型一样，这里就不介绍了。最终的损失函数为所有任务的损失函数加权之和。\n\n多任务模型的训练策略如下所示：\n* 首先随机选择一个任务。\n* 然后从这个任务的数据集中随机选择一个mini-batch。\n* 然后用这个任务的mini-batch数据去训练并更新参数。\n* 不断重复以上三个过程。\n\n这样就可以训练出一个适用于所有任务的多任务模型。\n\n## 元多任务学习\n传统模型只共享了特征表示层，也就是共享了私有LSTM。本文的模型创新就是通过Meta-LSTM动态生成针对每个任务、每个时刻不同的参数，然后用每个任务特定的Basic-LSTM进行编码。具体结构如下图所示：\n![](2.jpg)\n其中Basic-LSTM的结构和普通的LSTM基本一样，唯一区别就是每个时刻的参数W和b是通过Meta-LSTM动态生成的，形式化定义如下：\n![](3.jpg)\n因为W维度过大，计算复杂度太高，并且也容易导致过拟合，所以这里采用了SVD分解：\n![](4.jpg)\n而这里的$z_t$就是通过Meta-LSTM动态生成的，形式化定义如下：\n![](5.jpg)\n如果精简的表示出这个LSTM之间的关系，可以写成如下形式：\n![](6.jpg)\n概括起来就是：**Basic-LSTM上一个时刻的输出$h_{t - 1}$、Meta-LSTM上一个时刻的输出$\\hat h_{t - 1}$和当前时刻的单词表示$x_t$作为Meta-LSTM当前时刻的输入，产生的输出$z_t$用来产生Basic-LSTM当前时刻的参数矩阵。**\n\nMeta-LSTM主要有如下两个优点：\n* 一个就是每个时刻的参数动态生成。\n* 另一个就是比普通的LSTM参数数量更少，因为有SVD分解。\n\n# 实验\n---\n## 文本分类\n文本分类任务是在16个购物网站评论数据集上做的，数据集大小如下所示：\n![](7.jpg)\n最后在大多数数据集上，Meta-LSTM都能做到最好结果，具体结果如下：\n![](8.jpg)\n\n## 序列标注\n---\n序列标注任务是在三个数据集上面做的，两个是NER数据集，一个是POS tagging数据集，具体结果如下：\n![](9.jpg)\n只能说比最基础的LSTM+CRF模型高了那么一丢丢吧。\n\n# 总结\n---\n本文提出了一种function-level的多任务共享机制，即使用Meta-LSTM来动态产生Basic-LSTM每个时刻的参数矩阵。\n\n> 看完后我在想，这个动态参数生成的机制能不能用在成分句法分析上面，例如对于top-down的chart-based模型，可以自顶向下通过Tree-LSTM动态产生每一个树结点的参数矩阵，然后用这个参数矩阵来预测结点的label和split。","slug":"MetaMTL","published":1,"updated":"2019-07-20T04:18:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982be00497swe9bgackvm","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>这篇文章是知识分析课准备讲的论文，随便拿来看一看了，简单介绍一下吧，论文是复旦邱锡鹏老师组写的。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/pdf/1802.08969.pdf\" target=\"_blank\" rel=\"noopener\">Meta Multi-Task Learning for Sequence Modeling</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>多任务学习一般的模型是共享特征表示层，也就是最底层的特征表示层是共享的，上层的神经网络都是随具体任务而不同的。但是这有个问题，比如用LSTM对句子进行建模的时候，不同的短语的组合函数是一样的，比如动词+名词、形容词+名词。但是组合函数应该定义成不同的比较好，于是这篇文章提出了针对不同的任务，不同的时刻产生不同的参数矩阵的动态参数生成方法。</p>\n<p>本文主要有如下三个贡献点：</p>\n<ul>\n<li>不同于以往的特征层的共享，本文模型提出了函数层的共享，也就是针对不同任务动态的生成不同的组合函数。</li>\n<li>不仅对于多任务，Meta-LSTM对于单任务也有提升，因为是动态生成参数，所以每个时刻的参数都不一样，可以更好地表示不同的短语语义。</li>\n<li>模型还可以被用作迁移学习，Meta-LSTM在训练完成后可以直接被用于新任务上面作为先验知识，而任务特定的LSTM就作为后验知识。</li>\n</ul>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<h2 id=\"任务介绍\"><a href=\"#任务介绍\" class=\"headerlink\" title=\"任务介绍\"></a>任务介绍</h2><p>本文主要在序列标注和文本分类两个任务上面做实验，而且是多任务的，序列标注包括NER和POS tagging，文本分类包括多个不同领域的文本分类。</p>\n<h2 id=\"传统模型\"><a href=\"#传统模型\" class=\"headerlink\" title=\"传统模型\"></a>传统模型</h2><p>传统的多任务模型共享一个私有LSTM特征表示层，用这个私有LSTM学习出句子的表示，然后和词向量拼接共同输入到任务特定的公有LSTM去。具体结构如下图所示：<br><img src=\"1.jpg\" alt><br>输出层每个任务都是不共享的，和一般的模型一样，这里就不介绍了。最终的损失函数为所有任务的损失函数加权之和。</p>\n<p>多任务模型的训练策略如下所示：</p>\n<ul>\n<li>首先随机选择一个任务。</li>\n<li>然后从这个任务的数据集中随机选择一个mini-batch。</li>\n<li>然后用这个任务的mini-batch数据去训练并更新参数。</li>\n<li>不断重复以上三个过程。</li>\n</ul>\n<p>这样就可以训练出一个适用于所有任务的多任务模型。</p>\n<h2 id=\"元多任务学习\"><a href=\"#元多任务学习\" class=\"headerlink\" title=\"元多任务学习\"></a>元多任务学习</h2><p>传统模型只共享了特征表示层，也就是共享了私有LSTM。本文的模型创新就是通过Meta-LSTM动态生成针对每个任务、每个时刻不同的参数，然后用每个任务特定的Basic-LSTM进行编码。具体结构如下图所示：<br><img src=\"2.jpg\" alt><br>其中Basic-LSTM的结构和普通的LSTM基本一样，唯一区别就是每个时刻的参数W和b是通过Meta-LSTM动态生成的，形式化定义如下：<br><img src=\"3.jpg\" alt><br>因为W维度过大，计算复杂度太高，并且也容易导致过拟合，所以这里采用了SVD分解：<br><img src=\"4.jpg\" alt><br>而这里的$z_t$就是通过Meta-LSTM动态生成的，形式化定义如下：<br><img src=\"5.jpg\" alt><br>如果精简的表示出这个LSTM之间的关系，可以写成如下形式：<br><img src=\"6.jpg\" alt><br>概括起来就是：<strong>Basic-LSTM上一个时刻的输出$h_{t - 1}$、Meta-LSTM上一个时刻的输出$\\hat h_{t - 1}$和当前时刻的单词表示$x_t$作为Meta-LSTM当前时刻的输入，产生的输出$z_t$用来产生Basic-LSTM当前时刻的参数矩阵。</strong></p>\n<p>Meta-LSTM主要有如下两个优点：</p>\n<ul>\n<li>一个就是每个时刻的参数动态生成。</li>\n<li>另一个就是比普通的LSTM参数数量更少，因为有SVD分解。</li>\n</ul>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<h2 id=\"文本分类\"><a href=\"#文本分类\" class=\"headerlink\" title=\"文本分类\"></a>文本分类</h2><p>文本分类任务是在16个购物网站评论数据集上做的，数据集大小如下所示：<br><img src=\"7.jpg\" alt><br>最后在大多数数据集上，Meta-LSTM都能做到最好结果，具体结果如下：<br><img src=\"8.jpg\" alt></p>\n<h2 id=\"序列标注\"><a href=\"#序列标注\" class=\"headerlink\" title=\"序列标注\"></a>序列标注</h2><hr>\n<p>序列标注任务是在三个数据集上面做的，两个是NER数据集，一个是POS tagging数据集，具体结果如下：<br><img src=\"9.jpg\" alt><br>只能说比最基础的LSTM+CRF模型高了那么一丢丢吧。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文提出了一种function-level的多任务共享机制，即使用Meta-LSTM来动态产生Basic-LSTM每个时刻的参数矩阵。</p>\n<blockquote>\n<p>看完后我在想，这个动态参数生成的机制能不能用在成分句法分析上面，例如对于top-down的chart-based模型，可以自顶向下通过Tree-LSTM动态产生每一个树结点的参数矩阵，然后用这个参数矩阵来预测结点的label和split。</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>这篇文章是知识分析课准备讲的论文，随便拿来看一看了，简单介绍一下吧，论文是复旦邱锡鹏老师组写的。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/pdf/1802.08969.pdf\" target=\"_blank\" rel=\"noopener\">Meta Multi-Task Learning for Sequence Modeling</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>多任务学习一般的模型是共享特征表示层，也就是最底层的特征表示层是共享的，上层的神经网络都是随具体任务而不同的。但是这有个问题，比如用LSTM对句子进行建模的时候，不同的短语的组合函数是一样的，比如动词+名词、形容词+名词。但是组合函数应该定义成不同的比较好，于是这篇文章提出了针对不同的任务，不同的时刻产生不同的参数矩阵的动态参数生成方法。</p>\n<p>本文主要有如下三个贡献点：</p>\n<ul>\n<li>不同于以往的特征层的共享，本文模型提出了函数层的共享，也就是针对不同任务动态的生成不同的组合函数。</li>\n<li>不仅对于多任务，Meta-LSTM对于单任务也有提升，因为是动态生成参数，所以每个时刻的参数都不一样，可以更好地表示不同的短语语义。</li>\n<li>模型还可以被用作迁移学习，Meta-LSTM在训练完成后可以直接被用于新任务上面作为先验知识，而任务特定的LSTM就作为后验知识。</li>\n</ul>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<h2 id=\"任务介绍\"><a href=\"#任务介绍\" class=\"headerlink\" title=\"任务介绍\"></a>任务介绍</h2><p>本文主要在序列标注和文本分类两个任务上面做实验，而且是多任务的，序列标注包括NER和POS tagging，文本分类包括多个不同领域的文本分类。</p>\n<h2 id=\"传统模型\"><a href=\"#传统模型\" class=\"headerlink\" title=\"传统模型\"></a>传统模型</h2><p>传统的多任务模型共享一个私有LSTM特征表示层，用这个私有LSTM学习出句子的表示，然后和词向量拼接共同输入到任务特定的公有LSTM去。具体结构如下图所示：<br><img src=\"1.jpg\" alt><br>输出层每个任务都是不共享的，和一般的模型一样，这里就不介绍了。最终的损失函数为所有任务的损失函数加权之和。</p>\n<p>多任务模型的训练策略如下所示：</p>\n<ul>\n<li>首先随机选择一个任务。</li>\n<li>然后从这个任务的数据集中随机选择一个mini-batch。</li>\n<li>然后用这个任务的mini-batch数据去训练并更新参数。</li>\n<li>不断重复以上三个过程。</li>\n</ul>\n<p>这样就可以训练出一个适用于所有任务的多任务模型。</p>\n<h2 id=\"元多任务学习\"><a href=\"#元多任务学习\" class=\"headerlink\" title=\"元多任务学习\"></a>元多任务学习</h2><p>传统模型只共享了特征表示层，也就是共享了私有LSTM。本文的模型创新就是通过Meta-LSTM动态生成针对每个任务、每个时刻不同的参数，然后用每个任务特定的Basic-LSTM进行编码。具体结构如下图所示：<br><img src=\"2.jpg\" alt><br>其中Basic-LSTM的结构和普通的LSTM基本一样，唯一区别就是每个时刻的参数W和b是通过Meta-LSTM动态生成的，形式化定义如下：<br><img src=\"3.jpg\" alt><br>因为W维度过大，计算复杂度太高，并且也容易导致过拟合，所以这里采用了SVD分解：<br><img src=\"4.jpg\" alt><br>而这里的$z_t$就是通过Meta-LSTM动态生成的，形式化定义如下：<br><img src=\"5.jpg\" alt><br>如果精简的表示出这个LSTM之间的关系，可以写成如下形式：<br><img src=\"6.jpg\" alt><br>概括起来就是：<strong>Basic-LSTM上一个时刻的输出$h_{t - 1}$、Meta-LSTM上一个时刻的输出$\\hat h_{t - 1}$和当前时刻的单词表示$x_t$作为Meta-LSTM当前时刻的输入，产生的输出$z_t$用来产生Basic-LSTM当前时刻的参数矩阵。</strong></p>\n<p>Meta-LSTM主要有如下两个优点：</p>\n<ul>\n<li>一个就是每个时刻的参数动态生成。</li>\n<li>另一个就是比普通的LSTM参数数量更少，因为有SVD分解。</li>\n</ul>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<h2 id=\"文本分类\"><a href=\"#文本分类\" class=\"headerlink\" title=\"文本分类\"></a>文本分类</h2><p>文本分类任务是在16个购物网站评论数据集上做的，数据集大小如下所示：<br><img src=\"7.jpg\" alt><br>最后在大多数数据集上，Meta-LSTM都能做到最好结果，具体结果如下：<br><img src=\"8.jpg\" alt></p>\n<h2 id=\"序列标注\"><a href=\"#序列标注\" class=\"headerlink\" title=\"序列标注\"></a>序列标注</h2><hr>\n<p>序列标注任务是在三个数据集上面做的，两个是NER数据集，一个是POS tagging数据集，具体结果如下：<br><img src=\"9.jpg\" alt><br>只能说比最基础的LSTM+CRF模型高了那么一丢丢吧。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文提出了一种function-level的多任务共享机制，即使用Meta-LSTM来动态产生Basic-LSTM每个时刻的参数矩阵。</p>\n<blockquote>\n<p>看完后我在想，这个动态参数生成的机制能不能用在成分句法分析上面，例如对于top-down的chart-based模型，可以自顶向下通过Tree-LSTM动态产生每一个树结点的参数矩阵，然后用这个参数矩阵来预测结点的label和split。</p>\n</blockquote>\n"},{"title":"K-best Iterative Viterbi Parsing","date":"2018-04-24T01:41:56.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=426852531&auto=1&height=66\"></iframe></div>\n\n本文链接：[EACL17](https://www.aclweb.org/anthology/E/E17/E17-2049.pdf)\n\n# 介绍\n---\nCKY算法或维特比inside算法是成分句法分析的主要方法之一，但是当产生式数量特别大之后，时间复杂度也线性增大。可行的一种方法是剪枝，但是剪枝会造成准确率的下降。所以本文就提出了一种迭代的维特比句法分析算法，通过剪枝去除掉没用的边。实验表明，时间上加快了一个数量级，但是本文并没有说准确率怎么样。。。\n\n本文用到的inside和outside算法之前已经介绍过了，详见[PCFG中inside和outside算法详解](http://godweiyang.com/2018/04/19/inside-outside/)。\n\n# 算法框架\n---\n## 分层聚类\n首先提出分层聚类的概念。\n\n![](1.jpg)\n如上图所示，原来的类别标记有很多，将他们聚类成几个小类，再将这几个小类聚成更小的类，依次下去，最后类别标记会少很多很多。\n![](2.jpg)\n以上图为例，${X_1}{\\rm{ = \\{ }}A,B{\\rm{\\} ,}}{X_2}{\\rm{ = \\{ }}C,D{\\rm{\\} }}$，聚类之后的分析表为b图，原始的分析表为a图，聚类之后的表（下面叫**粗表**）b唯一对应了聚类之前的表（下面叫**原始表**）a，而反过来原始表a能对应多种不同的粗表b。\n\n## 形式化定义\n我们将类别分为$m + 1$层，分别表示为${N_0} \\ldots {N_m}$，那么第$m$层的类别集合$N_m$就是原始的类别集合，而$0$到$m - 1$层的类别就称之为**收缩符号**。\n\n对于$0 \\le i \\le j \\le m$，我们定义${\\pi _{i \\to j}}:{N_i} \\mapsto \\Im ({N_j})$，其中$\\Im ({N_j})$就是$N_j$的一个子集。该式将$N_i$中的一个类别$X_i$映射为了$N_j$中所有聚类为$X_i$的类别集合。\n\n举个例子吧，在第一张图中，${\\pi _{1 \\to 2}}(ADJ\\\\_) = \\{ JJ,JJR,JJS\\} $。如果$i = j$，那么${\\pi _{i \\to j}}(A) = \\{ A\\} $。\n\n那么对于${X_i} \\in {N_i},{X_j} \\in {N_j},{X_k} \\in {N_k}$，我们定义产生式${X_i} \\to {X_j}{X_k}$的概率为：\n\\\\[\\log q({X_i} \\to {X_j}{X_k}) = \\mathop {\\max }\\limits_{\\scriptstyle A \\in {\\pi _{i \\to m}}({X_i})\\atop{\\scriptstyle B \\in {\\pi _{j \\to m}}({X_j})\\atop\\scriptstyle C \\in {\\pi _{k \\to m}}({X_k})}} \\log q(A \\to BC)\\\\]\n也就是说，粗表中的每一棵句法树都给出了它在原始表中的句法树的分数的上界，通俗说就是，如果把粗表中的收缩符号全部替换成原始表中的符号，那么新的句法树的分数一定会小于等于粗表中的句法树。\n\n## 引理\n> 如果粗表中的最优句法树${\\hat d}$不包含任意收缩符号，那么它等价于原始表中的最优句法树。\n\n**证明：**\n令$Y$等于原始表中的句法树集合，$Y' \\subset Y$等于没有出现在粗表中，但是出现在原始表中的句法树集合，${Y''}$等于粗表中的句法树集合。\n\n那么对于每一个句法树$d \\in Y'$，都存在唯一的句法树$d' \\in Y''$与之对应。所以可以推出：\n\\\\[\\forall d \\in Y,\\exists d' \\in Y'',s(d) \\le s(d') < s(\\hat d)\\\\]\n这就意味着$\\hat d$也是原始表中的最优句法树。\n\n## 伪代码\n![](3.jpg)\n\n* $lb$初始化为句法树的最优得分或者负无穷，其中`det()`用来求解句法树的最优得分，但是没有必要真的求出最优句法树，只需要在每个结点处保留得分最高的边即可。尽管这样得出来的句法树基本不是最高的，但是能够缩小$lb$范围即可。\n\n* `init-chart()`首先初始化分析表，全部初始化为收缩符号。\n\n* 然后开始迭代过程，首先执行维特比inside算法，也就是CKY算法`Viterbi-inside()`，得到最优句法树$\\hat d$。\n\n* 如果最优句法树不含有任意收缩符号，那么迭代结束，直接返回该句法树。\n\n* 否则的话，更新$lb$为最优句法树的分数`best()`。\n\n* `expand-chart()`将所有收缩符号替换为下一层的收缩符号。\n\n* `Viterbi-outside()`计算outside值。\n\n* `prune-chart()`进行剪枝，过滤掉无用的边。\n\n## 剪枝过程\n算法的重要部分就是`prune-chart()`剪枝过程，这里要详细讲一下。\n\n对于一条边$e = (A,i,j)$，定义$\\alpha \\beta (e) = \\alpha (e) + \\beta (e)$为含有边$e$的句法树的最大分数。那么如果\n$\\alpha \\beta (e) < lb$，这条边$e$就没有搜索的必要了，可以从分析表中去掉。\n\n但是每次迭代都从原始表中计算$\\alpha \\beta (e)$值太麻烦了，可以在每次迭代的时候计算粗表中的值：\n\\\\[\\alpha \\beta (e) \\le \\hat \\alpha (e) + \\hat \\beta (e) = \\hat {\\alpha \\beta} (e)\\\\]\n\n所以当$\\hat {\\alpha \\beta} (e) < lb$时，从分析表中删除这条边。虽然搜索空间减少了，但是不影响算法的迭代轮数。\n\n虽然在`expand-chart()`这一步要扩展收缩符号为下一层所有符号，但是实际运行起来时间比普通的CKY算法大大减少。\n\n## K-best扩展\n![](4.jpg)\n\n基本框架和1-best是一样的，主要思路就是首先求出最优句法树，如果包含收缩符号，那么就下面步骤和1-best一样。否则的话求出后面k-1棵最优的句法树，如果都不包含收缩符号，直接返回k-best棵句法树。否则从中选出最好的一棵含有收缩符号的句法树，下面的步骤和1-best一样。\n\n# 实验\n---\n数据集用的是PTB中长度小于35的句子。\n![](5.jpg)\n\n上面这张表显示出，IVP算法的边的数量远远小于CKY算法，虽然迭代次数大大增加，但是总时间仍然远远小于CKY算法，而且边数减少了之后inside和outside算法的时间可以忽略不计了。最后一行是平均数据。\n![](6.jpg)\n上图说明了，当k较小时，IVP算法时间快于普通的k-best算法，但是k大了之后就变慢了，原因如下图所示：\n![](7.jpg)\n当k太大了之后，lb不能很好的得到最优得分的下界，所以无法有效地剪枝。而且k越小，算法收敛的也越快。\n\n# 结论\n---\n提出了K-best IVP算法，基本框架还是inside-outside算法。\n\n但是全文自始自终没有提及算法的准确率，感觉应该不是很高，不知道有没有又高又快的优化方法？","source":"_posts/IVP-EACL17.md","raw":"---\ntitle: K-best Iterative Viterbi Parsing\ndate: 2018-04-24 09:41:56\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=426852531&auto=1&height=66\"></iframe></div>\n\n本文链接：[EACL17](https://www.aclweb.org/anthology/E/E17/E17-2049.pdf)\n\n# 介绍\n---\nCKY算法或维特比inside算法是成分句法分析的主要方法之一，但是当产生式数量特别大之后，时间复杂度也线性增大。可行的一种方法是剪枝，但是剪枝会造成准确率的下降。所以本文就提出了一种迭代的维特比句法分析算法，通过剪枝去除掉没用的边。实验表明，时间上加快了一个数量级，但是本文并没有说准确率怎么样。。。\n\n本文用到的inside和outside算法之前已经介绍过了，详见[PCFG中inside和outside算法详解](http://godweiyang.com/2018/04/19/inside-outside/)。\n\n# 算法框架\n---\n## 分层聚类\n首先提出分层聚类的概念。\n\n![](1.jpg)\n如上图所示，原来的类别标记有很多，将他们聚类成几个小类，再将这几个小类聚成更小的类，依次下去，最后类别标记会少很多很多。\n![](2.jpg)\n以上图为例，${X_1}{\\rm{ = \\{ }}A,B{\\rm{\\} ,}}{X_2}{\\rm{ = \\{ }}C,D{\\rm{\\} }}$，聚类之后的分析表为b图，原始的分析表为a图，聚类之后的表（下面叫**粗表**）b唯一对应了聚类之前的表（下面叫**原始表**）a，而反过来原始表a能对应多种不同的粗表b。\n\n## 形式化定义\n我们将类别分为$m + 1$层，分别表示为${N_0} \\ldots {N_m}$，那么第$m$层的类别集合$N_m$就是原始的类别集合，而$0$到$m - 1$层的类别就称之为**收缩符号**。\n\n对于$0 \\le i \\le j \\le m$，我们定义${\\pi _{i \\to j}}:{N_i} \\mapsto \\Im ({N_j})$，其中$\\Im ({N_j})$就是$N_j$的一个子集。该式将$N_i$中的一个类别$X_i$映射为了$N_j$中所有聚类为$X_i$的类别集合。\n\n举个例子吧，在第一张图中，${\\pi _{1 \\to 2}}(ADJ\\\\_) = \\{ JJ,JJR,JJS\\} $。如果$i = j$，那么${\\pi _{i \\to j}}(A) = \\{ A\\} $。\n\n那么对于${X_i} \\in {N_i},{X_j} \\in {N_j},{X_k} \\in {N_k}$，我们定义产生式${X_i} \\to {X_j}{X_k}$的概率为：\n\\\\[\\log q({X_i} \\to {X_j}{X_k}) = \\mathop {\\max }\\limits_{\\scriptstyle A \\in {\\pi _{i \\to m}}({X_i})\\atop{\\scriptstyle B \\in {\\pi _{j \\to m}}({X_j})\\atop\\scriptstyle C \\in {\\pi _{k \\to m}}({X_k})}} \\log q(A \\to BC)\\\\]\n也就是说，粗表中的每一棵句法树都给出了它在原始表中的句法树的分数的上界，通俗说就是，如果把粗表中的收缩符号全部替换成原始表中的符号，那么新的句法树的分数一定会小于等于粗表中的句法树。\n\n## 引理\n> 如果粗表中的最优句法树${\\hat d}$不包含任意收缩符号，那么它等价于原始表中的最优句法树。\n\n**证明：**\n令$Y$等于原始表中的句法树集合，$Y' \\subset Y$等于没有出现在粗表中，但是出现在原始表中的句法树集合，${Y''}$等于粗表中的句法树集合。\n\n那么对于每一个句法树$d \\in Y'$，都存在唯一的句法树$d' \\in Y''$与之对应。所以可以推出：\n\\\\[\\forall d \\in Y,\\exists d' \\in Y'',s(d) \\le s(d') < s(\\hat d)\\\\]\n这就意味着$\\hat d$也是原始表中的最优句法树。\n\n## 伪代码\n![](3.jpg)\n\n* $lb$初始化为句法树的最优得分或者负无穷，其中`det()`用来求解句法树的最优得分，但是没有必要真的求出最优句法树，只需要在每个结点处保留得分最高的边即可。尽管这样得出来的句法树基本不是最高的，但是能够缩小$lb$范围即可。\n\n* `init-chart()`首先初始化分析表，全部初始化为收缩符号。\n\n* 然后开始迭代过程，首先执行维特比inside算法，也就是CKY算法`Viterbi-inside()`，得到最优句法树$\\hat d$。\n\n* 如果最优句法树不含有任意收缩符号，那么迭代结束，直接返回该句法树。\n\n* 否则的话，更新$lb$为最优句法树的分数`best()`。\n\n* `expand-chart()`将所有收缩符号替换为下一层的收缩符号。\n\n* `Viterbi-outside()`计算outside值。\n\n* `prune-chart()`进行剪枝，过滤掉无用的边。\n\n## 剪枝过程\n算法的重要部分就是`prune-chart()`剪枝过程，这里要详细讲一下。\n\n对于一条边$e = (A,i,j)$，定义$\\alpha \\beta (e) = \\alpha (e) + \\beta (e)$为含有边$e$的句法树的最大分数。那么如果\n$\\alpha \\beta (e) < lb$，这条边$e$就没有搜索的必要了，可以从分析表中去掉。\n\n但是每次迭代都从原始表中计算$\\alpha \\beta (e)$值太麻烦了，可以在每次迭代的时候计算粗表中的值：\n\\\\[\\alpha \\beta (e) \\le \\hat \\alpha (e) + \\hat \\beta (e) = \\hat {\\alpha \\beta} (e)\\\\]\n\n所以当$\\hat {\\alpha \\beta} (e) < lb$时，从分析表中删除这条边。虽然搜索空间减少了，但是不影响算法的迭代轮数。\n\n虽然在`expand-chart()`这一步要扩展收缩符号为下一层所有符号，但是实际运行起来时间比普通的CKY算法大大减少。\n\n## K-best扩展\n![](4.jpg)\n\n基本框架和1-best是一样的，主要思路就是首先求出最优句法树，如果包含收缩符号，那么就下面步骤和1-best一样。否则的话求出后面k-1棵最优的句法树，如果都不包含收缩符号，直接返回k-best棵句法树。否则从中选出最好的一棵含有收缩符号的句法树，下面的步骤和1-best一样。\n\n# 实验\n---\n数据集用的是PTB中长度小于35的句子。\n![](5.jpg)\n\n上面这张表显示出，IVP算法的边的数量远远小于CKY算法，虽然迭代次数大大增加，但是总时间仍然远远小于CKY算法，而且边数减少了之后inside和outside算法的时间可以忽略不计了。最后一行是平均数据。\n![](6.jpg)\n上图说明了，当k较小时，IVP算法时间快于普通的k-best算法，但是k大了之后就变慢了，原因如下图所示：\n![](7.jpg)\n当k太大了之后，lb不能很好的得到最优得分的下界，所以无法有效地剪枝。而且k越小，算法收敛的也越快。\n\n# 结论\n---\n提出了K-best IVP算法，基本框架还是inside-outside算法。\n\n但是全文自始自终没有提及算法的准确率，感觉应该不是很高，不知道有没有又高又快的优化方法？","slug":"IVP-EACL17","published":1,"updated":"2019-07-20T04:17:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982bg004b7sweho7rw9sq","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=426852531&auto=1&height=66\"></iframe></div>\n\n<p>本文链接：<a href=\"https://www.aclweb.org/anthology/E/E17/E17-2049.pdf\" target=\"_blank\" rel=\"noopener\">EACL17</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>CKY算法或维特比inside算法是成分句法分析的主要方法之一，但是当产生式数量特别大之后，时间复杂度也线性增大。可行的一种方法是剪枝，但是剪枝会造成准确率的下降。所以本文就提出了一种迭代的维特比句法分析算法，通过剪枝去除掉没用的边。实验表明，时间上加快了一个数量级，但是本文并没有说准确率怎么样。。。</p>\n<p>本文用到的inside和outside算法之前已经介绍过了，详见<a href=\"http://godweiyang.com/2018/04/19/inside-outside/\">PCFG中inside和outside算法详解</a>。</p>\n<h1 id=\"算法框架\"><a href=\"#算法框架\" class=\"headerlink\" title=\"算法框架\"></a>算法框架</h1><hr>\n<h2 id=\"分层聚类\"><a href=\"#分层聚类\" class=\"headerlink\" title=\"分层聚类\"></a>分层聚类</h2><p>首先提出分层聚类的概念。</p>\n<p><img src=\"1.jpg\" alt><br>如上图所示，原来的类别标记有很多，将他们聚类成几个小类，再将这几个小类聚成更小的类，依次下去，最后类别标记会少很多很多。<br><img src=\"2.jpg\" alt><br>以上图为例，${X_1}{\\rm{ = \\{ }}A,B{\\rm{\\} ,}}{X_2}{\\rm{ = \\{ }}C,D{\\rm{\\} }}$，聚类之后的分析表为b图，原始的分析表为a图，聚类之后的表（下面叫<strong>粗表</strong>）b唯一对应了聚类之前的表（下面叫<strong>原始表</strong>）a，而反过来原始表a能对应多种不同的粗表b。</p>\n<h2 id=\"形式化定义\"><a href=\"#形式化定义\" class=\"headerlink\" title=\"形式化定义\"></a>形式化定义</h2><p>我们将类别分为$m + 1$层，分别表示为${N_0} \\ldots {N_m}$，那么第$m$层的类别集合$N_m$就是原始的类别集合，而$0$到$m - 1$层的类别就称之为<strong>收缩符号</strong>。</p>\n<p>对于$0 \\le i \\le j \\le m$，我们定义${\\pi _{i \\to j}}:{N_i} \\mapsto \\Im ({N_j})$，其中$\\Im ({N_j})$就是$N_j$的一个子集。该式将$N_i$中的一个类别$X_i$映射为了$N_j$中所有聚类为$X_i$的类别集合。</p>\n<p>举个例子吧，在第一张图中，${\\pi _{1 \\to 2}}(ADJ\\_) = \\{ JJ,JJR,JJS\\} $。如果$i = j$，那么${\\pi _{i \\to j}}(A) = \\{ A\\} $。</p>\n<p>那么对于${X_i} \\in {N_i},{X_j} \\in {N_j},{X_k} \\in {N_k}$，我们定义产生式${X_i} \\to {X_j}{X_k}$的概率为：<br>\\[\\log q({X_i} \\to {X_j}{X_k}) = \\mathop {\\max }\\limits_{\\scriptstyle A \\in {\\pi _{i \\to m}}({X_i})\\atop{\\scriptstyle B \\in {\\pi _{j \\to m}}({X_j})\\atop\\scriptstyle C \\in {\\pi _{k \\to m}}({X_k})}} \\log q(A \\to BC)\\]<br>也就是说，粗表中的每一棵句法树都给出了它在原始表中的句法树的分数的上界，通俗说就是，如果把粗表中的收缩符号全部替换成原始表中的符号，那么新的句法树的分数一定会小于等于粗表中的句法树。</p>\n<h2 id=\"引理\"><a href=\"#引理\" class=\"headerlink\" title=\"引理\"></a>引理</h2><blockquote>\n<p>如果粗表中的最优句法树${\\hat d}$不包含任意收缩符号，那么它等价于原始表中的最优句法树。</p>\n</blockquote>\n<p><strong>证明：</strong><br>令$Y$等于原始表中的句法树集合，$Y’ \\subset Y$等于没有出现在粗表中，但是出现在原始表中的句法树集合，${Y’’}$等于粗表中的句法树集合。</p>\n<p>那么对于每一个句法树$d \\in Y’$，都存在唯一的句法树$d’ \\in Y’’$与之对应。所以可以推出：<br>\\[\\forall d \\in Y,\\exists d’ \\in Y’’,s(d) \\le s(d’) &lt; s(\\hat d)\\]<br>这就意味着$\\hat d$也是原始表中的最优句法树。</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><p><img src=\"3.jpg\" alt></p>\n<ul>\n<li><p>$lb$初始化为句法树的最优得分或者负无穷，其中<code>det()</code>用来求解句法树的最优得分，但是没有必要真的求出最优句法树，只需要在每个结点处保留得分最高的边即可。尽管这样得出来的句法树基本不是最高的，但是能够缩小$lb$范围即可。</p>\n</li>\n<li><p><code>init-chart()</code>首先初始化分析表，全部初始化为收缩符号。</p>\n</li>\n<li><p>然后开始迭代过程，首先执行维特比inside算法，也就是CKY算法<code>Viterbi-inside()</code>，得到最优句法树$\\hat d$。</p>\n</li>\n<li><p>如果最优句法树不含有任意收缩符号，那么迭代结束，直接返回该句法树。</p>\n</li>\n<li><p>否则的话，更新$lb$为最优句法树的分数<code>best()</code>。</p>\n</li>\n<li><p><code>expand-chart()</code>将所有收缩符号替换为下一层的收缩符号。</p>\n</li>\n<li><p><code>Viterbi-outside()</code>计算outside值。</p>\n</li>\n<li><p><code>prune-chart()</code>进行剪枝，过滤掉无用的边。</p>\n</li>\n</ul>\n<h2 id=\"剪枝过程\"><a href=\"#剪枝过程\" class=\"headerlink\" title=\"剪枝过程\"></a>剪枝过程</h2><p>算法的重要部分就是<code>prune-chart()</code>剪枝过程，这里要详细讲一下。</p>\n<p>对于一条边$e = (A,i,j)$，定义$\\alpha \\beta (e) = \\alpha (e) + \\beta (e)$为含有边$e$的句法树的最大分数。那么如果<br>$\\alpha \\beta (e) &lt; lb$，这条边$e$就没有搜索的必要了，可以从分析表中去掉。</p>\n<p>但是每次迭代都从原始表中计算$\\alpha \\beta (e)$值太麻烦了，可以在每次迭代的时候计算粗表中的值：<br>\\[\\alpha \\beta (e) \\le \\hat \\alpha (e) + \\hat \\beta (e) = \\hat {\\alpha \\beta} (e)\\]</p>\n<p>所以当$\\hat {\\alpha \\beta} (e) &lt; lb$时，从分析表中删除这条边。虽然搜索空间减少了，但是不影响算法的迭代轮数。</p>\n<p>虽然在<code>expand-chart()</code>这一步要扩展收缩符号为下一层所有符号，但是实际运行起来时间比普通的CKY算法大大减少。</p>\n<h2 id=\"K-best扩展\"><a href=\"#K-best扩展\" class=\"headerlink\" title=\"K-best扩展\"></a>K-best扩展</h2><p><img src=\"4.jpg\" alt></p>\n<p>基本框架和1-best是一样的，主要思路就是首先求出最优句法树，如果包含收缩符号，那么就下面步骤和1-best一样。否则的话求出后面k-1棵最优的句法树，如果都不包含收缩符号，直接返回k-best棵句法树。否则从中选出最好的一棵含有收缩符号的句法树，下面的步骤和1-best一样。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>数据集用的是PTB中长度小于35的句子。<br><img src=\"5.jpg\" alt></p>\n<p>上面这张表显示出，IVP算法的边的数量远远小于CKY算法，虽然迭代次数大大增加，但是总时间仍然远远小于CKY算法，而且边数减少了之后inside和outside算法的时间可以忽略不计了。最后一行是平均数据。<br><img src=\"6.jpg\" alt><br>上图说明了，当k较小时，IVP算法时间快于普通的k-best算法，但是k大了之后就变慢了，原因如下图所示：<br><img src=\"7.jpg\" alt><br>当k太大了之后，lb不能很好的得到最优得分的下界，所以无法有效地剪枝。而且k越小，算法收敛的也越快。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><hr>\n<p>提出了K-best IVP算法，基本框架还是inside-outside算法。</p>\n<p>但是全文自始自终没有提及算法的准确率，感觉应该不是很高，不知道有没有又高又快的优化方法？</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=426852531&auto=1&height=66\"></iframe></div>\n\n<p>本文链接：<a href=\"https://www.aclweb.org/anthology/E/E17/E17-2049.pdf\" target=\"_blank\" rel=\"noopener\">EACL17</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>CKY算法或维特比inside算法是成分句法分析的主要方法之一，但是当产生式数量特别大之后，时间复杂度也线性增大。可行的一种方法是剪枝，但是剪枝会造成准确率的下降。所以本文就提出了一种迭代的维特比句法分析算法，通过剪枝去除掉没用的边。实验表明，时间上加快了一个数量级，但是本文并没有说准确率怎么样。。。</p>\n<p>本文用到的inside和outside算法之前已经介绍过了，详见<a href=\"http://godweiyang.com/2018/04/19/inside-outside/\">PCFG中inside和outside算法详解</a>。</p>\n<h1 id=\"算法框架\"><a href=\"#算法框架\" class=\"headerlink\" title=\"算法框架\"></a>算法框架</h1><hr>\n<h2 id=\"分层聚类\"><a href=\"#分层聚类\" class=\"headerlink\" title=\"分层聚类\"></a>分层聚类</h2><p>首先提出分层聚类的概念。</p>\n<p><img src=\"1.jpg\" alt><br>如上图所示，原来的类别标记有很多，将他们聚类成几个小类，再将这几个小类聚成更小的类，依次下去，最后类别标记会少很多很多。<br><img src=\"2.jpg\" alt><br>以上图为例，${X_1}{\\rm{ = \\{ }}A,B{\\rm{\\} ,}}{X_2}{\\rm{ = \\{ }}C,D{\\rm{\\} }}$，聚类之后的分析表为b图，原始的分析表为a图，聚类之后的表（下面叫<strong>粗表</strong>）b唯一对应了聚类之前的表（下面叫<strong>原始表</strong>）a，而反过来原始表a能对应多种不同的粗表b。</p>\n<h2 id=\"形式化定义\"><a href=\"#形式化定义\" class=\"headerlink\" title=\"形式化定义\"></a>形式化定义</h2><p>我们将类别分为$m + 1$层，分别表示为${N_0} \\ldots {N_m}$，那么第$m$层的类别集合$N_m$就是原始的类别集合，而$0$到$m - 1$层的类别就称之为<strong>收缩符号</strong>。</p>\n<p>对于$0 \\le i \\le j \\le m$，我们定义${\\pi _{i \\to j}}:{N_i} \\mapsto \\Im ({N_j})$，其中$\\Im ({N_j})$就是$N_j$的一个子集。该式将$N_i$中的一个类别$X_i$映射为了$N_j$中所有聚类为$X_i$的类别集合。</p>\n<p>举个例子吧，在第一张图中，${\\pi _{1 \\to 2}}(ADJ\\_) = \\{ JJ,JJR,JJS\\} $。如果$i = j$，那么${\\pi _{i \\to j}}(A) = \\{ A\\} $。</p>\n<p>那么对于${X_i} \\in {N_i},{X_j} \\in {N_j},{X_k} \\in {N_k}$，我们定义产生式${X_i} \\to {X_j}{X_k}$的概率为：<br>\\[\\log q({X_i} \\to {X_j}{X_k}) = \\mathop {\\max }\\limits_{\\scriptstyle A \\in {\\pi _{i \\to m}}({X_i})\\atop{\\scriptstyle B \\in {\\pi _{j \\to m}}({X_j})\\atop\\scriptstyle C \\in {\\pi _{k \\to m}}({X_k})}} \\log q(A \\to BC)\\]<br>也就是说，粗表中的每一棵句法树都给出了它在原始表中的句法树的分数的上界，通俗说就是，如果把粗表中的收缩符号全部替换成原始表中的符号，那么新的句法树的分数一定会小于等于粗表中的句法树。</p>\n<h2 id=\"引理\"><a href=\"#引理\" class=\"headerlink\" title=\"引理\"></a>引理</h2><blockquote>\n<p>如果粗表中的最优句法树${\\hat d}$不包含任意收缩符号，那么它等价于原始表中的最优句法树。</p>\n</blockquote>\n<p><strong>证明：</strong><br>令$Y$等于原始表中的句法树集合，$Y’ \\subset Y$等于没有出现在粗表中，但是出现在原始表中的句法树集合，${Y’’}$等于粗表中的句法树集合。</p>\n<p>那么对于每一个句法树$d \\in Y’$，都存在唯一的句法树$d’ \\in Y’’$与之对应。所以可以推出：<br>\\[\\forall d \\in Y,\\exists d’ \\in Y’’,s(d) \\le s(d’) &lt; s(\\hat d)\\]<br>这就意味着$\\hat d$也是原始表中的最优句法树。</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><p><img src=\"3.jpg\" alt></p>\n<ul>\n<li><p>$lb$初始化为句法树的最优得分或者负无穷，其中<code>det()</code>用来求解句法树的最优得分，但是没有必要真的求出最优句法树，只需要在每个结点处保留得分最高的边即可。尽管这样得出来的句法树基本不是最高的，但是能够缩小$lb$范围即可。</p>\n</li>\n<li><p><code>init-chart()</code>首先初始化分析表，全部初始化为收缩符号。</p>\n</li>\n<li><p>然后开始迭代过程，首先执行维特比inside算法，也就是CKY算法<code>Viterbi-inside()</code>，得到最优句法树$\\hat d$。</p>\n</li>\n<li><p>如果最优句法树不含有任意收缩符号，那么迭代结束，直接返回该句法树。</p>\n</li>\n<li><p>否则的话，更新$lb$为最优句法树的分数<code>best()</code>。</p>\n</li>\n<li><p><code>expand-chart()</code>将所有收缩符号替换为下一层的收缩符号。</p>\n</li>\n<li><p><code>Viterbi-outside()</code>计算outside值。</p>\n</li>\n<li><p><code>prune-chart()</code>进行剪枝，过滤掉无用的边。</p>\n</li>\n</ul>\n<h2 id=\"剪枝过程\"><a href=\"#剪枝过程\" class=\"headerlink\" title=\"剪枝过程\"></a>剪枝过程</h2><p>算法的重要部分就是<code>prune-chart()</code>剪枝过程，这里要详细讲一下。</p>\n<p>对于一条边$e = (A,i,j)$，定义$\\alpha \\beta (e) = \\alpha (e) + \\beta (e)$为含有边$e$的句法树的最大分数。那么如果<br>$\\alpha \\beta (e) &lt; lb$，这条边$e$就没有搜索的必要了，可以从分析表中去掉。</p>\n<p>但是每次迭代都从原始表中计算$\\alpha \\beta (e)$值太麻烦了，可以在每次迭代的时候计算粗表中的值：<br>\\[\\alpha \\beta (e) \\le \\hat \\alpha (e) + \\hat \\beta (e) = \\hat {\\alpha \\beta} (e)\\]</p>\n<p>所以当$\\hat {\\alpha \\beta} (e) &lt; lb$时，从分析表中删除这条边。虽然搜索空间减少了，但是不影响算法的迭代轮数。</p>\n<p>虽然在<code>expand-chart()</code>这一步要扩展收缩符号为下一层所有符号，但是实际运行起来时间比普通的CKY算法大大减少。</p>\n<h2 id=\"K-best扩展\"><a href=\"#K-best扩展\" class=\"headerlink\" title=\"K-best扩展\"></a>K-best扩展</h2><p><img src=\"4.jpg\" alt></p>\n<p>基本框架和1-best是一样的，主要思路就是首先求出最优句法树，如果包含收缩符号，那么就下面步骤和1-best一样。否则的话求出后面k-1棵最优的句法树，如果都不包含收缩符号，直接返回k-best棵句法树。否则从中选出最好的一棵含有收缩符号的句法树，下面的步骤和1-best一样。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>数据集用的是PTB中长度小于35的句子。<br><img src=\"5.jpg\" alt></p>\n<p>上面这张表显示出，IVP算法的边的数量远远小于CKY算法，虽然迭代次数大大增加，但是总时间仍然远远小于CKY算法，而且边数减少了之后inside和outside算法的时间可以忽略不计了。最后一行是平均数据。<br><img src=\"6.jpg\" alt><br>上图说明了，当k较小时，IVP算法时间快于普通的k-best算法，但是k大了之后就变慢了，原因如下图所示：<br><img src=\"7.jpg\" alt><br>当k太大了之后，lb不能很好的得到最优得分的下界，所以无法有效地剪枝。而且k越小，算法收敛的也越快。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><hr>\n<p>提出了K-best IVP算法，基本框架还是inside-outside算法。</p>\n<p>但是全文自始自终没有提及算法的准确率，感觉应该不是很高，不知道有没有又高又快的优化方法？</p>\n"},{"title":"What's Going On in Neural Constituency Parsers? An Analysis","date":"2018-07-03T15:35:31.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=27890306&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[What's Going On in Neural Constituency Parsers? An Analysis](https://arxiv.org/pdf/1804.07853.pdf)\n**代码地址：**[github](https://github.com/dgaddy/parser-analysis)\n\n![](1.jpg)\n\n# 摘要\n---\n最近几年，成分句法分析的方法发生了巨大的变化。传统的有基于PCFG的CKY算法，最近几年随着神经网络的兴起又产生了基于转移的方法、CRF句法分析、重排序方法等等。\n\n本文是伯克利大学在NAACL18提出的一种基于神经网络的句法分析方法，和传统的方法不同的是，完全不使用语法规则和词汇特征，只需要用神经网络学习出短语的表示即可。通过实验可以发现，神经网络的确也很好的隐式学习出了传统的方法显式用到的语法规则和其他一些特征。在PTB数据集上，该方法达到了92.08%的F1值，这也直接超过了传统的大多数方法。而在下一篇伯克利的ACL18论文中，他们提出的基于Multi-Head Attention的成分句法分析方法更是达到了95.13%的F1值。\n\n# 介绍\n---\n在过去几年，成分句法分析方法发生了巨大的变化。最大的变化就是语法规则和人工的词汇特征变得越来越不那么重要，取而代之的用循环神经网络学习短语的表示，但是还没有什么人对这种神经网络表示的有效性做研究分析。本文提出了一种用RNN学习表示用来句法分析的模型，并对模型的各个方面进行了分析。\n\n# 句法分析模型\n---\n## 模型总览\n和传统的CKY算法一样，该模型还是采用动态规划的算法求解每个短语的最大得分对应的类别以及分割点。只不过这里的短语得分不再是产生式概率之积，而是用RNN训练出来的短语得分。\n\n用$s(i,j,l)$表示短语$x_{ij}$类别为$l$的得分，句法树$T$的得分表示为所有产生式的得分总和：\n\\\\[s(T) = \\sum\\limits_{(i,j,l) \\in T} {s(i,j,l)} \\\\]\n\n**值得一提的是，该句法分析模型不需要句法树是二叉树，所以可以直接分析出$n$叉树结构。**\n\n模型的任务依然是寻找得分最高的句法分析树：\n\\\\[\\hat T = \\mathop {\\arg \\max }\\limits_T s(T)\\\\]\n\n短语得分$s(i,j,l)$的计算可以通过三个部分实现：单词表示、短语表示、短语类别得分。\n\n## 单词表示\n首先采用Char-BiLSTM训练出每个单词的字符级别的表示，这种表示方法已经很常见了，优点是可以捕捉到单词的前缀后缀等信息，还可以解决未登录词的表示问题。\n\n最后将字符级别的词表示和预训练的词向量拼接起来作为最终的单词表示。也可以用外部序列标注器预测出单词的词性，并拼接上去作为输入，但是在这里只要Char-BiLSTM训练的足够好，就不需要词性标注了。\n\n## 短语表示\n对句子单词序列跑一遍双向LSTM，得到每个单词的前向后向上下文表示${ {\\bf{f}}_i}$和${ {\\bf{b}}_i}$，然后对于短语$x_{ij}$，用两者的上下文表示的差值拼接起来作为该短语的向量表示：\n\\\\[{ {\\bf{r}}_{ij}} = [{ {\\bf{f}}_j} - { {\\bf{f}}_i},{ {\\bf{b}}_i} - { {\\bf{b}}_j}]\\\\]\n图1是一个具体的例子：\n![](2.jpg)\n\n## 短语类别得分\n最后将短语表示输入到一个单层前馈神经网络中，输出得分向量，其中得分向量每个维度就对应了每个类别的概率。具体计算公式如下：\n\\\\[s(i,j,l) = {[{ {\\bf{W}}_2}ReLU({ {\\bf{W}}_1}{ {\\bf{r}}_{ij}} + { {\\bf{z}}_1}) + { {\\bf{z}}_2}]_l}\\\\]\n\n## 句法分析\n虽然现在是$n$叉树，但是依然可以用CKY算法来进行句法分析。这时候就需要定义一个虚拟短语类别$\\emptyset$，表示实际上不能构成短语的临时短语。例如对于产生式$A \\to BCD$，分析的时候可以将其分析为$A \\to \\emptyset D,\\emptyset  \\to BC$。定义虚拟短语类别的得分为0，即$s(i,j,\\emptyset ) = 0$。\n\n定义${s_{best}}(i,j)$为短语$x_{ij}$得分最高的句法分析树的得分。首先对长度为1的短语即单词进行初始化：\n\\\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l s(i,i + 1,l)\\\\]\n然后对于短语$x_{ij}$，运用动态规划算法计算得分最高的句法分析树：\n\\\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l s(i,j,l) + \\mathop {\\max }\\limits_k [{s_{best}}(i,k) + {s_{best}}(k,j)]\\\\]\n注意到这里对类别的预测和分割点的预测是分开的，短语的最高分数就是最优子树的每个结点的类别得分之和。\n\n自底向上进行计算，最终整个句子的最高得分就是${s_{best}}(0,n)$。然后自顶向下回溯得到整个句子的句法分析树，注意如果回溯遇到了虚拟短语类别$\\emptyset$，就直接忽略它，继续往下回溯。\n\n整个算法的时间复杂度为$O({n^3} + L{n^2})$，因为没有用到语法规则，所以$n^3$的常数系数$\\left| G \\right|$就没有了，复杂度大大降低！\n\n## 模型训练\n损失函数依然使用的是max-margin，即\n\\\\[\\mathcal L = \\max \\left( {0,\\mathop {\\max }\\limits_T [s(T) + \\Delta (T,{T^\\*})] - s({T^\\*})} \\right)\\\\]\n这里提到了一点加快计算的方法，${\\Delta (T,{T^\\*})}$可以融入到动态规划算法中一起计算，即将短语类别得分$s(i,j,l)$替换为$s(i,j,l) + 1[l \\ne l_{ij}^\\*]$，其中$l_{ij}^\\*$是标准树中短语$x_{ij}$的类别。\n\n## 实验结果\n经过10轮训练之后，模型在验证集上的F1值达到了92.22%，在测试集上的F1值为92.08%。\n","source":"_posts/NAACL18-ConParsing.md","raw":"---\ntitle: What's Going On in Neural Constituency Parsers? An Analysis\ndate: 2018-07-03 23:35:31\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NAACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=27890306&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[What's Going On in Neural Constituency Parsers? An Analysis](https://arxiv.org/pdf/1804.07853.pdf)\n**代码地址：**[github](https://github.com/dgaddy/parser-analysis)\n\n![](1.jpg)\n\n# 摘要\n---\n最近几年，成分句法分析的方法发生了巨大的变化。传统的有基于PCFG的CKY算法，最近几年随着神经网络的兴起又产生了基于转移的方法、CRF句法分析、重排序方法等等。\n\n本文是伯克利大学在NAACL18提出的一种基于神经网络的句法分析方法，和传统的方法不同的是，完全不使用语法规则和词汇特征，只需要用神经网络学习出短语的表示即可。通过实验可以发现，神经网络的确也很好的隐式学习出了传统的方法显式用到的语法规则和其他一些特征。在PTB数据集上，该方法达到了92.08%的F1值，这也直接超过了传统的大多数方法。而在下一篇伯克利的ACL18论文中，他们提出的基于Multi-Head Attention的成分句法分析方法更是达到了95.13%的F1值。\n\n# 介绍\n---\n在过去几年，成分句法分析方法发生了巨大的变化。最大的变化就是语法规则和人工的词汇特征变得越来越不那么重要，取而代之的用循环神经网络学习短语的表示，但是还没有什么人对这种神经网络表示的有效性做研究分析。本文提出了一种用RNN学习表示用来句法分析的模型，并对模型的各个方面进行了分析。\n\n# 句法分析模型\n---\n## 模型总览\n和传统的CKY算法一样，该模型还是采用动态规划的算法求解每个短语的最大得分对应的类别以及分割点。只不过这里的短语得分不再是产生式概率之积，而是用RNN训练出来的短语得分。\n\n用$s(i,j,l)$表示短语$x_{ij}$类别为$l$的得分，句法树$T$的得分表示为所有产生式的得分总和：\n\\\\[s(T) = \\sum\\limits_{(i,j,l) \\in T} {s(i,j,l)} \\\\]\n\n**值得一提的是，该句法分析模型不需要句法树是二叉树，所以可以直接分析出$n$叉树结构。**\n\n模型的任务依然是寻找得分最高的句法分析树：\n\\\\[\\hat T = \\mathop {\\arg \\max }\\limits_T s(T)\\\\]\n\n短语得分$s(i,j,l)$的计算可以通过三个部分实现：单词表示、短语表示、短语类别得分。\n\n## 单词表示\n首先采用Char-BiLSTM训练出每个单词的字符级别的表示，这种表示方法已经很常见了，优点是可以捕捉到单词的前缀后缀等信息，还可以解决未登录词的表示问题。\n\n最后将字符级别的词表示和预训练的词向量拼接起来作为最终的单词表示。也可以用外部序列标注器预测出单词的词性，并拼接上去作为输入，但是在这里只要Char-BiLSTM训练的足够好，就不需要词性标注了。\n\n## 短语表示\n对句子单词序列跑一遍双向LSTM，得到每个单词的前向后向上下文表示${ {\\bf{f}}_i}$和${ {\\bf{b}}_i}$，然后对于短语$x_{ij}$，用两者的上下文表示的差值拼接起来作为该短语的向量表示：\n\\\\[{ {\\bf{r}}_{ij}} = [{ {\\bf{f}}_j} - { {\\bf{f}}_i},{ {\\bf{b}}_i} - { {\\bf{b}}_j}]\\\\]\n图1是一个具体的例子：\n![](2.jpg)\n\n## 短语类别得分\n最后将短语表示输入到一个单层前馈神经网络中，输出得分向量，其中得分向量每个维度就对应了每个类别的概率。具体计算公式如下：\n\\\\[s(i,j,l) = {[{ {\\bf{W}}_2}ReLU({ {\\bf{W}}_1}{ {\\bf{r}}_{ij}} + { {\\bf{z}}_1}) + { {\\bf{z}}_2}]_l}\\\\]\n\n## 句法分析\n虽然现在是$n$叉树，但是依然可以用CKY算法来进行句法分析。这时候就需要定义一个虚拟短语类别$\\emptyset$，表示实际上不能构成短语的临时短语。例如对于产生式$A \\to BCD$，分析的时候可以将其分析为$A \\to \\emptyset D,\\emptyset  \\to BC$。定义虚拟短语类别的得分为0，即$s(i,j,\\emptyset ) = 0$。\n\n定义${s_{best}}(i,j)$为短语$x_{ij}$得分最高的句法分析树的得分。首先对长度为1的短语即单词进行初始化：\n\\\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l s(i,i + 1,l)\\\\]\n然后对于短语$x_{ij}$，运用动态规划算法计算得分最高的句法分析树：\n\\\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l s(i,j,l) + \\mathop {\\max }\\limits_k [{s_{best}}(i,k) + {s_{best}}(k,j)]\\\\]\n注意到这里对类别的预测和分割点的预测是分开的，短语的最高分数就是最优子树的每个结点的类别得分之和。\n\n自底向上进行计算，最终整个句子的最高得分就是${s_{best}}(0,n)$。然后自顶向下回溯得到整个句子的句法分析树，注意如果回溯遇到了虚拟短语类别$\\emptyset$，就直接忽略它，继续往下回溯。\n\n整个算法的时间复杂度为$O({n^3} + L{n^2})$，因为没有用到语法规则，所以$n^3$的常数系数$\\left| G \\right|$就没有了，复杂度大大降低！\n\n## 模型训练\n损失函数依然使用的是max-margin，即\n\\\\[\\mathcal L = \\max \\left( {0,\\mathop {\\max }\\limits_T [s(T) + \\Delta (T,{T^\\*})] - s({T^\\*})} \\right)\\\\]\n这里提到了一点加快计算的方法，${\\Delta (T,{T^\\*})}$可以融入到动态规划算法中一起计算，即将短语类别得分$s(i,j,l)$替换为$s(i,j,l) + 1[l \\ne l_{ij}^\\*]$，其中$l_{ij}^\\*$是标准树中短语$x_{ij}$的类别。\n\n## 实验结果\n经过10轮训练之后，模型在验证集上的F1值达到了92.22%，在测试集上的F1值为92.08%。\n","slug":"NAACL18-ConParsing","published":1,"updated":"2019-07-20T04:30:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982bi004f7sweu04gv5xr","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=27890306&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/pdf/1804.07853.pdf\" target=\"_blank\" rel=\"noopener\">What’s Going On in Neural Constituency Parsers? An Analysis</a><br><strong>代码地址：</strong><a href=\"https://github.com/dgaddy/parser-analysis\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p><img src=\"1.jpg\" alt></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>最近几年，成分句法分析的方法发生了巨大的变化。传统的有基于PCFG的CKY算法，最近几年随着神经网络的兴起又产生了基于转移的方法、CRF句法分析、重排序方法等等。</p>\n<p>本文是伯克利大学在NAACL18提出的一种基于神经网络的句法分析方法，和传统的方法不同的是，完全不使用语法规则和词汇特征，只需要用神经网络学习出短语的表示即可。通过实验可以发现，神经网络的确也很好的隐式学习出了传统的方法显式用到的语法规则和其他一些特征。在PTB数据集上，该方法达到了92.08%的F1值，这也直接超过了传统的大多数方法。而在下一篇伯克利的ACL18论文中，他们提出的基于Multi-Head Attention的成分句法分析方法更是达到了95.13%的F1值。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>在过去几年，成分句法分析方法发生了巨大的变化。最大的变化就是语法规则和人工的词汇特征变得越来越不那么重要，取而代之的用循环神经网络学习短语的表示，但是还没有什么人对这种神经网络表示的有效性做研究分析。本文提出了一种用RNN学习表示用来句法分析的模型，并对模型的各个方面进行了分析。</p>\n<h1 id=\"句法分析模型\"><a href=\"#句法分析模型\" class=\"headerlink\" title=\"句法分析模型\"></a>句法分析模型</h1><hr>\n<h2 id=\"模型总览\"><a href=\"#模型总览\" class=\"headerlink\" title=\"模型总览\"></a>模型总览</h2><p>和传统的CKY算法一样，该模型还是采用动态规划的算法求解每个短语的最大得分对应的类别以及分割点。只不过这里的短语得分不再是产生式概率之积，而是用RNN训练出来的短语得分。</p>\n<p>用$s(i,j,l)$表示短语$x_{ij}$类别为$l$的得分，句法树$T$的得分表示为所有产生式的得分总和：<br>\\[s(T) = \\sum\\limits_{(i,j,l) \\in T} {s(i,j,l)} \\]</p>\n<p><strong>值得一提的是，该句法分析模型不需要句法树是二叉树，所以可以直接分析出$n$叉树结构。</strong></p>\n<p>模型的任务依然是寻找得分最高的句法分析树：<br>\\[\\hat T = \\mathop {\\arg \\max }\\limits_T s(T)\\]</p>\n<p>短语得分$s(i,j,l)$的计算可以通过三个部分实现：单词表示、短语表示、短语类别得分。</p>\n<h2 id=\"单词表示\"><a href=\"#单词表示\" class=\"headerlink\" title=\"单词表示\"></a>单词表示</h2><p>首先采用Char-BiLSTM训练出每个单词的字符级别的表示，这种表示方法已经很常见了，优点是可以捕捉到单词的前缀后缀等信息，还可以解决未登录词的表示问题。</p>\n<p>最后将字符级别的词表示和预训练的词向量拼接起来作为最终的单词表示。也可以用外部序列标注器预测出单词的词性，并拼接上去作为输入，但是在这里只要Char-BiLSTM训练的足够好，就不需要词性标注了。</p>\n<h2 id=\"短语表示\"><a href=\"#短语表示\" class=\"headerlink\" title=\"短语表示\"></a>短语表示</h2><p>对句子单词序列跑一遍双向LSTM，得到每个单词的前向后向上下文表示${ {\\bf{f}}_i}$和${ {\\bf{b}}_i}$，然后对于短语$x_{ij}$，用两者的上下文表示的差值拼接起来作为该短语的向量表示：<br>\\[{ {\\bf{r}}_{ij}} = [{ {\\bf{f}}_j} - { {\\bf{f}}_i},{ {\\bf{b}}_i} - { {\\bf{b}}_j}]\\]<br>图1是一个具体的例子：<br><img src=\"2.jpg\" alt></p>\n<h2 id=\"短语类别得分\"><a href=\"#短语类别得分\" class=\"headerlink\" title=\"短语类别得分\"></a>短语类别得分</h2><p>最后将短语表示输入到一个单层前馈神经网络中，输出得分向量，其中得分向量每个维度就对应了每个类别的概率。具体计算公式如下：<br>\\[s(i,j,l) = {[{ {\\bf{W}}_2}ReLU({ {\\bf{W}}_1}{ {\\bf{r}}_{ij}} + { {\\bf{z}}_1}) + { {\\bf{z}}_2}]_l}\\]</p>\n<h2 id=\"句法分析\"><a href=\"#句法分析\" class=\"headerlink\" title=\"句法分析\"></a>句法分析</h2><p>虽然现在是$n$叉树，但是依然可以用CKY算法来进行句法分析。这时候就需要定义一个虚拟短语类别$\\emptyset$，表示实际上不能构成短语的临时短语。例如对于产生式$A \\to BCD$，分析的时候可以将其分析为$A \\to \\emptyset D,\\emptyset  \\to BC$。定义虚拟短语类别的得分为0，即$s(i,j,\\emptyset ) = 0$。</p>\n<p>定义${s_{best}}(i,j)$为短语$x_{ij}$得分最高的句法分析树的得分。首先对长度为1的短语即单词进行初始化：<br>\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l s(i,i + 1,l)\\]<br>然后对于短语$x_{ij}$，运用动态规划算法计算得分最高的句法分析树：<br>\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l s(i,j,l) + \\mathop {\\max }\\limits_k [{s_{best}}(i,k) + {s_{best}}(k,j)]\\]<br>注意到这里对类别的预测和分割点的预测是分开的，短语的最高分数就是最优子树的每个结点的类别得分之和。</p>\n<p>自底向上进行计算，最终整个句子的最高得分就是${s_{best}}(0,n)$。然后自顶向下回溯得到整个句子的句法分析树，注意如果回溯遇到了虚拟短语类别$\\emptyset$，就直接忽略它，继续往下回溯。</p>\n<p>整个算法的时间复杂度为$O({n^3} + L{n^2})$，因为没有用到语法规则，所以$n^3$的常数系数$\\left| G \\right|$就没有了，复杂度大大降低！</p>\n<h2 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h2><p>损失函数依然使用的是max-margin，即<br>\\[\\mathcal L = \\max \\left( {0,\\mathop {\\max }\\limits_T [s(T) + \\Delta (T,{T^*})] - s({T^*})} \\right)\\]<br>这里提到了一点加快计算的方法，${\\Delta (T,{T^*})}$可以融入到动态规划算法中一起计算，即将短语类别得分$s(i,j,l)$替换为$s(i,j,l) + 1[l \\ne l_{ij}^*]$，其中$l_{ij}^*$是标准树中短语$x_{ij}$的类别。</p>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>经过10轮训练之后，模型在验证集上的F1值达到了92.22%，在测试集上的F1值为92.08%。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=27890306&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/pdf/1804.07853.pdf\" target=\"_blank\" rel=\"noopener\">What’s Going On in Neural Constituency Parsers? An Analysis</a><br><strong>代码地址：</strong><a href=\"https://github.com/dgaddy/parser-analysis\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p><img src=\"1.jpg\" alt></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>最近几年，成分句法分析的方法发生了巨大的变化。传统的有基于PCFG的CKY算法，最近几年随着神经网络的兴起又产生了基于转移的方法、CRF句法分析、重排序方法等等。</p>\n<p>本文是伯克利大学在NAACL18提出的一种基于神经网络的句法分析方法，和传统的方法不同的是，完全不使用语法规则和词汇特征，只需要用神经网络学习出短语的表示即可。通过实验可以发现，神经网络的确也很好的隐式学习出了传统的方法显式用到的语法规则和其他一些特征。在PTB数据集上，该方法达到了92.08%的F1值，这也直接超过了传统的大多数方法。而在下一篇伯克利的ACL18论文中，他们提出的基于Multi-Head Attention的成分句法分析方法更是达到了95.13%的F1值。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>在过去几年，成分句法分析方法发生了巨大的变化。最大的变化就是语法规则和人工的词汇特征变得越来越不那么重要，取而代之的用循环神经网络学习短语的表示，但是还没有什么人对这种神经网络表示的有效性做研究分析。本文提出了一种用RNN学习表示用来句法分析的模型，并对模型的各个方面进行了分析。</p>\n<h1 id=\"句法分析模型\"><a href=\"#句法分析模型\" class=\"headerlink\" title=\"句法分析模型\"></a>句法分析模型</h1><hr>\n<h2 id=\"模型总览\"><a href=\"#模型总览\" class=\"headerlink\" title=\"模型总览\"></a>模型总览</h2><p>和传统的CKY算法一样，该模型还是采用动态规划的算法求解每个短语的最大得分对应的类别以及分割点。只不过这里的短语得分不再是产生式概率之积，而是用RNN训练出来的短语得分。</p>\n<p>用$s(i,j,l)$表示短语$x_{ij}$类别为$l$的得分，句法树$T$的得分表示为所有产生式的得分总和：<br>\\[s(T) = \\sum\\limits_{(i,j,l) \\in T} {s(i,j,l)} \\]</p>\n<p><strong>值得一提的是，该句法分析模型不需要句法树是二叉树，所以可以直接分析出$n$叉树结构。</strong></p>\n<p>模型的任务依然是寻找得分最高的句法分析树：<br>\\[\\hat T = \\mathop {\\arg \\max }\\limits_T s(T)\\]</p>\n<p>短语得分$s(i,j,l)$的计算可以通过三个部分实现：单词表示、短语表示、短语类别得分。</p>\n<h2 id=\"单词表示\"><a href=\"#单词表示\" class=\"headerlink\" title=\"单词表示\"></a>单词表示</h2><p>首先采用Char-BiLSTM训练出每个单词的字符级别的表示，这种表示方法已经很常见了，优点是可以捕捉到单词的前缀后缀等信息，还可以解决未登录词的表示问题。</p>\n<p>最后将字符级别的词表示和预训练的词向量拼接起来作为最终的单词表示。也可以用外部序列标注器预测出单词的词性，并拼接上去作为输入，但是在这里只要Char-BiLSTM训练的足够好，就不需要词性标注了。</p>\n<h2 id=\"短语表示\"><a href=\"#短语表示\" class=\"headerlink\" title=\"短语表示\"></a>短语表示</h2><p>对句子单词序列跑一遍双向LSTM，得到每个单词的前向后向上下文表示${ {\\bf{f}}_i}$和${ {\\bf{b}}_i}$，然后对于短语$x_{ij}$，用两者的上下文表示的差值拼接起来作为该短语的向量表示：<br>\\[{ {\\bf{r}}_{ij}} = [{ {\\bf{f}}_j} - { {\\bf{f}}_i},{ {\\bf{b}}_i} - { {\\bf{b}}_j}]\\]<br>图1是一个具体的例子：<br><img src=\"2.jpg\" alt></p>\n<h2 id=\"短语类别得分\"><a href=\"#短语类别得分\" class=\"headerlink\" title=\"短语类别得分\"></a>短语类别得分</h2><p>最后将短语表示输入到一个单层前馈神经网络中，输出得分向量，其中得分向量每个维度就对应了每个类别的概率。具体计算公式如下：<br>\\[s(i,j,l) = {[{ {\\bf{W}}_2}ReLU({ {\\bf{W}}_1}{ {\\bf{r}}_{ij}} + { {\\bf{z}}_1}) + { {\\bf{z}}_2}]_l}\\]</p>\n<h2 id=\"句法分析\"><a href=\"#句法分析\" class=\"headerlink\" title=\"句法分析\"></a>句法分析</h2><p>虽然现在是$n$叉树，但是依然可以用CKY算法来进行句法分析。这时候就需要定义一个虚拟短语类别$\\emptyset$，表示实际上不能构成短语的临时短语。例如对于产生式$A \\to BCD$，分析的时候可以将其分析为$A \\to \\emptyset D,\\emptyset  \\to BC$。定义虚拟短语类别的得分为0，即$s(i,j,\\emptyset ) = 0$。</p>\n<p>定义${s_{best}}(i,j)$为短语$x_{ij}$得分最高的句法分析树的得分。首先对长度为1的短语即单词进行初始化：<br>\\[{s_{best}}(i,i + 1) = \\mathop {\\max }\\limits_l s(i,i + 1,l)\\]<br>然后对于短语$x_{ij}$，运用动态规划算法计算得分最高的句法分析树：<br>\\[{s_{best}}(i,j) = \\mathop {\\max }\\limits_l s(i,j,l) + \\mathop {\\max }\\limits_k [{s_{best}}(i,k) + {s_{best}}(k,j)]\\]<br>注意到这里对类别的预测和分割点的预测是分开的，短语的最高分数就是最优子树的每个结点的类别得分之和。</p>\n<p>自底向上进行计算，最终整个句子的最高得分就是${s_{best}}(0,n)$。然后自顶向下回溯得到整个句子的句法分析树，注意如果回溯遇到了虚拟短语类别$\\emptyset$，就直接忽略它，继续往下回溯。</p>\n<p>整个算法的时间复杂度为$O({n^3} + L{n^2})$，因为没有用到语法规则，所以$n^3$的常数系数$\\left| G \\right|$就没有了，复杂度大大降低！</p>\n<h2 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h2><p>损失函数依然使用的是max-margin，即<br>\\[\\mathcal L = \\max \\left( {0,\\mathop {\\max }\\limits_T [s(T) + \\Delta (T,{T^*})] - s({T^*})} \\right)\\]<br>这里提到了一点加快计算的方法，${\\Delta (T,{T^*})}$可以融入到动态规划算法中一起计算，即将短语类别得分$s(i,j,l)$替换为$s(i,j,l) + 1[l \\ne l_{ij}^*]$，其中$l_{ij}^*$是标准树中短语$x_{ij}$的类别。</p>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>经过10轮训练之后，模型在验证集上的F1值达到了92.22%，在测试集上的F1值为92.08%。</p>\n"},{"title":"Better, Faster, Stronger Sequence Tagging Constituent Parsers","date":"2019-03-11T09:45:18.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=416892296&auto=1&height=66\"></iframe></div>\n\n> 为了看懂论文里的策略梯度，又去把强化学习看了一遍。。。\n\n**论文地址：**[Better, Faster, Stronger Sequence Tagging Constituent Parsers](https://arxiv.org/abs/1902.10985)\n\n# 介绍\n---\n这篇论文主要是在之前的那篇论文[Constituent Parsing as Sequence Labeling](https://godweiyang.com/2019/03/11/ConParSeqLab/)基础上解决了如下三个问题：\n* 太长的短语预测错误率高。\n* 输出空间太大导致label稀疏性。\n* 贪心解码导致的错误传播。\n\n本文提出的解决方法分别是：\n* 采用融合了相对编码和绝对编码的动态编码。\n* 将预测任务分解为多个子任务。\n* 采用辅助任务和策略梯度。\n\n# 三大问题以及解决方法\n---\n## 过长短语预测的高错误率\n由下面这张图可以看出，当$n_i$太小时，准确率就会大幅下降。这个问题主要体现在过长短语的闭合上，右括号的预测尤其困难。其实这也跟数据稀疏性有很大关系，训练集中过长短语毕竟占少数。\n![](1.jpg)\n\n解决方法就是采用动态编码，如下图所示：\n![](2.jpg)\n第一行是相对值编码，第二行是绝对值编码，之前文章都已经解释过了。第三行是结合了上面两种编码的动态编码，具体取值情况是大多数时候都还采用相对值编码，因为毕竟相对值编码空间比较小，可以适当缓解数据稀疏性。但是当满足如下两种情况的时候，就采用绝对值编码：\n* 绝对值$n_t' \\leq 3$，也就是说CA的个数不能超过3个，这样也是为了降低数据的稀疏性。\n* 相对值$n_t \\leq -2$，也就是说将上图中准确率比较低的那些负数值全部用绝对值替代了，在句法树中表现为$w_{t+1}$所在的子树比$w_t$低两层以上。\n\n## 输出空间太大导致label稀疏性\n这个问题主要是由于三元组$(n_t, c_t, u_t)$太稀疏了导致的。假设$n_t \\in N, c_t \\in C, u_t \\in U$，那么这个三元组的状态空间是$\\left| N \\right| \\times \\left| C \\right| \\times \\left| U \\right|$，可以通过将三元组分解为三个不同的子任务将复杂度降低为$\\left| N \\right| + \\left| C \\right| + \\left| U \\right|$。最后的损失函数定义为三个子任务的损失之和：\n\\\\[\n\\mathcal{L} = \\mathcal{L}\\_n + \\mathcal{L}\\_c + \\mathcal{L}\\_u\n\\\\]\n具体实现上，可以将任务$U$的输出给任务$N$和$C$作为输入。\n\n## 贪心解码导致的错误传播\n这个问题在基于贪心的方法中基本都存在，也就是所谓的一步错步步错，这里主要提出了两种解决方法。\n\n**辅助任务** 辅助任务主要就是用来帮助主任务学习到一些不太容易学到的信息。这里才用了两个辅助任务，一个是在预测$n_t$的同时再预测一个$n_{t+1}$，这样就能往后多预测一步，适当的减少了贪心的影响。另一个方法就是将之前博客写到的句法距离（syntactic distances）加入到模型中一起预测：\n![](3.jpg)\n对于不同的辅助任务，最后将他们的损失求和加到最终的损失函数中去：\n\\\\[\n\\mathcal{L} = \\mathcal{L}\\_n + \\mathcal{L}\\_c + \\mathcal{L}\\_u + \\beta \\sum\\_a \\mathcal{L}\\_a\n\\\\]\n\n**策略梯度** 这个方法可以从全局的角度来对模型进行优化。假设模型在$t$时刻的状态为$s_t$，输出标签为$l_t = (n_t, c_t, u_t)$，那么模型选择$l_t$的概率定义为策略$\\pi$，模型最终可以获得的奖励为$\\mathcal R_{tree}$，定义为句法树的F1值。\n\n定义句法树的概率为每一步决策的概率之积：\n\\\\[\np(tree) = \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )}\n\\\\]\n所以模型最终就是要最大化如下的奖励：\n\\\\[\n\\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}p(tree)}\n\\\\]\n按照梯度上升的方向更新参数$\\theta$，求梯度可得：\n\\\\[\n\\begin{array}{l}\\Delta \\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}\\Delta p(tree)} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\frac{ {\\Delta p(tree)}}{ {p(tree)}}} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\Delta \\log p(tree)} \\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\end{array}\n\\\\]\n将$p(tree)$代入可得：\n\\\\[\n\\begin{array}{l}\\Delta \\mathcal R = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )} )\\\\ = {\\mathbb{E}_{tree \\sim p}}(\\sum\\limits_{t = 1}^T { {\\mathcal R_{tree}}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} )\\\\ \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\mathcal R_{i}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} } \\end{array}\n\\\\]\n其中$\\mathcal R_{i}$是根据分布$p$采样出来的$N$棵句法树的奖励。\n\n具体实现的时候有好几个小Tips。\n\n第一个就是要将奖励减去一个baseline，这里定义为模型直接根据贪心求得的句法树的F1值：\n\\\\[\n\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i})} }\n\\\\]\n这么做的目的就是为了让奖励有正有负，不然全部都是正数的话，因为采样不可能全部采样到，可能会导致高概率的样本概率越来越高，而没有采样到的低概率样本可能奖励非常高，却因此概率越来越低。\n\n第二个Tip就是加入熵作为正则项：\n\\\\[\n\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ))} }\n\\\\]\n目的就是使概率尽量不要太小，不然的话采样数不够的话就有可能造成采样不到小概率的样本。\n\n还有就是给策略加入噪声：\n\\\\[\n\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta (\\log \\pi ({l_t}|{s_t};\\theta ) + N)({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ) + N)} }\n\\\\]\n目的同样是加大概率，防止概率太接近于0，当然这个可加可不加。。。\n\n# 实验结果\n---\n首先测试了不同设置的影响：\n![](4.jpg)\n可以看出上面提到的几种方法对性能都有提升，其中采用动态编码、多任务（也就是减少输出空间）、辅助任务（主要是预测前一个$n_{t-1}$）还有策略梯度可以获得最好的结果。\n\n最终模型在测试集上取得了90.6的F1值，虽然不是很高，但比之前的序列标注模型提升还是不少。\n![](5.jpg)\n\n最后再来看一下模型在负数预测上的准确率，可以看出有了非常大的提升：\n![](6.jpg)\n\n# 总结\n---\n这篇论文提出了不少的小Tips来提升序列模型的准确率，但是效果却还是远远低于syntactic distances那篇论文（F1值91.8），具体原因我也不得而知，我猜测跟树到序列映射编码关系可能不是特别大，可能还是跟序列建模有关，那篇论文的序列采用了两次LSTM，中间还夹杂了一次CNN卷积操作。所以编码器的好坏还是直接决定了最后性能的好坏，怪不得Elmo和Bert的效果那么的突出。","source":"_posts/NAACL19-ConParsing.md","raw":"---\ntitle: Better, Faster, Stronger Sequence Tagging Constituent Parsers\ndate: 2019-03-11 17:45:18\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NAACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=416892296&auto=1&height=66\"></iframe></div>\n\n> 为了看懂论文里的策略梯度，又去把强化学习看了一遍。。。\n\n**论文地址：**[Better, Faster, Stronger Sequence Tagging Constituent Parsers](https://arxiv.org/abs/1902.10985)\n\n# 介绍\n---\n这篇论文主要是在之前的那篇论文[Constituent Parsing as Sequence Labeling](https://godweiyang.com/2019/03/11/ConParSeqLab/)基础上解决了如下三个问题：\n* 太长的短语预测错误率高。\n* 输出空间太大导致label稀疏性。\n* 贪心解码导致的错误传播。\n\n本文提出的解决方法分别是：\n* 采用融合了相对编码和绝对编码的动态编码。\n* 将预测任务分解为多个子任务。\n* 采用辅助任务和策略梯度。\n\n# 三大问题以及解决方法\n---\n## 过长短语预测的高错误率\n由下面这张图可以看出，当$n_i$太小时，准确率就会大幅下降。这个问题主要体现在过长短语的闭合上，右括号的预测尤其困难。其实这也跟数据稀疏性有很大关系，训练集中过长短语毕竟占少数。\n![](1.jpg)\n\n解决方法就是采用动态编码，如下图所示：\n![](2.jpg)\n第一行是相对值编码，第二行是绝对值编码，之前文章都已经解释过了。第三行是结合了上面两种编码的动态编码，具体取值情况是大多数时候都还采用相对值编码，因为毕竟相对值编码空间比较小，可以适当缓解数据稀疏性。但是当满足如下两种情况的时候，就采用绝对值编码：\n* 绝对值$n_t' \\leq 3$，也就是说CA的个数不能超过3个，这样也是为了降低数据的稀疏性。\n* 相对值$n_t \\leq -2$，也就是说将上图中准确率比较低的那些负数值全部用绝对值替代了，在句法树中表现为$w_{t+1}$所在的子树比$w_t$低两层以上。\n\n## 输出空间太大导致label稀疏性\n这个问题主要是由于三元组$(n_t, c_t, u_t)$太稀疏了导致的。假设$n_t \\in N, c_t \\in C, u_t \\in U$，那么这个三元组的状态空间是$\\left| N \\right| \\times \\left| C \\right| \\times \\left| U \\right|$，可以通过将三元组分解为三个不同的子任务将复杂度降低为$\\left| N \\right| + \\left| C \\right| + \\left| U \\right|$。最后的损失函数定义为三个子任务的损失之和：\n\\\\[\n\\mathcal{L} = \\mathcal{L}\\_n + \\mathcal{L}\\_c + \\mathcal{L}\\_u\n\\\\]\n具体实现上，可以将任务$U$的输出给任务$N$和$C$作为输入。\n\n## 贪心解码导致的错误传播\n这个问题在基于贪心的方法中基本都存在，也就是所谓的一步错步步错，这里主要提出了两种解决方法。\n\n**辅助任务** 辅助任务主要就是用来帮助主任务学习到一些不太容易学到的信息。这里才用了两个辅助任务，一个是在预测$n_t$的同时再预测一个$n_{t+1}$，这样就能往后多预测一步，适当的减少了贪心的影响。另一个方法就是将之前博客写到的句法距离（syntactic distances）加入到模型中一起预测：\n![](3.jpg)\n对于不同的辅助任务，最后将他们的损失求和加到最终的损失函数中去：\n\\\\[\n\\mathcal{L} = \\mathcal{L}\\_n + \\mathcal{L}\\_c + \\mathcal{L}\\_u + \\beta \\sum\\_a \\mathcal{L}\\_a\n\\\\]\n\n**策略梯度** 这个方法可以从全局的角度来对模型进行优化。假设模型在$t$时刻的状态为$s_t$，输出标签为$l_t = (n_t, c_t, u_t)$，那么模型选择$l_t$的概率定义为策略$\\pi$，模型最终可以获得的奖励为$\\mathcal R_{tree}$，定义为句法树的F1值。\n\n定义句法树的概率为每一步决策的概率之积：\n\\\\[\np(tree) = \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )}\n\\\\]\n所以模型最终就是要最大化如下的奖励：\n\\\\[\n\\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}p(tree)}\n\\\\]\n按照梯度上升的方向更新参数$\\theta$，求梯度可得：\n\\\\[\n\\begin{array}{l}\\Delta \\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}\\Delta p(tree)} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\frac{ {\\Delta p(tree)}}{ {p(tree)}}} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\Delta \\log p(tree)} \\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\end{array}\n\\\\]\n将$p(tree)$代入可得：\n\\\\[\n\\begin{array}{l}\\Delta \\mathcal R = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )} )\\\\ = {\\mathbb{E}_{tree \\sim p}}(\\sum\\limits_{t = 1}^T { {\\mathcal R_{tree}}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} )\\\\ \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\mathcal R_{i}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} } \\end{array}\n\\\\]\n其中$\\mathcal R_{i}$是根据分布$p$采样出来的$N$棵句法树的奖励。\n\n具体实现的时候有好几个小Tips。\n\n第一个就是要将奖励减去一个baseline，这里定义为模型直接根据贪心求得的句法树的F1值：\n\\\\[\n\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i})} }\n\\\\]\n这么做的目的就是为了让奖励有正有负，不然全部都是正数的话，因为采样不可能全部采样到，可能会导致高概率的样本概率越来越高，而没有采样到的低概率样本可能奖励非常高，却因此概率越来越低。\n\n第二个Tip就是加入熵作为正则项：\n\\\\[\n\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ))} }\n\\\\]\n目的就是使概率尽量不要太小，不然的话采样数不够的话就有可能造成采样不到小概率的样本。\n\n还有就是给策略加入噪声：\n\\\\[\n\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta (\\log \\pi ({l_t}|{s_t};\\theta ) + N)({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ) + N)} }\n\\\\]\n目的同样是加大概率，防止概率太接近于0，当然这个可加可不加。。。\n\n# 实验结果\n---\n首先测试了不同设置的影响：\n![](4.jpg)\n可以看出上面提到的几种方法对性能都有提升，其中采用动态编码、多任务（也就是减少输出空间）、辅助任务（主要是预测前一个$n_{t-1}$）还有策略梯度可以获得最好的结果。\n\n最终模型在测试集上取得了90.6的F1值，虽然不是很高，但比之前的序列标注模型提升还是不少。\n![](5.jpg)\n\n最后再来看一下模型在负数预测上的准确率，可以看出有了非常大的提升：\n![](6.jpg)\n\n# 总结\n---\n这篇论文提出了不少的小Tips来提升序列模型的准确率，但是效果却还是远远低于syntactic distances那篇论文（F1值91.8），具体原因我也不得而知，我猜测跟树到序列映射编码关系可能不是特别大，可能还是跟序列建模有关，那篇论文的序列采用了两次LSTM，中间还夹杂了一次CNN卷积操作。所以编码器的好坏还是直接决定了最后性能的好坏，怪不得Elmo和Bert的效果那么的突出。","slug":"NAACL19-ConParsing","published":1,"updated":"2019-07-20T04:30:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982bn004h7swe3tv7ud79","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=416892296&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>为了看懂论文里的策略梯度，又去把强化学习看了一遍。。。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/abs/1902.10985\" target=\"_blank\" rel=\"noopener\">Better, Faster, Stronger Sequence Tagging Constituent Parsers</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇论文主要是在之前的那篇论文<a href=\"https://godweiyang.com/2019/03/11/ConParSeqLab/\">Constituent Parsing as Sequence Labeling</a>基础上解决了如下三个问题：</p>\n<ul>\n<li>太长的短语预测错误率高。</li>\n<li>输出空间太大导致label稀疏性。</li>\n<li>贪心解码导致的错误传播。</li>\n</ul>\n<p>本文提出的解决方法分别是：</p>\n<ul>\n<li>采用融合了相对编码和绝对编码的动态编码。</li>\n<li>将预测任务分解为多个子任务。</li>\n<li>采用辅助任务和策略梯度。</li>\n</ul>\n<h1 id=\"三大问题以及解决方法\"><a href=\"#三大问题以及解决方法\" class=\"headerlink\" title=\"三大问题以及解决方法\"></a>三大问题以及解决方法</h1><hr>\n<h2 id=\"过长短语预测的高错误率\"><a href=\"#过长短语预测的高错误率\" class=\"headerlink\" title=\"过长短语预测的高错误率\"></a>过长短语预测的高错误率</h2><p>由下面这张图可以看出，当$n_i$太小时，准确率就会大幅下降。这个问题主要体现在过长短语的闭合上，右括号的预测尤其困难。其实这也跟数据稀疏性有很大关系，训练集中过长短语毕竟占少数。<br><img src=\"1.jpg\" alt></p>\n<p>解决方法就是采用动态编码，如下图所示：<br><img src=\"2.jpg\" alt><br>第一行是相对值编码，第二行是绝对值编码，之前文章都已经解释过了。第三行是结合了上面两种编码的动态编码，具体取值情况是大多数时候都还采用相对值编码，因为毕竟相对值编码空间比较小，可以适当缓解数据稀疏性。但是当满足如下两种情况的时候，就采用绝对值编码：</p>\n<ul>\n<li>绝对值$n_t’ \\leq 3$，也就是说CA的个数不能超过3个，这样也是为了降低数据的稀疏性。</li>\n<li>相对值$n_t \\leq -2$，也就是说将上图中准确率比较低的那些负数值全部用绝对值替代了，在句法树中表现为$w_{t+1}$所在的子树比$w_t$低两层以上。</li>\n</ul>\n<h2 id=\"输出空间太大导致label稀疏性\"><a href=\"#输出空间太大导致label稀疏性\" class=\"headerlink\" title=\"输出空间太大导致label稀疏性\"></a>输出空间太大导致label稀疏性</h2><p>这个问题主要是由于三元组$(n_t, c_t, u_t)$太稀疏了导致的。假设$n_t \\in N, c_t \\in C, u_t \\in U$，那么这个三元组的状态空间是$\\left| N \\right| \\times \\left| C \\right| \\times \\left| U \\right|$，可以通过将三元组分解为三个不同的子任务将复杂度降低为$\\left| N \\right| + \\left| C \\right| + \\left| U \\right|$。最后的损失函数定义为三个子任务的损失之和：<br>\\[<br>\\mathcal{L} = \\mathcal{L}_n + \\mathcal{L}_c + \\mathcal{L}_u<br>\\]<br>具体实现上，可以将任务$U$的输出给任务$N$和$C$作为输入。</p>\n<h2 id=\"贪心解码导致的错误传播\"><a href=\"#贪心解码导致的错误传播\" class=\"headerlink\" title=\"贪心解码导致的错误传播\"></a>贪心解码导致的错误传播</h2><p>这个问题在基于贪心的方法中基本都存在，也就是所谓的一步错步步错，这里主要提出了两种解决方法。</p>\n<p><strong>辅助任务</strong> 辅助任务主要就是用来帮助主任务学习到一些不太容易学到的信息。这里才用了两个辅助任务，一个是在预测$n_t$的同时再预测一个$n_{t+1}$，这样就能往后多预测一步，适当的减少了贪心的影响。另一个方法就是将之前博客写到的句法距离（syntactic distances）加入到模型中一起预测：<br><img src=\"3.jpg\" alt><br>对于不同的辅助任务，最后将他们的损失求和加到最终的损失函数中去：<br>\\[<br>\\mathcal{L} = \\mathcal{L}_n + \\mathcal{L}_c + \\mathcal{L}_u + \\beta \\sum_a \\mathcal{L}_a<br>\\]</p>\n<p><strong>策略梯度</strong> 这个方法可以从全局的角度来对模型进行优化。假设模型在$t$时刻的状态为$s_t$，输出标签为$l_t = (n_t, c_t, u_t)$，那么模型选择$l_t$的概率定义为策略$\\pi$，模型最终可以获得的奖励为$\\mathcal R_{tree}$，定义为句法树的F1值。</p>\n<p>定义句法树的概率为每一步决策的概率之积：<br>\\[<br>p(tree) = \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )}<br>\\]<br>所以模型最终就是要最大化如下的奖励：<br>\\[<br>\\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}p(tree)}<br>\\]<br>按照梯度上升的方向更新参数$\\theta$，求梯度可得：<br>\\[<br>\\begin{array}{l}\\Delta \\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}\\Delta p(tree)} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\frac{ {\\Delta p(tree)}}{ {p(tree)}}} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\Delta \\log p(tree)} \\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\end{array}<br>\\]<br>将$p(tree)$代入可得：<br>\\[<br>\\begin{array}{l}\\Delta \\mathcal R = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )} )\\\\ = {\\mathbb{E}_{tree \\sim p}}(\\sum\\limits_{t = 1}^T { {\\mathcal R_{tree}}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} )\\\\ \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\mathcal R_{i}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} } \\end{array}<br>\\]<br>其中$\\mathcal R_{i}$是根据分布$p$采样出来的$N$棵句法树的奖励。</p>\n<p>具体实现的时候有好几个小Tips。</p>\n<p>第一个就是要将奖励减去一个baseline，这里定义为模型直接根据贪心求得的句法树的F1值：<br>\\[<br>\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i})} }<br>\\]<br>这么做的目的就是为了让奖励有正有负，不然全部都是正数的话，因为采样不可能全部采样到，可能会导致高概率的样本概率越来越高，而没有采样到的低概率样本可能奖励非常高，却因此概率越来越低。</p>\n<p>第二个Tip就是加入熵作为正则项：<br>\\[<br>\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ))} }<br>\\]<br>目的就是使概率尽量不要太小，不然的话采样数不够的话就有可能造成采样不到小概率的样本。</p>\n<p>还有就是给策略加入噪声：<br>\\[<br>\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta (\\log \\pi ({l_t}|{s_t};\\theta ) + N)({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ) + N)} }<br>\\]<br>目的同样是加大概率，防止概率太接近于0，当然这个可加可不加。。。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>首先测试了不同设置的影响：<br><img src=\"4.jpg\" alt><br>可以看出上面提到的几种方法对性能都有提升，其中采用动态编码、多任务（也就是减少输出空间）、辅助任务（主要是预测前一个$n_{t-1}$）还有策略梯度可以获得最好的结果。</p>\n<p>最终模型在测试集上取得了90.6的F1值，虽然不是很高，但比之前的序列标注模型提升还是不少。<br><img src=\"5.jpg\" alt></p>\n<p>最后再来看一下模型在负数预测上的准确率，可以看出有了非常大的提升：<br><img src=\"6.jpg\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文提出了不少的小Tips来提升序列模型的准确率，但是效果却还是远远低于syntactic distances那篇论文（F1值91.8），具体原因我也不得而知，我猜测跟树到序列映射编码关系可能不是特别大，可能还是跟序列建模有关，那篇论文的序列采用了两次LSTM，中间还夹杂了一次CNN卷积操作。所以编码器的好坏还是直接决定了最后性能的好坏，怪不得Elmo和Bert的效果那么的突出。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=416892296&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>为了看懂论文里的策略梯度，又去把强化学习看了一遍。。。</p>\n</blockquote>\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/abs/1902.10985\" target=\"_blank\" rel=\"noopener\">Better, Faster, Stronger Sequence Tagging Constituent Parsers</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇论文主要是在之前的那篇论文<a href=\"https://godweiyang.com/2019/03/11/ConParSeqLab/\">Constituent Parsing as Sequence Labeling</a>基础上解决了如下三个问题：</p>\n<ul>\n<li>太长的短语预测错误率高。</li>\n<li>输出空间太大导致label稀疏性。</li>\n<li>贪心解码导致的错误传播。</li>\n</ul>\n<p>本文提出的解决方法分别是：</p>\n<ul>\n<li>采用融合了相对编码和绝对编码的动态编码。</li>\n<li>将预测任务分解为多个子任务。</li>\n<li>采用辅助任务和策略梯度。</li>\n</ul>\n<h1 id=\"三大问题以及解决方法\"><a href=\"#三大问题以及解决方法\" class=\"headerlink\" title=\"三大问题以及解决方法\"></a>三大问题以及解决方法</h1><hr>\n<h2 id=\"过长短语预测的高错误率\"><a href=\"#过长短语预测的高错误率\" class=\"headerlink\" title=\"过长短语预测的高错误率\"></a>过长短语预测的高错误率</h2><p>由下面这张图可以看出，当$n_i$太小时，准确率就会大幅下降。这个问题主要体现在过长短语的闭合上，右括号的预测尤其困难。其实这也跟数据稀疏性有很大关系，训练集中过长短语毕竟占少数。<br><img src=\"1.jpg\" alt></p>\n<p>解决方法就是采用动态编码，如下图所示：<br><img src=\"2.jpg\" alt><br>第一行是相对值编码，第二行是绝对值编码，之前文章都已经解释过了。第三行是结合了上面两种编码的动态编码，具体取值情况是大多数时候都还采用相对值编码，因为毕竟相对值编码空间比较小，可以适当缓解数据稀疏性。但是当满足如下两种情况的时候，就采用绝对值编码：</p>\n<ul>\n<li>绝对值$n_t’ \\leq 3$，也就是说CA的个数不能超过3个，这样也是为了降低数据的稀疏性。</li>\n<li>相对值$n_t \\leq -2$，也就是说将上图中准确率比较低的那些负数值全部用绝对值替代了，在句法树中表现为$w_{t+1}$所在的子树比$w_t$低两层以上。</li>\n</ul>\n<h2 id=\"输出空间太大导致label稀疏性\"><a href=\"#输出空间太大导致label稀疏性\" class=\"headerlink\" title=\"输出空间太大导致label稀疏性\"></a>输出空间太大导致label稀疏性</h2><p>这个问题主要是由于三元组$(n_t, c_t, u_t)$太稀疏了导致的。假设$n_t \\in N, c_t \\in C, u_t \\in U$，那么这个三元组的状态空间是$\\left| N \\right| \\times \\left| C \\right| \\times \\left| U \\right|$，可以通过将三元组分解为三个不同的子任务将复杂度降低为$\\left| N \\right| + \\left| C \\right| + \\left| U \\right|$。最后的损失函数定义为三个子任务的损失之和：<br>\\[<br>\\mathcal{L} = \\mathcal{L}_n + \\mathcal{L}_c + \\mathcal{L}_u<br>\\]<br>具体实现上，可以将任务$U$的输出给任务$N$和$C$作为输入。</p>\n<h2 id=\"贪心解码导致的错误传播\"><a href=\"#贪心解码导致的错误传播\" class=\"headerlink\" title=\"贪心解码导致的错误传播\"></a>贪心解码导致的错误传播</h2><p>这个问题在基于贪心的方法中基本都存在，也就是所谓的一步错步步错，这里主要提出了两种解决方法。</p>\n<p><strong>辅助任务</strong> 辅助任务主要就是用来帮助主任务学习到一些不太容易学到的信息。这里才用了两个辅助任务，一个是在预测$n_t$的同时再预测一个$n_{t+1}$，这样就能往后多预测一步，适当的减少了贪心的影响。另一个方法就是将之前博客写到的句法距离（syntactic distances）加入到模型中一起预测：<br><img src=\"3.jpg\" alt><br>对于不同的辅助任务，最后将他们的损失求和加到最终的损失函数中去：<br>\\[<br>\\mathcal{L} = \\mathcal{L}_n + \\mathcal{L}_c + \\mathcal{L}_u + \\beta \\sum_a \\mathcal{L}_a<br>\\]</p>\n<p><strong>策略梯度</strong> 这个方法可以从全局的角度来对模型进行优化。假设模型在$t$时刻的状态为$s_t$，输出标签为$l_t = (n_t, c_t, u_t)$，那么模型选择$l_t$的概率定义为策略$\\pi$，模型最终可以获得的奖励为$\\mathcal R_{tree}$，定义为句法树的F1值。</p>\n<p>定义句法树的概率为每一步决策的概率之积：<br>\\[<br>p(tree) = \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )}<br>\\]<br>所以模型最终就是要最大化如下的奖励：<br>\\[<br>\\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}p(tree)}<br>\\]<br>按照梯度上升的方向更新参数$\\theta$，求梯度可得：<br>\\[<br>\\begin{array}{l}\\Delta \\mathcal R = \\sum\\limits_{tree} { {\\mathcal R_{tree}}\\Delta p(tree)} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\frac{ {\\Delta p(tree)}}{ {p(tree)}}} \\\\ = \\sum\\limits_{tree} {p(tree){\\mathcal R_{tree}}\\Delta \\log p(tree)} \\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\end{array}<br>\\]<br>将$p(tree)$代入可得：<br>\\[<br>\\begin{array}{l}\\Delta \\mathcal R = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log p(tree))\\\\ = {\\mathbb{E}_{tree \\sim p}}({\\mathcal R_{tree}}\\Delta \\log \\prod\\limits_{t = 1}^T {\\pi ({l_t}|{s_t};\\theta )} )\\\\ = {\\mathbb{E}_{tree \\sim p}}(\\sum\\limits_{t = 1}^T { {\\mathcal R_{tree}}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} )\\\\ \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\mathcal R_{i}\\Delta \\log \\pi ({l_t}|{s_t};\\theta )} } \\end{array}<br>\\]<br>其中$\\mathcal R_{i}$是根据分布$p$采样出来的$N$棵句法树的奖励。</p>\n<p>具体实现的时候有好几个小Tips。</p>\n<p>第一个就是要将奖励减去一个baseline，这里定义为模型直接根据贪心求得的句法树的F1值：<br>\\[<br>\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i})} }<br>\\]<br>这么做的目的就是为了让奖励有正有负，不然全部都是正数的话，因为采样不可能全部采样到，可能会导致高概率的样本概率越来越高，而没有采样到的低概率样本可能奖励非常高，却因此概率越来越低。</p>\n<p>第二个Tip就是加入熵作为正则项：<br>\\[<br>\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta \\log \\pi ({l_t}|{s_t};\\theta )({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ))} }<br>\\]<br>目的就是使概率尽量不要太小，不然的话采样数不够的话就有可能造成采样不到小概率的样本。</p>\n<p>还有就是给策略加入噪声：<br>\\[<br>\\Delta \\mathcal R \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {\\sum\\limits_{t = 1}^T {\\Delta (\\log \\pi ({l_t}|{s_t};\\theta ) + N)({\\mathcal R_i} - {B_i}) + \\beta \\Delta H(\\pi ({l_t}|{s_t};\\theta ) + N)} }<br>\\]<br>目的同样是加大概率，防止概率太接近于0，当然这个可加可不加。。。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>首先测试了不同设置的影响：<br><img src=\"4.jpg\" alt><br>可以看出上面提到的几种方法对性能都有提升，其中采用动态编码、多任务（也就是减少输出空间）、辅助任务（主要是预测前一个$n_{t-1}$）还有策略梯度可以获得最好的结果。</p>\n<p>最终模型在测试集上取得了90.6的F1值，虽然不是很高，但比之前的序列标注模型提升还是不少。<br><img src=\"5.jpg\" alt></p>\n<p>最后再来看一下模型在负数预测上的准确率，可以看出有了非常大的提升：<br><img src=\"6.jpg\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文提出了不少的小Tips来提升序列模型的准确率，但是效果却还是远远低于syntactic distances那篇论文（F1值91.8），具体原因我也不得而知，我猜测跟树到序列映射编码关系可能不是特别大，可能还是跟序列建模有关，那篇论文的序列采用了两次LSTM，中间还夹杂了一次CNN卷积操作。所以编码器的好坏还是直接决定了最后性能的好坏，怪不得Elmo和Bert的效果那么的突出。</p>\n"},{"title":"Unsupervised Recurrent Neural Network Grammars","date":"2019-04-20T08:46:08.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=476513774&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Unsupervised Recurrent Neural Network Grammars](http://arxiv.org/abs/1904.03746)\n**代码地址：**[github](https://github.com/harvardnlp/urnng)\n\n# 介绍\n---\n这篇是新鲜出炉的NAACL19的关于无监督循环神经网络文法（URNNG）的论文，在语言模型和无监督成分句法分析上都取得了非常不错的结果，主要采用了变分推理和RNNG。本文公式量较大，因此我也推了好久，算法也挺多的，首先上一张我推导的公式笔记：\n![](1.jpg)\n\n我这篇博客就不按照论文的顺序来讲了，就按照我上面这张笔记讲一讲我的理解吧，很多细节可能会忽略，请参见原文吧。\n\n首先对于无监督成分句法分析，常规做法就是学习一个生成模型$p_{\\theta}(x, z)$，就比如RNNG就是一个生成模型，但是缺少句法树$z$的监督信号怎么办呢？现在给你的输入只有句子$x$，那么只能用语言模型$p_{\\theta}(x)$来做监督了。习惯上我们喜欢取对数，也就是：\n\\\\[\n\\log p_{\\theta}(x) = \\log \\sum_z p_{\\theta}(x, z)\n\\\\]\n这里就存在几个问题，比如$z$的状态空间太大了，不可能穷举所有的，所以接下来按步骤讲解如何求解。\n\n# URNNG模型\n---\n\n先上一张模型图，让大家对整体模型有个大概的认知：\n![](2.png)\n左边是一个推理网络（Inference Network），用来根据输入$x$推理出隐变量也就是句法树$z$的概率分布$q_{\\phi}(z | x)$。右边是一个生成模型（Generative Model），用来计算从推理网络中采样出来的句法树$z$的联合概率$p_{\\theta}(x, z)$，最后根据上面语言模型算出句子的概率，最大化这个概率即可。\n\n接下来分别讲解这两个部分和具体的优化方法。\n\n## Inference Network $q_{\\phi}(z | x)$\n首先将词向量$e_i$和位置向量$p_i$拼接，作为推理网络LSTM的输入：\n\\\\[\nf_i, b_i = {\\rm BiLSTM}([e_i, p_i])\n\\\\]\n然后算出span $(i, j)$的得分，计算方式和以往一样，用BiLSTM前后向输出做差，然后通过一个前馈神经网络得到分数：\n\\\\[\ns_{ij} = {\\rm MLP}([f_{j+1} - f_i; b_{i-1} - b_j])\n\\\\]\n接下来就需要计算句法树的概率分布了，这里不直接计算句法树$z$，而是计算它的邻接矩阵$B$的概率分布，这个邻接矩阵意思就是如果span $(i, j)$存在，那么$B_{ij} = 1$，否则的话$B_{ij} = 0$。然后就可以用CRF计算出邻接矩阵$B$对应的概率：\n\\\\[\nq_{\\phi}(B | x) = \\frac{1}{Z_T(x)}\\exp(\\sum_{i \\le j} B_{ij}s_{ij})\n\\\\]\n其中$Z_T(x)$是配分函数，也就是用来将概率归约到0到1之间的：\n\\\\[\nZ_T(x) = \\sum_{B' \\in \\mathcal B_T} \\exp(\\sum_{i \\le j} B'\\_{ij}s_{ij})\n\\\\]\n注意这里的$\\mathcal B_T$并不是所有的01矩阵集合，而是必须满足能产生合法句法树的矩阵，而这情况也很多，不能穷举求解，在这里采用经典的inside算法来求解这个配分函数：\n![](3.jpg)\n不过我觉得这里是错的！就是这里的两处$s_{ij}$应该改成$\\exp(s_{ij})$。不过具体代码实现的时候并没有这么做，初始值一样都是$\\beta[i,i]=s_{ii}$，但是递推的时候采用了如下式子：\n\\\\[\n\\beta[i, j] = \\log\\sum_{k=i}^{j-1}\\exp(s_{ij}+\\beta[i,k]+\\beta[k+1,j])\n\\\\]\n其实就是用$e^{\\beta}$来取代$\\beta$了，化简后就是代码实现这个式子，应该是为了防止数值溢出。\n\n然后就是采样了，推理网络目的就是计算出句法树的概率分布，然后根据这个分布采样出若干个句法树，那么现在给定一棵句法树可以根据上面的算法计算出它的概率了，那怎么采样呢？其实还是可以通过刚刚计算得出的$\\beta$数组来采样，采样算法如下:\n![](4.jpg)\n其实就是自顶向下的根据概率分布来采样每个span的split，用一个队列来保存所有还没有采样出split的span，然后把所有采样出的span在邻接矩阵中的对应值标为1。\n\n最后推理网络采样出了若干个句法树$z$，然后根据CRF计算出每个句法树的概率$q_{\\phi}(z | x)$，后面的事情就交给生成网络了。\n\n## Generative Model $p_{\\theta}(x, z)$\n上面的推理网络采样出了若干个句法树$z$，生成网络的目的就是计算它的联合概率$p_{\\theta}(x, z)$。这个其实不难，在之前的RNNG论文笔记中，我已经大致讲过了，可以去复习一下：[Recurrent Neural Network Grammars](https://godweiyang.com/2018/09/02/RNNG/)，这里稍稍做了一些改进。\n\n首先需要定义一个栈用来存放转移的历史状态，这里定义栈里放的元素为二元组$(h, g)$，一个是stack-LSTM编码的输出，一个是子树的结构表示。首先需要预测下一步的action是什么，所以取出栈顶的元素$(h_{prev}, g_{prev})$，预测action的时候只要用到隐含层输出：\n\\\\[\np_t = \\sigma(w^T h_{prev} + b)\n\\\\]\n然后根据这个概率预测action是SHIFT还是REDUCE，下面分两种情况讨论。\n\n如果是SHIFT，那么因为是生成模型，所以需要预测下一个移进的单词是什么：\n\\\\[\nx  \\sim  softmax(Wh_{prev} + b)\n\\\\]\n然后将单词$x$的词向量输入到stack-LSTM中得到下一个时刻的隐含层输出：\n\\\\[\nh_{next} = {\\rm LSTM}(e_x, h_{prev})\n\\\\]\n最后将$(h_{next}, e_x)$推进栈里。\n\n如果是REDUCE，那么首先需要取出栈顶的两个元素$(h_r, g_r)$和$(h_l, g_l)$，然后用TreeLSTM计算出两个子结点合并后的子树的表示：\n\\\\[\ng_{new} = {\\rm TreeLSTM}(g_l, g_r)\n\\\\]\n接着还是计算stack-LSTM下一个时刻的隐含层输出：\n\\\\[\nh_{new} = {\\rm LSTM}(g_{new}, h_{prev})\n\\\\]\n最后将$(h_{new}, g_{new})$推进栈里。\n\n为了防止数值溢出，常规上我们计算联合概率的对数：\n\\\\[\n\\log p_{\\theta}(x, z) = \\sum_{t=1}^T \\log p_{\\theta}(x_t | x_{< t}, z_{< n(t)}) + \\sum_{j=1}^{2T-1} \\log p_{\\theta}(z_j | x_{< m(j)}, z_{< j})\n\\\\]\n从这个式子可以看出，联合概率定义为所有给定某段单词和action预测下一个单词和给定某段单词和action预测下一个action的概率之积。\n\n如果是监督任务比如RNNG，那么只需要最大化这个联合概率就足够了，但是现在要做无监督，没有$z$，注意别搞混了，推理网络采样出的$z$可不能用来监督哦，因为那本来就不是正确的，所以接下来要采用语言模型来作为最终的目标函数。\n\n## Variational Inference\n句子$x$的对数概率定义为：\n\\\\[\n\\log p_{\\theta}(x) = \\log \\sum_{z \\in {\\mathcal Z}\\_T} {p_{\\theta}(x, z)}\n\\\\]\n其中${\\mathcal Z}\\_T$是所有合法句法树的集合，但是这里不可能穷举所有的句法树，所以就要用到变分推理，具体的理论知识不仔细介绍了，可以去查阅变分推理相关知识，下面直接推导。\n\\\\[\n\\begin{array}{l}\\log {p_\\theta }(x) = \\log \\sum\\limits_{z \\in {\\mathcal{Z}\\_T}} { {p_\\theta }(x,z)} \\\\ = \\log\\sum\\limits_{z \\in {\\mathcal{Z}\\_T}} { {q_\\phi }(z|x)\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\\\ = \\log { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ \\ge { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\end{array}\n\\\\]\n其中最后一行叫做先验$\\log p_{\\theta}(x)$的证据下界（ELBO），要想最大化先验，可以最大化这个ELBO，如果我们对这个ELBO变化一下形式可以得到：\n\\\\[\n\\begin{array}{l}{\\rm ELBO} = { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(z|x){p_\\theta }(x)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x)} \\right] - { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {q_\\phi }(z|x)}}{ { {p_\\theta }(z|x)}}} \\right]\\\\ = \\log {p_\\theta }(x) - {\\rm KL}({q_\\phi }(z|x)\\parallel {p_\\theta }(z|x))\\end{array}\n\\\\]\n所以这个ELBO和先验就相差了一个KL散度，最大化ELBO的话等价于最小化KL散度，也就是使推理网络产生句法树的概率分布和生成模型尽量接近。\n\n但是这个ELBO还是不好算，尽管它把$\\log$移到了求和符号也就是期望里面，所以转换一下形式：\n\\\\[\n{\\rm ELBO} = {\\mathbb E}\\_{q_{\\phi}(z|x)}\\left[ \\log p_{\\theta}(x,z) \\right] - {\\mathbb H} \\left[ q_{\\phi}(z|x) \\right]\n\\\\]\n因为模型一共有两组参数，一个是推理网络的参数$\\phi$，一个是生成网络的参数$\\theta$，所以下面分别对两个参数求导。\n\n首先对$\\theta$求偏导，因为只有第一项有这个参数，所以偏导为：\n\\\\[\n\\nabla_{\\theta}{\\rm ELBO} = {\\mathbb E}\\_{q_{\\phi}(z|x)}\\left[ \\nabla_{\\theta} \\log p_{\\theta}(x,z) \\right]\n\\\\]\n这个偏导可以按照概率$q_{\\phi}(z|x)$采样得到：\n\\\\[\n\\nabla_{\\theta}{\\rm ELBO} \\approx \\frac{1}{K}\\sum_{k=1}^{K} {\\nabla_{\\theta} \\log p_{\\theta}(x,z_k)}\n\\\\]\n\n然后对$\\phi$求偏导，因为有两项含有这个参数，分别求偏导。第二项是熵，它的值其实可以用之前的$\\beta$数组算出来，算法如下：\n![](5.jpg)\n然后偏导可以交给深度学习库的自动微分，就不用你自己求啦。\n\n至于第一项的偏导可以用类似于策略梯度的方法解决：\n\\\\[\n\\begin{array}{l}{\\nabla \\_\\phi }{\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ = {\\nabla \\_\\phi }\\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z)} \\\\ = \\sum\\limits_z {\\log {p_\\theta }(x,z){\\nabla \\_\\phi }{q_\\phi }(z|x)} \\\\ = \\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z){\\nabla \\_\\phi }\\log {q_\\phi }(z|x)} \\\\ = {\\mathbb{E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z){\\nabla \\_\\phi }\\log {q_\\phi }(z|x)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}\n\\\\]\n这里最后也是转化为了采样，和策略梯度做法类似，这里加入baseline来提升性能：\n\\\\[\n\\begin{array}{l}{\\nabla \\_\\phi }{\\mathbb{E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla \\_\\phi }\\log {q_\\phi }({z_k}|x)} \\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {(\\log {p_\\theta }(x,{z_k}) - {r_k}){\\nabla \\_\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}\n\\\\]\n其中$r_k$定义为所有其他的对数联合概率的均值：\n\\\\[\nr_k = \\frac{1}{K-1} \\sum_{j \\ne k} \\log p_{\\theta}(x, z_j)\n\\\\]\n\n至此所有偏导都已求出来了，两个通过采样得到，一个通过inside算法结果自动微分得到，所以去掉导数符号并相加就得到了最终的损失函数：\n\\\\[\n{\\mathcal L}(\\phi, \\theta) \\approx \\frac{1}{K} \\sum_{k=1}^K {\\left[ \\log p_{\\theta}(x, z_k) + (\\log p_{\\theta}(x, z_k) - r_k)\\log q_{\\phi}(z_k|x) \\right]} - {\\mathbb H}\\left[ q_{\\phi}(z|x) \\right]\n\\\\]\n一定要注意，这里的$\\log p_{\\theta}(x, z_k) - r_k$在代码实现的时候不能传入梯度，不然的话对$\\theta$的偏导就会多出这一项的偏导了！\n\n# 实验\n---\n\n实验结果这里就不多说了，细节具体看论文吧，就贴两个结果，一个是语言模型：\n![](6.jpg)\n可以看出在标准的PTB数据集上，URNNG效果只比监督学习的RNNG和用URNNG损失函数微调后的RNNG效果略差一点，但是在大数据集上，URNNG的优势就体现出来了。\n\n另一个是无监督成分句法分析，这里是用的全部长度的测试集：\n![](7.jpg)\n这个任务上URNNG效果是最好的。\n\n# 结论\n---\n和之前两篇语言模型做无监督成分句法分析类似，这篇论文用推理网络学习句法树的概率分布并采样句法树，再用生成网络计算这些句法树和句子的联合概率，最后用变分推理最大化句子的概率，也就是学习出一个好的语言模型。\n\n这篇论文的工作还是挺令人惊叹的，融合了inside算法、RNNG、变分推理等等知识。本来我变分推理听老师讲了好几次了都云里雾里的，看了这篇论文后总算弄懂了一点了，不过所了解的还是很少，EM算法、VAE之类的高级境界根本不会。。。","source":"_posts/NAACL19-URNNG.md","raw":"---\ntitle: Unsupervised Recurrent Neural Network Grammars\ndate: 2019-04-20 16:46:08\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NAACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=476513774&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Unsupervised Recurrent Neural Network Grammars](http://arxiv.org/abs/1904.03746)\n**代码地址：**[github](https://github.com/harvardnlp/urnng)\n\n# 介绍\n---\n这篇是新鲜出炉的NAACL19的关于无监督循环神经网络文法（URNNG）的论文，在语言模型和无监督成分句法分析上都取得了非常不错的结果，主要采用了变分推理和RNNG。本文公式量较大，因此我也推了好久，算法也挺多的，首先上一张我推导的公式笔记：\n![](1.jpg)\n\n我这篇博客就不按照论文的顺序来讲了，就按照我上面这张笔记讲一讲我的理解吧，很多细节可能会忽略，请参见原文吧。\n\n首先对于无监督成分句法分析，常规做法就是学习一个生成模型$p_{\\theta}(x, z)$，就比如RNNG就是一个生成模型，但是缺少句法树$z$的监督信号怎么办呢？现在给你的输入只有句子$x$，那么只能用语言模型$p_{\\theta}(x)$来做监督了。习惯上我们喜欢取对数，也就是：\n\\\\[\n\\log p_{\\theta}(x) = \\log \\sum_z p_{\\theta}(x, z)\n\\\\]\n这里就存在几个问题，比如$z$的状态空间太大了，不可能穷举所有的，所以接下来按步骤讲解如何求解。\n\n# URNNG模型\n---\n\n先上一张模型图，让大家对整体模型有个大概的认知：\n![](2.png)\n左边是一个推理网络（Inference Network），用来根据输入$x$推理出隐变量也就是句法树$z$的概率分布$q_{\\phi}(z | x)$。右边是一个生成模型（Generative Model），用来计算从推理网络中采样出来的句法树$z$的联合概率$p_{\\theta}(x, z)$，最后根据上面语言模型算出句子的概率，最大化这个概率即可。\n\n接下来分别讲解这两个部分和具体的优化方法。\n\n## Inference Network $q_{\\phi}(z | x)$\n首先将词向量$e_i$和位置向量$p_i$拼接，作为推理网络LSTM的输入：\n\\\\[\nf_i, b_i = {\\rm BiLSTM}([e_i, p_i])\n\\\\]\n然后算出span $(i, j)$的得分，计算方式和以往一样，用BiLSTM前后向输出做差，然后通过一个前馈神经网络得到分数：\n\\\\[\ns_{ij} = {\\rm MLP}([f_{j+1} - f_i; b_{i-1} - b_j])\n\\\\]\n接下来就需要计算句法树的概率分布了，这里不直接计算句法树$z$，而是计算它的邻接矩阵$B$的概率分布，这个邻接矩阵意思就是如果span $(i, j)$存在，那么$B_{ij} = 1$，否则的话$B_{ij} = 0$。然后就可以用CRF计算出邻接矩阵$B$对应的概率：\n\\\\[\nq_{\\phi}(B | x) = \\frac{1}{Z_T(x)}\\exp(\\sum_{i \\le j} B_{ij}s_{ij})\n\\\\]\n其中$Z_T(x)$是配分函数，也就是用来将概率归约到0到1之间的：\n\\\\[\nZ_T(x) = \\sum_{B' \\in \\mathcal B_T} \\exp(\\sum_{i \\le j} B'\\_{ij}s_{ij})\n\\\\]\n注意这里的$\\mathcal B_T$并不是所有的01矩阵集合，而是必须满足能产生合法句法树的矩阵，而这情况也很多，不能穷举求解，在这里采用经典的inside算法来求解这个配分函数：\n![](3.jpg)\n不过我觉得这里是错的！就是这里的两处$s_{ij}$应该改成$\\exp(s_{ij})$。不过具体代码实现的时候并没有这么做，初始值一样都是$\\beta[i,i]=s_{ii}$，但是递推的时候采用了如下式子：\n\\\\[\n\\beta[i, j] = \\log\\sum_{k=i}^{j-1}\\exp(s_{ij}+\\beta[i,k]+\\beta[k+1,j])\n\\\\]\n其实就是用$e^{\\beta}$来取代$\\beta$了，化简后就是代码实现这个式子，应该是为了防止数值溢出。\n\n然后就是采样了，推理网络目的就是计算出句法树的概率分布，然后根据这个分布采样出若干个句法树，那么现在给定一棵句法树可以根据上面的算法计算出它的概率了，那怎么采样呢？其实还是可以通过刚刚计算得出的$\\beta$数组来采样，采样算法如下:\n![](4.jpg)\n其实就是自顶向下的根据概率分布来采样每个span的split，用一个队列来保存所有还没有采样出split的span，然后把所有采样出的span在邻接矩阵中的对应值标为1。\n\n最后推理网络采样出了若干个句法树$z$，然后根据CRF计算出每个句法树的概率$q_{\\phi}(z | x)$，后面的事情就交给生成网络了。\n\n## Generative Model $p_{\\theta}(x, z)$\n上面的推理网络采样出了若干个句法树$z$，生成网络的目的就是计算它的联合概率$p_{\\theta}(x, z)$。这个其实不难，在之前的RNNG论文笔记中，我已经大致讲过了，可以去复习一下：[Recurrent Neural Network Grammars](https://godweiyang.com/2018/09/02/RNNG/)，这里稍稍做了一些改进。\n\n首先需要定义一个栈用来存放转移的历史状态，这里定义栈里放的元素为二元组$(h, g)$，一个是stack-LSTM编码的输出，一个是子树的结构表示。首先需要预测下一步的action是什么，所以取出栈顶的元素$(h_{prev}, g_{prev})$，预测action的时候只要用到隐含层输出：\n\\\\[\np_t = \\sigma(w^T h_{prev} + b)\n\\\\]\n然后根据这个概率预测action是SHIFT还是REDUCE，下面分两种情况讨论。\n\n如果是SHIFT，那么因为是生成模型，所以需要预测下一个移进的单词是什么：\n\\\\[\nx  \\sim  softmax(Wh_{prev} + b)\n\\\\]\n然后将单词$x$的词向量输入到stack-LSTM中得到下一个时刻的隐含层输出：\n\\\\[\nh_{next} = {\\rm LSTM}(e_x, h_{prev})\n\\\\]\n最后将$(h_{next}, e_x)$推进栈里。\n\n如果是REDUCE，那么首先需要取出栈顶的两个元素$(h_r, g_r)$和$(h_l, g_l)$，然后用TreeLSTM计算出两个子结点合并后的子树的表示：\n\\\\[\ng_{new} = {\\rm TreeLSTM}(g_l, g_r)\n\\\\]\n接着还是计算stack-LSTM下一个时刻的隐含层输出：\n\\\\[\nh_{new} = {\\rm LSTM}(g_{new}, h_{prev})\n\\\\]\n最后将$(h_{new}, g_{new})$推进栈里。\n\n为了防止数值溢出，常规上我们计算联合概率的对数：\n\\\\[\n\\log p_{\\theta}(x, z) = \\sum_{t=1}^T \\log p_{\\theta}(x_t | x_{< t}, z_{< n(t)}) + \\sum_{j=1}^{2T-1} \\log p_{\\theta}(z_j | x_{< m(j)}, z_{< j})\n\\\\]\n从这个式子可以看出，联合概率定义为所有给定某段单词和action预测下一个单词和给定某段单词和action预测下一个action的概率之积。\n\n如果是监督任务比如RNNG，那么只需要最大化这个联合概率就足够了，但是现在要做无监督，没有$z$，注意别搞混了，推理网络采样出的$z$可不能用来监督哦，因为那本来就不是正确的，所以接下来要采用语言模型来作为最终的目标函数。\n\n## Variational Inference\n句子$x$的对数概率定义为：\n\\\\[\n\\log p_{\\theta}(x) = \\log \\sum_{z \\in {\\mathcal Z}\\_T} {p_{\\theta}(x, z)}\n\\\\]\n其中${\\mathcal Z}\\_T$是所有合法句法树的集合，但是这里不可能穷举所有的句法树，所以就要用到变分推理，具体的理论知识不仔细介绍了，可以去查阅变分推理相关知识，下面直接推导。\n\\\\[\n\\begin{array}{l}\\log {p_\\theta }(x) = \\log \\sum\\limits_{z \\in {\\mathcal{Z}\\_T}} { {p_\\theta }(x,z)} \\\\ = \\log\\sum\\limits_{z \\in {\\mathcal{Z}\\_T}} { {q_\\phi }(z|x)\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\\\ = \\log { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ \\ge { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\end{array}\n\\\\]\n其中最后一行叫做先验$\\log p_{\\theta}(x)$的证据下界（ELBO），要想最大化先验，可以最大化这个ELBO，如果我们对这个ELBO变化一下形式可以得到：\n\\\\[\n\\begin{array}{l}{\\rm ELBO} = { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(z|x){p_\\theta }(x)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x)} \\right] - { {\\mathbb E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {q_\\phi }(z|x)}}{ { {p_\\theta }(z|x)}}} \\right]\\\\ = \\log {p_\\theta }(x) - {\\rm KL}({q_\\phi }(z|x)\\parallel {p_\\theta }(z|x))\\end{array}\n\\\\]\n所以这个ELBO和先验就相差了一个KL散度，最大化ELBO的话等价于最小化KL散度，也就是使推理网络产生句法树的概率分布和生成模型尽量接近。\n\n但是这个ELBO还是不好算，尽管它把$\\log$移到了求和符号也就是期望里面，所以转换一下形式：\n\\\\[\n{\\rm ELBO} = {\\mathbb E}\\_{q_{\\phi}(z|x)}\\left[ \\log p_{\\theta}(x,z) \\right] - {\\mathbb H} \\left[ q_{\\phi}(z|x) \\right]\n\\\\]\n因为模型一共有两组参数，一个是推理网络的参数$\\phi$，一个是生成网络的参数$\\theta$，所以下面分别对两个参数求导。\n\n首先对$\\theta$求偏导，因为只有第一项有这个参数，所以偏导为：\n\\\\[\n\\nabla_{\\theta}{\\rm ELBO} = {\\mathbb E}\\_{q_{\\phi}(z|x)}\\left[ \\nabla_{\\theta} \\log p_{\\theta}(x,z) \\right]\n\\\\]\n这个偏导可以按照概率$q_{\\phi}(z|x)$采样得到：\n\\\\[\n\\nabla_{\\theta}{\\rm ELBO} \\approx \\frac{1}{K}\\sum_{k=1}^{K} {\\nabla_{\\theta} \\log p_{\\theta}(x,z_k)}\n\\\\]\n\n然后对$\\phi$求偏导，因为有两项含有这个参数，分别求偏导。第二项是熵，它的值其实可以用之前的$\\beta$数组算出来，算法如下：\n![](5.jpg)\n然后偏导可以交给深度学习库的自动微分，就不用你自己求啦。\n\n至于第一项的偏导可以用类似于策略梯度的方法解决：\n\\\\[\n\\begin{array}{l}{\\nabla \\_\\phi }{\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ = {\\nabla \\_\\phi }\\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z)} \\\\ = \\sum\\limits_z {\\log {p_\\theta }(x,z){\\nabla \\_\\phi }{q_\\phi }(z|x)} \\\\ = \\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z){\\nabla \\_\\phi }\\log {q_\\phi }(z|x)} \\\\ = {\\mathbb{E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z){\\nabla \\_\\phi }\\log {q_\\phi }(z|x)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}\n\\\\]\n这里最后也是转化为了采样，和策略梯度做法类似，这里加入baseline来提升性能：\n\\\\[\n\\begin{array}{l}{\\nabla \\_\\phi }{\\mathbb{E}\\_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla \\_\\phi }\\log {q_\\phi }({z_k}|x)} \\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {(\\log {p_\\theta }(x,{z_k}) - {r_k}){\\nabla \\_\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}\n\\\\]\n其中$r_k$定义为所有其他的对数联合概率的均值：\n\\\\[\nr_k = \\frac{1}{K-1} \\sum_{j \\ne k} \\log p_{\\theta}(x, z_j)\n\\\\]\n\n至此所有偏导都已求出来了，两个通过采样得到，一个通过inside算法结果自动微分得到，所以去掉导数符号并相加就得到了最终的损失函数：\n\\\\[\n{\\mathcal L}(\\phi, \\theta) \\approx \\frac{1}{K} \\sum_{k=1}^K {\\left[ \\log p_{\\theta}(x, z_k) + (\\log p_{\\theta}(x, z_k) - r_k)\\log q_{\\phi}(z_k|x) \\right]} - {\\mathbb H}\\left[ q_{\\phi}(z|x) \\right]\n\\\\]\n一定要注意，这里的$\\log p_{\\theta}(x, z_k) - r_k$在代码实现的时候不能传入梯度，不然的话对$\\theta$的偏导就会多出这一项的偏导了！\n\n# 实验\n---\n\n实验结果这里就不多说了，细节具体看论文吧，就贴两个结果，一个是语言模型：\n![](6.jpg)\n可以看出在标准的PTB数据集上，URNNG效果只比监督学习的RNNG和用URNNG损失函数微调后的RNNG效果略差一点，但是在大数据集上，URNNG的优势就体现出来了。\n\n另一个是无监督成分句法分析，这里是用的全部长度的测试集：\n![](7.jpg)\n这个任务上URNNG效果是最好的。\n\n# 结论\n---\n和之前两篇语言模型做无监督成分句法分析类似，这篇论文用推理网络学习句法树的概率分布并采样句法树，再用生成网络计算这些句法树和句子的联合概率，最后用变分推理最大化句子的概率，也就是学习出一个好的语言模型。\n\n这篇论文的工作还是挺令人惊叹的，融合了inside算法、RNNG、变分推理等等知识。本来我变分推理听老师讲了好几次了都云里雾里的，看了这篇论文后总算弄懂了一点了，不过所了解的还是很少，EM算法、VAE之类的高级境界根本不会。。。","slug":"NAACL19-URNNG","published":1,"updated":"2019-07-20T04:31:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982br004j7swe81j07ckv","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=476513774&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"http://arxiv.org/abs/1904.03746\" target=\"_blank\" rel=\"noopener\">Unsupervised Recurrent Neural Network Grammars</a><br><strong>代码地址：</strong><a href=\"https://github.com/harvardnlp/urnng\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇是新鲜出炉的NAACL19的关于无监督循环神经网络文法（URNNG）的论文，在语言模型和无监督成分句法分析上都取得了非常不错的结果，主要采用了变分推理和RNNG。本文公式量较大，因此我也推了好久，算法也挺多的，首先上一张我推导的公式笔记：<br><img src=\"1.jpg\" alt></p>\n<p>我这篇博客就不按照论文的顺序来讲了，就按照我上面这张笔记讲一讲我的理解吧，很多细节可能会忽略，请参见原文吧。</p>\n<p>首先对于无监督成分句法分析，常规做法就是学习一个生成模型$p_{\\theta}(x, z)$，就比如RNNG就是一个生成模型，但是缺少句法树$z$的监督信号怎么办呢？现在给你的输入只有句子$x$，那么只能用语言模型$p_{\\theta}(x)$来做监督了。习惯上我们喜欢取对数，也就是：<br>\\[<br>\\log p_{\\theta}(x) = \\log \\sum_z p_{\\theta}(x, z)<br>\\]<br>这里就存在几个问题，比如$z$的状态空间太大了，不可能穷举所有的，所以接下来按步骤讲解如何求解。</p>\n<h1 id=\"URNNG模型\"><a href=\"#URNNG模型\" class=\"headerlink\" title=\"URNNG模型\"></a>URNNG模型</h1><hr>\n<p>先上一张模型图，让大家对整体模型有个大概的认知：<br><img src=\"2.png\" alt><br>左边是一个推理网络（Inference Network），用来根据输入$x$推理出隐变量也就是句法树$z$的概率分布$q_{\\phi}(z | x)$。右边是一个生成模型（Generative Model），用来计算从推理网络中采样出来的句法树$z$的联合概率$p_{\\theta}(x, z)$，最后根据上面语言模型算出句子的概率，最大化这个概率即可。</p>\n<p>接下来分别讲解这两个部分和具体的优化方法。</p>\n<h2 id=\"Inference-Network-q-phi-z-x\"><a href=\"#Inference-Network-q-phi-z-x\" class=\"headerlink\" title=\"Inference Network $q_{\\phi}(z | x)$\"></a>Inference Network $q_{\\phi}(z | x)$</h2><p>首先将词向量$e_i$和位置向量$p_i$拼接，作为推理网络LSTM的输入：<br>\\[<br>f_i, b_i = {\\rm BiLSTM}([e_i, p_i])<br>\\]<br>然后算出span $(i, j)$的得分，计算方式和以往一样，用BiLSTM前后向输出做差，然后通过一个前馈神经网络得到分数：<br>\\[<br>s_{ij} = {\\rm MLP}([f_{j+1} - f_i; b_{i-1} - b_j])<br>\\]<br>接下来就需要计算句法树的概率分布了，这里不直接计算句法树$z$，而是计算它的邻接矩阵$B$的概率分布，这个邻接矩阵意思就是如果span $(i, j)$存在，那么$B_{ij} = 1$，否则的话$B_{ij} = 0$。然后就可以用CRF计算出邻接矩阵$B$对应的概率：<br>\\[<br>q_{\\phi}(B | x) = \\frac{1}{Z_T(x)}\\exp(\\sum_{i \\le j} B_{ij}s_{ij})<br>\\]<br>其中$Z_T(x)$是配分函数，也就是用来将概率归约到0到1之间的：<br>\\[<br>Z_T(x) = \\sum_{B’ \\in \\mathcal B_T} \\exp(\\sum_{i \\le j} B’_{ij}s_{ij})<br>\\]<br>注意这里的$\\mathcal B_T$并不是所有的01矩阵集合，而是必须满足能产生合法句法树的矩阵，而这情况也很多，不能穷举求解，在这里采用经典的inside算法来求解这个配分函数：<br><img src=\"3.jpg\" alt><br>不过我觉得这里是错的！就是这里的两处$s_{ij}$应该改成$\\exp(s_{ij})$。不过具体代码实现的时候并没有这么做，初始值一样都是$\\beta[i,i]=s_{ii}$，但是递推的时候采用了如下式子：<br>\\[<br>\\beta[i, j] = \\log\\sum_{k=i}^{j-1}\\exp(s_{ij}+\\beta[i,k]+\\beta[k+1,j])<br>\\]<br>其实就是用$e^{\\beta}$来取代$\\beta$了，化简后就是代码实现这个式子，应该是为了防止数值溢出。</p>\n<p>然后就是采样了，推理网络目的就是计算出句法树的概率分布，然后根据这个分布采样出若干个句法树，那么现在给定一棵句法树可以根据上面的算法计算出它的概率了，那怎么采样呢？其实还是可以通过刚刚计算得出的$\\beta$数组来采样，采样算法如下:<br><img src=\"4.jpg\" alt><br>其实就是自顶向下的根据概率分布来采样每个span的split，用一个队列来保存所有还没有采样出split的span，然后把所有采样出的span在邻接矩阵中的对应值标为1。</p>\n<p>最后推理网络采样出了若干个句法树$z$，然后根据CRF计算出每个句法树的概率$q_{\\phi}(z | x)$，后面的事情就交给生成网络了。</p>\n<h2 id=\"Generative-Model-p-theta-x-z\"><a href=\"#Generative-Model-p-theta-x-z\" class=\"headerlink\" title=\"Generative Model $p_{\\theta}(x, z)$\"></a>Generative Model $p_{\\theta}(x, z)$</h2><p>上面的推理网络采样出了若干个句法树$z$，生成网络的目的就是计算它的联合概率$p_{\\theta}(x, z)$。这个其实不难，在之前的RNNG论文笔记中，我已经大致讲过了，可以去复习一下：<a href=\"https://godweiyang.com/2018/09/02/RNNG/\">Recurrent Neural Network Grammars</a>，这里稍稍做了一些改进。</p>\n<p>首先需要定义一个栈用来存放转移的历史状态，这里定义栈里放的元素为二元组$(h, g)$，一个是stack-LSTM编码的输出，一个是子树的结构表示。首先需要预测下一步的action是什么，所以取出栈顶的元素$(h_{prev}, g_{prev})$，预测action的时候只要用到隐含层输出：<br>\\[<br>p_t = \\sigma(w^T h_{prev} + b)<br>\\]<br>然后根据这个概率预测action是SHIFT还是REDUCE，下面分两种情况讨论。</p>\n<p>如果是SHIFT，那么因为是生成模型，所以需要预测下一个移进的单词是什么：<br>\\[<br>x  \\sim  softmax(Wh_{prev} + b)<br>\\]<br>然后将单词$x$的词向量输入到stack-LSTM中得到下一个时刻的隐含层输出：<br>\\[<br>h_{next} = {\\rm LSTM}(e_x, h_{prev})<br>\\]<br>最后将$(h_{next}, e_x)$推进栈里。</p>\n<p>如果是REDUCE，那么首先需要取出栈顶的两个元素$(h_r, g_r)$和$(h_l, g_l)$，然后用TreeLSTM计算出两个子结点合并后的子树的表示：<br>\\[<br>g_{new} = {\\rm TreeLSTM}(g_l, g_r)<br>\\]<br>接着还是计算stack-LSTM下一个时刻的隐含层输出：<br>\\[<br>h_{new} = {\\rm LSTM}(g_{new}, h_{prev})<br>\\]<br>最后将$(h_{new}, g_{new})$推进栈里。</p>\n<p>为了防止数值溢出，常规上我们计算联合概率的对数：<br>\\[<br>\\log p_{\\theta}(x, z) = \\sum_{t=1}^T \\log p_{\\theta}(x_t | x_{&lt; t}, z_{&lt; n(t)}) + \\sum_{j=1}^{2T-1} \\log p_{\\theta}(z_j | x_{&lt; m(j)}, z_{&lt; j})<br>\\]<br>从这个式子可以看出，联合概率定义为所有给定某段单词和action预测下一个单词和给定某段单词和action预测下一个action的概率之积。</p>\n<p>如果是监督任务比如RNNG，那么只需要最大化这个联合概率就足够了，但是现在要做无监督，没有$z$，注意别搞混了，推理网络采样出的$z$可不能用来监督哦，因为那本来就不是正确的，所以接下来要采用语言模型来作为最终的目标函数。</p>\n<h2 id=\"Variational-Inference\"><a href=\"#Variational-Inference\" class=\"headerlink\" title=\"Variational Inference\"></a>Variational Inference</h2><p>句子$x$的对数概率定义为：<br>\\[<br>\\log p_{\\theta}(x) = \\log \\sum_{z \\in {\\mathcal Z}_T} {p_{\\theta}(x, z)}<br>\\]<br>其中${\\mathcal Z}_T$是所有合法句法树的集合，但是这里不可能穷举所有的句法树，所以就要用到变分推理，具体的理论知识不仔细介绍了，可以去查阅变分推理相关知识，下面直接推导。<br>\\[<br>\\begin{array}{l}\\log {p_\\theta }(x) = \\log \\sum\\limits_{z \\in {\\mathcal{Z}_T}} { {p_\\theta }(x,z)} \\\\ = \\log\\sum\\limits_{z \\in {\\mathcal{Z}_T}} { {q_\\phi }(z|x)\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\\\ = \\log { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ \\ge { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\end{array}<br>\\]<br>其中最后一行叫做先验$\\log p_{\\theta}(x)$的证据下界（ELBO），要想最大化先验，可以最大化这个ELBO，如果我们对这个ELBO变化一下形式可以得到：<br>\\[<br>\\begin{array}{l}{\\rm ELBO} = { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(z|x){p_\\theta }(x)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x)} \\right] - { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {q_\\phi }(z|x)}}{ { {p_\\theta }(z|x)}}} \\right]\\\\ = \\log {p_\\theta }(x) - {\\rm KL}({q_\\phi }(z|x)\\parallel {p_\\theta }(z|x))\\end{array}<br>\\]<br>所以这个ELBO和先验就相差了一个KL散度，最大化ELBO的话等价于最小化KL散度，也就是使推理网络产生句法树的概率分布和生成模型尽量接近。</p>\n<p>但是这个ELBO还是不好算，尽管它把$\\log$移到了求和符号也就是期望里面，所以转换一下形式：<br>\\[<br>{\\rm ELBO} = {\\mathbb E}_{q_{\\phi}(z|x)}\\left[ \\log p_{\\theta}(x,z) \\right] - {\\mathbb H} \\left[ q_{\\phi}(z|x) \\right]<br>\\]<br>因为模型一共有两组参数，一个是推理网络的参数$\\phi$，一个是生成网络的参数$\\theta$，所以下面分别对两个参数求导。</p>\n<p>首先对$\\theta$求偏导，因为只有第一项有这个参数，所以偏导为：<br>\\[<br>\\nabla_{\\theta}{\\rm ELBO} = {\\mathbb E}_{q_{\\phi}(z|x)}\\left[ \\nabla_{\\theta} \\log p_{\\theta}(x,z) \\right]<br>\\]<br>这个偏导可以按照概率$q_{\\phi}(z|x)$采样得到：<br>\\[<br>\\nabla_{\\theta}{\\rm ELBO} \\approx \\frac{1}{K}\\sum_{k=1}^{K} {\\nabla_{\\theta} \\log p_{\\theta}(x,z_k)}<br>\\]</p>\n<p>然后对$\\phi$求偏导，因为有两项含有这个参数，分别求偏导。第二项是熵，它的值其实可以用之前的$\\beta$数组算出来，算法如下：<br><img src=\"5.jpg\" alt><br>然后偏导可以交给深度学习库的自动微分，就不用你自己求啦。</p>\n<p>至于第一项的偏导可以用类似于策略梯度的方法解决：<br>\\[<br>\\begin{array}{l}{\\nabla _\\phi }{\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ = {\\nabla _\\phi }\\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z)} \\\\ = \\sum\\limits_z {\\log {p_\\theta }(x,z){\\nabla _\\phi }{q_\\phi }(z|x)} \\\\ = \\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z){\\nabla _\\phi }\\log {q_\\phi }(z|x)} \\\\ = {\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z){\\nabla _\\phi }\\log {q_\\phi }(z|x)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}<br>\\]<br>这里最后也是转化为了采样，和策略梯度做法类似，这里加入baseline来提升性能：<br>\\[<br>\\begin{array}{l}{\\nabla _\\phi }{\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {(\\log {p_\\theta }(x,{z_k}) - {r_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}<br>\\]<br>其中$r_k$定义为所有其他的对数联合概率的均值：<br>\\[<br>r_k = \\frac{1}{K-1} \\sum_{j \\ne k} \\log p_{\\theta}(x, z_j)<br>\\]</p>\n<p>至此所有偏导都已求出来了，两个通过采样得到，一个通过inside算法结果自动微分得到，所以去掉导数符号并相加就得到了最终的损失函数：<br>\\[<br>{\\mathcal L}(\\phi, \\theta) \\approx \\frac{1}{K} \\sum_{k=1}^K {\\left[ \\log p_{\\theta}(x, z_k) + (\\log p_{\\theta}(x, z_k) - r_k)\\log q_{\\phi}(z_k|x) \\right]} - {\\mathbb H}\\left[ q_{\\phi}(z|x) \\right]<br>\\]<br>一定要注意，这里的$\\log p_{\\theta}(x, z_k) - r_k$在代码实现的时候不能传入梯度，不然的话对$\\theta$的偏导就会多出这一项的偏导了！</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验结果这里就不多说了，细节具体看论文吧，就贴两个结果，一个是语言模型：<br><img src=\"6.jpg\" alt><br>可以看出在标准的PTB数据集上，URNNG效果只比监督学习的RNNG和用URNNG损失函数微调后的RNNG效果略差一点，但是在大数据集上，URNNG的优势就体现出来了。</p>\n<p>另一个是无监督成分句法分析，这里是用的全部长度的测试集：<br><img src=\"7.jpg\" alt><br>这个任务上URNNG效果是最好的。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><hr>\n<p>和之前两篇语言模型做无监督成分句法分析类似，这篇论文用推理网络学习句法树的概率分布并采样句法树，再用生成网络计算这些句法树和句子的联合概率，最后用变分推理最大化句子的概率，也就是学习出一个好的语言模型。</p>\n<p>这篇论文的工作还是挺令人惊叹的，融合了inside算法、RNNG、变分推理等等知识。本来我变分推理听老师讲了好几次了都云里雾里的，看了这篇论文后总算弄懂了一点了，不过所了解的还是很少，EM算法、VAE之类的高级境界根本不会。。。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=476513774&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"http://arxiv.org/abs/1904.03746\" target=\"_blank\" rel=\"noopener\">Unsupervised Recurrent Neural Network Grammars</a><br><strong>代码地址：</strong><a href=\"https://github.com/harvardnlp/urnng\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇是新鲜出炉的NAACL19的关于无监督循环神经网络文法（URNNG）的论文，在语言模型和无监督成分句法分析上都取得了非常不错的结果，主要采用了变分推理和RNNG。本文公式量较大，因此我也推了好久，算法也挺多的，首先上一张我推导的公式笔记：<br><img src=\"1.jpg\" alt></p>\n<p>我这篇博客就不按照论文的顺序来讲了，就按照我上面这张笔记讲一讲我的理解吧，很多细节可能会忽略，请参见原文吧。</p>\n<p>首先对于无监督成分句法分析，常规做法就是学习一个生成模型$p_{\\theta}(x, z)$，就比如RNNG就是一个生成模型，但是缺少句法树$z$的监督信号怎么办呢？现在给你的输入只有句子$x$，那么只能用语言模型$p_{\\theta}(x)$来做监督了。习惯上我们喜欢取对数，也就是：<br>\\[<br>\\log p_{\\theta}(x) = \\log \\sum_z p_{\\theta}(x, z)<br>\\]<br>这里就存在几个问题，比如$z$的状态空间太大了，不可能穷举所有的，所以接下来按步骤讲解如何求解。</p>\n<h1 id=\"URNNG模型\"><a href=\"#URNNG模型\" class=\"headerlink\" title=\"URNNG模型\"></a>URNNG模型</h1><hr>\n<p>先上一张模型图，让大家对整体模型有个大概的认知：<br><img src=\"2.png\" alt><br>左边是一个推理网络（Inference Network），用来根据输入$x$推理出隐变量也就是句法树$z$的概率分布$q_{\\phi}(z | x)$。右边是一个生成模型（Generative Model），用来计算从推理网络中采样出来的句法树$z$的联合概率$p_{\\theta}(x, z)$，最后根据上面语言模型算出句子的概率，最大化这个概率即可。</p>\n<p>接下来分别讲解这两个部分和具体的优化方法。</p>\n<h2 id=\"Inference-Network-q-phi-z-x\"><a href=\"#Inference-Network-q-phi-z-x\" class=\"headerlink\" title=\"Inference Network $q_{\\phi}(z | x)$\"></a>Inference Network $q_{\\phi}(z | x)$</h2><p>首先将词向量$e_i$和位置向量$p_i$拼接，作为推理网络LSTM的输入：<br>\\[<br>f_i, b_i = {\\rm BiLSTM}([e_i, p_i])<br>\\]<br>然后算出span $(i, j)$的得分，计算方式和以往一样，用BiLSTM前后向输出做差，然后通过一个前馈神经网络得到分数：<br>\\[<br>s_{ij} = {\\rm MLP}([f_{j+1} - f_i; b_{i-1} - b_j])<br>\\]<br>接下来就需要计算句法树的概率分布了，这里不直接计算句法树$z$，而是计算它的邻接矩阵$B$的概率分布，这个邻接矩阵意思就是如果span $(i, j)$存在，那么$B_{ij} = 1$，否则的话$B_{ij} = 0$。然后就可以用CRF计算出邻接矩阵$B$对应的概率：<br>\\[<br>q_{\\phi}(B | x) = \\frac{1}{Z_T(x)}\\exp(\\sum_{i \\le j} B_{ij}s_{ij})<br>\\]<br>其中$Z_T(x)$是配分函数，也就是用来将概率归约到0到1之间的：<br>\\[<br>Z_T(x) = \\sum_{B’ \\in \\mathcal B_T} \\exp(\\sum_{i \\le j} B’_{ij}s_{ij})<br>\\]<br>注意这里的$\\mathcal B_T$并不是所有的01矩阵集合，而是必须满足能产生合法句法树的矩阵，而这情况也很多，不能穷举求解，在这里采用经典的inside算法来求解这个配分函数：<br><img src=\"3.jpg\" alt><br>不过我觉得这里是错的！就是这里的两处$s_{ij}$应该改成$\\exp(s_{ij})$。不过具体代码实现的时候并没有这么做，初始值一样都是$\\beta[i,i]=s_{ii}$，但是递推的时候采用了如下式子：<br>\\[<br>\\beta[i, j] = \\log\\sum_{k=i}^{j-1}\\exp(s_{ij}+\\beta[i,k]+\\beta[k+1,j])<br>\\]<br>其实就是用$e^{\\beta}$来取代$\\beta$了，化简后就是代码实现这个式子，应该是为了防止数值溢出。</p>\n<p>然后就是采样了，推理网络目的就是计算出句法树的概率分布，然后根据这个分布采样出若干个句法树，那么现在给定一棵句法树可以根据上面的算法计算出它的概率了，那怎么采样呢？其实还是可以通过刚刚计算得出的$\\beta$数组来采样，采样算法如下:<br><img src=\"4.jpg\" alt><br>其实就是自顶向下的根据概率分布来采样每个span的split，用一个队列来保存所有还没有采样出split的span，然后把所有采样出的span在邻接矩阵中的对应值标为1。</p>\n<p>最后推理网络采样出了若干个句法树$z$，然后根据CRF计算出每个句法树的概率$q_{\\phi}(z | x)$，后面的事情就交给生成网络了。</p>\n<h2 id=\"Generative-Model-p-theta-x-z\"><a href=\"#Generative-Model-p-theta-x-z\" class=\"headerlink\" title=\"Generative Model $p_{\\theta}(x, z)$\"></a>Generative Model $p_{\\theta}(x, z)$</h2><p>上面的推理网络采样出了若干个句法树$z$，生成网络的目的就是计算它的联合概率$p_{\\theta}(x, z)$。这个其实不难，在之前的RNNG论文笔记中，我已经大致讲过了，可以去复习一下：<a href=\"https://godweiyang.com/2018/09/02/RNNG/\">Recurrent Neural Network Grammars</a>，这里稍稍做了一些改进。</p>\n<p>首先需要定义一个栈用来存放转移的历史状态，这里定义栈里放的元素为二元组$(h, g)$，一个是stack-LSTM编码的输出，一个是子树的结构表示。首先需要预测下一步的action是什么，所以取出栈顶的元素$(h_{prev}, g_{prev})$，预测action的时候只要用到隐含层输出：<br>\\[<br>p_t = \\sigma(w^T h_{prev} + b)<br>\\]<br>然后根据这个概率预测action是SHIFT还是REDUCE，下面分两种情况讨论。</p>\n<p>如果是SHIFT，那么因为是生成模型，所以需要预测下一个移进的单词是什么：<br>\\[<br>x  \\sim  softmax(Wh_{prev} + b)<br>\\]<br>然后将单词$x$的词向量输入到stack-LSTM中得到下一个时刻的隐含层输出：<br>\\[<br>h_{next} = {\\rm LSTM}(e_x, h_{prev})<br>\\]<br>最后将$(h_{next}, e_x)$推进栈里。</p>\n<p>如果是REDUCE，那么首先需要取出栈顶的两个元素$(h_r, g_r)$和$(h_l, g_l)$，然后用TreeLSTM计算出两个子结点合并后的子树的表示：<br>\\[<br>g_{new} = {\\rm TreeLSTM}(g_l, g_r)<br>\\]<br>接着还是计算stack-LSTM下一个时刻的隐含层输出：<br>\\[<br>h_{new} = {\\rm LSTM}(g_{new}, h_{prev})<br>\\]<br>最后将$(h_{new}, g_{new})$推进栈里。</p>\n<p>为了防止数值溢出，常规上我们计算联合概率的对数：<br>\\[<br>\\log p_{\\theta}(x, z) = \\sum_{t=1}^T \\log p_{\\theta}(x_t | x_{&lt; t}, z_{&lt; n(t)}) + \\sum_{j=1}^{2T-1} \\log p_{\\theta}(z_j | x_{&lt; m(j)}, z_{&lt; j})<br>\\]<br>从这个式子可以看出，联合概率定义为所有给定某段单词和action预测下一个单词和给定某段单词和action预测下一个action的概率之积。</p>\n<p>如果是监督任务比如RNNG，那么只需要最大化这个联合概率就足够了，但是现在要做无监督，没有$z$，注意别搞混了，推理网络采样出的$z$可不能用来监督哦，因为那本来就不是正确的，所以接下来要采用语言模型来作为最终的目标函数。</p>\n<h2 id=\"Variational-Inference\"><a href=\"#Variational-Inference\" class=\"headerlink\" title=\"Variational Inference\"></a>Variational Inference</h2><p>句子$x$的对数概率定义为：<br>\\[<br>\\log p_{\\theta}(x) = \\log \\sum_{z \\in {\\mathcal Z}_T} {p_{\\theta}(x, z)}<br>\\]<br>其中${\\mathcal Z}_T$是所有合法句法树的集合，但是这里不可能穷举所有的句法树，所以就要用到变分推理，具体的理论知识不仔细介绍了，可以去查阅变分推理相关知识，下面直接推导。<br>\\[<br>\\begin{array}{l}\\log {p_\\theta }(x) = \\log \\sum\\limits_{z \\in {\\mathcal{Z}_T}} { {p_\\theta }(x,z)} \\\\ = \\log\\sum\\limits_{z \\in {\\mathcal{Z}_T}} { {q_\\phi }(z|x)\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\\\ = \\log { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ \\ge { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\end{array}<br>\\]<br>其中最后一行叫做先验$\\log p_{\\theta}(x)$的证据下界（ELBO），要想最大化先验，可以最大化这个ELBO，如果我们对这个ELBO变化一下形式可以得到：<br>\\[<br>\\begin{array}{l}{\\rm ELBO} = { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(x,z)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {p_\\theta }(z|x){p_\\theta }(x)}}{ { {q_\\phi }(z|x)}}} \\right]\\\\ = { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x)} \\right] - { {\\mathbb E}_{ {q_\\phi }(z|x)}}\\left[ {\\log \\frac{ { {q_\\phi }(z|x)}}{ { {p_\\theta }(z|x)}}} \\right]\\\\ = \\log {p_\\theta }(x) - {\\rm KL}({q_\\phi }(z|x)\\parallel {p_\\theta }(z|x))\\end{array}<br>\\]<br>所以这个ELBO和先验就相差了一个KL散度，最大化ELBO的话等价于最小化KL散度，也就是使推理网络产生句法树的概率分布和生成模型尽量接近。</p>\n<p>但是这个ELBO还是不好算，尽管它把$\\log$移到了求和符号也就是期望里面，所以转换一下形式：<br>\\[<br>{\\rm ELBO} = {\\mathbb E}_{q_{\\phi}(z|x)}\\left[ \\log p_{\\theta}(x,z) \\right] - {\\mathbb H} \\left[ q_{\\phi}(z|x) \\right]<br>\\]<br>因为模型一共有两组参数，一个是推理网络的参数$\\phi$，一个是生成网络的参数$\\theta$，所以下面分别对两个参数求导。</p>\n<p>首先对$\\theta$求偏导，因为只有第一项有这个参数，所以偏导为：<br>\\[<br>\\nabla_{\\theta}{\\rm ELBO} = {\\mathbb E}_{q_{\\phi}(z|x)}\\left[ \\nabla_{\\theta} \\log p_{\\theta}(x,z) \\right]<br>\\]<br>这个偏导可以按照概率$q_{\\phi}(z|x)$采样得到：<br>\\[<br>\\nabla_{\\theta}{\\rm ELBO} \\approx \\frac{1}{K}\\sum_{k=1}^{K} {\\nabla_{\\theta} \\log p_{\\theta}(x,z_k)}<br>\\]</p>\n<p>然后对$\\phi$求偏导，因为有两项含有这个参数，分别求偏导。第二项是熵，它的值其实可以用之前的$\\beta$数组算出来，算法如下：<br><img src=\"5.jpg\" alt><br>然后偏导可以交给深度学习库的自动微分，就不用你自己求啦。</p>\n<p>至于第一项的偏导可以用类似于策略梯度的方法解决：<br>\\[<br>\\begin{array}{l}{\\nabla _\\phi }{\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ = {\\nabla _\\phi }\\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z)} \\\\ = \\sum\\limits_z {\\log {p_\\theta }(x,z){\\nabla _\\phi }{q_\\phi }(z|x)} \\\\ = \\sum\\limits_z { {q_\\phi }(z|x)\\log {p_\\theta }(x,z){\\nabla _\\phi }\\log {q_\\phi }(z|x)} \\\\ = {\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z){\\nabla _\\phi }\\log {q_\\phi }(z|x)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}<br>\\]<br>这里最后也是转化为了采样，和策略梯度做法类似，这里加入baseline来提升性能：<br>\\[<br>\\begin{array}{l}{\\nabla _\\phi }{\\mathbb{E}_{ {q_\\phi }(z|x)}}\\left[ {\\log {p_\\theta }(x,z)} \\right]\\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {\\log {p_\\theta }(x,{z_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\\\ \\approx \\frac{1}{K}\\sum\\limits_{k = 1}^K {(\\log {p_\\theta }(x,{z_k}) - {r_k}){\\nabla _\\phi }\\log {q_\\phi }({z_k}|x)} \\end{array}<br>\\]<br>其中$r_k$定义为所有其他的对数联合概率的均值：<br>\\[<br>r_k = \\frac{1}{K-1} \\sum_{j \\ne k} \\log p_{\\theta}(x, z_j)<br>\\]</p>\n<p>至此所有偏导都已求出来了，两个通过采样得到，一个通过inside算法结果自动微分得到，所以去掉导数符号并相加就得到了最终的损失函数：<br>\\[<br>{\\mathcal L}(\\phi, \\theta) \\approx \\frac{1}{K} \\sum_{k=1}^K {\\left[ \\log p_{\\theta}(x, z_k) + (\\log p_{\\theta}(x, z_k) - r_k)\\log q_{\\phi}(z_k|x) \\right]} - {\\mathbb H}\\left[ q_{\\phi}(z|x) \\right]<br>\\]<br>一定要注意，这里的$\\log p_{\\theta}(x, z_k) - r_k$在代码实现的时候不能传入梯度，不然的话对$\\theta$的偏导就会多出这一项的偏导了！</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验结果这里就不多说了，细节具体看论文吧，就贴两个结果，一个是语言模型：<br><img src=\"6.jpg\" alt><br>可以看出在标准的PTB数据集上，URNNG效果只比监督学习的RNNG和用URNNG损失函数微调后的RNNG效果略差一点，但是在大数据集上，URNNG的优势就体现出来了。</p>\n<p>另一个是无监督成分句法分析，这里是用的全部长度的测试集：<br><img src=\"7.jpg\" alt><br>这个任务上URNNG效果是最好的。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><hr>\n<p>和之前两篇语言模型做无监督成分句法分析类似，这篇论文用推理网络学习句法树的概率分布并采样句法树，再用生成网络计算这些句法树和句子的联合概率，最后用变分推理最大化句子的概率，也就是学习出一个好的语言模型。</p>\n<p>这篇论文的工作还是挺令人惊叹的，融合了inside算法、RNNG、变分推理等等知识。本来我变分推理听老师讲了好几次了都云里雾里的，看了这篇论文后总算弄懂了一点了，不过所了解的还是很少，EM算法、VAE之类的高级境界根本不会。。。</p>\n"},{"title":"词性标注+语言模型简易实现","date":"2018-01-01T08:24:32.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n文本挖掘课的project，实现的是词性标注，增加了语言模型表示。\n语言模型在小数据下会过拟合，但是大数据训练要三个星期。。。所以还是放弃了，不添加语言模型好了。\n词性标注的话如果添加CRF效果反而会下降，也是很奇怪哦。。。如果直接用最裸的BiLSTM+charRNN的话，F1也能有97%左右，知足了，就这样吧。\n数据和完整程序下载地址：[传送门](https://github.com/godweiyang/text-mining)\n\n下面是两组实验结果，由于速度太慢了，一组要1小时训练时间，所以就没有加语言模型，而且只训练了10轮。\n\n第一组：\n```\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 3\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.29375948742\ntotal F1:  0.949073958671 0.395180722892\nepoch 1 finished\ntotal loss:  0.132068497052\ntotal F1:  0.954682553531 0.427710843373\nepoch 2 finished\ntotal loss:  0.110233872966\ntotal F1:  0.960266221303 0.483734939759\nepoch 3 finished\ntotal loss:  0.0115048246573\ntotal F1:  0.944312884812 0.367469879518\nepoch 4 finished\ntotal loss:  0.00533642838205\ntotal F1:  0.947378916669 0.375903614458\nepoch 5 finished\ntotal loss:  0.00460870711354\ntotal F1:  0.945584166314 0.34156626506\nepoch 6 finished\ntotal loss:  0.00420810207526\ntotal F1:  0.931001819677 0.269277108434\nepoch 7 finished\ntotal loss:  0.00402948848795\ntotal F1:  0.943490290899 0.321084337349\nepoch 8 finished\ntotal loss:  0.00390113119154\ntotal F1:  0.952813021911 0.431325301205\nepoch 9 finished\ntotal loss:  0.00367663722034\ntotal F1:  0.938579654511 0.31265060241\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam AUX\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC\n```\n\n第二组：\n```\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 10\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.304520357251\ntotal F1:  0.948201510582 0.387951807229\nepoch 1 finished\ntotal loss:  0.133941903738\ntotal F1:  0.957175262358 0.457228915663\nepoch 2 finished\ntotal loss:  0.111774144948\ntotal F1:  0.959019866889 0.455421686747\nepoch 3 finished\ntotal loss:  0.100073265445\ntotal F1:  0.960814617245 0.475301204819\nepoch 4 finished\ntotal loss:  0.0922900494867\ntotal F1:  0.962310242541 0.487951807229\nepoch 5 finished\ntotal loss:  0.0862275558798\ntotal F1:  0.963681232395 0.485542168675\nepoch 6 finished\ntotal loss:  0.0811706444901\ntotal F1:  0.963706159484 0.492168674699\nepoch 7 finished\ntotal loss:  0.0776693911075\ntotal F1:  0.962808784306 0.484939759036\nepoch 8 finished\ntotal loss:  0.0741868944795\ntotal F1:  0.9630331281 0.495180722892\nepoch 9 finished\ntotal loss:  0.0714286559878\ntotal F1:  0.963407034424 0.486144578313\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam VERB\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC\n```\n可以看出来，加了CRF（第一组）效果反而差了一点点，对最后例句的词性标注唯一的区别在于\"am\"是助动词AUX还是动词VERB，我发现训练集里两种都有，区别也不大。\n\n\n完整代码：\n``` python\nfrom collections import Counter, defaultdict\nfrom itertools import count\nimport random\nimport dynet as dy\nimport numpy as np\n\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\n\n# CRF parameters\nMAX_LIK_ITERS = 3\nSMALL_NUMBER = -1e10\nMARGIN = 0\n\nlm_train_file = \"LM_TRAIN\"\nlm_test_file = \"LM_DEV\"\ntrain_file = \"TAG_TRAIN\"\ndev_file = \"TAG_DEV\"\n\nif DEBUG:\n    lm_train_file += \"_SMALL\"\n    lm_test_file += \"_SMALL\"\n    train_file += \"_SMALL\"\n    dev_file += \"_SMALL\"\n\n# Language Model\nprint \"--------Language Model Training--------\"\n\ndef read_lm(fname):\n    with file(fname) as fh:\n        for line in fh:\n            sent = line.strip().split()\n            sent.append(\"<s>\")\n            yield sent\n\nlm_train = list(read_lm(lm_train_file))\nlm_test = list(read_lm(lm_test_file))\nlm_words = []\n\nfor sent in lm_train:\n    for w in sent:\n        lm_words.append(w)\n\nlm_words.append(\"_UNK_\")\n\nlm_w2i = defaultdict(count(0).next)\nfor word in lm_words:\n    lm_w2i[word]\nlm_i2w = {i:w for w, i in lm_w2i.iteritems()}\n\nlm_nwords = len(lm_w2i)\nlm_model = dy.Model()\nlm_trainer = dy.AdamTrainer(lm_model)\nlm_WORDS_LOOKUP = lm_model.add_lookup_parameters((lm_nwords, 64))\nlm_RNN = dy.LSTMBuilder(1, 64, 128, lm_model)\nlm_pW = lm_model.add_parameters((lm_nwords, 128))\nlm_pb = lm_model.add_parameters(lm_nwords)\n\ndef calc_lm_loss(sent):\n    dy.renew_cg()\n    W = dy.parameter(lm_pW)\n    b = dy.parameter(lm_pb)\n    f_init = lm_RNN.initial_state()\n\n    wids = []\n    for w in sent:\n        if w in lm_words:\n            wids.append(lm_w2i[w])\n        else:\n            wids.append(lm_w2i[\"_UNK_\"])\n\n    s = f_init.add_input(lm_WORDS_LOOKUP[wids[-1]])\n\n    losses = []\n    for wid in wids:\n        score = W * s.output() + b\n        loss = dy.pickneglogsoftmax(score, wid)\n        losses.append(loss)\n        s = s.add_input(lm_WORDS_LOOKUP[wid])\n    \n    return dy.esum(losses)\n\ndef calc_lm_embdding(words):\n    dy.renew_cg()\n    f_init = lm_RNN.initial_state()\n    wids = []\n    for w in words:\n        if w in lm_words:\n            wids.append(lm_w2i[w])\n        else:\n            wids.append(lm_w2i[\"_UNK_\"])\n    wids.append(lm_w2i[\"<s>\"])\n    s = f_init.add_input(lm_WORDS_LOOKUP[wids[-1]])\n    outputs = []\n    for wid in wids:\n        outputs.append(s.output().value())\n        s = s.add_input(lm_WORDS_LOOKUP[wid]) \n    return outputs\n\nif HASLM:\n    for ITER in xrange(LM_EPOCH):\n        lm_num_tagged = lm_cum_loss = 0\n        random.shuffle(lm_train)\n        i = 0\n        for s in lm_train:\n            loss_exp = calc_lm_loss(s)\n            lm_cum_loss += loss_exp.scalar_value()\n            lm_num_tagged += len(s)\n            loss_exp.backward()\n            lm_trainer.update()\n            if DEBUG == False:\n                i += 1\n                if i % 100 == 0:\n                    print \"train loss \", i, \": \", lm_cum_loss / lm_num_tagged\n\n        dev_loss = dev_words = 0\n        i = 0\n        for sent in lm_test:\n            loss_exp = calc_lm_loss(sent)\n            dev_loss += loss_exp.scalar_value()\n            dev_words += len(sent)\n            # if DEBUG == False:\n            #     i += 1\n            #     if i % 100 == 0:\n            #         print \"dev loss \", i, \": \", dev_loss / dev_words\n        print \"epoch %r finished\" % ITER\n        print \"total train loss: \", lm_cum_loss / lm_num_tagged\n        print \"total dev loss: \", dev_loss / dev_words\n\n# Tagger\nprint \"--------Sequence Tagger Training--------\"\n\ndef read(fname):\n    with file(fname) as fh:\n        for line in fh:\n            line = line.strip().split()\n            sent = [tuple(x.rsplit(\"/\", 1)) for x in line]\n            yield sent\n\ntrain = list(read(train_file))\ndev = list(read(dev_file))\nwords = []\ntags = []\nchars = set()\nwc = Counter()\nfor sent in train:\n    for w, p in sent:\n        words.append(w)\n        tags.append(p)\n        chars.update(w)\n        wc[w] += 1\n\nwords.append(\"_UNK_\")\nwords.append(\"_S_\")\ntags.append(\"_S_\")\nchars.add(\"<*>\")\n\nw2i = defaultdict(count(0).next)\nfor word in words:\n    w2i[word]\ni2w = {i:w for w, i in w2i.iteritems()}\n\nt2i = defaultdict(count(0).next)\nfor tag in tags:\n    t2i[tag]\ni2t = {i:w for w, i in t2i.iteritems()}\n\nc2i = defaultdict(count(0).next)\nfor char in chars:\n    c2i[char]\ni2c = {i:w for w, i in c2i.iteritems()}\n\nUNK = w2i[\"_UNK_\"]\nS_W = w2i[\"_S_\"]\nS_T = t2i[\"_S_\"]\n\nnwords = len(w2i)\nntags  = len(t2i)\nnchars  = len(c2i)\n\nmodel = dy.Model()\ntrainer = dy.AdamTrainer(model)\nWORDS_LOOKUP = model.add_lookup_parameters((nwords, 128))\nCHARS_LOOKUP = model.add_lookup_parameters((nchars, 20))\nTRANS_LOOKUP = model.add_lookup_parameters((ntags, ntags))\npH = model.add_parameters((32, 50*2))\npO = model.add_parameters((ntags, 32))\n\nfwdRNN = dy.LSTMBuilder(2, 128, 50, model)\nbwdRNN = dy.LSTMBuilder(2, 128, 50, model)\nif HASLM:\n    fwdRNN = dy.LSTMBuilder(2, 256, 50, model)\n    bwdRNN = dy.LSTMBuilder(2, 256, 50, model)\n\ncFwdRNN = dy.LSTMBuilder(1, 20, 64, model)\ncBwdRNN = dy.LSTMBuilder(1, 20, 64, model)\n\ndef word_rep(w, cf_init, cb_init):\n    if wc[w] > 5:\n        w_index = w2i[w]\n        return WORDS_LOOKUP[w_index]\n    else:\n        pad_char = c2i[\"<*>\"]\n        char_ids = [pad_char] + [c2i[c] for c in w] + [pad_char]\n        char_embs = [CHARS_LOOKUP[cid] for cid in char_ids]\n        fw_exps = cf_init.transduce(char_embs)\n        bw_exps = cb_init.transduce(reversed(char_embs))\n        return dy.concatenate([ fw_exps[-1], bw_exps[-1] ])\n\ndef build_tagging_graph(words):\n    lm_wembs = []\n    if HASLM:\n        lm_wembs = calc_lm_embdding(words)\n\n    dy.renew_cg()\n    H = dy.parameter(pH)\n    O = dy.parameter(pO)\n\n    f_init = fwdRNN.initial_state()\n    b_init = bwdRNN.initial_state()\n    cf_init = cFwdRNN.initial_state()\n    cb_init = cBwdRNN.initial_state()\n\n    wembs = [word_rep(w, cf_init, cb_init) for w in words]\n    if HASLM:\n        wembs1 = []\n        for lmw, w in zip(lm_wembs, wembs):\n            wv = w.value()\n            wv.extend(lmw)\n            wembs1.append(wv)\n        wembs = [dy.inputTensor(w) for w in wembs1]\n    wembs = [dy.noise(we, 0.1) for we in wembs]\n\n    fw_exps = f_init.transduce(wembs)\n    bw_exps = b_init.transduce(reversed(wembs))\n    bi_exps = [dy.concatenate([f, b]) for f, b in zip(fw_exps, reversed(bw_exps))]\n\n    exps = []\n    for x in bi_exps:\n        r_t = O * (dy.tanh(H * x))\n        exps.append(r_t)\n\n    return exps\n\ndef viterbi_decoding(vecs, gold_tags = []):\n    # Initialize\n    init_prob = [SMALL_NUMBER] * ntags\n    init_prob[S_T] = 0\n    for_expr = dy.inputVector(init_prob)\n    best_ids = []\n    trans_exprs = [TRANS_LOOKUP[tid] for tid in range(ntags)]\n    # Perform the forward pass through the sentence\n    for i, vec in enumerate(vecs):\n        my_best_ids = []\n        my_best_exprs = []\n        for next_tag in range(ntags):\n            # Calculate vector for single next tag\n            next_single_expr = for_expr + trans_exprs[next_tag]\n            next_single = next_single_expr.npvalue()\n            # Find and save the best score\n            my_best_id = np.argmax(next_single)\n            my_best_ids.append(my_best_id)\n            my_best_exprs.append(dy.pick(next_single_expr, my_best_id))\n        # Concatenate the scores for all vectors together\n        for_expr = dy.concatenate(my_best_exprs) + vec\n        # Give a bonus to all but the correct tag if using margin\n        if MARGIN != 0 and len(gold_tags) != 0:\n            adjust = [MARGIN] * ntags\n            adjust[t2i[gold_tags[i]]] = 0\n            for_expr = for_expr + dy.inputVector(adjust)\n        # Save the best ids\n        best_ids.append(my_best_ids)\n    # Perform the final step to the sentence terminal symbol\n    next_single_expr = for_expr + trans_exprs[S_T]\n    next_single = next_single_expr.npvalue()\n    my_best_id = np.argmax(next_single)\n    best_expr = dy.pick(next_single_expr, my_best_id)\n    # Perform the reverse pass\n    best_path = [i2t[my_best_id]]\n    for my_best_ids in reversed(best_ids):\n        my_best_id = my_best_ids[my_best_id]\n        best_path.append(i2t[my_best_id])\n    best_path.pop() # Remove final <s>\n    best_path.reverse()\n    # Return the best path and best score as an expression\n    return best_path, best_expr\n\ndef forced_decoding(vecs, tags):\n    # Initialize\n    for_expr = dy.scalarInput(0)\n    for_tag = S_T\n    # Perform the forward pass through the sentence\n    for i, vec in enumerate(vecs): \n        my_tag = t2i[tags[i]]\n        for_expr = for_expr + dy.pick(TRANS_LOOKUP[my_tag], for_tag) + vec[my_tag]\n        for_tag = my_tag\n    for_expr = for_expr + dy.pick(TRANS_LOOKUP[S_T], for_tag)\n    return for_expr\n\ndef viterbi_sent_loss(words, tags):\n    vecs = build_tagging_graph(words)\n    viterbi_tags, viterbi_score = viterbi_decoding(vecs, tags)\n    if viterbi_tags != tags:\n        reference_score = forced_decoding(vecs, tags)\n        return viterbi_score - reference_score\n    else:\n        return dy.scalarInput(0)\n\ndef sent_loss(words, tags):\n    vecs = build_tagging_graph(words)\n    errs = []\n    for v,t in zip(vecs,tags):\n        tid = t2i[t]\n        err = dy.pickneglogsoftmax(v, tid)\n        errs.append(err)\n    return dy.esum(errs)\n\ndef tag_sent(words):\n    vecs = build_tagging_graph(words)\n    vecs = [dy.softmax(v) for v in vecs]\n    probs = [v.npvalue() for v in vecs]\n    tags = []\n    for prb in probs:\n        tag = np.argmax(prb)\n        tags.append(i2t[tag])\n    return tags\n\nfor ITER in xrange(TAG_EPOCH):\n    num_tagged = cum_loss = 0\n    random.shuffle(train)\n    i = 0\n    for s in train:\n        words = [w for w, t in s]\n        golds = [t for w, t in s]\n\n        if ITER < MAX_LIK_ITERS:\n            loss_exp =  sent_loss(words, golds)\n        else:\n            loss_exp =  viterbi_sent_loss(words, golds)\n        cum_loss += loss_exp.scalar_value()\n        num_tagged += len(golds)\n        loss_exp.backward()\n        trainer.update()\n        if DEBUG == False:\n            i += 1\n            if i % 1000 == 0:\n                print \"train loss \", i, \": \", cum_loss / num_tagged\n\n    good_sent = bad_sent = good = bad = 0.0\n    i = 0\n    for sent in dev:\n        words = [w for w, t in sent]\n        golds = [t for w, t in sent]\n        if ITER < MAX_LIK_ITERS:\n            tags = tag_sent(words)\n        else:\n            vecs = build_tagging_graph(words)\n            tags, loss_exp = viterbi_decoding(vecs)\n        if tags == golds: good_sent += 1\n        else: bad_sent += 1\n        for go, gu in zip(golds, tags):\n            if go == gu: good += 1\n            else: bad += 1\n        # if DEBUG == False:\n        #     i += 1\n        #     if i % 1000 == 0:\n        #         print \"F1 \", i, \": \", good / (good + bad)\n    print \"epoch %r finished\" % ITER\n    print \"total loss: \", cum_loss / num_tagged\n    print \"total F1: \", good / (good + bad), good_sent / (good_sent + bad_sent)\n\ndef tagging(sentence):\n    words = sentence.strip().split()\n    if TAG_EPOCH <= MAX_LIK_ITERS:\n        tags = tag_sent(words)\n    else:\n        vecs = build_tagging_graph(words)\n        tags, loss_exp = viterbi_decoding(vecs)\n\tfor w, t in zip(words, tags):\n\t\tprint w, t\n\nif __name__ == '__main__':\n\tsentence = \"if you could see that i am the one who understands you .\"\n\ttagging(sentence)\n```\n","source":"_posts/POS-LM.md","raw":"---\ntitle: 词性标注+语言模型简易实现\ndate: 2018-01-01 16:24:32\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- Dynet\ncategories:\n- 序列标注\n---\n\n文本挖掘课的project，实现的是词性标注，增加了语言模型表示。\n语言模型在小数据下会过拟合，但是大数据训练要三个星期。。。所以还是放弃了，不添加语言模型好了。\n词性标注的话如果添加CRF效果反而会下降，也是很奇怪哦。。。如果直接用最裸的BiLSTM+charRNN的话，F1也能有97%左右，知足了，就这样吧。\n数据和完整程序下载地址：[传送门](https://github.com/godweiyang/text-mining)\n\n下面是两组实验结果，由于速度太慢了，一组要1小时训练时间，所以就没有加语言模型，而且只训练了10轮。\n\n第一组：\n```\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 3\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.29375948742\ntotal F1:  0.949073958671 0.395180722892\nepoch 1 finished\ntotal loss:  0.132068497052\ntotal F1:  0.954682553531 0.427710843373\nepoch 2 finished\ntotal loss:  0.110233872966\ntotal F1:  0.960266221303 0.483734939759\nepoch 3 finished\ntotal loss:  0.0115048246573\ntotal F1:  0.944312884812 0.367469879518\nepoch 4 finished\ntotal loss:  0.00533642838205\ntotal F1:  0.947378916669 0.375903614458\nepoch 5 finished\ntotal loss:  0.00460870711354\ntotal F1:  0.945584166314 0.34156626506\nepoch 6 finished\ntotal loss:  0.00420810207526\ntotal F1:  0.931001819677 0.269277108434\nepoch 7 finished\ntotal loss:  0.00402948848795\ntotal F1:  0.943490290899 0.321084337349\nepoch 8 finished\ntotal loss:  0.00390113119154\ntotal F1:  0.952813021911 0.431325301205\nepoch 9 finished\ntotal loss:  0.00367663722034\ntotal F1:  0.938579654511 0.31265060241\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam AUX\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC\n```\n\n第二组：\n```\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 10\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.304520357251\ntotal F1:  0.948201510582 0.387951807229\nepoch 1 finished\ntotal loss:  0.133941903738\ntotal F1:  0.957175262358 0.457228915663\nepoch 2 finished\ntotal loss:  0.111774144948\ntotal F1:  0.959019866889 0.455421686747\nepoch 3 finished\ntotal loss:  0.100073265445\ntotal F1:  0.960814617245 0.475301204819\nepoch 4 finished\ntotal loss:  0.0922900494867\ntotal F1:  0.962310242541 0.487951807229\nepoch 5 finished\ntotal loss:  0.0862275558798\ntotal F1:  0.963681232395 0.485542168675\nepoch 6 finished\ntotal loss:  0.0811706444901\ntotal F1:  0.963706159484 0.492168674699\nepoch 7 finished\ntotal loss:  0.0776693911075\ntotal F1:  0.962808784306 0.484939759036\nepoch 8 finished\ntotal loss:  0.0741868944795\ntotal F1:  0.9630331281 0.495180722892\nepoch 9 finished\ntotal loss:  0.0714286559878\ntotal F1:  0.963407034424 0.486144578313\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam VERB\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC\n```\n可以看出来，加了CRF（第一组）效果反而差了一点点，对最后例句的词性标注唯一的区别在于\"am\"是助动词AUX还是动词VERB，我发现训练集里两种都有，区别也不大。\n\n\n完整代码：\n``` python\nfrom collections import Counter, defaultdict\nfrom itertools import count\nimport random\nimport dynet as dy\nimport numpy as np\n\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\n\n# CRF parameters\nMAX_LIK_ITERS = 3\nSMALL_NUMBER = -1e10\nMARGIN = 0\n\nlm_train_file = \"LM_TRAIN\"\nlm_test_file = \"LM_DEV\"\ntrain_file = \"TAG_TRAIN\"\ndev_file = \"TAG_DEV\"\n\nif DEBUG:\n    lm_train_file += \"_SMALL\"\n    lm_test_file += \"_SMALL\"\n    train_file += \"_SMALL\"\n    dev_file += \"_SMALL\"\n\n# Language Model\nprint \"--------Language Model Training--------\"\n\ndef read_lm(fname):\n    with file(fname) as fh:\n        for line in fh:\n            sent = line.strip().split()\n            sent.append(\"<s>\")\n            yield sent\n\nlm_train = list(read_lm(lm_train_file))\nlm_test = list(read_lm(lm_test_file))\nlm_words = []\n\nfor sent in lm_train:\n    for w in sent:\n        lm_words.append(w)\n\nlm_words.append(\"_UNK_\")\n\nlm_w2i = defaultdict(count(0).next)\nfor word in lm_words:\n    lm_w2i[word]\nlm_i2w = {i:w for w, i in lm_w2i.iteritems()}\n\nlm_nwords = len(lm_w2i)\nlm_model = dy.Model()\nlm_trainer = dy.AdamTrainer(lm_model)\nlm_WORDS_LOOKUP = lm_model.add_lookup_parameters((lm_nwords, 64))\nlm_RNN = dy.LSTMBuilder(1, 64, 128, lm_model)\nlm_pW = lm_model.add_parameters((lm_nwords, 128))\nlm_pb = lm_model.add_parameters(lm_nwords)\n\ndef calc_lm_loss(sent):\n    dy.renew_cg()\n    W = dy.parameter(lm_pW)\n    b = dy.parameter(lm_pb)\n    f_init = lm_RNN.initial_state()\n\n    wids = []\n    for w in sent:\n        if w in lm_words:\n            wids.append(lm_w2i[w])\n        else:\n            wids.append(lm_w2i[\"_UNK_\"])\n\n    s = f_init.add_input(lm_WORDS_LOOKUP[wids[-1]])\n\n    losses = []\n    for wid in wids:\n        score = W * s.output() + b\n        loss = dy.pickneglogsoftmax(score, wid)\n        losses.append(loss)\n        s = s.add_input(lm_WORDS_LOOKUP[wid])\n    \n    return dy.esum(losses)\n\ndef calc_lm_embdding(words):\n    dy.renew_cg()\n    f_init = lm_RNN.initial_state()\n    wids = []\n    for w in words:\n        if w in lm_words:\n            wids.append(lm_w2i[w])\n        else:\n            wids.append(lm_w2i[\"_UNK_\"])\n    wids.append(lm_w2i[\"<s>\"])\n    s = f_init.add_input(lm_WORDS_LOOKUP[wids[-1]])\n    outputs = []\n    for wid in wids:\n        outputs.append(s.output().value())\n        s = s.add_input(lm_WORDS_LOOKUP[wid]) \n    return outputs\n\nif HASLM:\n    for ITER in xrange(LM_EPOCH):\n        lm_num_tagged = lm_cum_loss = 0\n        random.shuffle(lm_train)\n        i = 0\n        for s in lm_train:\n            loss_exp = calc_lm_loss(s)\n            lm_cum_loss += loss_exp.scalar_value()\n            lm_num_tagged += len(s)\n            loss_exp.backward()\n            lm_trainer.update()\n            if DEBUG == False:\n                i += 1\n                if i % 100 == 0:\n                    print \"train loss \", i, \": \", lm_cum_loss / lm_num_tagged\n\n        dev_loss = dev_words = 0\n        i = 0\n        for sent in lm_test:\n            loss_exp = calc_lm_loss(sent)\n            dev_loss += loss_exp.scalar_value()\n            dev_words += len(sent)\n            # if DEBUG == False:\n            #     i += 1\n            #     if i % 100 == 0:\n            #         print \"dev loss \", i, \": \", dev_loss / dev_words\n        print \"epoch %r finished\" % ITER\n        print \"total train loss: \", lm_cum_loss / lm_num_tagged\n        print \"total dev loss: \", dev_loss / dev_words\n\n# Tagger\nprint \"--------Sequence Tagger Training--------\"\n\ndef read(fname):\n    with file(fname) as fh:\n        for line in fh:\n            line = line.strip().split()\n            sent = [tuple(x.rsplit(\"/\", 1)) for x in line]\n            yield sent\n\ntrain = list(read(train_file))\ndev = list(read(dev_file))\nwords = []\ntags = []\nchars = set()\nwc = Counter()\nfor sent in train:\n    for w, p in sent:\n        words.append(w)\n        tags.append(p)\n        chars.update(w)\n        wc[w] += 1\n\nwords.append(\"_UNK_\")\nwords.append(\"_S_\")\ntags.append(\"_S_\")\nchars.add(\"<*>\")\n\nw2i = defaultdict(count(0).next)\nfor word in words:\n    w2i[word]\ni2w = {i:w for w, i in w2i.iteritems()}\n\nt2i = defaultdict(count(0).next)\nfor tag in tags:\n    t2i[tag]\ni2t = {i:w for w, i in t2i.iteritems()}\n\nc2i = defaultdict(count(0).next)\nfor char in chars:\n    c2i[char]\ni2c = {i:w for w, i in c2i.iteritems()}\n\nUNK = w2i[\"_UNK_\"]\nS_W = w2i[\"_S_\"]\nS_T = t2i[\"_S_\"]\n\nnwords = len(w2i)\nntags  = len(t2i)\nnchars  = len(c2i)\n\nmodel = dy.Model()\ntrainer = dy.AdamTrainer(model)\nWORDS_LOOKUP = model.add_lookup_parameters((nwords, 128))\nCHARS_LOOKUP = model.add_lookup_parameters((nchars, 20))\nTRANS_LOOKUP = model.add_lookup_parameters((ntags, ntags))\npH = model.add_parameters((32, 50*2))\npO = model.add_parameters((ntags, 32))\n\nfwdRNN = dy.LSTMBuilder(2, 128, 50, model)\nbwdRNN = dy.LSTMBuilder(2, 128, 50, model)\nif HASLM:\n    fwdRNN = dy.LSTMBuilder(2, 256, 50, model)\n    bwdRNN = dy.LSTMBuilder(2, 256, 50, model)\n\ncFwdRNN = dy.LSTMBuilder(1, 20, 64, model)\ncBwdRNN = dy.LSTMBuilder(1, 20, 64, model)\n\ndef word_rep(w, cf_init, cb_init):\n    if wc[w] > 5:\n        w_index = w2i[w]\n        return WORDS_LOOKUP[w_index]\n    else:\n        pad_char = c2i[\"<*>\"]\n        char_ids = [pad_char] + [c2i[c] for c in w] + [pad_char]\n        char_embs = [CHARS_LOOKUP[cid] for cid in char_ids]\n        fw_exps = cf_init.transduce(char_embs)\n        bw_exps = cb_init.transduce(reversed(char_embs))\n        return dy.concatenate([ fw_exps[-1], bw_exps[-1] ])\n\ndef build_tagging_graph(words):\n    lm_wembs = []\n    if HASLM:\n        lm_wembs = calc_lm_embdding(words)\n\n    dy.renew_cg()\n    H = dy.parameter(pH)\n    O = dy.parameter(pO)\n\n    f_init = fwdRNN.initial_state()\n    b_init = bwdRNN.initial_state()\n    cf_init = cFwdRNN.initial_state()\n    cb_init = cBwdRNN.initial_state()\n\n    wembs = [word_rep(w, cf_init, cb_init) for w in words]\n    if HASLM:\n        wembs1 = []\n        for lmw, w in zip(lm_wembs, wembs):\n            wv = w.value()\n            wv.extend(lmw)\n            wembs1.append(wv)\n        wembs = [dy.inputTensor(w) for w in wembs1]\n    wembs = [dy.noise(we, 0.1) for we in wembs]\n\n    fw_exps = f_init.transduce(wembs)\n    bw_exps = b_init.transduce(reversed(wembs))\n    bi_exps = [dy.concatenate([f, b]) for f, b in zip(fw_exps, reversed(bw_exps))]\n\n    exps = []\n    for x in bi_exps:\n        r_t = O * (dy.tanh(H * x))\n        exps.append(r_t)\n\n    return exps\n\ndef viterbi_decoding(vecs, gold_tags = []):\n    # Initialize\n    init_prob = [SMALL_NUMBER] * ntags\n    init_prob[S_T] = 0\n    for_expr = dy.inputVector(init_prob)\n    best_ids = []\n    trans_exprs = [TRANS_LOOKUP[tid] for tid in range(ntags)]\n    # Perform the forward pass through the sentence\n    for i, vec in enumerate(vecs):\n        my_best_ids = []\n        my_best_exprs = []\n        for next_tag in range(ntags):\n            # Calculate vector for single next tag\n            next_single_expr = for_expr + trans_exprs[next_tag]\n            next_single = next_single_expr.npvalue()\n            # Find and save the best score\n            my_best_id = np.argmax(next_single)\n            my_best_ids.append(my_best_id)\n            my_best_exprs.append(dy.pick(next_single_expr, my_best_id))\n        # Concatenate the scores for all vectors together\n        for_expr = dy.concatenate(my_best_exprs) + vec\n        # Give a bonus to all but the correct tag if using margin\n        if MARGIN != 0 and len(gold_tags) != 0:\n            adjust = [MARGIN] * ntags\n            adjust[t2i[gold_tags[i]]] = 0\n            for_expr = for_expr + dy.inputVector(adjust)\n        # Save the best ids\n        best_ids.append(my_best_ids)\n    # Perform the final step to the sentence terminal symbol\n    next_single_expr = for_expr + trans_exprs[S_T]\n    next_single = next_single_expr.npvalue()\n    my_best_id = np.argmax(next_single)\n    best_expr = dy.pick(next_single_expr, my_best_id)\n    # Perform the reverse pass\n    best_path = [i2t[my_best_id]]\n    for my_best_ids in reversed(best_ids):\n        my_best_id = my_best_ids[my_best_id]\n        best_path.append(i2t[my_best_id])\n    best_path.pop() # Remove final <s>\n    best_path.reverse()\n    # Return the best path and best score as an expression\n    return best_path, best_expr\n\ndef forced_decoding(vecs, tags):\n    # Initialize\n    for_expr = dy.scalarInput(0)\n    for_tag = S_T\n    # Perform the forward pass through the sentence\n    for i, vec in enumerate(vecs): \n        my_tag = t2i[tags[i]]\n        for_expr = for_expr + dy.pick(TRANS_LOOKUP[my_tag], for_tag) + vec[my_tag]\n        for_tag = my_tag\n    for_expr = for_expr + dy.pick(TRANS_LOOKUP[S_T], for_tag)\n    return for_expr\n\ndef viterbi_sent_loss(words, tags):\n    vecs = build_tagging_graph(words)\n    viterbi_tags, viterbi_score = viterbi_decoding(vecs, tags)\n    if viterbi_tags != tags:\n        reference_score = forced_decoding(vecs, tags)\n        return viterbi_score - reference_score\n    else:\n        return dy.scalarInput(0)\n\ndef sent_loss(words, tags):\n    vecs = build_tagging_graph(words)\n    errs = []\n    for v,t in zip(vecs,tags):\n        tid = t2i[t]\n        err = dy.pickneglogsoftmax(v, tid)\n        errs.append(err)\n    return dy.esum(errs)\n\ndef tag_sent(words):\n    vecs = build_tagging_graph(words)\n    vecs = [dy.softmax(v) for v in vecs]\n    probs = [v.npvalue() for v in vecs]\n    tags = []\n    for prb in probs:\n        tag = np.argmax(prb)\n        tags.append(i2t[tag])\n    return tags\n\nfor ITER in xrange(TAG_EPOCH):\n    num_tagged = cum_loss = 0\n    random.shuffle(train)\n    i = 0\n    for s in train:\n        words = [w for w, t in s]\n        golds = [t for w, t in s]\n\n        if ITER < MAX_LIK_ITERS:\n            loss_exp =  sent_loss(words, golds)\n        else:\n            loss_exp =  viterbi_sent_loss(words, golds)\n        cum_loss += loss_exp.scalar_value()\n        num_tagged += len(golds)\n        loss_exp.backward()\n        trainer.update()\n        if DEBUG == False:\n            i += 1\n            if i % 1000 == 0:\n                print \"train loss \", i, \": \", cum_loss / num_tagged\n\n    good_sent = bad_sent = good = bad = 0.0\n    i = 0\n    for sent in dev:\n        words = [w for w, t in sent]\n        golds = [t for w, t in sent]\n        if ITER < MAX_LIK_ITERS:\n            tags = tag_sent(words)\n        else:\n            vecs = build_tagging_graph(words)\n            tags, loss_exp = viterbi_decoding(vecs)\n        if tags == golds: good_sent += 1\n        else: bad_sent += 1\n        for go, gu in zip(golds, tags):\n            if go == gu: good += 1\n            else: bad += 1\n        # if DEBUG == False:\n        #     i += 1\n        #     if i % 1000 == 0:\n        #         print \"F1 \", i, \": \", good / (good + bad)\n    print \"epoch %r finished\" % ITER\n    print \"total loss: \", cum_loss / num_tagged\n    print \"total F1: \", good / (good + bad), good_sent / (good_sent + bad_sent)\n\ndef tagging(sentence):\n    words = sentence.strip().split()\n    if TAG_EPOCH <= MAX_LIK_ITERS:\n        tags = tag_sent(words)\n    else:\n        vecs = build_tagging_graph(words)\n        tags, loss_exp = viterbi_decoding(vecs)\n\tfor w, t in zip(words, tags):\n\t\tprint w, t\n\nif __name__ == '__main__':\n\tsentence = \"if you could see that i am the one who understands you .\"\n\ttagging(sentence)\n```\n","slug":"POS-LM","published":1,"updated":"2019-07-20T04:20:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982bx004o7swey2lrt3rs","content":"<p>文本挖掘课的project，实现的是词性标注，增加了语言模型表示。<br>语言模型在小数据下会过拟合，但是大数据训练要三个星期。。。所以还是放弃了，不添加语言模型好了。<br>词性标注的话如果添加CRF效果反而会下降，也是很奇怪哦。。。如果直接用最裸的BiLSTM+charRNN的话，F1也能有97%左右，知足了，就这样吧。<br>数据和完整程序下载地址：<a href=\"https://github.com/godweiyang/text-mining\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>下面是两组实验结果，由于速度太慢了，一组要1小时训练时间，所以就没有加语言模型，而且只训练了10轮。</p>\n<p>第一组：</p>\n<pre><code>DEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 3\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.29375948742\ntotal F1:  0.949073958671 0.395180722892\nepoch 1 finished\ntotal loss:  0.132068497052\ntotal F1:  0.954682553531 0.427710843373\nepoch 2 finished\ntotal loss:  0.110233872966\ntotal F1:  0.960266221303 0.483734939759\nepoch 3 finished\ntotal loss:  0.0115048246573\ntotal F1:  0.944312884812 0.367469879518\nepoch 4 finished\ntotal loss:  0.00533642838205\ntotal F1:  0.947378916669 0.375903614458\nepoch 5 finished\ntotal loss:  0.00460870711354\ntotal F1:  0.945584166314 0.34156626506\nepoch 6 finished\ntotal loss:  0.00420810207526\ntotal F1:  0.931001819677 0.269277108434\nepoch 7 finished\ntotal loss:  0.00402948848795\ntotal F1:  0.943490290899 0.321084337349\nepoch 8 finished\ntotal loss:  0.00390113119154\ntotal F1:  0.952813021911 0.431325301205\nepoch 9 finished\ntotal loss:  0.00367663722034\ntotal F1:  0.938579654511 0.31265060241\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam AUX\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC</code></pre><p>第二组：</p>\n<pre><code>DEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 10\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.304520357251\ntotal F1:  0.948201510582 0.387951807229\nepoch 1 finished\ntotal loss:  0.133941903738\ntotal F1:  0.957175262358 0.457228915663\nepoch 2 finished\ntotal loss:  0.111774144948\ntotal F1:  0.959019866889 0.455421686747\nepoch 3 finished\ntotal loss:  0.100073265445\ntotal F1:  0.960814617245 0.475301204819\nepoch 4 finished\ntotal loss:  0.0922900494867\ntotal F1:  0.962310242541 0.487951807229\nepoch 5 finished\ntotal loss:  0.0862275558798\ntotal F1:  0.963681232395 0.485542168675\nepoch 6 finished\ntotal loss:  0.0811706444901\ntotal F1:  0.963706159484 0.492168674699\nepoch 7 finished\ntotal loss:  0.0776693911075\ntotal F1:  0.962808784306 0.484939759036\nepoch 8 finished\ntotal loss:  0.0741868944795\ntotal F1:  0.9630331281 0.495180722892\nepoch 9 finished\ntotal loss:  0.0714286559878\ntotal F1:  0.963407034424 0.486144578313\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam VERB\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC</code></pre><p>可以看出来，加了CRF（第一组）效果反而差了一点点，对最后例句的词性标注唯一的区别在于”am”是助动词AUX还是动词VERB，我发现训练集里两种都有，区别也不大。</p>\n<p>完整代码：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter<span class=\"token punctuation\">,</span> defaultdict\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> count\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> dynet <span class=\"token keyword\">as</span> dy\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\nDEBUG <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nHASLM <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nLM_EPOCH <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nTAG_EPOCH <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># CRF parameters</span>\nMAX_LIK_ITERS <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nSMALL_NUMBER <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1e10</span>\nMARGIN <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nlm_train_file <span class=\"token operator\">=</span> <span class=\"token string\">\"LM_TRAIN\"</span>\nlm_test_file <span class=\"token operator\">=</span> <span class=\"token string\">\"LM_DEV\"</span>\ntrain_file <span class=\"token operator\">=</span> <span class=\"token string\">\"TAG_TRAIN\"</span>\ndev_file <span class=\"token operator\">=</span> <span class=\"token string\">\"TAG_DEV\"</span>\n\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    lm_train_file <span class=\"token operator\">+=</span> <span class=\"token string\">\"_SMALL\"</span>\n    lm_test_file <span class=\"token operator\">+=</span> <span class=\"token string\">\"_SMALL\"</span>\n    train_file <span class=\"token operator\">+=</span> <span class=\"token string\">\"_SMALL\"</span>\n    dev_file <span class=\"token operator\">+=</span> <span class=\"token string\">\"_SMALL\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># Language Model</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"--------Language Model Training--------\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_lm</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> file<span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fh<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fh<span class=\"token punctuation\">:</span>\n            sent <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            sent<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;s>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> sent\n\nlm_train <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>read_lm<span class=\"token punctuation\">(</span>lm_train_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlm_test <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>read_lm<span class=\"token punctuation\">(</span>lm_test_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlm_words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> sent <span class=\"token keyword\">in</span> lm_train<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> sent<span class=\"token punctuation\">:</span>\n        lm_words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n\nlm_words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"_UNK_\"</span><span class=\"token punctuation\">)</span>\n\nlm_w2i <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> lm_words<span class=\"token punctuation\">:</span>\n    lm_w2i<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span>\nlm_i2w <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">:</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> lm_w2i<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\nlm_nwords <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>lm_w2i<span class=\"token punctuation\">)</span>\nlm_model <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlm_trainer <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>AdamTrainer<span class=\"token punctuation\">(</span>lm_model<span class=\"token punctuation\">)</span>\nlm_WORDS_LOOKUP <span class=\"token operator\">=</span> lm_model<span class=\"token punctuation\">.</span>add_lookup_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lm_nwords<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlm_RNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> lm_model<span class=\"token punctuation\">)</span>\nlm_pW <span class=\"token operator\">=</span> lm_model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lm_nwords<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlm_pb <span class=\"token operator\">=</span> lm_model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span>lm_nwords<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc_lm_loss</span><span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dy<span class=\"token punctuation\">.</span>renew_cg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    W <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">(</span>lm_pW<span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">(</span>lm_pb<span class=\"token punctuation\">)</span>\n    f_init <span class=\"token operator\">=</span> lm_RNN<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    wids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> sent<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> w <span class=\"token keyword\">in</span> lm_words<span class=\"token punctuation\">:</span>\n            wids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lm_w2i<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            wids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lm_w2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"_UNK_\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    s <span class=\"token operator\">=</span> f_init<span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>lm_WORDS_LOOKUP<span class=\"token punctuation\">[</span>wids<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    losses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> wid <span class=\"token keyword\">in</span> wids<span class=\"token punctuation\">:</span>\n        score <span class=\"token operator\">=</span> W <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b\n        loss <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>pickneglogsoftmax<span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">,</span> wid<span class=\"token punctuation\">)</span>\n        losses<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">)</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>lm_WORDS_LOOKUP<span class=\"token punctuation\">[</span>wid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> dy<span class=\"token punctuation\">.</span>esum<span class=\"token punctuation\">(</span>losses<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc_lm_embdding</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dy<span class=\"token punctuation\">.</span>renew_cg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    f_init <span class=\"token operator\">=</span> lm_RNN<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    wids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> w <span class=\"token keyword\">in</span> lm_words<span class=\"token punctuation\">:</span>\n            wids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lm_w2i<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            wids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lm_w2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"_UNK_\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    wids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lm_w2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;s>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> f_init<span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>lm_WORDS_LOOKUP<span class=\"token punctuation\">[</span>wids<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> wid <span class=\"token keyword\">in</span> wids<span class=\"token punctuation\">:</span>\n        outputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>lm_WORDS_LOOKUP<span class=\"token punctuation\">[</span>wid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">return</span> outputs\n\n<span class=\"token keyword\">if</span> HASLM<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> ITER <span class=\"token keyword\">in</span> xrange<span class=\"token punctuation\">(</span>LM_EPOCH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        lm_num_tagged <span class=\"token operator\">=</span> lm_cum_loss <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>lm_train<span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> lm_train<span class=\"token punctuation\">:</span>\n            loss_exp <span class=\"token operator\">=</span> calc_lm_loss<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n            lm_cum_loss <span class=\"token operator\">+=</span> loss_exp<span class=\"token punctuation\">.</span>scalar_value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            lm_num_tagged <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n            loss_exp<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            lm_trainer<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> DEBUG <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">print</span> <span class=\"token string\">\"train loss \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> lm_cum_loss <span class=\"token operator\">/</span> lm_num_tagged\n\n        dev_loss <span class=\"token operator\">=</span> dev_words <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> sent <span class=\"token keyword\">in</span> lm_test<span class=\"token punctuation\">:</span>\n            loss_exp <span class=\"token operator\">=</span> calc_lm_loss<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span>\n            dev_loss <span class=\"token operator\">+=</span> loss_exp<span class=\"token punctuation\">.</span>scalar_value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            dev_words <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\"># if DEBUG == False:</span>\n            <span class=\"token comment\" spellcheck=\"true\">#     i += 1</span>\n            <span class=\"token comment\" spellcheck=\"true\">#     if i % 100 == 0:</span>\n            <span class=\"token comment\" spellcheck=\"true\">#         print \"dev loss \", i, \": \", dev_loss / dev_words</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"epoch %r finished\"</span> <span class=\"token operator\">%</span> ITER\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"total train loss: \"</span><span class=\"token punctuation\">,</span> lm_cum_loss <span class=\"token operator\">/</span> lm_num_tagged\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"total dev loss: \"</span><span class=\"token punctuation\">,</span> dev_loss <span class=\"token operator\">/</span> dev_words\n\n<span class=\"token comment\" spellcheck=\"true\"># Tagger</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"--------Sequence Tagger Training--------\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> file<span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fh<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fh<span class=\"token punctuation\">:</span>\n            line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            sent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tuple<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>rsplit<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">yield</span> sent\n\ntrain <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">(</span>train_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndev <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">(</span>dev_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nwords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nchars <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwc <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> sent <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> p <span class=\"token keyword\">in</span> sent<span class=\"token punctuation\">:</span>\n        words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n        tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        chars<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n        wc<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\nwords<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"_UNK_\"</span><span class=\"token punctuation\">)</span>\nwords<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"_S_\"</span><span class=\"token punctuation\">)</span>\ntags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"_S_\"</span><span class=\"token punctuation\">)</span>\nchars<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;*>\"</span><span class=\"token punctuation\">)</span>\n\nw2i <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n    w2i<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span>\ni2w <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">:</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> w2i<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\nt2i <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> tag <span class=\"token keyword\">in</span> tags<span class=\"token punctuation\">:</span>\n    t2i<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span>\ni2t <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">:</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> t2i<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\nc2i <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> chars<span class=\"token punctuation\">:</span>\n    c2i<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span>\ni2c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">:</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> c2i<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\nUNK <span class=\"token operator\">=</span> w2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"_UNK_\"</span><span class=\"token punctuation\">]</span>\nS_W <span class=\"token operator\">=</span> w2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"_S_\"</span><span class=\"token punctuation\">]</span>\nS_T <span class=\"token operator\">=</span> t2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"_S_\"</span><span class=\"token punctuation\">]</span>\n\nnwords <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>w2i<span class=\"token punctuation\">)</span>\nntags  <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>t2i<span class=\"token punctuation\">)</span>\nnchars  <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>c2i<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrainer <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>AdamTrainer<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\nWORDS_LOOKUP <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_lookup_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwords<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nCHARS_LOOKUP <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_lookup_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nchars<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nTRANS_LOOKUP <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_lookup_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ntags<span class=\"token punctuation\">,</span> ntags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npH <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npO <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ntags<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nfwdRNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\nbwdRNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> HASLM<span class=\"token punctuation\">:</span>\n    fwdRNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\n    bwdRNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\n\ncFwdRNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\ncBwdRNN <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>LSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">word_rep</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> cf_init<span class=\"token punctuation\">,</span> cb_init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> wc<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n        w_index <span class=\"token operator\">=</span> w2i<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> WORDS_LOOKUP<span class=\"token punctuation\">[</span>w_index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        pad_char <span class=\"token operator\">=</span> c2i<span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;*>\"</span><span class=\"token punctuation\">]</span>\n        char_ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pad_char<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>c2i<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pad_char<span class=\"token punctuation\">]</span>\n        char_embs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CHARS_LOOKUP<span class=\"token punctuation\">[</span>cid<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> cid <span class=\"token keyword\">in</span> char_ids<span class=\"token punctuation\">]</span>\n        fw_exps <span class=\"token operator\">=</span> cf_init<span class=\"token punctuation\">.</span>transduce<span class=\"token punctuation\">(</span>char_embs<span class=\"token punctuation\">)</span>\n        bw_exps <span class=\"token operator\">=</span> cb_init<span class=\"token punctuation\">.</span>transduce<span class=\"token punctuation\">(</span>reversed<span class=\"token punctuation\">(</span>char_embs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dy<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> fw_exps<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bw_exps<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_tagging_graph</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lm_wembs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> HASLM<span class=\"token punctuation\">:</span>\n        lm_wembs <span class=\"token operator\">=</span> calc_lm_embdding<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n\n    dy<span class=\"token punctuation\">.</span>renew_cg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    H <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">(</span>pH<span class=\"token punctuation\">)</span>\n    O <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">(</span>pO<span class=\"token punctuation\">)</span>\n\n    f_init <span class=\"token operator\">=</span> fwdRNN<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b_init <span class=\"token operator\">=</span> bwdRNN<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cf_init <span class=\"token operator\">=</span> cFwdRNN<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cb_init <span class=\"token operator\">=</span> cBwdRNN<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    wembs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>word_rep<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> cf_init<span class=\"token punctuation\">,</span> cb_init<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> HASLM<span class=\"token punctuation\">:</span>\n        wembs1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> lmw<span class=\"token punctuation\">,</span> w <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>lm_wembs<span class=\"token punctuation\">,</span> wembs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            wv <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            wv<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>lmw<span class=\"token punctuation\">)</span>\n            wembs1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>wv<span class=\"token punctuation\">)</span>\n        wembs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dy<span class=\"token punctuation\">.</span>inputTensor<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> wembs1<span class=\"token punctuation\">]</span>\n    wembs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dy<span class=\"token punctuation\">.</span>noise<span class=\"token punctuation\">(</span>we<span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> we <span class=\"token keyword\">in</span> wembs<span class=\"token punctuation\">]</span>\n\n    fw_exps <span class=\"token operator\">=</span> f_init<span class=\"token punctuation\">.</span>transduce<span class=\"token punctuation\">(</span>wembs<span class=\"token punctuation\">)</span>\n    bw_exps <span class=\"token operator\">=</span> b_init<span class=\"token punctuation\">.</span>transduce<span class=\"token punctuation\">(</span>reversed<span class=\"token punctuation\">(</span>wembs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    bi_exps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dy<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> f<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>fw_exps<span class=\"token punctuation\">,</span> reversed<span class=\"token punctuation\">(</span>bw_exps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    exps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> bi_exps<span class=\"token punctuation\">:</span>\n        r_t <span class=\"token operator\">=</span> O <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">.</span>tanh<span class=\"token punctuation\">(</span>H <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        exps<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>r_t<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> exps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">viterbi_decoding</span><span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">,</span> gold_tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Initialize</span>\n    init_prob <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>SMALL_NUMBER<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> ntags\n    init_prob<span class=\"token punctuation\">[</span>S_T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    for_expr <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>inputVector<span class=\"token punctuation\">(</span>init_prob<span class=\"token punctuation\">)</span>\n    best_ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    trans_exprs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>TRANS_LOOKUP<span class=\"token punctuation\">[</span>tid<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> tid <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>ntags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Perform the forward pass through the sentence</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> vec <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        my_best_ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        my_best_exprs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> next_tag <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>ntags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\"># Calculate vector for single next tag</span>\n            next_single_expr <span class=\"token operator\">=</span> for_expr <span class=\"token operator\">+</span> trans_exprs<span class=\"token punctuation\">[</span>next_tag<span class=\"token punctuation\">]</span>\n            next_single <span class=\"token operator\">=</span> next_single_expr<span class=\"token punctuation\">.</span>npvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\"># Find and save the best score</span>\n            my_best_id <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>next_single<span class=\"token punctuation\">)</span>\n            my_best_ids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>my_best_id<span class=\"token punctuation\">)</span>\n            my_best_exprs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">.</span>pick<span class=\"token punctuation\">(</span>next_single_expr<span class=\"token punctuation\">,</span> my_best_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># Concatenate the scores for all vectors together</span>\n        for_expr <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span>my_best_exprs<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> vec\n        <span class=\"token comment\" spellcheck=\"true\"># Give a bonus to all but the correct tag if using margin</span>\n        <span class=\"token keyword\">if</span> MARGIN <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> len<span class=\"token punctuation\">(</span>gold_tags<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            adjust <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MARGIN<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> ntags\n            adjust<span class=\"token punctuation\">[</span>t2i<span class=\"token punctuation\">[</span>gold_tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            for_expr <span class=\"token operator\">=</span> for_expr <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">.</span>inputVector<span class=\"token punctuation\">(</span>adjust<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># Save the best ids</span>\n        best_ids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>my_best_ids<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Perform the final step to the sentence terminal symbol</span>\n    next_single_expr <span class=\"token operator\">=</span> for_expr <span class=\"token operator\">+</span> trans_exprs<span class=\"token punctuation\">[</span>S_T<span class=\"token punctuation\">]</span>\n    next_single <span class=\"token operator\">=</span> next_single_expr<span class=\"token punctuation\">.</span>npvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    my_best_id <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>next_single<span class=\"token punctuation\">)</span>\n    best_expr <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>pick<span class=\"token punctuation\">(</span>next_single_expr<span class=\"token punctuation\">,</span> my_best_id<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Perform the reverse pass</span>\n    best_path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i2t<span class=\"token punctuation\">[</span>my_best_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> my_best_ids <span class=\"token keyword\">in</span> reversed<span class=\"token punctuation\">(</span>best_ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        my_best_id <span class=\"token operator\">=</span> my_best_ids<span class=\"token punctuation\">[</span>my_best_id<span class=\"token punctuation\">]</span>\n        best_path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i2t<span class=\"token punctuation\">[</span>my_best_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    best_path<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># Remove final &lt;s></span>\n    best_path<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Return the best path and best score as an expression</span>\n    <span class=\"token keyword\">return</span> best_path<span class=\"token punctuation\">,</span> best_expr\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">forced_decoding</span><span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Initialize</span>\n    for_expr <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>scalarInput<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    for_tag <span class=\"token operator\">=</span> S_T\n    <span class=\"token comment\" spellcheck=\"true\"># Perform the forward pass through the sentence</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> vec <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        my_tag <span class=\"token operator\">=</span> t2i<span class=\"token punctuation\">[</span>tags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        for_expr <span class=\"token operator\">=</span> for_expr <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">.</span>pick<span class=\"token punctuation\">(</span>TRANS_LOOKUP<span class=\"token punctuation\">[</span>my_tag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> for_tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> vec<span class=\"token punctuation\">[</span>my_tag<span class=\"token punctuation\">]</span>\n        for_tag <span class=\"token operator\">=</span> my_tag\n    for_expr <span class=\"token operator\">=</span> for_expr <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">.</span>pick<span class=\"token punctuation\">(</span>TRANS_LOOKUP<span class=\"token punctuation\">[</span>S_T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> for_tag<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> for_expr\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">viterbi_sent_loss</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    vecs <span class=\"token operator\">=</span> build_tagging_graph<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n    viterbi_tags<span class=\"token punctuation\">,</span> viterbi_score <span class=\"token operator\">=</span> viterbi_decoding<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> viterbi_tags <span class=\"token operator\">!=</span> tags<span class=\"token punctuation\">:</span>\n        reference_score <span class=\"token operator\">=</span> forced_decoding<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> viterbi_score <span class=\"token operator\">-</span> reference_score\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> dy<span class=\"token punctuation\">.</span>scalarInput<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sent_loss</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    vecs <span class=\"token operator\">=</span> build_tagging_graph<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n    errs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> v<span class=\"token punctuation\">,</span>t <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">,</span>tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        tid <span class=\"token operator\">=</span> t2i<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n        err <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>pickneglogsoftmax<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> tid<span class=\"token punctuation\">)</span>\n        errs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dy<span class=\"token punctuation\">.</span>esum<span class=\"token punctuation\">(</span>errs<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">tag_sent</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    vecs <span class=\"token operator\">=</span> build_tagging_graph<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n    vecs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dy<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> vecs<span class=\"token punctuation\">]</span>\n    probs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>npvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> vecs<span class=\"token punctuation\">]</span>\n    tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> prb <span class=\"token keyword\">in</span> probs<span class=\"token punctuation\">:</span>\n        tag <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>prb<span class=\"token punctuation\">)</span>\n        tags<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i2t<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> tags\n\n<span class=\"token keyword\">for</span> ITER <span class=\"token keyword\">in</span> xrange<span class=\"token punctuation\">(</span>TAG_EPOCH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num_tagged <span class=\"token operator\">=</span> cum_loss <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> train<span class=\"token punctuation\">:</span>\n        words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span>\n        golds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> ITER <span class=\"token operator\">&lt;</span> MAX_LIK_ITERS<span class=\"token punctuation\">:</span>\n            loss_exp <span class=\"token operator\">=</span>  sent_loss<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> golds<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            loss_exp <span class=\"token operator\">=</span>  viterbi_sent_loss<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> golds<span class=\"token punctuation\">)</span>\n        cum_loss <span class=\"token operator\">+=</span> loss_exp<span class=\"token punctuation\">.</span>scalar_value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        num_tagged <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">(</span>golds<span class=\"token punctuation\">)</span>\n        loss_exp<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        trainer<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> DEBUG <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">1000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span> <span class=\"token string\">\"train loss \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> cum_loss <span class=\"token operator\">/</span> num_tagged\n\n    good_sent <span class=\"token operator\">=</span> bad_sent <span class=\"token operator\">=</span> good <span class=\"token operator\">=</span> bad <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> sent <span class=\"token keyword\">in</span> dev<span class=\"token punctuation\">:</span>\n        words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> sent<span class=\"token punctuation\">]</span>\n        golds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> sent<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> ITER <span class=\"token operator\">&lt;</span> MAX_LIK_ITERS<span class=\"token punctuation\">:</span>\n            tags <span class=\"token operator\">=</span> tag_sent<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            vecs <span class=\"token operator\">=</span> build_tagging_graph<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n            tags<span class=\"token punctuation\">,</span> loss_exp <span class=\"token operator\">=</span> viterbi_decoding<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> tags <span class=\"token operator\">==</span> golds<span class=\"token punctuation\">:</span> good_sent <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> bad_sent <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> go<span class=\"token punctuation\">,</span> gu <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>golds<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> go <span class=\"token operator\">==</span> gu<span class=\"token punctuation\">:</span> good <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> bad <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\" spellcheck=\"true\"># if DEBUG == False:</span>\n        <span class=\"token comment\" spellcheck=\"true\">#     i += 1</span>\n        <span class=\"token comment\" spellcheck=\"true\">#     if i % 1000 == 0:</span>\n        <span class=\"token comment\" spellcheck=\"true\">#         print \"F1 \", i, \": \", good / (good + bad)</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"epoch %r finished\"</span> <span class=\"token operator\">%</span> ITER\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"total loss: \"</span><span class=\"token punctuation\">,</span> cum_loss <span class=\"token operator\">/</span> num_tagged\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"total F1: \"</span><span class=\"token punctuation\">,</span> good <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>good <span class=\"token operator\">+</span> bad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> good_sent <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>good_sent <span class=\"token operator\">+</span> bad_sent<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">tagging</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    words <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> TAG_EPOCH <span class=\"token operator\">&lt;=</span> MAX_LIK_ITERS<span class=\"token punctuation\">:</span>\n        tags <span class=\"token operator\">=</span> tag_sent<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        vecs <span class=\"token operator\">=</span> build_tagging_graph<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n        tags<span class=\"token punctuation\">,</span> loss_exp <span class=\"token operator\">=</span> viterbi_decoding<span class=\"token punctuation\">(</span>vecs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> w<span class=\"token punctuation\">,</span> t\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    sentence <span class=\"token operator\">=</span> <span class=\"token string\">\"if you could see that i am the one who understands you .\"</span>\n    tagging<span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>文本挖掘课的project，实现的是词性标注，增加了语言模型表示。<br>语言模型在小数据下会过拟合，但是大数据训练要三个星期。。。所以还是放弃了，不添加语言模型好了。<br>词性标注的话如果添加CRF效果反而会下降，也是很奇怪哦。。。如果直接用最裸的BiLSTM+charRNN的话，F1也能有97%左右，知足了，就这样吧。<br>数据和完整程序下载地址：<a href=\"https://github.com/godweiyang/text-mining\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>下面是两组实验结果，由于速度太慢了，一组要1小时训练时间，所以就没有加语言模型，而且只训练了10轮。</p>\n<p>第一组：</p>\n<pre><code>DEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 3\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.29375948742\ntotal F1:  0.949073958671 0.395180722892\nepoch 1 finished\ntotal loss:  0.132068497052\ntotal F1:  0.954682553531 0.427710843373\nepoch 2 finished\ntotal loss:  0.110233872966\ntotal F1:  0.960266221303 0.483734939759\nepoch 3 finished\ntotal loss:  0.0115048246573\ntotal F1:  0.944312884812 0.367469879518\nepoch 4 finished\ntotal loss:  0.00533642838205\ntotal F1:  0.947378916669 0.375903614458\nepoch 5 finished\ntotal loss:  0.00460870711354\ntotal F1:  0.945584166314 0.34156626506\nepoch 6 finished\ntotal loss:  0.00420810207526\ntotal F1:  0.931001819677 0.269277108434\nepoch 7 finished\ntotal loss:  0.00402948848795\ntotal F1:  0.943490290899 0.321084337349\nepoch 8 finished\ntotal loss:  0.00390113119154\ntotal F1:  0.952813021911 0.431325301205\nepoch 9 finished\ntotal loss:  0.00367663722034\ntotal F1:  0.938579654511 0.31265060241\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam AUX\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC</code></pre><p>第二组：</p>\n<pre><code>DEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\nMAX_LIK_ITERS = 10\n\n--------Language Model Training--------\n--------Sequence Tagger Training--------\nepoch 0 finished\ntotal loss:  0.304520357251\ntotal F1:  0.948201510582 0.387951807229\nepoch 1 finished\ntotal loss:  0.133941903738\ntotal F1:  0.957175262358 0.457228915663\nepoch 2 finished\ntotal loss:  0.111774144948\ntotal F1:  0.959019866889 0.455421686747\nepoch 3 finished\ntotal loss:  0.100073265445\ntotal F1:  0.960814617245 0.475301204819\nepoch 4 finished\ntotal loss:  0.0922900494867\ntotal F1:  0.962310242541 0.487951807229\nepoch 5 finished\ntotal loss:  0.0862275558798\ntotal F1:  0.963681232395 0.485542168675\nepoch 6 finished\ntotal loss:  0.0811706444901\ntotal F1:  0.963706159484 0.492168674699\nepoch 7 finished\ntotal loss:  0.0776693911075\ntotal F1:  0.962808784306 0.484939759036\nepoch 8 finished\ntotal loss:  0.0741868944795\ntotal F1:  0.9630331281 0.495180722892\nepoch 9 finished\ntotal loss:  0.0714286559878\ntotal F1:  0.963407034424 0.486144578313\n\nif SCONJ\nyou PRON\ncould AUX\nsee VERB\nthat SCONJ\ni PRON\nam VERB\nthe DET\none NOUN\nwho PRON\nunderstands VERB\nyou PRON\n. PUNC</code></pre><p>可以看出来，加了CRF（第一组）效果反而差了一点点，对最后例句的词性标注唯一的区别在于”am”是助动词AUX还是动词VERB，我发现训练集里两种都有，区别也不大。</p>\n<p>完整代码：</p>\n<pre><code class=\"python\">from collections import Counter, defaultdict\nfrom itertools import count\nimport random\nimport dynet as dy\nimport numpy as np\n\nDEBUG = False\nHASLM = False\nLM_EPOCH = 5\nTAG_EPOCH = 10\n\n# CRF parameters\nMAX_LIK_ITERS = 3\nSMALL_NUMBER = -1e10\nMARGIN = 0\n\nlm_train_file = &quot;LM_TRAIN&quot;\nlm_test_file = &quot;LM_DEV&quot;\ntrain_file = &quot;TAG_TRAIN&quot;\ndev_file = &quot;TAG_DEV&quot;\n\nif DEBUG:\n    lm_train_file += &quot;_SMALL&quot;\n    lm_test_file += &quot;_SMALL&quot;\n    train_file += &quot;_SMALL&quot;\n    dev_file += &quot;_SMALL&quot;\n\n# Language Model\nprint &quot;--------Language Model Training--------&quot;\n\ndef read_lm(fname):\n    with file(fname) as fh:\n        for line in fh:\n            sent = line.strip().split()\n            sent.append(&quot;&lt;s&gt;&quot;)\n            yield sent\n\nlm_train = list(read_lm(lm_train_file))\nlm_test = list(read_lm(lm_test_file))\nlm_words = []\n\nfor sent in lm_train:\n    for w in sent:\n        lm_words.append(w)\n\nlm_words.append(&quot;_UNK_&quot;)\n\nlm_w2i = defaultdict(count(0).next)\nfor word in lm_words:\n    lm_w2i[word]\nlm_i2w = {i:w for w, i in lm_w2i.iteritems()}\n\nlm_nwords = len(lm_w2i)\nlm_model = dy.Model()\nlm_trainer = dy.AdamTrainer(lm_model)\nlm_WORDS_LOOKUP = lm_model.add_lookup_parameters((lm_nwords, 64))\nlm_RNN = dy.LSTMBuilder(1, 64, 128, lm_model)\nlm_pW = lm_model.add_parameters((lm_nwords, 128))\nlm_pb = lm_model.add_parameters(lm_nwords)\n\ndef calc_lm_loss(sent):\n    dy.renew_cg()\n    W = dy.parameter(lm_pW)\n    b = dy.parameter(lm_pb)\n    f_init = lm_RNN.initial_state()\n\n    wids = []\n    for w in sent:\n        if w in lm_words:\n            wids.append(lm_w2i[w])\n        else:\n            wids.append(lm_w2i[&quot;_UNK_&quot;])\n\n    s = f_init.add_input(lm_WORDS_LOOKUP[wids[-1]])\n\n    losses = []\n    for wid in wids:\n        score = W * s.output() + b\n        loss = dy.pickneglogsoftmax(score, wid)\n        losses.append(loss)\n        s = s.add_input(lm_WORDS_LOOKUP[wid])\n\n    return dy.esum(losses)\n\ndef calc_lm_embdding(words):\n    dy.renew_cg()\n    f_init = lm_RNN.initial_state()\n    wids = []\n    for w in words:\n        if w in lm_words:\n            wids.append(lm_w2i[w])\n        else:\n            wids.append(lm_w2i[&quot;_UNK_&quot;])\n    wids.append(lm_w2i[&quot;&lt;s&gt;&quot;])\n    s = f_init.add_input(lm_WORDS_LOOKUP[wids[-1]])\n    outputs = []\n    for wid in wids:\n        outputs.append(s.output().value())\n        s = s.add_input(lm_WORDS_LOOKUP[wid]) \n    return outputs\n\nif HASLM:\n    for ITER in xrange(LM_EPOCH):\n        lm_num_tagged = lm_cum_loss = 0\n        random.shuffle(lm_train)\n        i = 0\n        for s in lm_train:\n            loss_exp = calc_lm_loss(s)\n            lm_cum_loss += loss_exp.scalar_value()\n            lm_num_tagged += len(s)\n            loss_exp.backward()\n            lm_trainer.update()\n            if DEBUG == False:\n                i += 1\n                if i % 100 == 0:\n                    print &quot;train loss &quot;, i, &quot;: &quot;, lm_cum_loss / lm_num_tagged\n\n        dev_loss = dev_words = 0\n        i = 0\n        for sent in lm_test:\n            loss_exp = calc_lm_loss(sent)\n            dev_loss += loss_exp.scalar_value()\n            dev_words += len(sent)\n            # if DEBUG == False:\n            #     i += 1\n            #     if i % 100 == 0:\n            #         print &quot;dev loss &quot;, i, &quot;: &quot;, dev_loss / dev_words\n        print &quot;epoch %r finished&quot; % ITER\n        print &quot;total train loss: &quot;, lm_cum_loss / lm_num_tagged\n        print &quot;total dev loss: &quot;, dev_loss / dev_words\n\n# Tagger\nprint &quot;--------Sequence Tagger Training--------&quot;\n\ndef read(fname):\n    with file(fname) as fh:\n        for line in fh:\n            line = line.strip().split()\n            sent = [tuple(x.rsplit(&quot;/&quot;, 1)) for x in line]\n            yield sent\n\ntrain = list(read(train_file))\ndev = list(read(dev_file))\nwords = []\ntags = []\nchars = set()\nwc = Counter()\nfor sent in train:\n    for w, p in sent:\n        words.append(w)\n        tags.append(p)\n        chars.update(w)\n        wc[w] += 1\n\nwords.append(&quot;_UNK_&quot;)\nwords.append(&quot;_S_&quot;)\ntags.append(&quot;_S_&quot;)\nchars.add(&quot;&lt;*&gt;&quot;)\n\nw2i = defaultdict(count(0).next)\nfor word in words:\n    w2i[word]\ni2w = {i:w for w, i in w2i.iteritems()}\n\nt2i = defaultdict(count(0).next)\nfor tag in tags:\n    t2i[tag]\ni2t = {i:w for w, i in t2i.iteritems()}\n\nc2i = defaultdict(count(0).next)\nfor char in chars:\n    c2i[char]\ni2c = {i:w for w, i in c2i.iteritems()}\n\nUNK = w2i[&quot;_UNK_&quot;]\nS_W = w2i[&quot;_S_&quot;]\nS_T = t2i[&quot;_S_&quot;]\n\nnwords = len(w2i)\nntags  = len(t2i)\nnchars  = len(c2i)\n\nmodel = dy.Model()\ntrainer = dy.AdamTrainer(model)\nWORDS_LOOKUP = model.add_lookup_parameters((nwords, 128))\nCHARS_LOOKUP = model.add_lookup_parameters((nchars, 20))\nTRANS_LOOKUP = model.add_lookup_parameters((ntags, ntags))\npH = model.add_parameters((32, 50*2))\npO = model.add_parameters((ntags, 32))\n\nfwdRNN = dy.LSTMBuilder(2, 128, 50, model)\nbwdRNN = dy.LSTMBuilder(2, 128, 50, model)\nif HASLM:\n    fwdRNN = dy.LSTMBuilder(2, 256, 50, model)\n    bwdRNN = dy.LSTMBuilder(2, 256, 50, model)\n\ncFwdRNN = dy.LSTMBuilder(1, 20, 64, model)\ncBwdRNN = dy.LSTMBuilder(1, 20, 64, model)\n\ndef word_rep(w, cf_init, cb_init):\n    if wc[w] &gt; 5:\n        w_index = w2i[w]\n        return WORDS_LOOKUP[w_index]\n    else:\n        pad_char = c2i[&quot;&lt;*&gt;&quot;]\n        char_ids = [pad_char] + [c2i[c] for c in w] + [pad_char]\n        char_embs = [CHARS_LOOKUP[cid] for cid in char_ids]\n        fw_exps = cf_init.transduce(char_embs)\n        bw_exps = cb_init.transduce(reversed(char_embs))\n        return dy.concatenate([ fw_exps[-1], bw_exps[-1] ])\n\ndef build_tagging_graph(words):\n    lm_wembs = []\n    if HASLM:\n        lm_wembs = calc_lm_embdding(words)\n\n    dy.renew_cg()\n    H = dy.parameter(pH)\n    O = dy.parameter(pO)\n\n    f_init = fwdRNN.initial_state()\n    b_init = bwdRNN.initial_state()\n    cf_init = cFwdRNN.initial_state()\n    cb_init = cBwdRNN.initial_state()\n\n    wembs = [word_rep(w, cf_init, cb_init) for w in words]\n    if HASLM:\n        wembs1 = []\n        for lmw, w in zip(lm_wembs, wembs):\n            wv = w.value()\n            wv.extend(lmw)\n            wembs1.append(wv)\n        wembs = [dy.inputTensor(w) for w in wembs1]\n    wembs = [dy.noise(we, 0.1) for we in wembs]\n\n    fw_exps = f_init.transduce(wembs)\n    bw_exps = b_init.transduce(reversed(wembs))\n    bi_exps = [dy.concatenate([f, b]) for f, b in zip(fw_exps, reversed(bw_exps))]\n\n    exps = []\n    for x in bi_exps:\n        r_t = O * (dy.tanh(H * x))\n        exps.append(r_t)\n\n    return exps\n\ndef viterbi_decoding(vecs, gold_tags = []):\n    # Initialize\n    init_prob = [SMALL_NUMBER] * ntags\n    init_prob[S_T] = 0\n    for_expr = dy.inputVector(init_prob)\n    best_ids = []\n    trans_exprs = [TRANS_LOOKUP[tid] for tid in range(ntags)]\n    # Perform the forward pass through the sentence\n    for i, vec in enumerate(vecs):\n        my_best_ids = []\n        my_best_exprs = []\n        for next_tag in range(ntags):\n            # Calculate vector for single next tag\n            next_single_expr = for_expr + trans_exprs[next_tag]\n            next_single = next_single_expr.npvalue()\n            # Find and save the best score\n            my_best_id = np.argmax(next_single)\n            my_best_ids.append(my_best_id)\n            my_best_exprs.append(dy.pick(next_single_expr, my_best_id))\n        # Concatenate the scores for all vectors together\n        for_expr = dy.concatenate(my_best_exprs) + vec\n        # Give a bonus to all but the correct tag if using margin\n        if MARGIN != 0 and len(gold_tags) != 0:\n            adjust = [MARGIN] * ntags\n            adjust[t2i[gold_tags[i]]] = 0\n            for_expr = for_expr + dy.inputVector(adjust)\n        # Save the best ids\n        best_ids.append(my_best_ids)\n    # Perform the final step to the sentence terminal symbol\n    next_single_expr = for_expr + trans_exprs[S_T]\n    next_single = next_single_expr.npvalue()\n    my_best_id = np.argmax(next_single)\n    best_expr = dy.pick(next_single_expr, my_best_id)\n    # Perform the reverse pass\n    best_path = [i2t[my_best_id]]\n    for my_best_ids in reversed(best_ids):\n        my_best_id = my_best_ids[my_best_id]\n        best_path.append(i2t[my_best_id])\n    best_path.pop() # Remove final &lt;s&gt;\n    best_path.reverse()\n    # Return the best path and best score as an expression\n    return best_path, best_expr\n\ndef forced_decoding(vecs, tags):\n    # Initialize\n    for_expr = dy.scalarInput(0)\n    for_tag = S_T\n    # Perform the forward pass through the sentence\n    for i, vec in enumerate(vecs): \n        my_tag = t2i[tags[i]]\n        for_expr = for_expr + dy.pick(TRANS_LOOKUP[my_tag], for_tag) + vec[my_tag]\n        for_tag = my_tag\n    for_expr = for_expr + dy.pick(TRANS_LOOKUP[S_T], for_tag)\n    return for_expr\n\ndef viterbi_sent_loss(words, tags):\n    vecs = build_tagging_graph(words)\n    viterbi_tags, viterbi_score = viterbi_decoding(vecs, tags)\n    if viterbi_tags != tags:\n        reference_score = forced_decoding(vecs, tags)\n        return viterbi_score - reference_score\n    else:\n        return dy.scalarInput(0)\n\ndef sent_loss(words, tags):\n    vecs = build_tagging_graph(words)\n    errs = []\n    for v,t in zip(vecs,tags):\n        tid = t2i[t]\n        err = dy.pickneglogsoftmax(v, tid)\n        errs.append(err)\n    return dy.esum(errs)\n\ndef tag_sent(words):\n    vecs = build_tagging_graph(words)\n    vecs = [dy.softmax(v) for v in vecs]\n    probs = [v.npvalue() for v in vecs]\n    tags = []\n    for prb in probs:\n        tag = np.argmax(prb)\n        tags.append(i2t[tag])\n    return tags\n\nfor ITER in xrange(TAG_EPOCH):\n    num_tagged = cum_loss = 0\n    random.shuffle(train)\n    i = 0\n    for s in train:\n        words = [w for w, t in s]\n        golds = [t for w, t in s]\n\n        if ITER &lt; MAX_LIK_ITERS:\n            loss_exp =  sent_loss(words, golds)\n        else:\n            loss_exp =  viterbi_sent_loss(words, golds)\n        cum_loss += loss_exp.scalar_value()\n        num_tagged += len(golds)\n        loss_exp.backward()\n        trainer.update()\n        if DEBUG == False:\n            i += 1\n            if i % 1000 == 0:\n                print &quot;train loss &quot;, i, &quot;: &quot;, cum_loss / num_tagged\n\n    good_sent = bad_sent = good = bad = 0.0\n    i = 0\n    for sent in dev:\n        words = [w for w, t in sent]\n        golds = [t for w, t in sent]\n        if ITER &lt; MAX_LIK_ITERS:\n            tags = tag_sent(words)\n        else:\n            vecs = build_tagging_graph(words)\n            tags, loss_exp = viterbi_decoding(vecs)\n        if tags == golds: good_sent += 1\n        else: bad_sent += 1\n        for go, gu in zip(golds, tags):\n            if go == gu: good += 1\n            else: bad += 1\n        # if DEBUG == False:\n        #     i += 1\n        #     if i % 1000 == 0:\n        #         print &quot;F1 &quot;, i, &quot;: &quot;, good / (good + bad)\n    print &quot;epoch %r finished&quot; % ITER\n    print &quot;total loss: &quot;, cum_loss / num_tagged\n    print &quot;total F1: &quot;, good / (good + bad), good_sent / (good_sent + bad_sent)\n\ndef tagging(sentence):\n    words = sentence.strip().split()\n    if TAG_EPOCH &lt;= MAX_LIK_ITERS:\n        tags = tag_sent(words)\n    else:\n        vecs = build_tagging_graph(words)\n        tags, loss_exp = viterbi_decoding(vecs)\n    for w, t in zip(words, tags):\n        print w, t\n\nif __name__ == &#39;__main__&#39;:\n    sentence = &quot;if you could see that i am the one who understands you .&quot;\n    tagging(sentence)</code></pre>\n"},{"title":"Empower Sequence Labeling with Task-Aware Neural Language Model","date":"2018-01-09T14:28:40.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n自从这学期没课以来，一直过着非正常人的生活，作息时间比正常人推迟了3个小时：**3点睡觉、12点起床、15点吃午饭、21点吃晚饭。**因此决定不再如此颓废，每日泛读一篇顶会paper，了解其大概思想即可，然后大概将思想发出来，美其名曰：PaperDaily，就从今天开始吧。\n\n今天要讲的这篇是昨天偶然看到的，AAAI18的paper，正好与我文本挖掘课大作业主题一样，所以就看了一下。\n\n# 介绍\n---\n这篇paper提出的模型叫做LM-LSTM-CRF，看起来和前面讲过的加入语言模型的两篇没有大区别，事实是区别的确不是很大。之前讲过的transfer模型基本都是共享一部分模型（底层模型），上层模型都是每个任务有各自独立的模型。然而这篇paper的模型所有部分全部共享，这就会带来许多表示上面的问题。于是这篇paper和以往最大的区别就是在character level LSTM之上加入了一个highway layer，用来将LSTM产生的字符表示映射到不同的表示空间，这样语言模型（这里的语言模型是基于字符层面的）和序列标注模型就可以共享character level LSTM。\n\n# 模型\n---\n不多说，直接上图：\n![](1.png)\n### character level LSTM\n这里和传统的差不多，只是改每个token单独训练一个LSTM为所有字符联合训练上下文表示（为了语言模型共用嘛），但是只在两个tokens之间输出token表示。\n### highway layer\n其实就是对输出做了线性变换+门操作，具体表示如下：\n\\\\[\\begin{array}{l}m = H(n) = t \\odot g({W_H}n + {b_H}) + (1 - t) \\odot n\\\\t = \\sigma ({W_T}n + {b_T})\\end{array}\\\\]最终一共产生四个highway输出，分别是前后向序列标注表示和前后向语言模型表示。而序列标注的LSTM输入共有三个，分别是词向量、前后向序列标注表示。\n### word level LSTM\n和传统的没什么不同。。。\n### CRF layer\n没什么不一样。。。\n### joint training\n总的损失函数就是语言模型损失函数加上序列标注损失函数，系数这里设置为1:1。\n\n# 实验结果\n---\n直接上图，这里和之前我看过的几篇paper都进行了比较，还是非常bang的！\n![](2.png)\n注意到，他们的结果和```Peter 2017.```比较还是差了一点，因为```Peter 2017.```虽然也使用了语言模型作为辅助训练，但是他们语言模型是在大量无标注数据下进行训练的，而且花费时间特别长！而本文根本不需要任何辅助数据，少量标注数据？足够了！就在他们上面联合训练一个语言模型就行了，花费时间大大缩短。\n\n其实我个人认为，这零点几的提升意义并不是很大，时间大大缩短倒是挺不错的，毕竟```Peter 2017.```那篇32个GPU都要训练半个月。。。\n更远一步思考，也许可以将语言模型和序列标注独立开来训练，先用语言模型来训练character level LSTM，再用它产生每个token的表示，直接输入到序列标注的LSTM中，当然highway layer还是必要的，毕竟表示空间是不同的。这样可以利用大量的无标注数据了，但是训练时间也会大大加长，而且感觉和```Peter 2017.```的模型区别貌似不大了？只是联合训练了一个character level LSTM而已。\n\n以上都是我的拙见，毕竟这篇也就粗略读了一下没仔细看，各位有什么想法也欢迎和我讨论。","source":"_posts/PaperDaily-1.md","raw":"---\ntitle: Empower Sequence Labeling with Task-Aware Neural Language Model\ndate: 2018-01-09 22:28:40\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- AAAI\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 迁移学习\n- 序列标注\ncategories:\n- 序列标注\n---\n\n自从这学期没课以来，一直过着非正常人的生活，作息时间比正常人推迟了3个小时：**3点睡觉、12点起床、15点吃午饭、21点吃晚饭。**因此决定不再如此颓废，每日泛读一篇顶会paper，了解其大概思想即可，然后大概将思想发出来，美其名曰：PaperDaily，就从今天开始吧。\n\n今天要讲的这篇是昨天偶然看到的，AAAI18的paper，正好与我文本挖掘课大作业主题一样，所以就看了一下。\n\n# 介绍\n---\n这篇paper提出的模型叫做LM-LSTM-CRF，看起来和前面讲过的加入语言模型的两篇没有大区别，事实是区别的确不是很大。之前讲过的transfer模型基本都是共享一部分模型（底层模型），上层模型都是每个任务有各自独立的模型。然而这篇paper的模型所有部分全部共享，这就会带来许多表示上面的问题。于是这篇paper和以往最大的区别就是在character level LSTM之上加入了一个highway layer，用来将LSTM产生的字符表示映射到不同的表示空间，这样语言模型（这里的语言模型是基于字符层面的）和序列标注模型就可以共享character level LSTM。\n\n# 模型\n---\n不多说，直接上图：\n![](1.png)\n### character level LSTM\n这里和传统的差不多，只是改每个token单独训练一个LSTM为所有字符联合训练上下文表示（为了语言模型共用嘛），但是只在两个tokens之间输出token表示。\n### highway layer\n其实就是对输出做了线性变换+门操作，具体表示如下：\n\\\\[\\begin{array}{l}m = H(n) = t \\odot g({W_H}n + {b_H}) + (1 - t) \\odot n\\\\t = \\sigma ({W_T}n + {b_T})\\end{array}\\\\]最终一共产生四个highway输出，分别是前后向序列标注表示和前后向语言模型表示。而序列标注的LSTM输入共有三个，分别是词向量、前后向序列标注表示。\n### word level LSTM\n和传统的没什么不同。。。\n### CRF layer\n没什么不一样。。。\n### joint training\n总的损失函数就是语言模型损失函数加上序列标注损失函数，系数这里设置为1:1。\n\n# 实验结果\n---\n直接上图，这里和之前我看过的几篇paper都进行了比较，还是非常bang的！\n![](2.png)\n注意到，他们的结果和```Peter 2017.```比较还是差了一点，因为```Peter 2017.```虽然也使用了语言模型作为辅助训练，但是他们语言模型是在大量无标注数据下进行训练的，而且花费时间特别长！而本文根本不需要任何辅助数据，少量标注数据？足够了！就在他们上面联合训练一个语言模型就行了，花费时间大大缩短。\n\n其实我个人认为，这零点几的提升意义并不是很大，时间大大缩短倒是挺不错的，毕竟```Peter 2017.```那篇32个GPU都要训练半个月。。。\n更远一步思考，也许可以将语言模型和序列标注独立开来训练，先用语言模型来训练character level LSTM，再用它产生每个token的表示，直接输入到序列标注的LSTM中，当然highway layer还是必要的，毕竟表示空间是不同的。这样可以利用大量的无标注数据了，但是训练时间也会大大加长，而且感觉和```Peter 2017.```的模型区别貌似不大了？只是联合训练了一个character level LSTM而已。\n\n以上都是我的拙见，毕竟这篇也就粗略读了一下没仔细看，各位有什么想法也欢迎和我讨论。","slug":"PaperDaily-1","published":1,"updated":"2019-07-20T04:19:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982c7004s7swe6sfa3q08","content":"<p>自从这学期没课以来，一直过着非正常人的生活，作息时间比正常人推迟了3个小时：<strong>3点睡觉、12点起床、15点吃午饭、21点吃晚饭。</strong>因此决定不再如此颓废，每日泛读一篇顶会paper，了解其大概思想即可，然后大概将思想发出来，美其名曰：PaperDaily，就从今天开始吧。</p>\n<p>今天要讲的这篇是昨天偶然看到的，AAAI18的paper，正好与我文本挖掘课大作业主题一样，所以就看了一下。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇paper提出的模型叫做LM-LSTM-CRF，看起来和前面讲过的加入语言模型的两篇没有大区别，事实是区别的确不是很大。之前讲过的transfer模型基本都是共享一部分模型（底层模型），上层模型都是每个任务有各自独立的模型。然而这篇paper的模型所有部分全部共享，这就会带来许多表示上面的问题。于是这篇paper和以往最大的区别就是在character level LSTM之上加入了一个highway layer，用来将LSTM产生的字符表示映射到不同的表示空间，这样语言模型（这里的语言模型是基于字符层面的）和序列标注模型就可以共享character level LSTM。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>不多说，直接上图：<br><img src=\"1.png\" alt></p>\n<h3 id=\"character-level-LSTM\"><a href=\"#character-level-LSTM\" class=\"headerlink\" title=\"character level LSTM\"></a>character level LSTM</h3><p>这里和传统的差不多，只是改每个token单独训练一个LSTM为所有字符联合训练上下文表示（为了语言模型共用嘛），但是只在两个tokens之间输出token表示。</p>\n<h3 id=\"highway-layer\"><a href=\"#highway-layer\" class=\"headerlink\" title=\"highway layer\"></a>highway layer</h3><p>其实就是对输出做了线性变换+门操作，具体表示如下：<br>\\[\\begin{array}{l}m = H(n) = t \\odot g({W_H}n + {b_H}) + (1 - t) \\odot n\\\\t = \\sigma ({W_T}n + {b_T})\\end{array}\\]最终一共产生四个highway输出，分别是前后向序列标注表示和前后向语言模型表示。而序列标注的LSTM输入共有三个，分别是词向量、前后向序列标注表示。</p>\n<h3 id=\"word-level-LSTM\"><a href=\"#word-level-LSTM\" class=\"headerlink\" title=\"word level LSTM\"></a>word level LSTM</h3><p>和传统的没什么不同。。。</p>\n<h3 id=\"CRF-layer\"><a href=\"#CRF-layer\" class=\"headerlink\" title=\"CRF layer\"></a>CRF layer</h3><p>没什么不一样。。。</p>\n<h3 id=\"joint-training\"><a href=\"#joint-training\" class=\"headerlink\" title=\"joint training\"></a>joint training</h3><p>总的损失函数就是语言模型损失函数加上序列标注损失函数，系数这里设置为1:1。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>直接上图，这里和之前我看过的几篇paper都进行了比较，还是非常bang的！<br><img src=\"2.png\" alt><br>注意到，他们的结果和<code>Peter 2017.</code>比较还是差了一点，因为<code>Peter 2017.</code>虽然也使用了语言模型作为辅助训练，但是他们语言模型是在大量无标注数据下进行训练的，而且花费时间特别长！而本文根本不需要任何辅助数据，少量标注数据？足够了！就在他们上面联合训练一个语言模型就行了，花费时间大大缩短。</p>\n<p>其实我个人认为，这零点几的提升意义并不是很大，时间大大缩短倒是挺不错的，毕竟<code>Peter 2017.</code>那篇32个GPU都要训练半个月。。。<br>更远一步思考，也许可以将语言模型和序列标注独立开来训练，先用语言模型来训练character level LSTM，再用它产生每个token的表示，直接输入到序列标注的LSTM中，当然highway layer还是必要的，毕竟表示空间是不同的。这样可以利用大量的无标注数据了，但是训练时间也会大大加长，而且感觉和<code>Peter 2017.</code>的模型区别貌似不大了？只是联合训练了一个character level LSTM而已。</p>\n<p>以上都是我的拙见，毕竟这篇也就粗略读了一下没仔细看，各位有什么想法也欢迎和我讨论。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>自从这学期没课以来，一直过着非正常人的生活，作息时间比正常人推迟了3个小时：<strong>3点睡觉、12点起床、15点吃午饭、21点吃晚饭。</strong>因此决定不再如此颓废，每日泛读一篇顶会paper，了解其大概思想即可，然后大概将思想发出来，美其名曰：PaperDaily，就从今天开始吧。</p>\n<p>今天要讲的这篇是昨天偶然看到的，AAAI18的paper，正好与我文本挖掘课大作业主题一样，所以就看了一下。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇paper提出的模型叫做LM-LSTM-CRF，看起来和前面讲过的加入语言模型的两篇没有大区别，事实是区别的确不是很大。之前讲过的transfer模型基本都是共享一部分模型（底层模型），上层模型都是每个任务有各自独立的模型。然而这篇paper的模型所有部分全部共享，这就会带来许多表示上面的问题。于是这篇paper和以往最大的区别就是在character level LSTM之上加入了一个highway layer，用来将LSTM产生的字符表示映射到不同的表示空间，这样语言模型（这里的语言模型是基于字符层面的）和序列标注模型就可以共享character level LSTM。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>不多说，直接上图：<br><img src=\"1.png\" alt></p>\n<h3 id=\"character-level-LSTM\"><a href=\"#character-level-LSTM\" class=\"headerlink\" title=\"character level LSTM\"></a>character level LSTM</h3><p>这里和传统的差不多，只是改每个token单独训练一个LSTM为所有字符联合训练上下文表示（为了语言模型共用嘛），但是只在两个tokens之间输出token表示。</p>\n<h3 id=\"highway-layer\"><a href=\"#highway-layer\" class=\"headerlink\" title=\"highway layer\"></a>highway layer</h3><p>其实就是对输出做了线性变换+门操作，具体表示如下：<br>\\[\\begin{array}{l}m = H(n) = t \\odot g({W_H}n + {b_H}) + (1 - t) \\odot n\\\\t = \\sigma ({W_T}n + {b_T})\\end{array}\\]最终一共产生四个highway输出，分别是前后向序列标注表示和前后向语言模型表示。而序列标注的LSTM输入共有三个，分别是词向量、前后向序列标注表示。</p>\n<h3 id=\"word-level-LSTM\"><a href=\"#word-level-LSTM\" class=\"headerlink\" title=\"word level LSTM\"></a>word level LSTM</h3><p>和传统的没什么不同。。。</p>\n<h3 id=\"CRF-layer\"><a href=\"#CRF-layer\" class=\"headerlink\" title=\"CRF layer\"></a>CRF layer</h3><p>没什么不一样。。。</p>\n<h3 id=\"joint-training\"><a href=\"#joint-training\" class=\"headerlink\" title=\"joint training\"></a>joint training</h3><p>总的损失函数就是语言模型损失函数加上序列标注损失函数，系数这里设置为1:1。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>直接上图，这里和之前我看过的几篇paper都进行了比较，还是非常bang的！<br><img src=\"2.png\" alt><br>注意到，他们的结果和<code>Peter 2017.</code>比较还是差了一点，因为<code>Peter 2017.</code>虽然也使用了语言模型作为辅助训练，但是他们语言模型是在大量无标注数据下进行训练的，而且花费时间特别长！而本文根本不需要任何辅助数据，少量标注数据？足够了！就在他们上面联合训练一个语言模型就行了，花费时间大大缩短。</p>\n<p>其实我个人认为，这零点几的提升意义并不是很大，时间大大缩短倒是挺不错的，毕竟<code>Peter 2017.</code>那篇32个GPU都要训练半个月。。。<br>更远一步思考，也许可以将语言模型和序列标注独立开来训练，先用语言模型来训练character level LSTM，再用它产生每个token的表示，直接输入到序列标注的LSTM中，当然highway layer还是必要的，毕竟表示空间是不同的。这样可以利用大量的无标注数据了，但是训练时间也会大大加长，而且感觉和<code>Peter 2017.</code>的模型区别貌似不大了？只是联合训练了一个character level LSTM而已。</p>\n<p>以上都是我的拙见，毕竟这篇也就粗略读了一下没仔细看，各位有什么想法也欢迎和我讨论。</p>\n"},{"title":"Head-Lexicalized Bidirectional Tree LSTMs","date":"2018-01-13T06:41:01.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n首先给大家说明一下，前两天因为新入手了一个ukulele（就是下图这玩意），所以痴迷于学习弹奏，没有更新博客。照这个节奏下去，PaperDaily恐怕是要变成PaperWeekly了。（囧。。。）寒假一定要学会《小幸运》，嗯。\n![](ukulele.jpg)\n\n好了，今天开始恢复吧（说不准过两天我又鸽了，嘻嘻嘻）。\n\n今天要讲的这篇是TACL2017的，是关于树状LSTM的。\n\n# 介绍\n---\n前两年已经有人提出了树状LSTM的概念，之前一直不知道是个啥高大上的结构。其实就是递归神经网络中的结点单元替换成LSTM的结点单元。那有人要问了，LSTM不是有$x$输入吗，还有一个$h_{t-1}$输入，那这树状的哪来这两个输入？其实很简单，只要把这两个输入替换成左右儿子的输出表示就行了。瞬间感觉也没啥意思，就是换了结点函数，使得树状LSTM具有了遗忘功能，从而能够处理很长的句子罢了。\n\n今天介绍的这篇paper就是在这基础上做了两点改进。\n* 除了左右儿子作为输入之外，还增加了$x$输入。$x$是啥呢？就是左右儿子中的头结点，头结点的话传统方法是根据规则来判断谁是头结点的，这里省去了这些复杂的步骤，直接将头结点的判断丢进神经网络中训练。\n* 增加了反向的树状LSTM，也就是top-down的LSTM。那有人就很好奇了，一个结点分解成两个结点，怎么可能？其实从头结点到任意一个其他结点的路径都可以看成一个独立的LSTM，如果向左参数就是$U_L$，否则就是$U_R$。\n\n# 模型\n---\n![](1.png)\n图1是序列LSTM和树状LSTM的结构区别，这个树状LSTM是之前传统的树状LSTM，不带head结点的。\n\n之前的基本的树状LSTM的结点单元的具体公式如下：\n![](5.png)\n具体我就不解释了（懒。。。），自行类比序列LSTM。\n\n加入head结点之后，公式区别如下（加粗所示）：\n![](2.png)\n![](3.png)\n![](4.png)\n\n那么top-down是怎么做的呢？\n![](6.png)\n这里可以看出来，向左向右是用的两套不同的参数。注意到，top-down方向的LSTM前提是一定要用head机制作为支撑！不然头结点的$x$算不出来的话是没有办法计算的哦。\n\n具体训练过程等等就不再阐述了。\n\n# 总结\n---\n这个模型主要是用在了文本分类和情感分类上，我在想能不能用在我的毕设上面。\n\n我觉得head机制可以加进去，但是反向LSTM貌似是不可行的，因为这里的短语结构树全部是给定的，所以向下计算知道什么时候停止。但是我是做句法分析任务的，没有给定句法树，向下计算无法知道什么时候停止扩展，情况有无数种！向上计算倒是无所谓，最多卡特兰数级别，加上动态规划，可以缩小到$n\\log n$级别。","source":"_posts/PaperDaily-3.md","raw":"---\ntitle: Head-Lexicalized Bidirectional Tree LSTMs\ndate: 2018-01-13 14:41:01\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- TACL\n- 自然语言处理\n- 神经网络\n- 深度学习\ncategories:\n- 深度学习\n---\n\n首先给大家说明一下，前两天因为新入手了一个ukulele（就是下图这玩意），所以痴迷于学习弹奏，没有更新博客。照这个节奏下去，PaperDaily恐怕是要变成PaperWeekly了。（囧。。。）寒假一定要学会《小幸运》，嗯。\n![](ukulele.jpg)\n\n好了，今天开始恢复吧（说不准过两天我又鸽了，嘻嘻嘻）。\n\n今天要讲的这篇是TACL2017的，是关于树状LSTM的。\n\n# 介绍\n---\n前两年已经有人提出了树状LSTM的概念，之前一直不知道是个啥高大上的结构。其实就是递归神经网络中的结点单元替换成LSTM的结点单元。那有人要问了，LSTM不是有$x$输入吗，还有一个$h_{t-1}$输入，那这树状的哪来这两个输入？其实很简单，只要把这两个输入替换成左右儿子的输出表示就行了。瞬间感觉也没啥意思，就是换了结点函数，使得树状LSTM具有了遗忘功能，从而能够处理很长的句子罢了。\n\n今天介绍的这篇paper就是在这基础上做了两点改进。\n* 除了左右儿子作为输入之外，还增加了$x$输入。$x$是啥呢？就是左右儿子中的头结点，头结点的话传统方法是根据规则来判断谁是头结点的，这里省去了这些复杂的步骤，直接将头结点的判断丢进神经网络中训练。\n* 增加了反向的树状LSTM，也就是top-down的LSTM。那有人就很好奇了，一个结点分解成两个结点，怎么可能？其实从头结点到任意一个其他结点的路径都可以看成一个独立的LSTM，如果向左参数就是$U_L$，否则就是$U_R$。\n\n# 模型\n---\n![](1.png)\n图1是序列LSTM和树状LSTM的结构区别，这个树状LSTM是之前传统的树状LSTM，不带head结点的。\n\n之前的基本的树状LSTM的结点单元的具体公式如下：\n![](5.png)\n具体我就不解释了（懒。。。），自行类比序列LSTM。\n\n加入head结点之后，公式区别如下（加粗所示）：\n![](2.png)\n![](3.png)\n![](4.png)\n\n那么top-down是怎么做的呢？\n![](6.png)\n这里可以看出来，向左向右是用的两套不同的参数。注意到，top-down方向的LSTM前提是一定要用head机制作为支撑！不然头结点的$x$算不出来的话是没有办法计算的哦。\n\n具体训练过程等等就不再阐述了。\n\n# 总结\n---\n这个模型主要是用在了文本分类和情感分类上，我在想能不能用在我的毕设上面。\n\n我觉得head机制可以加进去，但是反向LSTM貌似是不可行的，因为这里的短语结构树全部是给定的，所以向下计算知道什么时候停止。但是我是做句法分析任务的，没有给定句法树，向下计算无法知道什么时候停止扩展，情况有无数种！向上计算倒是无所谓，最多卡特兰数级别，加上动态规划，可以缩小到$n\\log n$级别。","slug":"PaperDaily-3","published":1,"updated":"2019-07-20T04:20:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982cd004w7swem26rdu0q","content":"<p>首先给大家说明一下，前两天因为新入手了一个ukulele（就是下图这玩意），所以痴迷于学习弹奏，没有更新博客。照这个节奏下去，PaperDaily恐怕是要变成PaperWeekly了。（囧。。。）寒假一定要学会《小幸运》，嗯。<br><img src=\"ukulele.jpg\" alt></p>\n<p>好了，今天开始恢复吧（说不准过两天我又鸽了，嘻嘻嘻）。</p>\n<p>今天要讲的这篇是TACL2017的，是关于树状LSTM的。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>前两年已经有人提出了树状LSTM的概念，之前一直不知道是个啥高大上的结构。其实就是递归神经网络中的结点单元替换成LSTM的结点单元。那有人要问了，LSTM不是有$x$输入吗，还有一个$h_{t-1}$输入，那这树状的哪来这两个输入？其实很简单，只要把这两个输入替换成左右儿子的输出表示就行了。瞬间感觉也没啥意思，就是换了结点函数，使得树状LSTM具有了遗忘功能，从而能够处理很长的句子罢了。</p>\n<p>今天介绍的这篇paper就是在这基础上做了两点改进。</p>\n<ul>\n<li>除了左右儿子作为输入之外，还增加了$x$输入。$x$是啥呢？就是左右儿子中的头结点，头结点的话传统方法是根据规则来判断谁是头结点的，这里省去了这些复杂的步骤，直接将头结点的判断丢进神经网络中训练。</li>\n<li>增加了反向的树状LSTM，也就是top-down的LSTM。那有人就很好奇了，一个结点分解成两个结点，怎么可能？其实从头结点到任意一个其他结点的路径都可以看成一个独立的LSTM，如果向左参数就是$U_L$，否则就是$U_R$。</li>\n</ul>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p><img src=\"1.png\" alt><br>图1是序列LSTM和树状LSTM的结构区别，这个树状LSTM是之前传统的树状LSTM，不带head结点的。</p>\n<p>之前的基本的树状LSTM的结点单元的具体公式如下：<br><img src=\"5.png\" alt><br>具体我就不解释了（懒。。。），自行类比序列LSTM。</p>\n<p>加入head结点之后，公式区别如下（加粗所示）：<br><img src=\"2.png\" alt><br><img src=\"3.png\" alt><br><img src=\"4.png\" alt></p>\n<p>那么top-down是怎么做的呢？<br><img src=\"6.png\" alt><br>这里可以看出来，向左向右是用的两套不同的参数。注意到，top-down方向的LSTM前提是一定要用head机制作为支撑！不然头结点的$x$算不出来的话是没有办法计算的哦。</p>\n<p>具体训练过程等等就不再阐述了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这个模型主要是用在了文本分类和情感分类上，我在想能不能用在我的毕设上面。</p>\n<p>我觉得head机制可以加进去，但是反向LSTM貌似是不可行的，因为这里的短语结构树全部是给定的，所以向下计算知道什么时候停止。但是我是做句法分析任务的，没有给定句法树，向下计算无法知道什么时候停止扩展，情况有无数种！向上计算倒是无所谓，最多卡特兰数级别，加上动态规划，可以缩小到$n\\log n$级别。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>首先给大家说明一下，前两天因为新入手了一个ukulele（就是下图这玩意），所以痴迷于学习弹奏，没有更新博客。照这个节奏下去，PaperDaily恐怕是要变成PaperWeekly了。（囧。。。）寒假一定要学会《小幸运》，嗯。<br><img src=\"ukulele.jpg\" alt></p>\n<p>好了，今天开始恢复吧（说不准过两天我又鸽了，嘻嘻嘻）。</p>\n<p>今天要讲的这篇是TACL2017的，是关于树状LSTM的。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>前两年已经有人提出了树状LSTM的概念，之前一直不知道是个啥高大上的结构。其实就是递归神经网络中的结点单元替换成LSTM的结点单元。那有人要问了，LSTM不是有$x$输入吗，还有一个$h_{t-1}$输入，那这树状的哪来这两个输入？其实很简单，只要把这两个输入替换成左右儿子的输出表示就行了。瞬间感觉也没啥意思，就是换了结点函数，使得树状LSTM具有了遗忘功能，从而能够处理很长的句子罢了。</p>\n<p>今天介绍的这篇paper就是在这基础上做了两点改进。</p>\n<ul>\n<li>除了左右儿子作为输入之外，还增加了$x$输入。$x$是啥呢？就是左右儿子中的头结点，头结点的话传统方法是根据规则来判断谁是头结点的，这里省去了这些复杂的步骤，直接将头结点的判断丢进神经网络中训练。</li>\n<li>增加了反向的树状LSTM，也就是top-down的LSTM。那有人就很好奇了，一个结点分解成两个结点，怎么可能？其实从头结点到任意一个其他结点的路径都可以看成一个独立的LSTM，如果向左参数就是$U_L$，否则就是$U_R$。</li>\n</ul>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p><img src=\"1.png\" alt><br>图1是序列LSTM和树状LSTM的结构区别，这个树状LSTM是之前传统的树状LSTM，不带head结点的。</p>\n<p>之前的基本的树状LSTM的结点单元的具体公式如下：<br><img src=\"5.png\" alt><br>具体我就不解释了（懒。。。），自行类比序列LSTM。</p>\n<p>加入head结点之后，公式区别如下（加粗所示）：<br><img src=\"2.png\" alt><br><img src=\"3.png\" alt><br><img src=\"4.png\" alt></p>\n<p>那么top-down是怎么做的呢？<br><img src=\"6.png\" alt><br>这里可以看出来，向左向右是用的两套不同的参数。注意到，top-down方向的LSTM前提是一定要用head机制作为支撑！不然头结点的$x$算不出来的话是没有办法计算的哦。</p>\n<p>具体训练过程等等就不再阐述了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这个模型主要是用在了文本分类和情感分类上，我在想能不能用在我的毕设上面。</p>\n<p>我觉得head机制可以加进去，但是反向LSTM貌似是不可行的，因为这里的短语结构树全部是给定的，所以向下计算知道什么时候停止。但是我是做句法分析任务的，没有给定句法树，向下计算无法知道什么时候停止扩展，情况有无数种！向上计算倒是无所谓，最多卡特兰数级别，加上动态规划，可以缩小到$n\\log n$级别。</p>\n"},{"title":"Recurrent Neural Network Grammars","date":"2018-09-02T14:58:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=25706282&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Recurrent Neural Network Grammars](https://www.aclweb.org/anthology/N/N16/N16-1024.pdf)\n**代码地址：**[github](https://github.com/clab/rnng)\n\n今天要介绍的这篇论文是来自NAACL16的Recurrent Neural Network Grammars，主要贡献点就是提出了一种新的文法RNNG，不同于传统的PCFG之类的文法，RNNG使用RNN来对句子和它的句法树的联合概率进行建模，因此它是一个生成模型。但是稍稍修改就可以改为判别模型，也就是大家熟悉的基于转移的成分句法分析系统，并且转移系统是采用top-down方法的，也就是利用了句法树的前序遍历。\n\nRNNG在语言模型任务上取得了当时的state-of-the-art结果，成分句法分析任务上，生成模型取得了媲美最好结果的F1值，而判别模型就差了点。本文最大的贡献点就是提出了生成式模型RNNG，说明了在数据量不是很大的时候，利用生成式模型可以提高成分句法分析的准确率。\n\n# 摘要\n---\nRNN在语言模型和其他许多NLP任务上面都已经取得了非常不错的效果，但是RNN只能捕捉到句子的序列特征，例如句子的句法结构等递归嵌套的结构信息无法用RNN捕捉到。\n\n因此本文提出了一种利用RNN建模出来的全新文法RNNG，建立在句子的句法结构之上，消除了PCFG的上下文无关假设。并提出了两种变体，一种是生成模型，可以用来句法分析和训练语言模型，另一种是判别模型，可以用来句法分析。\n\nRNNG建立在top-down转移系统之上，top-down转移系统相比于bottom-up转移系统有一个好处，就是不需要二叉化，因为如果bottom-up转移系统不二叉化的话，REDUCE的状态就会有很多种可能，不知道到底归约栈里的几个结点。而top-down转移系统就不存在这个问题，直接归约到第一个父结点为止就行了。本文应该也是第一个提出用RNN来实现top-down转移系统的，之前的方法都是用top-down的文法，或者是bottom-up的，例如Sochar2013的CVG，也是用二叉化后的RNN学习结点的语义表示。\n\n# RNN文法\n---\nRNNG定义为三元组$(N, \\Sigma, \\Theta)$，其中$N$是非终结符集合，$\\Sigma$是终结符集合，并且$N \\cap \\Sigma = \\emptyset$，$\\Theta$就是神经网络的参数集合。RNNG和传统的PCFG的一个明显区别就是它没有显式地指出语法规则是什么，而是蕴含在了神经网络中，在句法转移的时候动态的生成。\n\n# Top-down句法分析和生成\n这部分主要介绍RNNG的两个变体，一个是top-down的句法分析系统，还有一个是稍稍修改后的生成系统。\n\n## 判别式系统\n这个判别式模型之前也已经介绍过很多次了，和普通的基于转移的句法分析系统一样，输入是一个句子$x$，输出是它的句法分析树$y$。主要组成部分有句法树栈、句子单词buffer、动作集合，每一步的动作有三种：\n* NT(X)： 将一个父结点X移进栈里。\n* SHIFT： 从buffer中移一个单词到栈里。\n* REDUCE： 将栈顶的若干个结点归约为它们的父结点，并且出栈。\n\n图1就是每个动作的状态变化过程，图2是判别式模型进行句法分析的示例：\n![](1.jpg)\n\n当然得给动作添加一些限制，首先记当前状态为三元组$(B, S, n)$，分别表示buffer、栈、当前栈里未归约的父结点数量，这个之前的博客没有提及过：\n* NT(X)动作只有当buffer不为空并且$n < 100$的时候才能进行。因为buffer空了的话就没有单词了，此时不可能移进新的非终结符了，并且要限制$n < 100$防止一元产生式无限生成下去。\n* SHIFT动作只有当buffer不为空并且$n \\ge 1$时才能进行。前者不用解释了，后者的话因为是top-down的，所以栈里至少要有一个父结点才能移进新的单词。\n* REDUCE只有当栈顶不是没有归约的父结点才能进行。\n* REDUCE只有当$n \\ge 2$或者buffer为空时才能进行。**这里要解释一下为什么$n \\ge 2$，因为如果buffer不为空同时$n = 1$，那么这时候如果REDUCE的话，栈里就只剩一个非终结符了，只可能是根节点S，而buffer里还有单词，所以这是不可能的。**\n\n记当前状态的可能动作集合为$\\mathcal{A}\\_D(B, S, n)$。\n\n## 生成式系统\n将上面的top-down转移系统稍稍修改即可得到生成式系统。区别有两点：\n* 首先没有了输入的buffer，取而代之的是输出的buffer $T$。\n* 其次因为没有输入单词了，所以在需要输入单词的时候采用GEN(x)动作来产生一个新的单词$x$，然后移进栈里，取代SHIFT动作。\n\n图3就是每个动作的状态变化过程，图4是生成式模型进行句法分析的示例：\n![](2.jpg)\n\n同样也要对其采取一些限制：\n* GEN(x)动作只有当$n \\ge 1$时才能进行，上面SHIFT限制已经解释过了。\n* REDUCE只有当$n \\ge 1$或者buffer为空时才能进行。**这里再次解释一下，上面判别式模型限制条件是$n \\ge 2$，为什么这里就变成了$n \\ge 1$？因为生成模型没有输入buffer，所以即使$n = 1$时REDUCE了，以后不要再GEN(x)即可，直接结束分析**\n\n记当前状态的可能动作集合为$\\mathcal{A}\\_G(T, S, n)$。\n\n## 转移序列\n因为一棵句法树的前序遍历是唯一的，所以不管用判别式模型还是生成式模型，得到的动作序列也都是唯一的。对于句子$x$和句法树$y$，记生成式模型动作序列为$a(x, y)$，判别式模型动作序列为$b(x, y)$。\n\n# 生成式模型\n---\n本文最重要的就是上面提到的生成式模型，因为GEN(x)动作的存在，所以模型同时对句子$x$和句法树$y$的联合分布进行了建模。记当前状态的向量表示为$u_t$，那么联合分布可以表示为：\n\\\\[p(x,y) = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {p({a_t}|{a_{ < t}})}  = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {\\frac{ {\\exp r_{ {a_t}}^T{u_t} + {b_{ {a_t}}}}}{ {\\sum\\nolimits_{a' \\in {\\mathcal{A}_G}({T_t},{S_t},{n_t})} {\\exp r_{a'}^T{u_t} + {b_{a'}}} }}} \\\\]\n其中$r_a$表示动作$a$的向量表示，$b$表示偏移向量，都包含在了RNNG参数集合$\\Theta$里面，通过训练得到。\n\n而当前状态的向量表示$u_t$由三部分得到，输出buffer的LSTM输出$o_t$、栈的LSTM输出$s_t$、历史动作序列的LSTM输出$h_t$，然后经过一个前馈神经网络得到：\n\\\\[u_t = \\tanh (W[o_t; s_t; h_t] + c)\\\\]\n$W$和$c$同样也包含在了RNNG参数集合$\\Theta$里面，下图是三个LSTM的示例图：\n![](3.jpg)\n\n## 句法成分组合\n在REDUCE操作时，需要将若干个子结点归约为一个父结点，为了得到父结点的向量表示，再次利用一个LSTM对子结点序列进行编码，同时在首尾加上父结点，结构图如下所示：\n![](4.jpg)\n\n## 单词生成\n单词生成采用softmax寻找概率最大的单词，但是单词数量可能十分巨大，所以采用分层softmax的思想，首先预测当前动作是不是GEN，如果是GEN，记单词总数为${\\left| { \\sum  } \\right|}$，再将单词平均分成${\\sqrt {\\left| \\sum  \\right|} }$个类别，用softmax预测属于哪个类别，然后在那个类别里再用softmax预测输出哪个单词。这样时间复杂度就从$O\\left( {\\left| \\sum  \\right|} \\right)$降到了$O\\left( {\\sqrt {\\left| \\sum  \\right|} } \\right)$。\n\n## 参数训练和判别式模型\n模型最终训练目的就是使得联合概率最大。\n\n而只需要将输出buffer改为输入buffer，GEN动作改为SHIFT动作，然后重新训练，就可以将模型变为判别式模型了，输出给定输入句子下概率最大的句法树。\n\n# 通过重要性采样进行推理\n---\n本文的生成式模型另一大作用是训练语言模型$p(x)$，根据边际分布公式\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)} \\\\]\n可以直接得到$p(x)$，但是一句话的句法树可能性是指数级别的，不可能一一枚举，这时候就要用到重要性采样算法。\n\n首先定义一个比较容易得到的条件分布$q(y | x)$，它满足如下性质：\n* $p(y | x) > 0$可以推出$q(y | x) > 0$。\n* 服从分布的样本很容易得到。\n* $q(y | x)$可以直接计算得到。\n\n可以发现，上面的判别式模型得到的条件分布符合上面的性质，所以这里直接用判别式模型来进行采样。\n\n这样$p(x)$就变为了：\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\\\]\n其中重要性权重$w(x,y) = p(x,y)/q(y|x)$。\n\n最后如果根据分布$q(y | x)$采样得到了$N$个句法树样本，那么用蒙特卡罗方法就可以估计出$p(x)$了：\n\\\\[{E_{q(y|x)}}w(x,y) \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y_i})} \\\\]\n\n# 实验\n---\n实验部分主要说一下PTB上的句法分析和语言模型吧，下面两张图分别是句法分析和语言模型的结果：\n![](5.jpg)\n![](6.jpg)\n句法分析方面可以看出，生成模型效果要远远好于判别模型，生成模型效果也接近了当时的最好结果。一个合理的解释是在小数据集上面，生成模型效果要更好，而在大数据集上，判别模型效果可以赶上生成模型。\n\n**这里要提到的一点是，判别式模型就是每一个状态直接贪心argmax找到概率最大的动作，然后生成句法树。而生成式模型是利用判别式模型采样出100个概率比较高的句法树，然后用生成式模型计算它们的联合概率，重排序选择概率最高的句法树。**\n\n语言模型方面，结果要比最好结果高了一点。\n\n# 总结\n---\nRNNG这个文法是个生成式模型，建模了句子和句法树的联合分布，稍稍修改即可应用到句法分析和语言模型中，效果也非常的好。\n\n最后，我再简要梳理一遍RNNG的主要训练过程，因为这篇论文也看了整整两天，还是看的头大，一些细节可能还是没完全搞清。\n\n首先利用生成式模型对每句话进行训练，在每个状态计算正确的动作的概率，然后训练使得概率之积最大。\n\n然后应用到句法分析中，只需要修改为判别式模型即可。\n\n最后应用到语言模型中，由于需要用到重要性采样，所以直接利用判别式模型生成若干样本，然后根据算得的条件概率计算语言模型句子的概率。","source":"_posts/RNNG.md","raw":"---\ntitle: Recurrent Neural Network Grammars\ndate: 2018-09-02 22:58:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NAACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=25706282&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Recurrent Neural Network Grammars](https://www.aclweb.org/anthology/N/N16/N16-1024.pdf)\n**代码地址：**[github](https://github.com/clab/rnng)\n\n今天要介绍的这篇论文是来自NAACL16的Recurrent Neural Network Grammars，主要贡献点就是提出了一种新的文法RNNG，不同于传统的PCFG之类的文法，RNNG使用RNN来对句子和它的句法树的联合概率进行建模，因此它是一个生成模型。但是稍稍修改就可以改为判别模型，也就是大家熟悉的基于转移的成分句法分析系统，并且转移系统是采用top-down方法的，也就是利用了句法树的前序遍历。\n\nRNNG在语言模型任务上取得了当时的state-of-the-art结果，成分句法分析任务上，生成模型取得了媲美最好结果的F1值，而判别模型就差了点。本文最大的贡献点就是提出了生成式模型RNNG，说明了在数据量不是很大的时候，利用生成式模型可以提高成分句法分析的准确率。\n\n# 摘要\n---\nRNN在语言模型和其他许多NLP任务上面都已经取得了非常不错的效果，但是RNN只能捕捉到句子的序列特征，例如句子的句法结构等递归嵌套的结构信息无法用RNN捕捉到。\n\n因此本文提出了一种利用RNN建模出来的全新文法RNNG，建立在句子的句法结构之上，消除了PCFG的上下文无关假设。并提出了两种变体，一种是生成模型，可以用来句法分析和训练语言模型，另一种是判别模型，可以用来句法分析。\n\nRNNG建立在top-down转移系统之上，top-down转移系统相比于bottom-up转移系统有一个好处，就是不需要二叉化，因为如果bottom-up转移系统不二叉化的话，REDUCE的状态就会有很多种可能，不知道到底归约栈里的几个结点。而top-down转移系统就不存在这个问题，直接归约到第一个父结点为止就行了。本文应该也是第一个提出用RNN来实现top-down转移系统的，之前的方法都是用top-down的文法，或者是bottom-up的，例如Sochar2013的CVG，也是用二叉化后的RNN学习结点的语义表示。\n\n# RNN文法\n---\nRNNG定义为三元组$(N, \\Sigma, \\Theta)$，其中$N$是非终结符集合，$\\Sigma$是终结符集合，并且$N \\cap \\Sigma = \\emptyset$，$\\Theta$就是神经网络的参数集合。RNNG和传统的PCFG的一个明显区别就是它没有显式地指出语法规则是什么，而是蕴含在了神经网络中，在句法转移的时候动态的生成。\n\n# Top-down句法分析和生成\n这部分主要介绍RNNG的两个变体，一个是top-down的句法分析系统，还有一个是稍稍修改后的生成系统。\n\n## 判别式系统\n这个判别式模型之前也已经介绍过很多次了，和普通的基于转移的句法分析系统一样，输入是一个句子$x$，输出是它的句法分析树$y$。主要组成部分有句法树栈、句子单词buffer、动作集合，每一步的动作有三种：\n* NT(X)： 将一个父结点X移进栈里。\n* SHIFT： 从buffer中移一个单词到栈里。\n* REDUCE： 将栈顶的若干个结点归约为它们的父结点，并且出栈。\n\n图1就是每个动作的状态变化过程，图2是判别式模型进行句法分析的示例：\n![](1.jpg)\n\n当然得给动作添加一些限制，首先记当前状态为三元组$(B, S, n)$，分别表示buffer、栈、当前栈里未归约的父结点数量，这个之前的博客没有提及过：\n* NT(X)动作只有当buffer不为空并且$n < 100$的时候才能进行。因为buffer空了的话就没有单词了，此时不可能移进新的非终结符了，并且要限制$n < 100$防止一元产生式无限生成下去。\n* SHIFT动作只有当buffer不为空并且$n \\ge 1$时才能进行。前者不用解释了，后者的话因为是top-down的，所以栈里至少要有一个父结点才能移进新的单词。\n* REDUCE只有当栈顶不是没有归约的父结点才能进行。\n* REDUCE只有当$n \\ge 2$或者buffer为空时才能进行。**这里要解释一下为什么$n \\ge 2$，因为如果buffer不为空同时$n = 1$，那么这时候如果REDUCE的话，栈里就只剩一个非终结符了，只可能是根节点S，而buffer里还有单词，所以这是不可能的。**\n\n记当前状态的可能动作集合为$\\mathcal{A}\\_D(B, S, n)$。\n\n## 生成式系统\n将上面的top-down转移系统稍稍修改即可得到生成式系统。区别有两点：\n* 首先没有了输入的buffer，取而代之的是输出的buffer $T$。\n* 其次因为没有输入单词了，所以在需要输入单词的时候采用GEN(x)动作来产生一个新的单词$x$，然后移进栈里，取代SHIFT动作。\n\n图3就是每个动作的状态变化过程，图4是生成式模型进行句法分析的示例：\n![](2.jpg)\n\n同样也要对其采取一些限制：\n* GEN(x)动作只有当$n \\ge 1$时才能进行，上面SHIFT限制已经解释过了。\n* REDUCE只有当$n \\ge 1$或者buffer为空时才能进行。**这里再次解释一下，上面判别式模型限制条件是$n \\ge 2$，为什么这里就变成了$n \\ge 1$？因为生成模型没有输入buffer，所以即使$n = 1$时REDUCE了，以后不要再GEN(x)即可，直接结束分析**\n\n记当前状态的可能动作集合为$\\mathcal{A}\\_G(T, S, n)$。\n\n## 转移序列\n因为一棵句法树的前序遍历是唯一的，所以不管用判别式模型还是生成式模型，得到的动作序列也都是唯一的。对于句子$x$和句法树$y$，记生成式模型动作序列为$a(x, y)$，判别式模型动作序列为$b(x, y)$。\n\n# 生成式模型\n---\n本文最重要的就是上面提到的生成式模型，因为GEN(x)动作的存在，所以模型同时对句子$x$和句法树$y$的联合分布进行了建模。记当前状态的向量表示为$u_t$，那么联合分布可以表示为：\n\\\\[p(x,y) = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {p({a_t}|{a_{ < t}})}  = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {\\frac{ {\\exp r_{ {a_t}}^T{u_t} + {b_{ {a_t}}}}}{ {\\sum\\nolimits_{a' \\in {\\mathcal{A}_G}({T_t},{S_t},{n_t})} {\\exp r_{a'}^T{u_t} + {b_{a'}}} }}} \\\\]\n其中$r_a$表示动作$a$的向量表示，$b$表示偏移向量，都包含在了RNNG参数集合$\\Theta$里面，通过训练得到。\n\n而当前状态的向量表示$u_t$由三部分得到，输出buffer的LSTM输出$o_t$、栈的LSTM输出$s_t$、历史动作序列的LSTM输出$h_t$，然后经过一个前馈神经网络得到：\n\\\\[u_t = \\tanh (W[o_t; s_t; h_t] + c)\\\\]\n$W$和$c$同样也包含在了RNNG参数集合$\\Theta$里面，下图是三个LSTM的示例图：\n![](3.jpg)\n\n## 句法成分组合\n在REDUCE操作时，需要将若干个子结点归约为一个父结点，为了得到父结点的向量表示，再次利用一个LSTM对子结点序列进行编码，同时在首尾加上父结点，结构图如下所示：\n![](4.jpg)\n\n## 单词生成\n单词生成采用softmax寻找概率最大的单词，但是单词数量可能十分巨大，所以采用分层softmax的思想，首先预测当前动作是不是GEN，如果是GEN，记单词总数为${\\left| { \\sum  } \\right|}$，再将单词平均分成${\\sqrt {\\left| \\sum  \\right|} }$个类别，用softmax预测属于哪个类别，然后在那个类别里再用softmax预测输出哪个单词。这样时间复杂度就从$O\\left( {\\left| \\sum  \\right|} \\right)$降到了$O\\left( {\\sqrt {\\left| \\sum  \\right|} } \\right)$。\n\n## 参数训练和判别式模型\n模型最终训练目的就是使得联合概率最大。\n\n而只需要将输出buffer改为输入buffer，GEN动作改为SHIFT动作，然后重新训练，就可以将模型变为判别式模型了，输出给定输入句子下概率最大的句法树。\n\n# 通过重要性采样进行推理\n---\n本文的生成式模型另一大作用是训练语言模型$p(x)$，根据边际分布公式\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)} \\\\]\n可以直接得到$p(x)$，但是一句话的句法树可能性是指数级别的，不可能一一枚举，这时候就要用到重要性采样算法。\n\n首先定义一个比较容易得到的条件分布$q(y | x)$，它满足如下性质：\n* $p(y | x) > 0$可以推出$q(y | x) > 0$。\n* 服从分布的样本很容易得到。\n* $q(y | x)$可以直接计算得到。\n\n可以发现，上面的判别式模型得到的条件分布符合上面的性质，所以这里直接用判别式模型来进行采样。\n\n这样$p(x)$就变为了：\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\\\]\n其中重要性权重$w(x,y) = p(x,y)/q(y|x)$。\n\n最后如果根据分布$q(y | x)$采样得到了$N$个句法树样本，那么用蒙特卡罗方法就可以估计出$p(x)$了：\n\\\\[{E_{q(y|x)}}w(x,y) \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y_i})} \\\\]\n\n# 实验\n---\n实验部分主要说一下PTB上的句法分析和语言模型吧，下面两张图分别是句法分析和语言模型的结果：\n![](5.jpg)\n![](6.jpg)\n句法分析方面可以看出，生成模型效果要远远好于判别模型，生成模型效果也接近了当时的最好结果。一个合理的解释是在小数据集上面，生成模型效果要更好，而在大数据集上，判别模型效果可以赶上生成模型。\n\n**这里要提到的一点是，判别式模型就是每一个状态直接贪心argmax找到概率最大的动作，然后生成句法树。而生成式模型是利用判别式模型采样出100个概率比较高的句法树，然后用生成式模型计算它们的联合概率，重排序选择概率最高的句法树。**\n\n语言模型方面，结果要比最好结果高了一点。\n\n# 总结\n---\nRNNG这个文法是个生成式模型，建模了句子和句法树的联合分布，稍稍修改即可应用到句法分析和语言模型中，效果也非常的好。\n\n最后，我再简要梳理一遍RNNG的主要训练过程，因为这篇论文也看了整整两天，还是看的头大，一些细节可能还是没完全搞清。\n\n首先利用生成式模型对每句话进行训练，在每个状态计算正确的动作的概率，然后训练使得概率之积最大。\n\n然后应用到句法分析中，只需要修改为判别式模型即可。\n\n最后应用到语言模型中，由于需要用到重要性采样，所以直接利用判别式模型生成若干样本，然后根据算得的条件概率计算语言模型句子的概率。","slug":"RNNG","published":1,"updated":"2019-07-20T04:21:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982cn004z7sweww5akeku","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=25706282&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://www.aclweb.org/anthology/N/N16/N16-1024.pdf\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a><br><strong>代码地址：</strong><a href=\"https://github.com/clab/rnng\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的这篇论文是来自NAACL16的Recurrent Neural Network Grammars，主要贡献点就是提出了一种新的文法RNNG，不同于传统的PCFG之类的文法，RNNG使用RNN来对句子和它的句法树的联合概率进行建模，因此它是一个生成模型。但是稍稍修改就可以改为判别模型，也就是大家熟悉的基于转移的成分句法分析系统，并且转移系统是采用top-down方法的，也就是利用了句法树的前序遍历。</p>\n<p>RNNG在语言模型任务上取得了当时的state-of-the-art结果，成分句法分析任务上，生成模型取得了媲美最好结果的F1值，而判别模型就差了点。本文最大的贡献点就是提出了生成式模型RNNG，说明了在数据量不是很大的时候，利用生成式模型可以提高成分句法分析的准确率。</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>RNN在语言模型和其他许多NLP任务上面都已经取得了非常不错的效果，但是RNN只能捕捉到句子的序列特征，例如句子的句法结构等递归嵌套的结构信息无法用RNN捕捉到。</p>\n<p>因此本文提出了一种利用RNN建模出来的全新文法RNNG，建立在句子的句法结构之上，消除了PCFG的上下文无关假设。并提出了两种变体，一种是生成模型，可以用来句法分析和训练语言模型，另一种是判别模型，可以用来句法分析。</p>\n<p>RNNG建立在top-down转移系统之上，top-down转移系统相比于bottom-up转移系统有一个好处，就是不需要二叉化，因为如果bottom-up转移系统不二叉化的话，REDUCE的状态就会有很多种可能，不知道到底归约栈里的几个结点。而top-down转移系统就不存在这个问题，直接归约到第一个父结点为止就行了。本文应该也是第一个提出用RNN来实现top-down转移系统的，之前的方法都是用top-down的文法，或者是bottom-up的，例如Sochar2013的CVG，也是用二叉化后的RNN学习结点的语义表示。</p>\n<h1 id=\"RNN文法\"><a href=\"#RNN文法\" class=\"headerlink\" title=\"RNN文法\"></a>RNN文法</h1><hr>\n<p>RNNG定义为三元组$(N, \\Sigma, \\Theta)$，其中$N$是非终结符集合，$\\Sigma$是终结符集合，并且$N \\cap \\Sigma = \\emptyset$，$\\Theta$就是神经网络的参数集合。RNNG和传统的PCFG的一个明显区别就是它没有显式地指出语法规则是什么，而是蕴含在了神经网络中，在句法转移的时候动态的生成。</p>\n<h1 id=\"Top-down句法分析和生成\"><a href=\"#Top-down句法分析和生成\" class=\"headerlink\" title=\"Top-down句法分析和生成\"></a>Top-down句法分析和生成</h1><p>这部分主要介绍RNNG的两个变体，一个是top-down的句法分析系统，还有一个是稍稍修改后的生成系统。</p>\n<h2 id=\"判别式系统\"><a href=\"#判别式系统\" class=\"headerlink\" title=\"判别式系统\"></a>判别式系统</h2><p>这个判别式模型之前也已经介绍过很多次了，和普通的基于转移的句法分析系统一样，输入是一个句子$x$，输出是它的句法分析树$y$。主要组成部分有句法树栈、句子单词buffer、动作集合，每一步的动作有三种：</p>\n<ul>\n<li>NT(X)： 将一个父结点X移进栈里。</li>\n<li>SHIFT： 从buffer中移一个单词到栈里。</li>\n<li>REDUCE： 将栈顶的若干个结点归约为它们的父结点，并且出栈。</li>\n</ul>\n<p>图1就是每个动作的状态变化过程，图2是判别式模型进行句法分析的示例：<br><img src=\"1.jpg\" alt></p>\n<p>当然得给动作添加一些限制，首先记当前状态为三元组$(B, S, n)$，分别表示buffer、栈、当前栈里未归约的父结点数量，这个之前的博客没有提及过：</p>\n<ul>\n<li>NT(X)动作只有当buffer不为空并且$n &lt; 100$的时候才能进行。因为buffer空了的话就没有单词了，此时不可能移进新的非终结符了，并且要限制$n &lt; 100$防止一元产生式无限生成下去。</li>\n<li>SHIFT动作只有当buffer不为空并且$n \\ge 1$时才能进行。前者不用解释了，后者的话因为是top-down的，所以栈里至少要有一个父结点才能移进新的单词。</li>\n<li>REDUCE只有当栈顶不是没有归约的父结点才能进行。</li>\n<li>REDUCE只有当$n \\ge 2$或者buffer为空时才能进行。<strong>这里要解释一下为什么$n \\ge 2$，因为如果buffer不为空同时$n = 1$，那么这时候如果REDUCE的话，栈里就只剩一个非终结符了，只可能是根节点S，而buffer里还有单词，所以这是不可能的。</strong></li>\n</ul>\n<p>记当前状态的可能动作集合为$\\mathcal{A}_D(B, S, n)$。</p>\n<h2 id=\"生成式系统\"><a href=\"#生成式系统\" class=\"headerlink\" title=\"生成式系统\"></a>生成式系统</h2><p>将上面的top-down转移系统稍稍修改即可得到生成式系统。区别有两点：</p>\n<ul>\n<li>首先没有了输入的buffer，取而代之的是输出的buffer $T$。</li>\n<li>其次因为没有输入单词了，所以在需要输入单词的时候采用GEN(x)动作来产生一个新的单词$x$，然后移进栈里，取代SHIFT动作。</li>\n</ul>\n<p>图3就是每个动作的状态变化过程，图4是生成式模型进行句法分析的示例：<br><img src=\"2.jpg\" alt></p>\n<p>同样也要对其采取一些限制：</p>\n<ul>\n<li>GEN(x)动作只有当$n \\ge 1$时才能进行，上面SHIFT限制已经解释过了。</li>\n<li>REDUCE只有当$n \\ge 1$或者buffer为空时才能进行。<strong>这里再次解释一下，上面判别式模型限制条件是$n \\ge 2$，为什么这里就变成了$n \\ge 1$？因为生成模型没有输入buffer，所以即使$n = 1$时REDUCE了，以后不要再GEN(x)即可，直接结束分析</strong></li>\n</ul>\n<p>记当前状态的可能动作集合为$\\mathcal{A}_G(T, S, n)$。</p>\n<h2 id=\"转移序列\"><a href=\"#转移序列\" class=\"headerlink\" title=\"转移序列\"></a>转移序列</h2><p>因为一棵句法树的前序遍历是唯一的，所以不管用判别式模型还是生成式模型，得到的动作序列也都是唯一的。对于句子$x$和句法树$y$，记生成式模型动作序列为$a(x, y)$，判别式模型动作序列为$b(x, y)$。</p>\n<h1 id=\"生成式模型\"><a href=\"#生成式模型\" class=\"headerlink\" title=\"生成式模型\"></a>生成式模型</h1><hr>\n<p>本文最重要的就是上面提到的生成式模型，因为GEN(x)动作的存在，所以模型同时对句子$x$和句法树$y$的联合分布进行了建模。记当前状态的向量表示为$u_t$，那么联合分布可以表示为：<br>\\[p(x,y) = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {p({a_t}|{a_{ &lt; t}})}  = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {\\frac{ {\\exp r_{ {a_t}}^T{u_t} + {b_{ {a_t}}}}}{ {\\sum\\nolimits_{a’ \\in {\\mathcal{A}_G}({T_t},{S_t},{n_t})} {\\exp r_{a’}^T{u_t} + {b_{a’}}} }}} \\]<br>其中$r_a$表示动作$a$的向量表示，$b$表示偏移向量，都包含在了RNNG参数集合$\\Theta$里面，通过训练得到。</p>\n<p>而当前状态的向量表示$u_t$由三部分得到，输出buffer的LSTM输出$o_t$、栈的LSTM输出$s_t$、历史动作序列的LSTM输出$h_t$，然后经过一个前馈神经网络得到：<br>\\[u_t = \\tanh (W[o_t; s_t; h_t] + c)\\]<br>$W$和$c$同样也包含在了RNNG参数集合$\\Theta$里面，下图是三个LSTM的示例图：<br><img src=\"3.jpg\" alt></p>\n<h2 id=\"句法成分组合\"><a href=\"#句法成分组合\" class=\"headerlink\" title=\"句法成分组合\"></a>句法成分组合</h2><p>在REDUCE操作时，需要将若干个子结点归约为一个父结点，为了得到父结点的向量表示，再次利用一个LSTM对子结点序列进行编码，同时在首尾加上父结点，结构图如下所示：<br><img src=\"4.jpg\" alt></p>\n<h2 id=\"单词生成\"><a href=\"#单词生成\" class=\"headerlink\" title=\"单词生成\"></a>单词生成</h2><p>单词生成采用softmax寻找概率最大的单词，但是单词数量可能十分巨大，所以采用分层softmax的思想，首先预测当前动作是不是GEN，如果是GEN，记单词总数为${\\left| { \\sum  } \\right|}$，再将单词平均分成${\\sqrt {\\left| \\sum  \\right|} }$个类别，用softmax预测属于哪个类别，然后在那个类别里再用softmax预测输出哪个单词。这样时间复杂度就从$O\\left( {\\left| \\sum  \\right|} \\right)$降到了$O\\left( {\\sqrt {\\left| \\sum  \\right|} } \\right)$。</p>\n<h2 id=\"参数训练和判别式模型\"><a href=\"#参数训练和判别式模型\" class=\"headerlink\" title=\"参数训练和判别式模型\"></a>参数训练和判别式模型</h2><p>模型最终训练目的就是使得联合概率最大。</p>\n<p>而只需要将输出buffer改为输入buffer，GEN动作改为SHIFT动作，然后重新训练，就可以将模型变为判别式模型了，输出给定输入句子下概率最大的句法树。</p>\n<h1 id=\"通过重要性采样进行推理\"><a href=\"#通过重要性采样进行推理\" class=\"headerlink\" title=\"通过重要性采样进行推理\"></a>通过重要性采样进行推理</h1><hr>\n<p>本文的生成式模型另一大作用是训练语言模型$p(x)$，根据边际分布公式<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)} \\]<br>可以直接得到$p(x)$，但是一句话的句法树可能性是指数级别的，不可能一一枚举，这时候就要用到重要性采样算法。</p>\n<p>首先定义一个比较容易得到的条件分布$q(y | x)$，它满足如下性质：</p>\n<ul>\n<li>$p(y | x) &gt; 0$可以推出$q(y | x) &gt; 0$。</li>\n<li>服从分布的样本很容易得到。</li>\n<li>$q(y | x)$可以直接计算得到。</li>\n</ul>\n<p>可以发现，上面的判别式模型得到的条件分布符合上面的性质，所以这里直接用判别式模型来进行采样。</p>\n<p>这样$p(x)$就变为了：<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\]<br>其中重要性权重$w(x,y) = p(x,y)/q(y|x)$。</p>\n<p>最后如果根据分布$q(y | x)$采样得到了$N$个句法树样本，那么用蒙特卡罗方法就可以估计出$p(x)$了：<br>\\[{E_{q(y|x)}}w(x,y) \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y_i})} \\]</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验部分主要说一下PTB上的句法分析和语言模型吧，下面两张图分别是句法分析和语言模型的结果：<br><img src=\"5.jpg\" alt><br><img src=\"6.jpg\" alt><br>句法分析方面可以看出，生成模型效果要远远好于判别模型，生成模型效果也接近了当时的最好结果。一个合理的解释是在小数据集上面，生成模型效果要更好，而在大数据集上，判别模型效果可以赶上生成模型。</p>\n<p><strong>这里要提到的一点是，判别式模型就是每一个状态直接贪心argmax找到概率最大的动作，然后生成句法树。而生成式模型是利用判别式模型采样出100个概率比较高的句法树，然后用生成式模型计算它们的联合概率，重排序选择概率最高的句法树。</strong></p>\n<p>语言模型方面，结果要比最好结果高了一点。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>RNNG这个文法是个生成式模型，建模了句子和句法树的联合分布，稍稍修改即可应用到句法分析和语言模型中，效果也非常的好。</p>\n<p>最后，我再简要梳理一遍RNNG的主要训练过程，因为这篇论文也看了整整两天，还是看的头大，一些细节可能还是没完全搞清。</p>\n<p>首先利用生成式模型对每句话进行训练，在每个状态计算正确的动作的概率，然后训练使得概率之积最大。</p>\n<p>然后应用到句法分析中，只需要修改为判别式模型即可。</p>\n<p>最后应用到语言模型中，由于需要用到重要性采样，所以直接利用判别式模型生成若干样本，然后根据算得的条件概率计算语言模型句子的概率。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=25706282&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://www.aclweb.org/anthology/N/N16/N16-1024.pdf\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a><br><strong>代码地址：</strong><a href=\"https://github.com/clab/rnng\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的这篇论文是来自NAACL16的Recurrent Neural Network Grammars，主要贡献点就是提出了一种新的文法RNNG，不同于传统的PCFG之类的文法，RNNG使用RNN来对句子和它的句法树的联合概率进行建模，因此它是一个生成模型。但是稍稍修改就可以改为判别模型，也就是大家熟悉的基于转移的成分句法分析系统，并且转移系统是采用top-down方法的，也就是利用了句法树的前序遍历。</p>\n<p>RNNG在语言模型任务上取得了当时的state-of-the-art结果，成分句法分析任务上，生成模型取得了媲美最好结果的F1值，而判别模型就差了点。本文最大的贡献点就是提出了生成式模型RNNG，说明了在数据量不是很大的时候，利用生成式模型可以提高成分句法分析的准确率。</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>RNN在语言模型和其他许多NLP任务上面都已经取得了非常不错的效果，但是RNN只能捕捉到句子的序列特征，例如句子的句法结构等递归嵌套的结构信息无法用RNN捕捉到。</p>\n<p>因此本文提出了一种利用RNN建模出来的全新文法RNNG，建立在句子的句法结构之上，消除了PCFG的上下文无关假设。并提出了两种变体，一种是生成模型，可以用来句法分析和训练语言模型，另一种是判别模型，可以用来句法分析。</p>\n<p>RNNG建立在top-down转移系统之上，top-down转移系统相比于bottom-up转移系统有一个好处，就是不需要二叉化，因为如果bottom-up转移系统不二叉化的话，REDUCE的状态就会有很多种可能，不知道到底归约栈里的几个结点。而top-down转移系统就不存在这个问题，直接归约到第一个父结点为止就行了。本文应该也是第一个提出用RNN来实现top-down转移系统的，之前的方法都是用top-down的文法，或者是bottom-up的，例如Sochar2013的CVG，也是用二叉化后的RNN学习结点的语义表示。</p>\n<h1 id=\"RNN文法\"><a href=\"#RNN文法\" class=\"headerlink\" title=\"RNN文法\"></a>RNN文法</h1><hr>\n<p>RNNG定义为三元组$(N, \\Sigma, \\Theta)$，其中$N$是非终结符集合，$\\Sigma$是终结符集合，并且$N \\cap \\Sigma = \\emptyset$，$\\Theta$就是神经网络的参数集合。RNNG和传统的PCFG的一个明显区别就是它没有显式地指出语法规则是什么，而是蕴含在了神经网络中，在句法转移的时候动态的生成。</p>\n<h1 id=\"Top-down句法分析和生成\"><a href=\"#Top-down句法分析和生成\" class=\"headerlink\" title=\"Top-down句法分析和生成\"></a>Top-down句法分析和生成</h1><p>这部分主要介绍RNNG的两个变体，一个是top-down的句法分析系统，还有一个是稍稍修改后的生成系统。</p>\n<h2 id=\"判别式系统\"><a href=\"#判别式系统\" class=\"headerlink\" title=\"判别式系统\"></a>判别式系统</h2><p>这个判别式模型之前也已经介绍过很多次了，和普通的基于转移的句法分析系统一样，输入是一个句子$x$，输出是它的句法分析树$y$。主要组成部分有句法树栈、句子单词buffer、动作集合，每一步的动作有三种：</p>\n<ul>\n<li>NT(X)： 将一个父结点X移进栈里。</li>\n<li>SHIFT： 从buffer中移一个单词到栈里。</li>\n<li>REDUCE： 将栈顶的若干个结点归约为它们的父结点，并且出栈。</li>\n</ul>\n<p>图1就是每个动作的状态变化过程，图2是判别式模型进行句法分析的示例：<br><img src=\"1.jpg\" alt></p>\n<p>当然得给动作添加一些限制，首先记当前状态为三元组$(B, S, n)$，分别表示buffer、栈、当前栈里未归约的父结点数量，这个之前的博客没有提及过：</p>\n<ul>\n<li>NT(X)动作只有当buffer不为空并且$n &lt; 100$的时候才能进行。因为buffer空了的话就没有单词了，此时不可能移进新的非终结符了，并且要限制$n &lt; 100$防止一元产生式无限生成下去。</li>\n<li>SHIFT动作只有当buffer不为空并且$n \\ge 1$时才能进行。前者不用解释了，后者的话因为是top-down的，所以栈里至少要有一个父结点才能移进新的单词。</li>\n<li>REDUCE只有当栈顶不是没有归约的父结点才能进行。</li>\n<li>REDUCE只有当$n \\ge 2$或者buffer为空时才能进行。<strong>这里要解释一下为什么$n \\ge 2$，因为如果buffer不为空同时$n = 1$，那么这时候如果REDUCE的话，栈里就只剩一个非终结符了，只可能是根节点S，而buffer里还有单词，所以这是不可能的。</strong></li>\n</ul>\n<p>记当前状态的可能动作集合为$\\mathcal{A}_D(B, S, n)$。</p>\n<h2 id=\"生成式系统\"><a href=\"#生成式系统\" class=\"headerlink\" title=\"生成式系统\"></a>生成式系统</h2><p>将上面的top-down转移系统稍稍修改即可得到生成式系统。区别有两点：</p>\n<ul>\n<li>首先没有了输入的buffer，取而代之的是输出的buffer $T$。</li>\n<li>其次因为没有输入单词了，所以在需要输入单词的时候采用GEN(x)动作来产生一个新的单词$x$，然后移进栈里，取代SHIFT动作。</li>\n</ul>\n<p>图3就是每个动作的状态变化过程，图4是生成式模型进行句法分析的示例：<br><img src=\"2.jpg\" alt></p>\n<p>同样也要对其采取一些限制：</p>\n<ul>\n<li>GEN(x)动作只有当$n \\ge 1$时才能进行，上面SHIFT限制已经解释过了。</li>\n<li>REDUCE只有当$n \\ge 1$或者buffer为空时才能进行。<strong>这里再次解释一下，上面判别式模型限制条件是$n \\ge 2$，为什么这里就变成了$n \\ge 1$？因为生成模型没有输入buffer，所以即使$n = 1$时REDUCE了，以后不要再GEN(x)即可，直接结束分析</strong></li>\n</ul>\n<p>记当前状态的可能动作集合为$\\mathcal{A}_G(T, S, n)$。</p>\n<h2 id=\"转移序列\"><a href=\"#转移序列\" class=\"headerlink\" title=\"转移序列\"></a>转移序列</h2><p>因为一棵句法树的前序遍历是唯一的，所以不管用判别式模型还是生成式模型，得到的动作序列也都是唯一的。对于句子$x$和句法树$y$，记生成式模型动作序列为$a(x, y)$，判别式模型动作序列为$b(x, y)$。</p>\n<h1 id=\"生成式模型\"><a href=\"#生成式模型\" class=\"headerlink\" title=\"生成式模型\"></a>生成式模型</h1><hr>\n<p>本文最重要的就是上面提到的生成式模型，因为GEN(x)动作的存在，所以模型同时对句子$x$和句法树$y$的联合分布进行了建模。记当前状态的向量表示为$u_t$，那么联合分布可以表示为：<br>\\[p(x,y) = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {p({a_t}|{a_{ &lt; t}})}  = \\prod\\limits_{t = 1}^{\\left| {a(x,y)} \\right|} {\\frac{ {\\exp r_{ {a_t}}^T{u_t} + {b_{ {a_t}}}}}{ {\\sum\\nolimits_{a’ \\in {\\mathcal{A}_G}({T_t},{S_t},{n_t})} {\\exp r_{a’}^T{u_t} + {b_{a’}}} }}} \\]<br>其中$r_a$表示动作$a$的向量表示，$b$表示偏移向量，都包含在了RNNG参数集合$\\Theta$里面，通过训练得到。</p>\n<p>而当前状态的向量表示$u_t$由三部分得到，输出buffer的LSTM输出$o_t$、栈的LSTM输出$s_t$、历史动作序列的LSTM输出$h_t$，然后经过一个前馈神经网络得到：<br>\\[u_t = \\tanh (W[o_t; s_t; h_t] + c)\\]<br>$W$和$c$同样也包含在了RNNG参数集合$\\Theta$里面，下图是三个LSTM的示例图：<br><img src=\"3.jpg\" alt></p>\n<h2 id=\"句法成分组合\"><a href=\"#句法成分组合\" class=\"headerlink\" title=\"句法成分组合\"></a>句法成分组合</h2><p>在REDUCE操作时，需要将若干个子结点归约为一个父结点，为了得到父结点的向量表示，再次利用一个LSTM对子结点序列进行编码，同时在首尾加上父结点，结构图如下所示：<br><img src=\"4.jpg\" alt></p>\n<h2 id=\"单词生成\"><a href=\"#单词生成\" class=\"headerlink\" title=\"单词生成\"></a>单词生成</h2><p>单词生成采用softmax寻找概率最大的单词，但是单词数量可能十分巨大，所以采用分层softmax的思想，首先预测当前动作是不是GEN，如果是GEN，记单词总数为${\\left| { \\sum  } \\right|}$，再将单词平均分成${\\sqrt {\\left| \\sum  \\right|} }$个类别，用softmax预测属于哪个类别，然后在那个类别里再用softmax预测输出哪个单词。这样时间复杂度就从$O\\left( {\\left| \\sum  \\right|} \\right)$降到了$O\\left( {\\sqrt {\\left| \\sum  \\right|} } \\right)$。</p>\n<h2 id=\"参数训练和判别式模型\"><a href=\"#参数训练和判别式模型\" class=\"headerlink\" title=\"参数训练和判别式模型\"></a>参数训练和判别式模型</h2><p>模型最终训练目的就是使得联合概率最大。</p>\n<p>而只需要将输出buffer改为输入buffer，GEN动作改为SHIFT动作，然后重新训练，就可以将模型变为判别式模型了，输出给定输入句子下概率最大的句法树。</p>\n<h1 id=\"通过重要性采样进行推理\"><a href=\"#通过重要性采样进行推理\" class=\"headerlink\" title=\"通过重要性采样进行推理\"></a>通过重要性采样进行推理</h1><hr>\n<p>本文的生成式模型另一大作用是训练语言模型$p(x)$，根据边际分布公式<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)} \\]<br>可以直接得到$p(x)$，但是一句话的句法树可能性是指数级别的，不可能一一枚举，这时候就要用到重要性采样算法。</p>\n<p>首先定义一个比较容易得到的条件分布$q(y | x)$，它满足如下性质：</p>\n<ul>\n<li>$p(y | x) &gt; 0$可以推出$q(y | x) &gt; 0$。</li>\n<li>服从分布的样本很容易得到。</li>\n<li>$q(y | x)$可以直接计算得到。</li>\n</ul>\n<p>可以发现，上面的判别式模型得到的条件分布符合上面的性质，所以这里直接用判别式模型来进行采样。</p>\n<p>这样$p(x)$就变为了：<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\]<br>其中重要性权重$w(x,y) = p(x,y)/q(y|x)$。</p>\n<p>最后如果根据分布$q(y | x)$采样得到了$N$个句法树样本，那么用蒙特卡罗方法就可以估计出$p(x)$了：<br>\\[{E_{q(y|x)}}w(x,y) \\approx \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y_i})} \\]</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验部分主要说一下PTB上的句法分析和语言模型吧，下面两张图分别是句法分析和语言模型的结果：<br><img src=\"5.jpg\" alt><br><img src=\"6.jpg\" alt><br>句法分析方面可以看出，生成模型效果要远远好于判别模型，生成模型效果也接近了当时的最好结果。一个合理的解释是在小数据集上面，生成模型效果要更好，而在大数据集上，判别模型效果可以赶上生成模型。</p>\n<p><strong>这里要提到的一点是，判别式模型就是每一个状态直接贪心argmax找到概率最大的动作，然后生成句法树。而生成式模型是利用判别式模型采样出100个概率比较高的句法树，然后用生成式模型计算它们的联合概率，重排序选择概率最高的句法树。</strong></p>\n<p>语言模型方面，结果要比最好结果高了一点。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>RNNG这个文法是个生成式模型，建模了句子和句法树的联合分布，稍稍修改即可应用到句法分析和语言模型中，效果也非常的好。</p>\n<p>最后，我再简要梳理一遍RNNG的主要训练过程，因为这篇论文也看了整整两天，还是看的头大，一些细节可能还是没完全搞清。</p>\n<p>首先利用生成式模型对每句话进行训练，在每个状态计算正确的动作的概率，然后训练使得概率之积最大。</p>\n<p>然后应用到句法分析中，只需要修改为判别式模型即可。</p>\n<p>最后应用到语言模型中，由于需要用到重要性采样，所以直接利用判别式模型生成若干样本，然后根据算得的条件概率计算语言模型句子的概率。</p>\n"},{"title":"Parsing with Compositional Vector Grammars","date":"2018-01-10T12:24:48.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n今天也没看新的paper，就讲讲我的毕设的paper吧，估计等我文本挖掘这门课上完，也不会再看太多序列标注相关的了，重点要转移到parsing了。毕竟序列标注效果也已经很好了，迁移学习方面也暂时不想弄，以后研究重点还是可能在parsing吧。\n\n# 介绍\n---\n这篇paper名字叫做基于成分向量文法的句法分析，那么这是个什么东西呢？大家都知道（也许不知道？我就默认知道了( ╯□╰ )）概率上下文无关文法（PCFG）吧，这是基于传统方法的短语结构句法分析，也叫成分句法分析，还有一种叫做依存句法分析，现在大多数是做这个的。但是传统的成分句法分析无法解决歧义的问题，因为PCFG是基于上下文无关的独立性假设的，但是自然语言是一种上下文有关文法，必然会产生歧义。\n\n那么如何消除这种歧义呢，Socher提出了SU-RNN的模型，引入了短语的语义表示，具体是什么样子的呢？\n\n# 模型\n---\n这个模型概括起来是这样的：首先用PCFG产生k-best句法树，比如产生概率最大的20棵句法树。然后对这k-best棵句法树每棵树都跑一遍SU-RNN，计算出每棵树的得分，然后综合PCFG得分和SU-RNN得分，对他们进行重排序，然后得到排名最高的句法树。\n\n那么怎么通过SU-RNN计算一棵树的得分呢？\n\n首先上一张图，看看SU-RNN是个什么结构：\n![](1.png)\n可以看出，每个节点不仅含有它的类别表示，还有一个向量表示它的语义信息。而SU-RNN与之前提出过的RNN不一样的是，这里的每个节点的$W$权值矩阵全部是不同的，依赖于它的子节点的类别。\n每个节点的语义表示向量计算方法如下：\n\\\\[{p^{(1)}} = f\\left( { {W^{(B,C)}}\\left[ {\\begin{array}{*{20}{c}}b\\\\c\\end{array}} \\right]} \\right)\\\\]而这个节点的得分表示为\n\\\\[s({p^{(1)}}) = {({v^{(B,C)}})^T}{p^{(1)}} + \\log P({P_1} \\to B{\\rm{ }}C)\\\\]最后一整棵树的得分就是\n\\\\[s(CVG(\\theta ,x,\\hat y)) = \\sum\\limits_{d \\in N(\\hat y)} {s({p^d})} \\\\]这样就可以枚举所有的句法树，然后计算得到得分最高的那棵树就是最终的句法树了。\n\n但是这样枚举的话复杂度太高了，要知道一个长度为$n$的句子，可能的句法树有$Catalan(n)$种。而且是无法用动态规划算法来计算最优句法树的，因为SU-RNN破坏了上下文无关的独立性假设（因为反向传播？其实我也不是太懂。。。）。所以就要用到之前所说的先用PCFG得到k-best棵句法树，然后用SU-RNN重排序了。\n\n那么用SU-RNN计算完得到最优树之后，怎么计算它与gold-tree之间的差异，从而得到loss呢？\n\n本文计算两棵树差异的公式如下：\n\\\\[\\Delta ({y_i},\\hat y) = \\sum\\limits_{d \\in N(\\hat y)} {\\kappa 1\\{ d \\notin N({y_i})\\} } \\\\]最终的损失函数定义为：\n\\\\[J(\\theta ) = \\frac{1}{m}\\sum\\limits_{i = 1}^m { {r_i}(\\theta )}  + \\frac{\\lambda }{2}{\\left\\| \\theta  \\right\\|^2}\\\\]其中\n\\\\[{r_i}(\\theta ) = \\mathop {\\max }\\limits_{\\hat y \\in Y({x_i})} (s(CVG({x_i},\\hat y)) + \\Delta ({y_i},\\hat y)) - s(CVG({x_i},{y_i}))\\\\]也就是要尽量最大化标准树的得分，减小预测树的得分。\n\n# 实验结果\n---\n![](2.png)\n可以看出，SU-RNN结果比以往的结果都要好，但是没有最后两行的好。。。最后两个具体是啥我也没去细看。\n\n# 我的毕设任务\n---\n其实我的任务不用PCFG，看起来减少了工作量？嘿嘿，其实貌似麻烦的一笔啊。。。我的模型主要的思想就是直接用SU-RNN训练出句法分析树！那枚举复杂度太高了怎么办？用动态规划啊！不是不能用吗？没事，假装它能用，要是效果好强行解释一波就行了。。。而且原模型的RNN是递归神经网络哦，这次我改成了循环神经网络，用LSTM来计算得分。看起来貌似挺麻烦的，纠结了好几天。LSTM每个节点总得有一个$x$输入，一个$h$隐层输入吧，所以可能还要给每两个节点指定一个作为head。。。\n\n感觉心态炸了哦，一堆非主流写法？也不知道最后能不能写出来，也不知道写出来结果怎么样。。。说不定要延毕了？哈哈，自嘲一波吧，暑假好好研究研究了，python基础还是不行，写起来太累了。。。","source":"_posts/PaperDaily-2.md","raw":"---\ntitle: Parsing with Compositional Vector Grammars\ndate: 2018-01-10 20:24:48\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n今天也没看新的paper，就讲讲我的毕设的paper吧，估计等我文本挖掘这门课上完，也不会再看太多序列标注相关的了，重点要转移到parsing了。毕竟序列标注效果也已经很好了，迁移学习方面也暂时不想弄，以后研究重点还是可能在parsing吧。\n\n# 介绍\n---\n这篇paper名字叫做基于成分向量文法的句法分析，那么这是个什么东西呢？大家都知道（也许不知道？我就默认知道了( ╯□╰ )）概率上下文无关文法（PCFG）吧，这是基于传统方法的短语结构句法分析，也叫成分句法分析，还有一种叫做依存句法分析，现在大多数是做这个的。但是传统的成分句法分析无法解决歧义的问题，因为PCFG是基于上下文无关的独立性假设的，但是自然语言是一种上下文有关文法，必然会产生歧义。\n\n那么如何消除这种歧义呢，Socher提出了SU-RNN的模型，引入了短语的语义表示，具体是什么样子的呢？\n\n# 模型\n---\n这个模型概括起来是这样的：首先用PCFG产生k-best句法树，比如产生概率最大的20棵句法树。然后对这k-best棵句法树每棵树都跑一遍SU-RNN，计算出每棵树的得分，然后综合PCFG得分和SU-RNN得分，对他们进行重排序，然后得到排名最高的句法树。\n\n那么怎么通过SU-RNN计算一棵树的得分呢？\n\n首先上一张图，看看SU-RNN是个什么结构：\n![](1.png)\n可以看出，每个节点不仅含有它的类别表示，还有一个向量表示它的语义信息。而SU-RNN与之前提出过的RNN不一样的是，这里的每个节点的$W$权值矩阵全部是不同的，依赖于它的子节点的类别。\n每个节点的语义表示向量计算方法如下：\n\\\\[{p^{(1)}} = f\\left( { {W^{(B,C)}}\\left[ {\\begin{array}{*{20}{c}}b\\\\c\\end{array}} \\right]} \\right)\\\\]而这个节点的得分表示为\n\\\\[s({p^{(1)}}) = {({v^{(B,C)}})^T}{p^{(1)}} + \\log P({P_1} \\to B{\\rm{ }}C)\\\\]最后一整棵树的得分就是\n\\\\[s(CVG(\\theta ,x,\\hat y)) = \\sum\\limits_{d \\in N(\\hat y)} {s({p^d})} \\\\]这样就可以枚举所有的句法树，然后计算得到得分最高的那棵树就是最终的句法树了。\n\n但是这样枚举的话复杂度太高了，要知道一个长度为$n$的句子，可能的句法树有$Catalan(n)$种。而且是无法用动态规划算法来计算最优句法树的，因为SU-RNN破坏了上下文无关的独立性假设（因为反向传播？其实我也不是太懂。。。）。所以就要用到之前所说的先用PCFG得到k-best棵句法树，然后用SU-RNN重排序了。\n\n那么用SU-RNN计算完得到最优树之后，怎么计算它与gold-tree之间的差异，从而得到loss呢？\n\n本文计算两棵树差异的公式如下：\n\\\\[\\Delta ({y_i},\\hat y) = \\sum\\limits_{d \\in N(\\hat y)} {\\kappa 1\\{ d \\notin N({y_i})\\} } \\\\]最终的损失函数定义为：\n\\\\[J(\\theta ) = \\frac{1}{m}\\sum\\limits_{i = 1}^m { {r_i}(\\theta )}  + \\frac{\\lambda }{2}{\\left\\| \\theta  \\right\\|^2}\\\\]其中\n\\\\[{r_i}(\\theta ) = \\mathop {\\max }\\limits_{\\hat y \\in Y({x_i})} (s(CVG({x_i},\\hat y)) + \\Delta ({y_i},\\hat y)) - s(CVG({x_i},{y_i}))\\\\]也就是要尽量最大化标准树的得分，减小预测树的得分。\n\n# 实验结果\n---\n![](2.png)\n可以看出，SU-RNN结果比以往的结果都要好，但是没有最后两行的好。。。最后两个具体是啥我也没去细看。\n\n# 我的毕设任务\n---\n其实我的任务不用PCFG，看起来减少了工作量？嘿嘿，其实貌似麻烦的一笔啊。。。我的模型主要的思想就是直接用SU-RNN训练出句法分析树！那枚举复杂度太高了怎么办？用动态规划啊！不是不能用吗？没事，假装它能用，要是效果好强行解释一波就行了。。。而且原模型的RNN是递归神经网络哦，这次我改成了循环神经网络，用LSTM来计算得分。看起来貌似挺麻烦的，纠结了好几天。LSTM每个节点总得有一个$x$输入，一个$h$隐层输入吧，所以可能还要给每两个节点指定一个作为head。。。\n\n感觉心态炸了哦，一堆非主流写法？也不知道最后能不能写出来，也不知道写出来结果怎么样。。。说不定要延毕了？哈哈，自嘲一波吧，暑假好好研究研究了，python基础还是不行，写起来太累了。。。","slug":"PaperDaily-2","published":1,"updated":"2019-07-20T04:19:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982cw00547swe2cn6linm","content":"<p>今天也没看新的paper，就讲讲我的毕设的paper吧，估计等我文本挖掘这门课上完，也不会再看太多序列标注相关的了，重点要转移到parsing了。毕竟序列标注效果也已经很好了，迁移学习方面也暂时不想弄，以后研究重点还是可能在parsing吧。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇paper名字叫做基于成分向量文法的句法分析，那么这是个什么东西呢？大家都知道（也许不知道？我就默认知道了( ╯□╰ )）概率上下文无关文法（PCFG）吧，这是基于传统方法的短语结构句法分析，也叫成分句法分析，还有一种叫做依存句法分析，现在大多数是做这个的。但是传统的成分句法分析无法解决歧义的问题，因为PCFG是基于上下文无关的独立性假设的，但是自然语言是一种上下文有关文法，必然会产生歧义。</p>\n<p>那么如何消除这种歧义呢，Socher提出了SU-RNN的模型，引入了短语的语义表示，具体是什么样子的呢？</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>这个模型概括起来是这样的：首先用PCFG产生k-best句法树，比如产生概率最大的20棵句法树。然后对这k-best棵句法树每棵树都跑一遍SU-RNN，计算出每棵树的得分，然后综合PCFG得分和SU-RNN得分，对他们进行重排序，然后得到排名最高的句法树。</p>\n<p>那么怎么通过SU-RNN计算一棵树的得分呢？</p>\n<p>首先上一张图，看看SU-RNN是个什么结构：<br><img src=\"1.png\" alt><br>可以看出，每个节点不仅含有它的类别表示，还有一个向量表示它的语义信息。而SU-RNN与之前提出过的RNN不一样的是，这里的每个节点的$W$权值矩阵全部是不同的，依赖于它的子节点的类别。<br>每个节点的语义表示向量计算方法如下：<br>\\[{p^{(1)}} = f\\left( { {W^{(B,C)}}\\left[ {\\begin{array}{*{20}{c}}b\\\\c\\end{array}} \\right]} \\right)\\]而这个节点的得分表示为<br>\\[s({p^{(1)}}) = {({v^{(B,C)}})^T}{p^{(1)}} + \\log P({P_1} \\to B{\\rm{ }}C)\\]最后一整棵树的得分就是<br>\\[s(CVG(\\theta ,x,\\hat y)) = \\sum\\limits_{d \\in N(\\hat y)} {s({p^d})} \\]这样就可以枚举所有的句法树，然后计算得到得分最高的那棵树就是最终的句法树了。</p>\n<p>但是这样枚举的话复杂度太高了，要知道一个长度为$n$的句子，可能的句法树有$Catalan(n)$种。而且是无法用动态规划算法来计算最优句法树的，因为SU-RNN破坏了上下文无关的独立性假设（因为反向传播？其实我也不是太懂。。。）。所以就要用到之前所说的先用PCFG得到k-best棵句法树，然后用SU-RNN重排序了。</p>\n<p>那么用SU-RNN计算完得到最优树之后，怎么计算它与gold-tree之间的差异，从而得到loss呢？</p>\n<p>本文计算两棵树差异的公式如下：<br>\\[\\Delta ({y_i},\\hat y) = \\sum\\limits_{d \\in N(\\hat y)} {\\kappa 1\\{ d \\notin N({y_i})\\} } \\]最终的损失函数定义为：<br>\\[J(\\theta ) = \\frac{1}{m}\\sum\\limits_{i = 1}^m { {r_i}(\\theta )}  + \\frac{\\lambda }{2}{\\left| \\theta  \\right|^2}\\]其中<br>\\[{r_i}(\\theta ) = \\mathop {\\max }\\limits_{\\hat y \\in Y({x_i})} (s(CVG({x_i},\\hat y)) + \\Delta ({y_i},\\hat y)) - s(CVG({x_i},{y_i}))\\]也就是要尽量最大化标准树的得分，减小预测树的得分。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p><img src=\"2.png\" alt><br>可以看出，SU-RNN结果比以往的结果都要好，但是没有最后两行的好。。。最后两个具体是啥我也没去细看。</p>\n<h1 id=\"我的毕设任务\"><a href=\"#我的毕设任务\" class=\"headerlink\" title=\"我的毕设任务\"></a>我的毕设任务</h1><hr>\n<p>其实我的任务不用PCFG，看起来减少了工作量？嘿嘿，其实貌似麻烦的一笔啊。。。我的模型主要的思想就是直接用SU-RNN训练出句法分析树！那枚举复杂度太高了怎么办？用动态规划啊！不是不能用吗？没事，假装它能用，要是效果好强行解释一波就行了。。。而且原模型的RNN是递归神经网络哦，这次我改成了循环神经网络，用LSTM来计算得分。看起来貌似挺麻烦的，纠结了好几天。LSTM每个节点总得有一个$x$输入，一个$h$隐层输入吧，所以可能还要给每两个节点指定一个作为head。。。</p>\n<p>感觉心态炸了哦，一堆非主流写法？也不知道最后能不能写出来，也不知道写出来结果怎么样。。。说不定要延毕了？哈哈，自嘲一波吧，暑假好好研究研究了，python基础还是不行，写起来太累了。。。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>今天也没看新的paper，就讲讲我的毕设的paper吧，估计等我文本挖掘这门课上完，也不会再看太多序列标注相关的了，重点要转移到parsing了。毕竟序列标注效果也已经很好了，迁移学习方面也暂时不想弄，以后研究重点还是可能在parsing吧。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇paper名字叫做基于成分向量文法的句法分析，那么这是个什么东西呢？大家都知道（也许不知道？我就默认知道了( ╯□╰ )）概率上下文无关文法（PCFG）吧，这是基于传统方法的短语结构句法分析，也叫成分句法分析，还有一种叫做依存句法分析，现在大多数是做这个的。但是传统的成分句法分析无法解决歧义的问题，因为PCFG是基于上下文无关的独立性假设的，但是自然语言是一种上下文有关文法，必然会产生歧义。</p>\n<p>那么如何消除这种歧义呢，Socher提出了SU-RNN的模型，引入了短语的语义表示，具体是什么样子的呢？</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>这个模型概括起来是这样的：首先用PCFG产生k-best句法树，比如产生概率最大的20棵句法树。然后对这k-best棵句法树每棵树都跑一遍SU-RNN，计算出每棵树的得分，然后综合PCFG得分和SU-RNN得分，对他们进行重排序，然后得到排名最高的句法树。</p>\n<p>那么怎么通过SU-RNN计算一棵树的得分呢？</p>\n<p>首先上一张图，看看SU-RNN是个什么结构：<br><img src=\"1.png\" alt><br>可以看出，每个节点不仅含有它的类别表示，还有一个向量表示它的语义信息。而SU-RNN与之前提出过的RNN不一样的是，这里的每个节点的$W$权值矩阵全部是不同的，依赖于它的子节点的类别。<br>每个节点的语义表示向量计算方法如下：<br>\\[{p^{(1)}} = f\\left( { {W^{(B,C)}}\\left[ {\\begin{array}{*{20}{c}}b\\\\c\\end{array}} \\right]} \\right)\\]而这个节点的得分表示为<br>\\[s({p^{(1)}}) = {({v^{(B,C)}})^T}{p^{(1)}} + \\log P({P_1} \\to B{\\rm{ }}C)\\]最后一整棵树的得分就是<br>\\[s(CVG(\\theta ,x,\\hat y)) = \\sum\\limits_{d \\in N(\\hat y)} {s({p^d})} \\]这样就可以枚举所有的句法树，然后计算得到得分最高的那棵树就是最终的句法树了。</p>\n<p>但是这样枚举的话复杂度太高了，要知道一个长度为$n$的句子，可能的句法树有$Catalan(n)$种。而且是无法用动态规划算法来计算最优句法树的，因为SU-RNN破坏了上下文无关的独立性假设（因为反向传播？其实我也不是太懂。。。）。所以就要用到之前所说的先用PCFG得到k-best棵句法树，然后用SU-RNN重排序了。</p>\n<p>那么用SU-RNN计算完得到最优树之后，怎么计算它与gold-tree之间的差异，从而得到loss呢？</p>\n<p>本文计算两棵树差异的公式如下：<br>\\[\\Delta ({y_i},\\hat y) = \\sum\\limits_{d \\in N(\\hat y)} {\\kappa 1\\{ d \\notin N({y_i})\\} } \\]最终的损失函数定义为：<br>\\[J(\\theta ) = \\frac{1}{m}\\sum\\limits_{i = 1}^m { {r_i}(\\theta )}  + \\frac{\\lambda }{2}{\\left| \\theta  \\right|^2}\\]其中<br>\\[{r_i}(\\theta ) = \\mathop {\\max }\\limits_{\\hat y \\in Y({x_i})} (s(CVG({x_i},\\hat y)) + \\Delta ({y_i},\\hat y)) - s(CVG({x_i},{y_i}))\\]也就是要尽量最大化标准树的得分，减小预测树的得分。</p>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p><img src=\"2.png\" alt><br>可以看出，SU-RNN结果比以往的结果都要好，但是没有最后两行的好。。。最后两个具体是啥我也没去细看。</p>\n<h1 id=\"我的毕设任务\"><a href=\"#我的毕设任务\" class=\"headerlink\" title=\"我的毕设任务\"></a>我的毕设任务</h1><hr>\n<p>其实我的任务不用PCFG，看起来减少了工作量？嘿嘿，其实貌似麻烦的一笔啊。。。我的模型主要的思想就是直接用SU-RNN训练出句法分析树！那枚举复杂度太高了怎么办？用动态规划啊！不是不能用吗？没事，假装它能用，要是效果好强行解释一波就行了。。。而且原模型的RNN是递归神经网络哦，这次我改成了循环神经网络，用LSTM来计算得分。看起来貌似挺麻烦的，纠结了好几天。LSTM每个节点总得有一个$x$输入，一个$h$隐层输入吧，所以可能还要给每两个节点指定一个作为head。。。</p>\n<p>感觉心态炸了哦，一堆非主流写法？也不知道最后能不能写出来，也不知道写出来结果怎么样。。。说不定要延毕了？哈哈，自嘲一波吧，暑假好好研究研究了，python基础还是不行，写起来太累了。。。</p>\n"},{"title":"Top-down Tree Long Short-Term Memory Networks","date":"2018-01-15T13:25:40.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n昨天又鸽了一天，由于水平有限，最主要还是懒，一篇paper看了两天才看了个大概。最近很颓废啊，白天啥都不想干一天就这么过去了，明天开始还是写写毕设代码吧，再好好研究研究。\n\n# 介绍\n---\n这次介绍的仍然是树状LSTM，但是这次是在依存句法树上做的LSTM。主要功能就是给定一个句子的依存句法树，预测这个句子的生成概率。实验主要是在Microsoft Sentence Completion Challenge上面进行的，取得了不错的效果。不仅如此，这个模型还可以对依存句法分析产生的依存句法树进行重排序，从而提升依存句法分析的效果。（PS. 又让我联想到了我的毕业论文，用SU-RNN对PCFG产生的成分句法树进行重排序。。。。。。都是泪，代码还没开始动。）\n\n# 模型\n---\n首先介绍几个概念。\n### 依存路径\n![](1.png)\n如上图所示，虚线箭头就是依存树中的箭头，其中$w_0$就是$w_1$到$w_n$的head结点。那么$w_1$就是$w_0$左边的第一个结点，边$(w_0,w_1)$类型叫做$LEFT$边，而继续向左，例如边$(w_{k-1},w_k)$类型叫做$NX-LEFT$边。同理，向右的边也有两种类型$RIGHT$和$NX-RIGHT$。\n\n那么依存路径$\\mathcal D(w)$定义为从$ROOT$结点到$w$结点的路径，注意不是原来依存树的路径哦。具体计算方式如下：\n![](2.png)\n以上图为例，原来$w_0$到$w_n$的路径为${w_0} \\to {w_n}$，而现在变成了${w_0} \\to {w_1} \\to {w_2} \\to  \\ldots  \\to {w_n}$。\n\n那么给定依存树$T$，句子$S$的概率可以表示为\n![](3.png)\n由于每个句子都有$ROOT$，所以就不需要计算它的概率了。$w$按照树$T$的宽度优先搜索顺序访问。\n\n### 树状LSTMs\n那么问题就是如何计算$P(w|\\mathcal D(w))$了。我们定义4种LSTM：GEN-L,GEN-R,GEN-NX-L,GEN-NX-R，分别用来表示上文中提到的四种类型的边：LEFT,RIGHT,NX-LEFT,NX-RIGHT。\n\n每个结点的表示如下计算：\n\n![](4.png)\n概率表示为：\n![](5.png)\n\n注意这里为了简化计算，省略了全部的偏移向量。\n\n这里用了深层LSTM的内部结点函数，具体直接看公式吧，有点晕。。。\n![](6.png)\n![](7.png)\n直接附上原文解释：\n![](8.png)\n![](9.png)\n\n### 左依赖树状LSTMs\n上面的方法忽略了同一个结点向左向右依赖之间的联系，举个例子，The car factory sold cars，如果只根据向右的依赖，由sold是无法推出cars的，而加上左依赖The car factory之后就能推出了，所以就提出了这种改进。结构如下：\n![](10.png)\n\n也就是计算向右依赖的第一个结点之前，先计算完向左依赖的所有结点（上图绿色箭头部分），然后将最后一个隐含层输出作为向右依赖的第一个结点的输入。\n首先是左边依赖的表示计算，注意和之前的向左计算方向是反的：\n![](11.png)\n然后是向右依赖的计算：\n![](12.png)\n\n### 训练\n定义两种损失函数，分别对应小规模数据和大规模数据。\n![](14.png)\n![](15.png)\n\n# 实验\n---\n我就只关注了这个模型的附属品————句法分析上的性能。\n![](13.png)\n看起来左依赖树状LSTMs相比树状LSTM基本没有提升，可能在其他任务上不一样吧。\n\n# 总结\n---\n这个模型看了我两天，感觉以前没见过，还挺新奇的（事实是我孤陋寡闻了）。而且我也不知道搞这么复杂究竟能有多大的性能提升，感觉上训练时间会很长？性价比不是很高？","source":"_posts/PaperDaily-4.md","raw":"---\ntitle: Top-down Tree Long Short-Term Memory Networks\ndate: 2018-01-15 21:25:40\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NAACL\n- 自然语言处理\n- 神经网络\n- 深度学习\ncategories:\n- 深度学习\n---\n\n昨天又鸽了一天，由于水平有限，最主要还是懒，一篇paper看了两天才看了个大概。最近很颓废啊，白天啥都不想干一天就这么过去了，明天开始还是写写毕设代码吧，再好好研究研究。\n\n# 介绍\n---\n这次介绍的仍然是树状LSTM，但是这次是在依存句法树上做的LSTM。主要功能就是给定一个句子的依存句法树，预测这个句子的生成概率。实验主要是在Microsoft Sentence Completion Challenge上面进行的，取得了不错的效果。不仅如此，这个模型还可以对依存句法分析产生的依存句法树进行重排序，从而提升依存句法分析的效果。（PS. 又让我联想到了我的毕业论文，用SU-RNN对PCFG产生的成分句法树进行重排序。。。。。。都是泪，代码还没开始动。）\n\n# 模型\n---\n首先介绍几个概念。\n### 依存路径\n![](1.png)\n如上图所示，虚线箭头就是依存树中的箭头，其中$w_0$就是$w_1$到$w_n$的head结点。那么$w_1$就是$w_0$左边的第一个结点，边$(w_0,w_1)$类型叫做$LEFT$边，而继续向左，例如边$(w_{k-1},w_k)$类型叫做$NX-LEFT$边。同理，向右的边也有两种类型$RIGHT$和$NX-RIGHT$。\n\n那么依存路径$\\mathcal D(w)$定义为从$ROOT$结点到$w$结点的路径，注意不是原来依存树的路径哦。具体计算方式如下：\n![](2.png)\n以上图为例，原来$w_0$到$w_n$的路径为${w_0} \\to {w_n}$，而现在变成了${w_0} \\to {w_1} \\to {w_2} \\to  \\ldots  \\to {w_n}$。\n\n那么给定依存树$T$，句子$S$的概率可以表示为\n![](3.png)\n由于每个句子都有$ROOT$，所以就不需要计算它的概率了。$w$按照树$T$的宽度优先搜索顺序访问。\n\n### 树状LSTMs\n那么问题就是如何计算$P(w|\\mathcal D(w))$了。我们定义4种LSTM：GEN-L,GEN-R,GEN-NX-L,GEN-NX-R，分别用来表示上文中提到的四种类型的边：LEFT,RIGHT,NX-LEFT,NX-RIGHT。\n\n每个结点的表示如下计算：\n\n![](4.png)\n概率表示为：\n![](5.png)\n\n注意这里为了简化计算，省略了全部的偏移向量。\n\n这里用了深层LSTM的内部结点函数，具体直接看公式吧，有点晕。。。\n![](6.png)\n![](7.png)\n直接附上原文解释：\n![](8.png)\n![](9.png)\n\n### 左依赖树状LSTMs\n上面的方法忽略了同一个结点向左向右依赖之间的联系，举个例子，The car factory sold cars，如果只根据向右的依赖，由sold是无法推出cars的，而加上左依赖The car factory之后就能推出了，所以就提出了这种改进。结构如下：\n![](10.png)\n\n也就是计算向右依赖的第一个结点之前，先计算完向左依赖的所有结点（上图绿色箭头部分），然后将最后一个隐含层输出作为向右依赖的第一个结点的输入。\n首先是左边依赖的表示计算，注意和之前的向左计算方向是反的：\n![](11.png)\n然后是向右依赖的计算：\n![](12.png)\n\n### 训练\n定义两种损失函数，分别对应小规模数据和大规模数据。\n![](14.png)\n![](15.png)\n\n# 实验\n---\n我就只关注了这个模型的附属品————句法分析上的性能。\n![](13.png)\n看起来左依赖树状LSTMs相比树状LSTM基本没有提升，可能在其他任务上不一样吧。\n\n# 总结\n---\n这个模型看了我两天，感觉以前没见过，还挺新奇的（事实是我孤陋寡闻了）。而且我也不知道搞这么复杂究竟能有多大的性能提升，感觉上训练时间会很长？性价比不是很高？","slug":"PaperDaily-4","published":1,"updated":"2019-07-20T04:20:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982d200577swemegrzdef","content":"<p>昨天又鸽了一天，由于水平有限，最主要还是懒，一篇paper看了两天才看了个大概。最近很颓废啊，白天啥都不想干一天就这么过去了，明天开始还是写写毕设代码吧，再好好研究研究。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这次介绍的仍然是树状LSTM，但是这次是在依存句法树上做的LSTM。主要功能就是给定一个句子的依存句法树，预测这个句子的生成概率。实验主要是在Microsoft Sentence Completion Challenge上面进行的，取得了不错的效果。不仅如此，这个模型还可以对依存句法分析产生的依存句法树进行重排序，从而提升依存句法分析的效果。（PS. 又让我联想到了我的毕业论文，用SU-RNN对PCFG产生的成分句法树进行重排序。。。。。。都是泪，代码还没开始动。）</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>首先介绍几个概念。</p>\n<h3 id=\"依存路径\"><a href=\"#依存路径\" class=\"headerlink\" title=\"依存路径\"></a>依存路径</h3><p><img src=\"1.png\" alt><br>如上图所示，虚线箭头就是依存树中的箭头，其中$w_0$就是$w_1$到$w_n$的head结点。那么$w_1$就是$w_0$左边的第一个结点，边$(w_0,w_1)$类型叫做$LEFT$边，而继续向左，例如边$(w_{k-1},w_k)$类型叫做$NX-LEFT$边。同理，向右的边也有两种类型$RIGHT$和$NX-RIGHT$。</p>\n<p>那么依存路径$\\mathcal D(w)$定义为从$ROOT$结点到$w$结点的路径，注意不是原来依存树的路径哦。具体计算方式如下：<br><img src=\"2.png\" alt><br>以上图为例，原来$w_0$到$w_n$的路径为${w_0} \\to {w_n}$，而现在变成了${w_0} \\to {w_1} \\to {w_2} \\to  \\ldots  \\to {w_n}$。</p>\n<p>那么给定依存树$T$，句子$S$的概率可以表示为<br><img src=\"3.png\" alt><br>由于每个句子都有$ROOT$，所以就不需要计算它的概率了。$w$按照树$T$的宽度优先搜索顺序访问。</p>\n<h3 id=\"树状LSTMs\"><a href=\"#树状LSTMs\" class=\"headerlink\" title=\"树状LSTMs\"></a>树状LSTMs</h3><p>那么问题就是如何计算$P(w|\\mathcal D(w))$了。我们定义4种LSTM：GEN-L,GEN-R,GEN-NX-L,GEN-NX-R，分别用来表示上文中提到的四种类型的边：LEFT,RIGHT,NX-LEFT,NX-RIGHT。</p>\n<p>每个结点的表示如下计算：</p>\n<p><img src=\"4.png\" alt><br>概率表示为：<br><img src=\"5.png\" alt></p>\n<p>注意这里为了简化计算，省略了全部的偏移向量。</p>\n<p>这里用了深层LSTM的内部结点函数，具体直接看公式吧，有点晕。。。<br><img src=\"6.png\" alt><br><img src=\"7.png\" alt><br>直接附上原文解释：<br><img src=\"8.png\" alt><br><img src=\"9.png\" alt></p>\n<h3 id=\"左依赖树状LSTMs\"><a href=\"#左依赖树状LSTMs\" class=\"headerlink\" title=\"左依赖树状LSTMs\"></a>左依赖树状LSTMs</h3><p>上面的方法忽略了同一个结点向左向右依赖之间的联系，举个例子，The car factory sold cars，如果只根据向右的依赖，由sold是无法推出cars的，而加上左依赖The car factory之后就能推出了，所以就提出了这种改进。结构如下：<br><img src=\"10.png\" alt></p>\n<p>也就是计算向右依赖的第一个结点之前，先计算完向左依赖的所有结点（上图绿色箭头部分），然后将最后一个隐含层输出作为向右依赖的第一个结点的输入。<br>首先是左边依赖的表示计算，注意和之前的向左计算方向是反的：<br><img src=\"11.png\" alt><br>然后是向右依赖的计算：<br><img src=\"12.png\" alt></p>\n<h3 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h3><p>定义两种损失函数，分别对应小规模数据和大规模数据。<br><img src=\"14.png\" alt><br><img src=\"15.png\" alt></p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>我就只关注了这个模型的附属品————句法分析上的性能。<br><img src=\"13.png\" alt><br>看起来左依赖树状LSTMs相比树状LSTM基本没有提升，可能在其他任务上不一样吧。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这个模型看了我两天，感觉以前没见过，还挺新奇的（事实是我孤陋寡闻了）。而且我也不知道搞这么复杂究竟能有多大的性能提升，感觉上训练时间会很长？性价比不是很高？</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>昨天又鸽了一天，由于水平有限，最主要还是懒，一篇paper看了两天才看了个大概。最近很颓废啊，白天啥都不想干一天就这么过去了，明天开始还是写写毕设代码吧，再好好研究研究。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这次介绍的仍然是树状LSTM，但是这次是在依存句法树上做的LSTM。主要功能就是给定一个句子的依存句法树，预测这个句子的生成概率。实验主要是在Microsoft Sentence Completion Challenge上面进行的，取得了不错的效果。不仅如此，这个模型还可以对依存句法分析产生的依存句法树进行重排序，从而提升依存句法分析的效果。（PS. 又让我联想到了我的毕业论文，用SU-RNN对PCFG产生的成分句法树进行重排序。。。。。。都是泪，代码还没开始动。）</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>首先介绍几个概念。</p>\n<h3 id=\"依存路径\"><a href=\"#依存路径\" class=\"headerlink\" title=\"依存路径\"></a>依存路径</h3><p><img src=\"1.png\" alt><br>如上图所示，虚线箭头就是依存树中的箭头，其中$w_0$就是$w_1$到$w_n$的head结点。那么$w_1$就是$w_0$左边的第一个结点，边$(w_0,w_1)$类型叫做$LEFT$边，而继续向左，例如边$(w_{k-1},w_k)$类型叫做$NX-LEFT$边。同理，向右的边也有两种类型$RIGHT$和$NX-RIGHT$。</p>\n<p>那么依存路径$\\mathcal D(w)$定义为从$ROOT$结点到$w$结点的路径，注意不是原来依存树的路径哦。具体计算方式如下：<br><img src=\"2.png\" alt><br>以上图为例，原来$w_0$到$w_n$的路径为${w_0} \\to {w_n}$，而现在变成了${w_0} \\to {w_1} \\to {w_2} \\to  \\ldots  \\to {w_n}$。</p>\n<p>那么给定依存树$T$，句子$S$的概率可以表示为<br><img src=\"3.png\" alt><br>由于每个句子都有$ROOT$，所以就不需要计算它的概率了。$w$按照树$T$的宽度优先搜索顺序访问。</p>\n<h3 id=\"树状LSTMs\"><a href=\"#树状LSTMs\" class=\"headerlink\" title=\"树状LSTMs\"></a>树状LSTMs</h3><p>那么问题就是如何计算$P(w|\\mathcal D(w))$了。我们定义4种LSTM：GEN-L,GEN-R,GEN-NX-L,GEN-NX-R，分别用来表示上文中提到的四种类型的边：LEFT,RIGHT,NX-LEFT,NX-RIGHT。</p>\n<p>每个结点的表示如下计算：</p>\n<p><img src=\"4.png\" alt><br>概率表示为：<br><img src=\"5.png\" alt></p>\n<p>注意这里为了简化计算，省略了全部的偏移向量。</p>\n<p>这里用了深层LSTM的内部结点函数，具体直接看公式吧，有点晕。。。<br><img src=\"6.png\" alt><br><img src=\"7.png\" alt><br>直接附上原文解释：<br><img src=\"8.png\" alt><br><img src=\"9.png\" alt></p>\n<h3 id=\"左依赖树状LSTMs\"><a href=\"#左依赖树状LSTMs\" class=\"headerlink\" title=\"左依赖树状LSTMs\"></a>左依赖树状LSTMs</h3><p>上面的方法忽略了同一个结点向左向右依赖之间的联系，举个例子，The car factory sold cars，如果只根据向右的依赖，由sold是无法推出cars的，而加上左依赖The car factory之后就能推出了，所以就提出了这种改进。结构如下：<br><img src=\"10.png\" alt></p>\n<p>也就是计算向右依赖的第一个结点之前，先计算完向左依赖的所有结点（上图绿色箭头部分），然后将最后一个隐含层输出作为向右依赖的第一个结点的输入。<br>首先是左边依赖的表示计算，注意和之前的向左计算方向是反的：<br><img src=\"11.png\" alt><br>然后是向右依赖的计算：<br><img src=\"12.png\" alt></p>\n<h3 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h3><p>定义两种损失函数，分别对应小规模数据和大规模数据。<br><img src=\"14.png\" alt><br><img src=\"15.png\" alt></p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>我就只关注了这个模型的附属品————句法分析上的性能。<br><img src=\"13.png\" alt><br>看起来左依赖树状LSTMs相比树状LSTM基本没有提升，可能在其他任务上不一样吧。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这个模型看了我两天，感觉以前没见过，还挺新奇的（事实是我孤陋寡闻了）。而且我也不知道搞这么复杂究竟能有多大的性能提升，感觉上训练时间会很长？性价比不是很高？</p>\n"},{"title":"In-Order Transition-based Constituent Parsing","date":"2018-08-27T16:00:08.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=366752&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[In-Order Transition-based Constituent Parsing](https://www.aclweb.org/anthology/Q/Q17/Q17-1029.pdf)\n**代码地址：**[github](https://github.com/LeonCrashCode/InOrderParser)\n\n今天要介绍的这篇论文是成分句法分析领域目前的第三名，结果最高的几篇paper可以参见ruder在github整理的列表：[github](https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md)。\n下面就是成分句法分析目前排名：\n\n| Model | F1 score | Paper / Source |\n| ------------- | :-----:| --- |\n| Self-attentive encoder + ELMo (Kitaev and Klein, 2018) | 95.13 | [Constituency Parsing with a Self-Attentive Encoder](https://arxiv.org/abs/1805.01052) |\n| Model combination (Fried et al., 2017) | 94.66 | [Improving Neural Parsing by Disentangling Model Combination and Reranking Effects](https://arxiv.org/abs/1707.03058) |\n| In-order (Liu and Zhang, 2017) | 94.2 | [In-Order Transition-based Constituent Parsing](http://aclweb.org/anthology/Q17-1029) |\n| Semi-supervised LSTM-LM (Choe and Charniak, 2016) | 93.8 | [Parsing as Language Modeling](http://www.aclweb.org/anthology/D16-1257) | \n| Stack-only RNNG (Kuncoro et al., 2017) | 93.6 | [What Do Recurrent Neural Network Grammars Learn About Syntax?](https://arxiv.org/abs/1611.05774) |\n| RNN Grammar (Dyer et al., 2016) | ﻿93.3 | [Recurrent Neural Network Grammars](https://www.aclweb.org/anthology/N16-1024) |\n| Transformer (Vaswani et al., 2017) | 92.7 | [Attention Is All You Need](https://arxiv.org/abs/1706.03762) |\n| Semi-supervised LSTM (Vinyals et al., 2015) | 92.1  | [Grammar as a Foreign Language](https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf) |\n| Self-trained parser (McClosky et al., 2006) | 92.1 | [Effective Self-Training for Parsing](https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf) |\n\n# 摘要\n---\n基于转移的成分句法分析主要分为两种：\n* 一种是自顶向下（top-down）的方法，按照前序遍历（pre-order）的顺序生成句法树。这种方法可以更好地利用全局信息，但是需要一个强大的编码器来对每个短语成分进行编码。\n* 一种是自底向上（bottom-up）的方法，按照后序遍历（post-order）的顺序生成句法树。这种方法可以充分利用子树的特征来进行分析，但是却无法利用全局信息。\n\n本文的模型就对这两种方法进行了改进，采用中序遍历（in-order）的顺序来生成句法树。单模型最终取得了91.8的F1值（貌似也不是特别高？），采用监督重排序之后F1值提升到了93.6，采用半监督重排序之后F1值提升到了94.2。所以看起来还是重排序起了很大的作用。\n\n# 基于转移的成分句法分析\n---\n首先简要介绍一下这三种基于转移的句法分析方法。\n\n## 自底向上的转移系统\n自底向上的转移系统是基于后序遍历的，例如对于下图这棵句法树，算法产生结点的顺序为3、4、5、2、7、9、10、8、6、11、1。\n![](1.jpg)\na图是未经二叉化的句法树，b图是二叉化之后的句法树，二叉化之后的结点要用l和r来区分头结点。其实不二叉化也是可以的，伯克利一帮人的做法就是用$\\emptyset $来作为临时结点，构造树的时候去掉就行了。\n\n句法分析系统如下：\n![](2.jpg)\n每个时刻的状态用三元组$[\\sigma ,i,f]$来表示，分别表示栈中元素、buffer的第一个元素在句子中的下标、句法分析结束标记。系统一共有四个操作：\n* SHIFT： 从buffer中移进一个单词到栈里。\n* REDUCE-L/R-X：将栈顶两个结点归约为一个父结点X。\n* UNARY-X：将栈顶元素归约为一元结点X。\n* FINISH：句法分析结束。\n\n上面那个句法树按照该模型分析的话过程如下：\n![](3.jpg)\n优缺点很显然，可以充分利用已生成的子树来对父结点的预测进行分析，但是不能利用全局信息（也就是其他子树、父结点等信息），并且需要提前进行二叉化（这点可以用临时结点标记来规避）。\n\n## 自顶向下的转移系统\n自顶向下的转移系统是基于前序遍历的，例如对于之前那棵句法树，算法产生结点的顺序为1、2、3、4、5、6、7、8、9、10、11。\n\n句法分析系统如下：\n![](4.jpg)\n系统一共有三个操作：\n* SHIFT： 从buffer中移进一个单词到栈里。\n* NT-X：对一个父结点生成出它的一个子结点X。\n* REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点这时已经在栈顶了。\n\n上面那个句法树按照该模型分析的话过程如下：\n![](5.jpg)\n优缺点也很显然，可以充分利用全局信息，但是因为预测子树的时候，子树还没有生成，所以无法利用子树的特征来进行分析，所以需要提前对句子的每个短语进行编码。\n\n## 采用中序遍历的转移系统\n为了协调上面的两种问题，本文提出了一种基于中序遍历的转移系统。\n\n其实采用中序遍历也符合人们的直觉判断，比如你读到一个单词“like”，脑子里首先就会想到，这个可能和下面短语共同组成了动词短语VP，然后接着往下看，果然印证了你的猜想。\n\n中序遍历就是采用这种思想的，例如对于之前那棵句法树，算法产生结点的顺序为3、2、4、5、1、7、6、9、8、10。\n\n句法分析系统如下：\n![](6.jpg)\n系统一共有四个操作：\n* SHIFT： 从buffer中移进一个单词到栈里。\n* PJ-X：向栈里移进父结点X，来作为栈顶结点的父结点。\n* REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点在出栈元素的倒数第二个。然后再将父结点入栈。\n* FINISH：句法分析结束。\n\n上面那个句法树按照该模型分析的话过程如下：\n![](7.jpg)\n\n该转移系统还有很多变体。对于短语(S, a, b, c, d)，可以令它在栈中S结点之前的子结点个数为$k$，例如对于上面的中序转移系统，栈里存放顺序是“a S b c d”，那么$k = 1$，如果栈里存放顺序是“a b S c d”，那么$k = 2$。而对于自底向上的转移系统，$k$就是正无穷，对于自顶向下的转移系统，$k$就是0。\n\n# 句法分析模型\n---\n对于每一个状态，模型采用三个LSTM来预测当前步动作，结构如下图所示：\n![](8.jpg)\n一个LSTM用来对栈顶元素进行编码，一个LSTM用来对buffer中所有元素进行编码，一个LSTM用来对之前预测完毕的所有动作进行编码。\n\n## 单词表示\n对于每个单词，用预训练词向量、随机初始化词向量、POS向量拼接起来，然后经过一个前馈神经网络来作为最终的单词表示：\n\\\\[{x_i} = f({W_{input}}[{e_{ {p_i}}};{\\bar e_{ {w_i}}};{e_{ {w_i}}}] + {b_{input}})\\\\]\n其中${e_{ {p_i}}}$表示POS为$p_i$的向量，${\\bar e_{ {w_i}}}$表示单词$w_i$的预训练词向量，${e_{ {w_i}}}$表示单词$w_i$的随机初始化词向量。$f$函数通常取ReLU。\n\n## 栈里的短语表示\n对于自顶向下和in-order的转移系统，由于不需要二叉化，所以采用如下图所示的LSTM来对栈里的短语进行编码：\n![](9.jpg)\n具体的短语表示为：\n\\\\[{s_{comp}} = (LST{M_f}[{e_{nt}},{s_0}, \\ldots ,{s_m}];LST{M_b}[{e_{nt}},{s_m}, \\ldots ,{s_0}])\\\\]\n其中${e_{nt}}$是父结点的向量表示，其他都是子结点的短语表示。\n\n而作为对比实验，自底向上的转移系统因为是二叉树，所以LSTM略有不同，结构图如下所示：\n![](12.jpg)\n唯一的区别就是不管你短语的单词顺序如何，都要把中心词也就是头结点放在前面。\n\n## 贪心动作预测\n上面的两个小节将buffer和栈里的元素都进行了编码，最后就要对当前状态进行动作预测了。\n\n假设第$k$个状态为$[{s_j}, \\ldots ,{s_0},i,false]$，那么当前状态每个动作的概率为：\n\\\\[p = SOFTMAX(W[{h_{stk}};{h_{buf}};{h_{ah}}] + b)\\\\]\n其中${h_{stk}}$是栈里的LSTM编码结果：\n\\\\[{h_{stk}} = LSTM[{s_0}, \\ldots ,{s_j}]\\\\]\n${h_{buf}}$是buffer里的LSTM编码结果：\n\\\\[{h_{buf}} = LSTM[{x_i}, \\ldots ,{x_n}]\\\\]\n${h_{ah}}$是之前动作序列的LSTM编码结果：\n\\\\[{h_{ah}} = LSTM[{e_{ac{t_k}}}, \\ldots ,{e_{ac{t_0}}}]\\\\]\n\n最终的损失函数采用交叉熵：\n\\\\[L(\\theta ) =  - \\sum\\limits_i {\\sum\\limits_j {\\log {p_{ {a_{ij}}}}} }  + \\frac{\\lambda }{2}{\\Vert \\theta  \\Vert ^2}\\\\]\n\n# 实验\n---\n实验的超参数设置如下：\n![](10.jpg)\n经过对比实验可以发现，结果比自底向上和自顶向下的转移系统都要略高一点，就算加上了重排序，还是略高一点。单模型的话，和2017年之前的结果相比的确是最高的，但是91.8的F1值现在看来不是特别高了，毕竟伯克利基于CKY算法的chart-parser都已经到了92多甚至93了。\n\n详细结果如下表：\n![](11.jpg)\n模型在依存句法分析和CTB上的表现也都很不错。\n\n# 总结\n---\n本文提出了一种基于中序遍历转移系统的成分句法分析模型，主要的动机还是基于人类阅读时的直觉，该模型协调了自底向上和自顶向下转移系统的优缺点，在采用重排序之后，结果达到了非常高的水准。\n\n当然我个人认为模型也存在一些改进的地方：\n* 单词的表示可以加上Char-LSTM。\n* 预测阶段可以采用之前文章提到的Dynamic Oracle技术，来减少预测错误的发生。详见之前的文章：[地址](https://godweiyang.com/2018/08/03/dynamic-oracles/)。不过这里的Dynamic Oracle要重新设计了，设计好了说不定又可以发一篇论文了？（手动滑稽）","source":"_posts/TACL17-ConParsing.md","raw":"---\ntitle: In-Order Transition-based Constituent Parsing\ndate: 2018-08-28 00:00:08\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- TACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=366752&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[In-Order Transition-based Constituent Parsing](https://www.aclweb.org/anthology/Q/Q17/Q17-1029.pdf)\n**代码地址：**[github](https://github.com/LeonCrashCode/InOrderParser)\n\n今天要介绍的这篇论文是成分句法分析领域目前的第三名，结果最高的几篇paper可以参见ruder在github整理的列表：[github](https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md)。\n下面就是成分句法分析目前排名：\n\n| Model | F1 score | Paper / Source |\n| ------------- | :-----:| --- |\n| Self-attentive encoder + ELMo (Kitaev and Klein, 2018) | 95.13 | [Constituency Parsing with a Self-Attentive Encoder](https://arxiv.org/abs/1805.01052) |\n| Model combination (Fried et al., 2017) | 94.66 | [Improving Neural Parsing by Disentangling Model Combination and Reranking Effects](https://arxiv.org/abs/1707.03058) |\n| In-order (Liu and Zhang, 2017) | 94.2 | [In-Order Transition-based Constituent Parsing](http://aclweb.org/anthology/Q17-1029) |\n| Semi-supervised LSTM-LM (Choe and Charniak, 2016) | 93.8 | [Parsing as Language Modeling](http://www.aclweb.org/anthology/D16-1257) | \n| Stack-only RNNG (Kuncoro et al., 2017) | 93.6 | [What Do Recurrent Neural Network Grammars Learn About Syntax?](https://arxiv.org/abs/1611.05774) |\n| RNN Grammar (Dyer et al., 2016) | ﻿93.3 | [Recurrent Neural Network Grammars](https://www.aclweb.org/anthology/N16-1024) |\n| Transformer (Vaswani et al., 2017) | 92.7 | [Attention Is All You Need](https://arxiv.org/abs/1706.03762) |\n| Semi-supervised LSTM (Vinyals et al., 2015) | 92.1  | [Grammar as a Foreign Language](https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf) |\n| Self-trained parser (McClosky et al., 2006) | 92.1 | [Effective Self-Training for Parsing](https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf) |\n\n# 摘要\n---\n基于转移的成分句法分析主要分为两种：\n* 一种是自顶向下（top-down）的方法，按照前序遍历（pre-order）的顺序生成句法树。这种方法可以更好地利用全局信息，但是需要一个强大的编码器来对每个短语成分进行编码。\n* 一种是自底向上（bottom-up）的方法，按照后序遍历（post-order）的顺序生成句法树。这种方法可以充分利用子树的特征来进行分析，但是却无法利用全局信息。\n\n本文的模型就对这两种方法进行了改进，采用中序遍历（in-order）的顺序来生成句法树。单模型最终取得了91.8的F1值（貌似也不是特别高？），采用监督重排序之后F1值提升到了93.6，采用半监督重排序之后F1值提升到了94.2。所以看起来还是重排序起了很大的作用。\n\n# 基于转移的成分句法分析\n---\n首先简要介绍一下这三种基于转移的句法分析方法。\n\n## 自底向上的转移系统\n自底向上的转移系统是基于后序遍历的，例如对于下图这棵句法树，算法产生结点的顺序为3、4、5、2、7、9、10、8、6、11、1。\n![](1.jpg)\na图是未经二叉化的句法树，b图是二叉化之后的句法树，二叉化之后的结点要用l和r来区分头结点。其实不二叉化也是可以的，伯克利一帮人的做法就是用$\\emptyset $来作为临时结点，构造树的时候去掉就行了。\n\n句法分析系统如下：\n![](2.jpg)\n每个时刻的状态用三元组$[\\sigma ,i,f]$来表示，分别表示栈中元素、buffer的第一个元素在句子中的下标、句法分析结束标记。系统一共有四个操作：\n* SHIFT： 从buffer中移进一个单词到栈里。\n* REDUCE-L/R-X：将栈顶两个结点归约为一个父结点X。\n* UNARY-X：将栈顶元素归约为一元结点X。\n* FINISH：句法分析结束。\n\n上面那个句法树按照该模型分析的话过程如下：\n![](3.jpg)\n优缺点很显然，可以充分利用已生成的子树来对父结点的预测进行分析，但是不能利用全局信息（也就是其他子树、父结点等信息），并且需要提前进行二叉化（这点可以用临时结点标记来规避）。\n\n## 自顶向下的转移系统\n自顶向下的转移系统是基于前序遍历的，例如对于之前那棵句法树，算法产生结点的顺序为1、2、3、4、5、6、7、8、9、10、11。\n\n句法分析系统如下：\n![](4.jpg)\n系统一共有三个操作：\n* SHIFT： 从buffer中移进一个单词到栈里。\n* NT-X：对一个父结点生成出它的一个子结点X。\n* REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点这时已经在栈顶了。\n\n上面那个句法树按照该模型分析的话过程如下：\n![](5.jpg)\n优缺点也很显然，可以充分利用全局信息，但是因为预测子树的时候，子树还没有生成，所以无法利用子树的特征来进行分析，所以需要提前对句子的每个短语进行编码。\n\n## 采用中序遍历的转移系统\n为了协调上面的两种问题，本文提出了一种基于中序遍历的转移系统。\n\n其实采用中序遍历也符合人们的直觉判断，比如你读到一个单词“like”，脑子里首先就会想到，这个可能和下面短语共同组成了动词短语VP，然后接着往下看，果然印证了你的猜想。\n\n中序遍历就是采用这种思想的，例如对于之前那棵句法树，算法产生结点的顺序为3、2、4、5、1、7、6、9、8、10。\n\n句法分析系统如下：\n![](6.jpg)\n系统一共有四个操作：\n* SHIFT： 从buffer中移进一个单词到栈里。\n* PJ-X：向栈里移进父结点X，来作为栈顶结点的父结点。\n* REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点在出栈元素的倒数第二个。然后再将父结点入栈。\n* FINISH：句法分析结束。\n\n上面那个句法树按照该模型分析的话过程如下：\n![](7.jpg)\n\n该转移系统还有很多变体。对于短语(S, a, b, c, d)，可以令它在栈中S结点之前的子结点个数为$k$，例如对于上面的中序转移系统，栈里存放顺序是“a S b c d”，那么$k = 1$，如果栈里存放顺序是“a b S c d”，那么$k = 2$。而对于自底向上的转移系统，$k$就是正无穷，对于自顶向下的转移系统，$k$就是0。\n\n# 句法分析模型\n---\n对于每一个状态，模型采用三个LSTM来预测当前步动作，结构如下图所示：\n![](8.jpg)\n一个LSTM用来对栈顶元素进行编码，一个LSTM用来对buffer中所有元素进行编码，一个LSTM用来对之前预测完毕的所有动作进行编码。\n\n## 单词表示\n对于每个单词，用预训练词向量、随机初始化词向量、POS向量拼接起来，然后经过一个前馈神经网络来作为最终的单词表示：\n\\\\[{x_i} = f({W_{input}}[{e_{ {p_i}}};{\\bar e_{ {w_i}}};{e_{ {w_i}}}] + {b_{input}})\\\\]\n其中${e_{ {p_i}}}$表示POS为$p_i$的向量，${\\bar e_{ {w_i}}}$表示单词$w_i$的预训练词向量，${e_{ {w_i}}}$表示单词$w_i$的随机初始化词向量。$f$函数通常取ReLU。\n\n## 栈里的短语表示\n对于自顶向下和in-order的转移系统，由于不需要二叉化，所以采用如下图所示的LSTM来对栈里的短语进行编码：\n![](9.jpg)\n具体的短语表示为：\n\\\\[{s_{comp}} = (LST{M_f}[{e_{nt}},{s_0}, \\ldots ,{s_m}];LST{M_b}[{e_{nt}},{s_m}, \\ldots ,{s_0}])\\\\]\n其中${e_{nt}}$是父结点的向量表示，其他都是子结点的短语表示。\n\n而作为对比实验，自底向上的转移系统因为是二叉树，所以LSTM略有不同，结构图如下所示：\n![](12.jpg)\n唯一的区别就是不管你短语的单词顺序如何，都要把中心词也就是头结点放在前面。\n\n## 贪心动作预测\n上面的两个小节将buffer和栈里的元素都进行了编码，最后就要对当前状态进行动作预测了。\n\n假设第$k$个状态为$[{s_j}, \\ldots ,{s_0},i,false]$，那么当前状态每个动作的概率为：\n\\\\[p = SOFTMAX(W[{h_{stk}};{h_{buf}};{h_{ah}}] + b)\\\\]\n其中${h_{stk}}$是栈里的LSTM编码结果：\n\\\\[{h_{stk}} = LSTM[{s_0}, \\ldots ,{s_j}]\\\\]\n${h_{buf}}$是buffer里的LSTM编码结果：\n\\\\[{h_{buf}} = LSTM[{x_i}, \\ldots ,{x_n}]\\\\]\n${h_{ah}}$是之前动作序列的LSTM编码结果：\n\\\\[{h_{ah}} = LSTM[{e_{ac{t_k}}}, \\ldots ,{e_{ac{t_0}}}]\\\\]\n\n最终的损失函数采用交叉熵：\n\\\\[L(\\theta ) =  - \\sum\\limits_i {\\sum\\limits_j {\\log {p_{ {a_{ij}}}}} }  + \\frac{\\lambda }{2}{\\Vert \\theta  \\Vert ^2}\\\\]\n\n# 实验\n---\n实验的超参数设置如下：\n![](10.jpg)\n经过对比实验可以发现，结果比自底向上和自顶向下的转移系统都要略高一点，就算加上了重排序，还是略高一点。单模型的话，和2017年之前的结果相比的确是最高的，但是91.8的F1值现在看来不是特别高了，毕竟伯克利基于CKY算法的chart-parser都已经到了92多甚至93了。\n\n详细结果如下表：\n![](11.jpg)\n模型在依存句法分析和CTB上的表现也都很不错。\n\n# 总结\n---\n本文提出了一种基于中序遍历转移系统的成分句法分析模型，主要的动机还是基于人类阅读时的直觉，该模型协调了自底向上和自顶向下转移系统的优缺点，在采用重排序之后，结果达到了非常高的水准。\n\n当然我个人认为模型也存在一些改进的地方：\n* 单词的表示可以加上Char-LSTM。\n* 预测阶段可以采用之前文章提到的Dynamic Oracle技术，来减少预测错误的发生。详见之前的文章：[地址](https://godweiyang.com/2018/08/03/dynamic-oracles/)。不过这里的Dynamic Oracle要重新设计了，设计好了说不定又可以发一篇论文了？（手动滑稽）","slug":"TACL17-ConParsing","published":1,"updated":"2019-07-20T04:22:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982d9005b7swegblkx9ix","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=366752&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://www.aclweb.org/anthology/Q/Q17/Q17-1029.pdf\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/LeonCrashCode/InOrderParser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的这篇论文是成分句法分析领域目前的第三名，结果最高的几篇paper可以参见ruder在github整理的列表：<a href=\"https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md\" target=\"_blank\" rel=\"noopener\">github</a>。<br>下面就是成分句法分析目前排名：</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th align=\"center\">F1 score</th>\n<th>Paper / Source</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Self-attentive encoder + ELMo (Kitaev and Klein, 2018)</td>\n<td align=\"center\">95.13</td>\n<td><a href=\"https://arxiv.org/abs/1805.01052\" target=\"_blank\" rel=\"noopener\">Constituency Parsing with a Self-Attentive Encoder</a></td>\n</tr>\n<tr>\n<td>Model combination (Fried et al., 2017)</td>\n<td align=\"center\">94.66</td>\n<td><a href=\"https://arxiv.org/abs/1707.03058\" target=\"_blank\" rel=\"noopener\">Improving Neural Parsing by Disentangling Model Combination and Reranking Effects</a></td>\n</tr>\n<tr>\n<td>In-order (Liu and Zhang, 2017)</td>\n<td align=\"center\">94.2</td>\n<td><a href=\"http://aclweb.org/anthology/Q17-1029\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM-LM (Choe and Charniak, 2016)</td>\n<td align=\"center\">93.8</td>\n<td><a href=\"http://www.aclweb.org/anthology/D16-1257\" target=\"_blank\" rel=\"noopener\">Parsing as Language Modeling</a></td>\n</tr>\n<tr>\n<td>Stack-only RNNG (Kuncoro et al., 2017)</td>\n<td align=\"center\">93.6</td>\n<td><a href=\"https://arxiv.org/abs/1611.05774\" target=\"_blank\" rel=\"noopener\">What Do Recurrent Neural Network Grammars Learn About Syntax?</a></td>\n</tr>\n<tr>\n<td>RNN Grammar (Dyer et al., 2016)</td>\n<td align=\"center\">93.3</td>\n<td><a href=\"https://www.aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a></td>\n</tr>\n<tr>\n<td>Transformer (Vaswani et al., 2017)</td>\n<td align=\"center\">92.7</td>\n<td><a href=\"https://arxiv.org/abs/1706.03762\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM (Vinyals et al., 2015)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf\" target=\"_blank\" rel=\"noopener\">Grammar as a Foreign Language</a></td>\n</tr>\n<tr>\n<td>Self-trained parser (McClosky et al., 2006)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf\" target=\"_blank\" rel=\"noopener\">Effective Self-Training for Parsing</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>基于转移的成分句法分析主要分为两种：</p>\n<ul>\n<li>一种是自顶向下（top-down）的方法，按照前序遍历（pre-order）的顺序生成句法树。这种方法可以更好地利用全局信息，但是需要一个强大的编码器来对每个短语成分进行编码。</li>\n<li>一种是自底向上（bottom-up）的方法，按照后序遍历（post-order）的顺序生成句法树。这种方法可以充分利用子树的特征来进行分析，但是却无法利用全局信息。</li>\n</ul>\n<p>本文的模型就对这两种方法进行了改进，采用中序遍历（in-order）的顺序来生成句法树。单模型最终取得了91.8的F1值（貌似也不是特别高？），采用监督重排序之后F1值提升到了93.6，采用半监督重排序之后F1值提升到了94.2。所以看起来还是重排序起了很大的作用。</p>\n<h1 id=\"基于转移的成分句法分析\"><a href=\"#基于转移的成分句法分析\" class=\"headerlink\" title=\"基于转移的成分句法分析\"></a>基于转移的成分句法分析</h1><hr>\n<p>首先简要介绍一下这三种基于转移的句法分析方法。</p>\n<h2 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h2><p>自底向上的转移系统是基于后序遍历的，例如对于下图这棵句法树，算法产生结点的顺序为3、4、5、2、7、9、10、8、6、11、1。<br><img src=\"1.jpg\" alt><br>a图是未经二叉化的句法树，b图是二叉化之后的句法树，二叉化之后的结点要用l和r来区分头结点。其实不二叉化也是可以的，伯克利一帮人的做法就是用$\\emptyset $来作为临时结点，构造树的时候去掉就行了。</p>\n<p>句法分析系统如下：<br><img src=\"2.jpg\" alt><br>每个时刻的状态用三元组$[\\sigma ,i,f]$来表示，分别表示栈中元素、buffer的第一个元素在句子中的下标、句法分析结束标记。系统一共有四个操作：</p>\n<ul>\n<li>SHIFT： 从buffer中移进一个单词到栈里。</li>\n<li>REDUCE-L/R-X：将栈顶两个结点归约为一个父结点X。</li>\n<li>UNARY-X：将栈顶元素归约为一元结点X。</li>\n<li>FINISH：句法分析结束。</li>\n</ul>\n<p>上面那个句法树按照该模型分析的话过程如下：<br><img src=\"3.jpg\" alt><br>优缺点很显然，可以充分利用已生成的子树来对父结点的预测进行分析，但是不能利用全局信息（也就是其他子树、父结点等信息），并且需要提前进行二叉化（这点可以用临时结点标记来规避）。</p>\n<h2 id=\"自顶向下的转移系统\"><a href=\"#自顶向下的转移系统\" class=\"headerlink\" title=\"自顶向下的转移系统\"></a>自顶向下的转移系统</h2><p>自顶向下的转移系统是基于前序遍历的，例如对于之前那棵句法树，算法产生结点的顺序为1、2、3、4、5、6、7、8、9、10、11。</p>\n<p>句法分析系统如下：<br><img src=\"4.jpg\" alt><br>系统一共有三个操作：</p>\n<ul>\n<li>SHIFT： 从buffer中移进一个单词到栈里。</li>\n<li>NT-X：对一个父结点生成出它的一个子结点X。</li>\n<li>REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点这时已经在栈顶了。</li>\n</ul>\n<p>上面那个句法树按照该模型分析的话过程如下：<br><img src=\"5.jpg\" alt><br>优缺点也很显然，可以充分利用全局信息，但是因为预测子树的时候，子树还没有生成，所以无法利用子树的特征来进行分析，所以需要提前对句子的每个短语进行编码。</p>\n<h2 id=\"采用中序遍历的转移系统\"><a href=\"#采用中序遍历的转移系统\" class=\"headerlink\" title=\"采用中序遍历的转移系统\"></a>采用中序遍历的转移系统</h2><p>为了协调上面的两种问题，本文提出了一种基于中序遍历的转移系统。</p>\n<p>其实采用中序遍历也符合人们的直觉判断，比如你读到一个单词“like”，脑子里首先就会想到，这个可能和下面短语共同组成了动词短语VP，然后接着往下看，果然印证了你的猜想。</p>\n<p>中序遍历就是采用这种思想的，例如对于之前那棵句法树，算法产生结点的顺序为3、2、4、5、1、7、6、9、8、10。</p>\n<p>句法分析系统如下：<br><img src=\"6.jpg\" alt><br>系统一共有四个操作：</p>\n<ul>\n<li>SHIFT： 从buffer中移进一个单词到栈里。</li>\n<li>PJ-X：向栈里移进父结点X，来作为栈顶结点的父结点。</li>\n<li>REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点在出栈元素的倒数第二个。然后再将父结点入栈。</li>\n<li>FINISH：句法分析结束。</li>\n</ul>\n<p>上面那个句法树按照该模型分析的话过程如下：<br><img src=\"7.jpg\" alt></p>\n<p>该转移系统还有很多变体。对于短语(S, a, b, c, d)，可以令它在栈中S结点之前的子结点个数为$k$，例如对于上面的中序转移系统，栈里存放顺序是“a S b c d”，那么$k = 1$，如果栈里存放顺序是“a b S c d”，那么$k = 2$。而对于自底向上的转移系统，$k$就是正无穷，对于自顶向下的转移系统，$k$就是0。</p>\n<h1 id=\"句法分析模型\"><a href=\"#句法分析模型\" class=\"headerlink\" title=\"句法分析模型\"></a>句法分析模型</h1><hr>\n<p>对于每一个状态，模型采用三个LSTM来预测当前步动作，结构如下图所示：<br><img src=\"8.jpg\" alt><br>一个LSTM用来对栈顶元素进行编码，一个LSTM用来对buffer中所有元素进行编码，一个LSTM用来对之前预测完毕的所有动作进行编码。</p>\n<h2 id=\"单词表示\"><a href=\"#单词表示\" class=\"headerlink\" title=\"单词表示\"></a>单词表示</h2><p>对于每个单词，用预训练词向量、随机初始化词向量、POS向量拼接起来，然后经过一个前馈神经网络来作为最终的单词表示：<br>\\[{x_i} = f({W_{input}}[{e_{ {p_i}}};{\\bar e_{ {w_i}}};{e_{ {w_i}}}] + {b_{input}})\\]<br>其中${e_{ {p_i}}}$表示POS为$p_i$的向量，${\\bar e_{ {w_i}}}$表示单词$w_i$的预训练词向量，${e_{ {w_i}}}$表示单词$w_i$的随机初始化词向量。$f$函数通常取ReLU。</p>\n<h2 id=\"栈里的短语表示\"><a href=\"#栈里的短语表示\" class=\"headerlink\" title=\"栈里的短语表示\"></a>栈里的短语表示</h2><p>对于自顶向下和in-order的转移系统，由于不需要二叉化，所以采用如下图所示的LSTM来对栈里的短语进行编码：<br><img src=\"9.jpg\" alt><br>具体的短语表示为：<br>\\[{s_{comp}} = (LST{M_f}[{e_{nt}},{s_0}, \\ldots ,{s_m}];LST{M_b}[{e_{nt}},{s_m}, \\ldots ,{s_0}])\\]<br>其中${e_{nt}}$是父结点的向量表示，其他都是子结点的短语表示。</p>\n<p>而作为对比实验，自底向上的转移系统因为是二叉树，所以LSTM略有不同，结构图如下所示：<br><img src=\"12.jpg\" alt><br>唯一的区别就是不管你短语的单词顺序如何，都要把中心词也就是头结点放在前面。</p>\n<h2 id=\"贪心动作预测\"><a href=\"#贪心动作预测\" class=\"headerlink\" title=\"贪心动作预测\"></a>贪心动作预测</h2><p>上面的两个小节将buffer和栈里的元素都进行了编码，最后就要对当前状态进行动作预测了。</p>\n<p>假设第$k$个状态为$[{s_j}, \\ldots ,{s_0},i,false]$，那么当前状态每个动作的概率为：<br>\\[p = SOFTMAX(W[{h_{stk}};{h_{buf}};{h_{ah}}] + b)\\]<br>其中${h_{stk}}$是栈里的LSTM编码结果：<br>\\[{h_{stk}} = LSTM[{s_0}, \\ldots ,{s_j}]\\]<br>${h_{buf}}$是buffer里的LSTM编码结果：<br>\\[{h_{buf}} = LSTM[{x_i}, \\ldots ,{x_n}]\\]<br>${h_{ah}}$是之前动作序列的LSTM编码结果：<br>\\[{h_{ah}} = LSTM[{e_{ac{t_k}}}, \\ldots ,{e_{ac{t_0}}}]\\]</p>\n<p>最终的损失函数采用交叉熵：<br>\\[L(\\theta ) =  - \\sum\\limits_i {\\sum\\limits_j {\\log {p_{ {a_{ij}}}}} }  + \\frac{\\lambda }{2}{\\Vert \\theta  \\Vert ^2}\\]</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验的超参数设置如下：<br><img src=\"10.jpg\" alt><br>经过对比实验可以发现，结果比自底向上和自顶向下的转移系统都要略高一点，就算加上了重排序，还是略高一点。单模型的话，和2017年之前的结果相比的确是最高的，但是91.8的F1值现在看来不是特别高了，毕竟伯克利基于CKY算法的chart-parser都已经到了92多甚至93了。</p>\n<p>详细结果如下表：<br><img src=\"11.jpg\" alt><br>模型在依存句法分析和CTB上的表现也都很不错。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文提出了一种基于中序遍历转移系统的成分句法分析模型，主要的动机还是基于人类阅读时的直觉，该模型协调了自底向上和自顶向下转移系统的优缺点，在采用重排序之后，结果达到了非常高的水准。</p>\n<p>当然我个人认为模型也存在一些改进的地方：</p>\n<ul>\n<li>单词的表示可以加上Char-LSTM。</li>\n<li>预测阶段可以采用之前文章提到的Dynamic Oracle技术，来减少预测错误的发生。详见之前的文章：<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\">地址</a>。不过这里的Dynamic Oracle要重新设计了，设计好了说不定又可以发一篇论文了？（手动滑稽）</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=366752&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://www.aclweb.org/anthology/Q/Q17/Q17-1029.pdf\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/LeonCrashCode/InOrderParser\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要介绍的这篇论文是成分句法分析领域目前的第三名，结果最高的几篇paper可以参见ruder在github整理的列表：<a href=\"https://github.com/sebastianruder/NLP-progress/blob/master/constituency_parsing.md\" target=\"_blank\" rel=\"noopener\">github</a>。<br>下面就是成分句法分析目前排名：</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th align=\"center\">F1 score</th>\n<th>Paper / Source</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Self-attentive encoder + ELMo (Kitaev and Klein, 2018)</td>\n<td align=\"center\">95.13</td>\n<td><a href=\"https://arxiv.org/abs/1805.01052\" target=\"_blank\" rel=\"noopener\">Constituency Parsing with a Self-Attentive Encoder</a></td>\n</tr>\n<tr>\n<td>Model combination (Fried et al., 2017)</td>\n<td align=\"center\">94.66</td>\n<td><a href=\"https://arxiv.org/abs/1707.03058\" target=\"_blank\" rel=\"noopener\">Improving Neural Parsing by Disentangling Model Combination and Reranking Effects</a></td>\n</tr>\n<tr>\n<td>In-order (Liu and Zhang, 2017)</td>\n<td align=\"center\">94.2</td>\n<td><a href=\"http://aclweb.org/anthology/Q17-1029\" target=\"_blank\" rel=\"noopener\">In-Order Transition-based Constituent Parsing</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM-LM (Choe and Charniak, 2016)</td>\n<td align=\"center\">93.8</td>\n<td><a href=\"http://www.aclweb.org/anthology/D16-1257\" target=\"_blank\" rel=\"noopener\">Parsing as Language Modeling</a></td>\n</tr>\n<tr>\n<td>Stack-only RNNG (Kuncoro et al., 2017)</td>\n<td align=\"center\">93.6</td>\n<td><a href=\"https://arxiv.org/abs/1611.05774\" target=\"_blank\" rel=\"noopener\">What Do Recurrent Neural Network Grammars Learn About Syntax?</a></td>\n</tr>\n<tr>\n<td>RNN Grammar (Dyer et al., 2016)</td>\n<td align=\"center\">93.3</td>\n<td><a href=\"https://www.aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Recurrent Neural Network Grammars</a></td>\n</tr>\n<tr>\n<td>Transformer (Vaswani et al., 2017)</td>\n<td align=\"center\">92.7</td>\n<td><a href=\"https://arxiv.org/abs/1706.03762\" target=\"_blank\" rel=\"noopener\">Attention Is All You Need</a></td>\n</tr>\n<tr>\n<td>Semi-supervised LSTM (Vinyals et al., 2015)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://papers.nips.cc/paper/5635-grammar-as-a-foreign-language.pdf\" target=\"_blank\" rel=\"noopener\">Grammar as a Foreign Language</a></td>\n</tr>\n<tr>\n<td>Self-trained parser (McClosky et al., 2006)</td>\n<td align=\"center\">92.1</td>\n<td><a href=\"https://pdfs.semanticscholar.org/6f0f/64f0dab74295e5eb139c160ed79ff262558a.pdf\" target=\"_blank\" rel=\"noopener\">Effective Self-Training for Parsing</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><hr>\n<p>基于转移的成分句法分析主要分为两种：</p>\n<ul>\n<li>一种是自顶向下（top-down）的方法，按照前序遍历（pre-order）的顺序生成句法树。这种方法可以更好地利用全局信息，但是需要一个强大的编码器来对每个短语成分进行编码。</li>\n<li>一种是自底向上（bottom-up）的方法，按照后序遍历（post-order）的顺序生成句法树。这种方法可以充分利用子树的特征来进行分析，但是却无法利用全局信息。</li>\n</ul>\n<p>本文的模型就对这两种方法进行了改进，采用中序遍历（in-order）的顺序来生成句法树。单模型最终取得了91.8的F1值（貌似也不是特别高？），采用监督重排序之后F1值提升到了93.6，采用半监督重排序之后F1值提升到了94.2。所以看起来还是重排序起了很大的作用。</p>\n<h1 id=\"基于转移的成分句法分析\"><a href=\"#基于转移的成分句法分析\" class=\"headerlink\" title=\"基于转移的成分句法分析\"></a>基于转移的成分句法分析</h1><hr>\n<p>首先简要介绍一下这三种基于转移的句法分析方法。</p>\n<h2 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h2><p>自底向上的转移系统是基于后序遍历的，例如对于下图这棵句法树，算法产生结点的顺序为3、4、5、2、7、9、10、8、6、11、1。<br><img src=\"1.jpg\" alt><br>a图是未经二叉化的句法树，b图是二叉化之后的句法树，二叉化之后的结点要用l和r来区分头结点。其实不二叉化也是可以的，伯克利一帮人的做法就是用$\\emptyset $来作为临时结点，构造树的时候去掉就行了。</p>\n<p>句法分析系统如下：<br><img src=\"2.jpg\" alt><br>每个时刻的状态用三元组$[\\sigma ,i,f]$来表示，分别表示栈中元素、buffer的第一个元素在句子中的下标、句法分析结束标记。系统一共有四个操作：</p>\n<ul>\n<li>SHIFT： 从buffer中移进一个单词到栈里。</li>\n<li>REDUCE-L/R-X：将栈顶两个结点归约为一个父结点X。</li>\n<li>UNARY-X：将栈顶元素归约为一元结点X。</li>\n<li>FINISH：句法分析结束。</li>\n</ul>\n<p>上面那个句法树按照该模型分析的话过程如下：<br><img src=\"3.jpg\" alt><br>优缺点很显然，可以充分利用已生成的子树来对父结点的预测进行分析，但是不能利用全局信息（也就是其他子树、父结点等信息），并且需要提前进行二叉化（这点可以用临时结点标记来规避）。</p>\n<h2 id=\"自顶向下的转移系统\"><a href=\"#自顶向下的转移系统\" class=\"headerlink\" title=\"自顶向下的转移系统\"></a>自顶向下的转移系统</h2><p>自顶向下的转移系统是基于前序遍历的，例如对于之前那棵句法树，算法产生结点的顺序为1、2、3、4、5、6、7、8、9、10、11。</p>\n<p>句法分析系统如下：<br><img src=\"4.jpg\" alt><br>系统一共有三个操作：</p>\n<ul>\n<li>SHIFT： 从buffer中移进一个单词到栈里。</li>\n<li>NT-X：对一个父结点生成出它的一个子结点X。</li>\n<li>REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点这时已经在栈顶了。</li>\n</ul>\n<p>上面那个句法树按照该模型分析的话过程如下：<br><img src=\"5.jpg\" alt><br>优缺点也很显然，可以充分利用全局信息，但是因为预测子树的时候，子树还没有生成，所以无法利用子树的特征来进行分析，所以需要提前对句子的每个短语进行编码。</p>\n<h2 id=\"采用中序遍历的转移系统\"><a href=\"#采用中序遍历的转移系统\" class=\"headerlink\" title=\"采用中序遍历的转移系统\"></a>采用中序遍历的转移系统</h2><p>为了协调上面的两种问题，本文提出了一种基于中序遍历的转移系统。</p>\n<p>其实采用中序遍历也符合人们的直觉判断，比如你读到一个单词“like”，脑子里首先就会想到，这个可能和下面短语共同组成了动词短语VP，然后接着往下看，果然印证了你的猜想。</p>\n<p>中序遍历就是采用这种思想的，例如对于之前那棵句法树，算法产生结点的顺序为3、2、4、5、1、7、6、9、8、10。</p>\n<p>句法分析系统如下：<br><img src=\"6.jpg\" alt><br>系统一共有四个操作：</p>\n<ul>\n<li>SHIFT： 从buffer中移进一个单词到栈里。</li>\n<li>PJ-X：向栈里移进父结点X，来作为栈顶结点的父结点。</li>\n<li>REDUCE：将栈顶的若干个结点归约为一个结点，并且全部出栈，注意它们的父结点在出栈元素的倒数第二个。然后再将父结点入栈。</li>\n<li>FINISH：句法分析结束。</li>\n</ul>\n<p>上面那个句法树按照该模型分析的话过程如下：<br><img src=\"7.jpg\" alt></p>\n<p>该转移系统还有很多变体。对于短语(S, a, b, c, d)，可以令它在栈中S结点之前的子结点个数为$k$，例如对于上面的中序转移系统，栈里存放顺序是“a S b c d”，那么$k = 1$，如果栈里存放顺序是“a b S c d”，那么$k = 2$。而对于自底向上的转移系统，$k$就是正无穷，对于自顶向下的转移系统，$k$就是0。</p>\n<h1 id=\"句法分析模型\"><a href=\"#句法分析模型\" class=\"headerlink\" title=\"句法分析模型\"></a>句法分析模型</h1><hr>\n<p>对于每一个状态，模型采用三个LSTM来预测当前步动作，结构如下图所示：<br><img src=\"8.jpg\" alt><br>一个LSTM用来对栈顶元素进行编码，一个LSTM用来对buffer中所有元素进行编码，一个LSTM用来对之前预测完毕的所有动作进行编码。</p>\n<h2 id=\"单词表示\"><a href=\"#单词表示\" class=\"headerlink\" title=\"单词表示\"></a>单词表示</h2><p>对于每个单词，用预训练词向量、随机初始化词向量、POS向量拼接起来，然后经过一个前馈神经网络来作为最终的单词表示：<br>\\[{x_i} = f({W_{input}}[{e_{ {p_i}}};{\\bar e_{ {w_i}}};{e_{ {w_i}}}] + {b_{input}})\\]<br>其中${e_{ {p_i}}}$表示POS为$p_i$的向量，${\\bar e_{ {w_i}}}$表示单词$w_i$的预训练词向量，${e_{ {w_i}}}$表示单词$w_i$的随机初始化词向量。$f$函数通常取ReLU。</p>\n<h2 id=\"栈里的短语表示\"><a href=\"#栈里的短语表示\" class=\"headerlink\" title=\"栈里的短语表示\"></a>栈里的短语表示</h2><p>对于自顶向下和in-order的转移系统，由于不需要二叉化，所以采用如下图所示的LSTM来对栈里的短语进行编码：<br><img src=\"9.jpg\" alt><br>具体的短语表示为：<br>\\[{s_{comp}} = (LST{M_f}[{e_{nt}},{s_0}, \\ldots ,{s_m}];LST{M_b}[{e_{nt}},{s_m}, \\ldots ,{s_0}])\\]<br>其中${e_{nt}}$是父结点的向量表示，其他都是子结点的短语表示。</p>\n<p>而作为对比实验，自底向上的转移系统因为是二叉树，所以LSTM略有不同，结构图如下所示：<br><img src=\"12.jpg\" alt><br>唯一的区别就是不管你短语的单词顺序如何，都要把中心词也就是头结点放在前面。</p>\n<h2 id=\"贪心动作预测\"><a href=\"#贪心动作预测\" class=\"headerlink\" title=\"贪心动作预测\"></a>贪心动作预测</h2><p>上面的两个小节将buffer和栈里的元素都进行了编码，最后就要对当前状态进行动作预测了。</p>\n<p>假设第$k$个状态为$[{s_j}, \\ldots ,{s_0},i,false]$，那么当前状态每个动作的概率为：<br>\\[p = SOFTMAX(W[{h_{stk}};{h_{buf}};{h_{ah}}] + b)\\]<br>其中${h_{stk}}$是栈里的LSTM编码结果：<br>\\[{h_{stk}} = LSTM[{s_0}, \\ldots ,{s_j}]\\]<br>${h_{buf}}$是buffer里的LSTM编码结果：<br>\\[{h_{buf}} = LSTM[{x_i}, \\ldots ,{x_n}]\\]<br>${h_{ah}}$是之前动作序列的LSTM编码结果：<br>\\[{h_{ah}} = LSTM[{e_{ac{t_k}}}, \\ldots ,{e_{ac{t_0}}}]\\]</p>\n<p>最终的损失函数采用交叉熵：<br>\\[L(\\theta ) =  - \\sum\\limits_i {\\sum\\limits_j {\\log {p_{ {a_{ij}}}}} }  + \\frac{\\lambda }{2}{\\Vert \\theta  \\Vert ^2}\\]</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验的超参数设置如下：<br><img src=\"10.jpg\" alt><br>经过对比实验可以发现，结果比自底向上和自顶向下的转移系统都要略高一点，就算加上了重排序，还是略高一点。单模型的话，和2017年之前的结果相比的确是最高的，但是91.8的F1值现在看来不是特别高了，毕竟伯克利基于CKY算法的chart-parser都已经到了92多甚至93了。</p>\n<p>详细结果如下表：<br><img src=\"11.jpg\" alt><br>模型在依存句法分析和CTB上的表现也都很不错。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文提出了一种基于中序遍历转移系统的成分句法分析模型，主要的动机还是基于人类阅读时的直觉，该模型协调了自底向上和自顶向下转移系统的优缺点，在采用重排序之后，结果达到了非常高的水准。</p>\n<p>当然我个人认为模型也存在一些改进的地方：</p>\n<ul>\n<li>单词的表示可以加上Char-LSTM。</li>\n<li>预测阶段可以采用之前文章提到的Dynamic Oracle技术，来减少预测错误的发生。详见之前的文章：<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\">地址</a>。不过这里的Dynamic Oracle要重新设计了，设计好了说不定又可以发一篇论文了？（手动滑稽）</li>\n</ul>\n"},{"title":"Sequence Tagging with Little Labeled Data","date":"2017-11-28T16:41:22.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"文本挖掘课presentation还有一个多月了，依然很迷茫，不知道选什么课题。\n最近看了一些序列标注相关的paper，暂且就准备挑一个相关的点做了，打算做一个“基于少量标注数据的序列标注”。\n\n# 主要方法\n---\n基于少量标注数据的序列标注，主要有两种方法：迁移学习和半监督学习。\n代表性的paper分别有：\n[Yang Z, Salakhutdinov R, Cohen W W. Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. ICLR, 2017.](https://arxiv.org/pdf/1703.06345.pdf)\n[Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.](https://arxiv.org/pdf/1705.00108.pdf)\n具体该讲些什么，该怎么讲，等我慢慢补充吧。\n其中传统的半监督序列标注模型有基于HMM之类的，这里就不说了。\n下面说说几个基于双向LSTM的。\n\n### Marek Rei. *Semi-supervised Multitask Learning for Sequence Labeling. ACL, 2017.*\n![](1.png)\n这篇论文介绍了一个附加了语言模型的LSTM序列标注模型。\n就是在传统的序列标注模型隐含层输出上额外附加了一层语言模型输出，总的损失函数也加上了语言模型的损失函数，共同训练。\n![](2.png)\n![](3.png)\n![](4.png)\n![](5.png)\n其中E就是原始序列标注模型的损失。\n当然了，这个模型不需要额外的未标注数据，只要用到少量的标注数据就行了。\n\n### Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. *Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.*\n这篇论文就是半监督序列标注模型中我看到的效果最好的一个了。\n和上面一篇相同的是，都加入了语言模型，来对单词上下文信息进行编码。但是不同的是，上文将语言模型和序列标注模型融合在了一起，所以只需要少量的标注数据就行了，无法利用大量的无标注数据。这篇的模型将其分开，预先对大量的无标注数据训练语言模型，然后将训练好的词表示加入到序列标注模型中，和原始的词向量结合，然后进行训练。\n模型结构如下所示：\n![](6.png)\n\n### Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. *Scientific Information Extraction with Semi-supervised Neural Tagging. EMNLP, 2017.*\n这篇论文任务是科技文章的关键词提取，然后分类为task、process、material三类，可以将其看成一个序列标注任务。\n这篇论文介绍了一种基于图的半监督方法","source":"_posts/TextMinning.md","raw":"---\ntitle: Sequence Tagging with Little Labeled Data\ndate: 2017-11-29 00:41:22\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 序列标注\n- 半监督学习\n- 迁移学习\ncategories:\n- 序列标注\n---\n文本挖掘课presentation还有一个多月了，依然很迷茫，不知道选什么课题。\n最近看了一些序列标注相关的paper，暂且就准备挑一个相关的点做了，打算做一个“基于少量标注数据的序列标注”。\n\n# 主要方法\n---\n基于少量标注数据的序列标注，主要有两种方法：迁移学习和半监督学习。\n代表性的paper分别有：\n[Yang Z, Salakhutdinov R, Cohen W W. Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. ICLR, 2017.](https://arxiv.org/pdf/1703.06345.pdf)\n[Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.](https://arxiv.org/pdf/1705.00108.pdf)\n具体该讲些什么，该怎么讲，等我慢慢补充吧。\n其中传统的半监督序列标注模型有基于HMM之类的，这里就不说了。\n下面说说几个基于双向LSTM的。\n\n### Marek Rei. *Semi-supervised Multitask Learning for Sequence Labeling. ACL, 2017.*\n![](1.png)\n这篇论文介绍了一个附加了语言模型的LSTM序列标注模型。\n就是在传统的序列标注模型隐含层输出上额外附加了一层语言模型输出，总的损失函数也加上了语言模型的损失函数，共同训练。\n![](2.png)\n![](3.png)\n![](4.png)\n![](5.png)\n其中E就是原始序列标注模型的损失。\n当然了，这个模型不需要额外的未标注数据，只要用到少量的标注数据就行了。\n\n### Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. *Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.*\n这篇论文就是半监督序列标注模型中我看到的效果最好的一个了。\n和上面一篇相同的是，都加入了语言模型，来对单词上下文信息进行编码。但是不同的是，上文将语言模型和序列标注模型融合在了一起，所以只需要少量的标注数据就行了，无法利用大量的无标注数据。这篇的模型将其分开，预先对大量的无标注数据训练语言模型，然后将训练好的词表示加入到序列标注模型中，和原始的词向量结合，然后进行训练。\n模型结构如下所示：\n![](6.png)\n\n### Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. *Scientific Information Extraction with Semi-supervised Neural Tagging. EMNLP, 2017.*\n这篇论文任务是科技文章的关键词提取，然后分类为task、process、material三类，可以将其看成一个序列标注任务。\n这篇论文介绍了一种基于图的半监督方法","slug":"TextMinning","published":1,"updated":"2019-07-20T04:22:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982dg005e7swejlbbcwbp","content":"<p>文本挖掘课presentation还有一个多月了，依然很迷茫，不知道选什么课题。<br>最近看了一些序列标注相关的paper，暂且就准备挑一个相关的点做了，打算做一个“基于少量标注数据的序列标注”。</p>\n<h1 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h1><hr>\n<p>基于少量标注数据的序列标注，主要有两种方法：迁移学习和半监督学习。<br>代表性的paper分别有：<br><a href=\"https://arxiv.org/pdf/1703.06345.pdf\" target=\"_blank\" rel=\"noopener\">Yang Z, Salakhutdinov R, Cohen W W. Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. ICLR, 2017.</a><br><a href=\"https://arxiv.org/pdf/1705.00108.pdf\" target=\"_blank\" rel=\"noopener\">Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.</a><br>具体该讲些什么，该怎么讲，等我慢慢补充吧。<br>其中传统的半监督序列标注模型有基于HMM之类的，这里就不说了。<br>下面说说几个基于双向LSTM的。</p>\n<h3 id=\"Marek-Rei-Semi-supervised-Multitask-Learning-for-Sequence-Labeling-ACL-2017\"><a href=\"#Marek-Rei-Semi-supervised-Multitask-Learning-for-Sequence-Labeling-ACL-2017\" class=\"headerlink\" title=\"Marek Rei. Semi-supervised Multitask Learning for Sequence Labeling. ACL, 2017.\"></a>Marek Rei. <em>Semi-supervised Multitask Learning for Sequence Labeling. ACL, 2017.</em></h3><p><img src=\"1.png\" alt><br>这篇论文介绍了一个附加了语言模型的LSTM序列标注模型。<br>就是在传统的序列标注模型隐含层输出上额外附加了一层语言模型输出，总的损失函数也加上了语言模型的损失函数，共同训练。<br><img src=\"2.png\" alt><br><img src=\"3.png\" alt><br><img src=\"4.png\" alt><br><img src=\"5.png\" alt><br>其中E就是原始序列标注模型的损失。<br>当然了，这个模型不需要额外的未标注数据，只要用到少量的标注数据就行了。</p>\n<h3 id=\"Matthew-E-Peters-Waleed-Ammar-Chandra-Bhagavatula-Russell-Power-Semi-supervised-sequence-tagging-with-bidirectional-language-models-ACL-2017\"><a href=\"#Matthew-E-Peters-Waleed-Ammar-Chandra-Bhagavatula-Russell-Power-Semi-supervised-sequence-tagging-with-bidirectional-language-models-ACL-2017\" class=\"headerlink\" title=\"Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.\"></a>Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. <em>Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.</em></h3><p>这篇论文就是半监督序列标注模型中我看到的效果最好的一个了。<br>和上面一篇相同的是，都加入了语言模型，来对单词上下文信息进行编码。但是不同的是，上文将语言模型和序列标注模型融合在了一起，所以只需要少量的标注数据就行了，无法利用大量的无标注数据。这篇的模型将其分开，预先对大量的无标注数据训练语言模型，然后将训练好的词表示加入到序列标注模型中，和原始的词向量结合，然后进行训练。<br>模型结构如下所示：<br><img src=\"6.png\" alt></p>\n<h3 id=\"Yi-Luan-Mari-Ostendorf-Hannaneh-Hajishirzi-Scientific-Information-Extraction-with-Semi-supervised-Neural-Tagging-EMNLP-2017\"><a href=\"#Yi-Luan-Mari-Ostendorf-Hannaneh-Hajishirzi-Scientific-Information-Extraction-with-Semi-supervised-Neural-Tagging-EMNLP-2017\" class=\"headerlink\" title=\"Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. Scientific Information Extraction with Semi-supervised Neural Tagging. EMNLP, 2017.\"></a>Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. <em>Scientific Information Extraction with Semi-supervised Neural Tagging. EMNLP, 2017.</em></h3><p>这篇论文任务是科技文章的关键词提取，然后分类为task、process、material三类，可以将其看成一个序列标注任务。<br>这篇论文介绍了一种基于图的半监督方法</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>文本挖掘课presentation还有一个多月了，依然很迷茫，不知道选什么课题。<br>最近看了一些序列标注相关的paper，暂且就准备挑一个相关的点做了，打算做一个“基于少量标注数据的序列标注”。</p>\n<h1 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h1><hr>\n<p>基于少量标注数据的序列标注，主要有两种方法：迁移学习和半监督学习。<br>代表性的paper分别有：<br><a href=\"https://arxiv.org/pdf/1703.06345.pdf\" target=\"_blank\" rel=\"noopener\">Yang Z, Salakhutdinov R, Cohen W W. Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. ICLR, 2017.</a><br><a href=\"https://arxiv.org/pdf/1705.00108.pdf\" target=\"_blank\" rel=\"noopener\">Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.</a><br>具体该讲些什么，该怎么讲，等我慢慢补充吧。<br>其中传统的半监督序列标注模型有基于HMM之类的，这里就不说了。<br>下面说说几个基于双向LSTM的。</p>\n<h3 id=\"Marek-Rei-Semi-supervised-Multitask-Learning-for-Sequence-Labeling-ACL-2017\"><a href=\"#Marek-Rei-Semi-supervised-Multitask-Learning-for-Sequence-Labeling-ACL-2017\" class=\"headerlink\" title=\"Marek Rei. Semi-supervised Multitask Learning for Sequence Labeling. ACL, 2017.\"></a>Marek Rei. <em>Semi-supervised Multitask Learning for Sequence Labeling. ACL, 2017.</em></h3><p><img src=\"1.png\" alt><br>这篇论文介绍了一个附加了语言模型的LSTM序列标注模型。<br>就是在传统的序列标注模型隐含层输出上额外附加了一层语言模型输出，总的损失函数也加上了语言模型的损失函数，共同训练。<br><img src=\"2.png\" alt><br><img src=\"3.png\" alt><br><img src=\"4.png\" alt><br><img src=\"5.png\" alt><br>其中E就是原始序列标注模型的损失。<br>当然了，这个模型不需要额外的未标注数据，只要用到少量的标注数据就行了。</p>\n<h3 id=\"Matthew-E-Peters-Waleed-Ammar-Chandra-Bhagavatula-Russell-Power-Semi-supervised-sequence-tagging-with-bidirectional-language-models-ACL-2017\"><a href=\"#Matthew-E-Peters-Waleed-Ammar-Chandra-Bhagavatula-Russell-Power-Semi-supervised-sequence-tagging-with-bidirectional-language-models-ACL-2017\" class=\"headerlink\" title=\"Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.\"></a>Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. <em>Semi-supervised sequence tagging with bidirectional language models. ACL, 2017.</em></h3><p>这篇论文就是半监督序列标注模型中我看到的效果最好的一个了。<br>和上面一篇相同的是，都加入了语言模型，来对单词上下文信息进行编码。但是不同的是，上文将语言模型和序列标注模型融合在了一起，所以只需要少量的标注数据就行了，无法利用大量的无标注数据。这篇的模型将其分开，预先对大量的无标注数据训练语言模型，然后将训练好的词表示加入到序列标注模型中，和原始的词向量结合，然后进行训练。<br>模型结构如下所示：<br><img src=\"6.png\" alt></p>\n<h3 id=\"Yi-Luan-Mari-Ostendorf-Hannaneh-Hajishirzi-Scientific-Information-Extraction-with-Semi-supervised-Neural-Tagging-EMNLP-2017\"><a href=\"#Yi-Luan-Mari-Ostendorf-Hannaneh-Hajishirzi-Scientific-Information-Extraction-with-Semi-supervised-Neural-Tagging-EMNLP-2017\" class=\"headerlink\" title=\"Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. Scientific Information Extraction with Semi-supervised Neural Tagging. EMNLP, 2017.\"></a>Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. <em>Scientific Information Extraction with Semi-supervised Neural Tagging. EMNLP, 2017.</em></h3><p>这篇论文任务是科技文章的关键词提取，然后分类为task、process、material三类，可以将其看成一个序列标注任务。<br>这篇论文介绍了一种基于图的半监督方法</p>\n"},{"title":"算法编程小白机试指南（大佬勿进）","date":"2019-07-12T06:26:27.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n> 大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。\n\n# 暴力打表法\n---\n## 题目1\n给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？\n\n如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式\n\\\\[f(n) = (n-1)(f(n-1)+f(n-2))\\\\]\n然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？\n\n首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数``next_permutation``正好可以帮助我们枚举全排列，代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL a[30] = {0, 0, 1};\nint b[30];\n\nint main() {\n    for (int n = 3; n <= 20; ++n) {\n        for (int i = 1; i <= n; ++i) {\n            b[i] = i;\n        }\n        int cnt = 0;\n        do {\n            int flag = 1;\n            for (int i = 1; i <= n; ++i) {\n                if (b[i] == i) {\n                    flag = 0;\n                    break;\n                }\n            }\n            cnt += flag;\n        } while (next_permutation(b + 1, b + n + 1));\n        a[n] = cnt;\n        printf(\"%d, \", cnt);\n    }\n    return 0;\n}\n```\n\n然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n > 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL p[30] = {1, 1, 2};\nLL a[30] = {0, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496, 1334961, 14684570, 176214841};\n\nint main() {\n    for (int i = 3; i < 30; ++i) {\n        p[i] = p[i - 1] * (LL)i;\n    }\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        if (n > 12)\n            n = 12;\n        double res = (double)a[n] / p[n] * 100.0;\n        printf(\"%.2f%%\\n\", res);\n    }\n    return 0;\n}\n```\n\n这样即使你完全不会计算，也可以100分通过这题啦。\n\n\n## 题目2\n[原题链接](https://acm.ecnu.edu.cn/problem/3337/)\n\n这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。\n\n首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int cnt = 0;\n        for (int i = 0; i < len[s]; ++i) {\n            for (int j = 0; j < len[t]; ++j) {\n                if (G[s][i] == G[t][j]) {\n                    cnt++;\n                }\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n![](3337-1.jpg)\n\n结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。\n\n但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        sort(G[i].begin(), G[i].end());\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int i = 0, j = 0, cnt = 0;\n        while (i < len[s] && j < len[t]) {\n            if (G[s][i] > G[t][j]) {\n                ++j;\n            } else {\n                if (G[s][i] == G[t][j]) {\n                    ++cnt;\n                }\n                ++i;\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n![](3337-2.jpg)\n\n然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。\n\n所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用`bitset`实现的：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nbitset<MAXN> G[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u][v] = G[v][u] = 1;\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        printf(\"%d\\n\", (G[s] & G[t]).count());\n    }\n    return 0;\n}\n```","source":"_posts/algorithm-code-tricks.md","raw":"---\ntitle: 算法编程小白机试指南（大佬勿进）\ndate: 2019-07-12 14:26:27\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 算法\n- 机试\ncategories:\n- 程序设计\n---\n\n> 大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。\n\n# 暴力打表法\n---\n## 题目1\n给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？\n\n如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式\n\\\\[f(n) = (n-1)(f(n-1)+f(n-2))\\\\]\n然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？\n\n首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数``next_permutation``正好可以帮助我们枚举全排列，代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL a[30] = {0, 0, 1};\nint b[30];\n\nint main() {\n    for (int n = 3; n <= 20; ++n) {\n        for (int i = 1; i <= n; ++i) {\n            b[i] = i;\n        }\n        int cnt = 0;\n        do {\n            int flag = 1;\n            for (int i = 1; i <= n; ++i) {\n                if (b[i] == i) {\n                    flag = 0;\n                    break;\n                }\n            }\n            cnt += flag;\n        } while (next_permutation(b + 1, b + n + 1));\n        a[n] = cnt;\n        printf(\"%d, \", cnt);\n    }\n    return 0;\n}\n```\n\n然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n > 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL p[30] = {1, 1, 2};\nLL a[30] = {0, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496, 1334961, 14684570, 176214841};\n\nint main() {\n    for (int i = 3; i < 30; ++i) {\n        p[i] = p[i - 1] * (LL)i;\n    }\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        if (n > 12)\n            n = 12;\n        double res = (double)a[n] / p[n] * 100.0;\n        printf(\"%.2f%%\\n\", res);\n    }\n    return 0;\n}\n```\n\n这样即使你完全不会计算，也可以100分通过这题啦。\n\n\n## 题目2\n[原题链接](https://acm.ecnu.edu.cn/problem/3337/)\n\n这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。\n\n首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int cnt = 0;\n        for (int i = 0; i < len[s]; ++i) {\n            for (int j = 0; j < len[t]; ++j) {\n                if (G[s][i] == G[t][j]) {\n                    cnt++;\n                }\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n![](3337-1.jpg)\n\n结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。\n\n但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        sort(G[i].begin(), G[i].end());\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int i = 0, j = 0, cnt = 0;\n        while (i < len[s] && j < len[t]) {\n            if (G[s][i] > G[t][j]) {\n                ++j;\n            } else {\n                if (G[s][i] == G[t][j]) {\n                    ++cnt;\n                }\n                ++i;\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n![](3337-2.jpg)\n\n然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。\n\n所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用`bitset`实现的：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nbitset<MAXN> G[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u][v] = G[v][u] = 1;\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        printf(\"%d\\n\", (G[s] & G[t]).count());\n    }\n    return 0;\n}\n```","slug":"algorithm-code-tricks","published":1,"updated":"2019-07-25T04:35:23.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982dn005i7swecky5jyg4","content":"<blockquote>\n<p>大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。</p>\n</blockquote>\n<h1 id=\"暴力打表法\"><a href=\"#暴力打表法\" class=\"headerlink\" title=\"暴力打表法\"></a>暴力打表法</h1><hr>\n<h2 id=\"题目1\"><a href=\"#题目1\" class=\"headerlink\" title=\"题目1\"></a>题目1</h2><p>给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？</p>\n<p>如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式<br>\\[f(n) = (n-1)(f(n-1)+f(n-2))\\]<br>然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？</p>\n<p>首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数<code>next_permutation</code>正好可以帮助我们枚举全排列，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n\nLL a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">next_permutation</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">+</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, \"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n &gt; 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n\nLL p<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nLL a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">265</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1854</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14833</span><span class=\"token punctuation\">,</span> <span class=\"token number\">133496</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1334961</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14684570</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176214841</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> p<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f%%\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这样即使你完全不会计算，也可以100分通过这题啦。</p>\n<h2 id=\"题目2\"><a href=\"#题目2\" class=\"headerlink\" title=\"题目2\"></a>题目2</h2><p><a href=\"https://acm.ecnu.edu.cn/problem/3337/\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<p>这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。</p>\n<p>首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">40000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        len<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"3337-1.jpg\" alt></p>\n<p>结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。</p>\n<p>但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">40000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        len<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"3337-2.jpg\" alt></p>\n<p>然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。</p>\n<p>所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用<code>bitset</code>实现的：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">40000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nbitset<span class=\"token operator\">&lt;</span>MAXN<span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。</p>\n</blockquote>\n<h1 id=\"暴力打表法\"><a href=\"#暴力打表法\" class=\"headerlink\" title=\"暴力打表法\"></a>暴力打表法</h1><hr>\n<h2 id=\"题目1\"><a href=\"#题目1\" class=\"headerlink\" title=\"题目1\"></a>题目1</h2><p>给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？</p>\n<p>如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式<br>\\[f(n) = (n-1)(f(n-1)+f(n-2))\\]<br>然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？</p>\n<p>首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数<code>next_permutation</code>正好可以帮助我们枚举全排列，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\n\nLL a[30] = {0, 0, 1};\nint b[30];\n\nint main() {\n    for (int n = 3; n &lt;= 20; ++n) {\n        for (int i = 1; i &lt;= n; ++i) {\n            b[i] = i;\n        }\n        int cnt = 0;\n        do {\n            int flag = 1;\n            for (int i = 1; i &lt;= n; ++i) {\n                if (b[i] == i) {\n                    flag = 0;\n                    break;\n                }\n            }\n            cnt += flag;\n        } while (next_permutation(b + 1, b + n + 1));\n        a[n] = cnt;\n        printf(&quot;%d, &quot;, cnt);\n    }\n    return 0;\n}</code></pre>\n<p>然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n &gt; 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\n\nLL p[30] = {1, 1, 2};\nLL a[30] = {0, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496, 1334961, 14684570, 176214841};\n\nint main() {\n    for (int i = 3; i &lt; 30; ++i) {\n        p[i] = p[i - 1] * (LL)i;\n    }\n    int T;\n    scanf(&quot;%d&quot;, &amp;T);\n    while (T--) {\n        int n;\n        scanf(&quot;%d&quot;, &amp;n);\n        if (n &gt; 12)\n            n = 12;\n        double res = (double)a[n] / p[n] * 100.0;\n        printf(&quot;%.2f%%\\n&quot;, res);\n    }\n    return 0;\n}</code></pre>\n<p>这样即使你完全不会计算，也可以100分通过这题啦。</p>\n<h2 id=\"题目2\"><a href=\"#题目2\" class=\"headerlink\" title=\"题目2\"></a>题目2</h2><p><a href=\"https://acm.ecnu.edu.cn/problem/3337/\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<p>这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。</p>\n<p>首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector&lt;int&gt; G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v;\n        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i &lt;= n; ++i) {\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(&quot;%d&quot;, &amp;q);\n    while (q--) {\n        int s, t;\n        scanf(&quot;%d%d&quot;, &amp;s, &amp;t);\n        int cnt = 0;\n        for (int i = 0; i &lt; len[s]; ++i) {\n            for (int j = 0; j &lt; len[t]; ++j) {\n                if (G[s][i] == G[t][j]) {\n                    cnt++;\n                }\n            }\n        }\n        printf(&quot;%d\\n&quot;, cnt);\n    }\n    return 0;\n}</code></pre>\n<p><img src=\"3337-1.jpg\" alt></p>\n<p>结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。</p>\n<p>但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector&lt;int&gt; G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v;\n        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i &lt;= n; ++i) {\n        sort(G[i].begin(), G[i].end());\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(&quot;%d&quot;, &amp;q);\n    while (q--) {\n        int s, t;\n        scanf(&quot;%d%d&quot;, &amp;s, &amp;t);\n        int i = 0, j = 0, cnt = 0;\n        while (i &lt; len[s] &amp;&amp; j &lt; len[t]) {\n            if (G[s][i] &gt; G[t][j]) {\n                ++j;\n            } else {\n                if (G[s][i] == G[t][j]) {\n                    ++cnt;\n                }\n                ++i;\n            }\n        }\n        printf(&quot;%d\\n&quot;, cnt);\n    }\n    return 0;\n}</code></pre>\n<p><img src=\"3337-2.jpg\" alt></p>\n<p>然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。</p>\n<p>所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用<code>bitset</code>实现的：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nbitset&lt;MAXN&gt; G[MAXN];\n\nint main() {\n    int n, m;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v;\n        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);\n        G[u][v] = G[v][u] = 1;\n    }\n    int q;\n    scanf(&quot;%d&quot;, &amp;q);\n    while (q--) {\n        int s, t;\n        scanf(&quot;%d%d&quot;, &amp;s, &amp;t);\n        printf(&quot;%d\\n&quot;, (G[s] &amp; G[t]).count());\n    }\n    return 0;\n}</code></pre>\n"},{"title":"毕业论文代码实现思路","date":"2018-02-26T15:35:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=526307800&auto=1&height=66\"></iframe></div>\n\n一个寒假就写了个基本的代码，难受啊，整理一下思路吧，好久不看代码头都大了。\n\n# 数据预处理\n---\n首先使用的是PTB数据集，原始的数据是长这样的：\n(S (NP-SBJ (NNP Ms.) (NNP Haag) ) (VP (VBZ plays) (NP (NNP Elianti) )) (. .) )\n\n因为不一定是二叉树，所以要先预处理成二叉树，这里全部借用了github上别人的代码来进行预处理，二叉化之后变成了这样：\n(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP Elianti))) (. .))\n\n然后将整个数据集中出现次数过小的单词替换为unk：\n(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP < unk>))) (. .))\n\n最后还需要将每个训练数据对应的句子单独提取出来，方便训练时用，比如上面的例子提取出来就是：\nMs. Haag plays Elianti . \n\n# 文法规则提取\n---\n接着还是利用现成代码将数据集中出现的所有文法生成规则提取出来，保存到文件pcfg中。\n\n# 训练\n---\n这部分大部分代码是自己写的，也有一部分是从CKY算法代码修改得到的。\n\n首先将数据集中出现的所有单词和词向量数组下标一一映射，词性类别也做一个映射吧。\n\n然后初始化神经网络的各个参数，要训练的权值矩阵一共有两个，$W$和$d$，接下来就是训练了。\n\n训练过程是这样的，采用了动态规划的思想，用三个维度$i$，$j$，$A$来表示这个句子从第$i$个位置到第$j$个位置且类别为$A$的信息。\n用$e(i,j,A)$作为每个结点的向量表示，然后对他的儿子的所有情况进行遍历：\n\\\\[e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]\\\\]\n然后计算这个节点的分数：\n\\\\[s(i,j,A) = d \\cdot e(i,j,A)\\\\]\n找出能使得分数最大的那个分割点和对应的类别，保存下来。\n\n这样动态规划做好之后一棵树实际上就已经建好了，再回溯生成这棵树就好了。\n\n但是这棵树很不准确的，刚开始就是随意生成的，所以要和标准树进行对比，计算出损失函数进行反向传播。\n\n所以接下来用当前的权值矩阵计算出标准树的分数，然后对刚刚生成的结果和这个标准括号序列进行对比，我就直接粗暴统计出两个字符串有多少位置不同，记为$cnt$。\n\n总的损失函数就是：\n\\\\[\\left| {result - gold + cnt} \\right|\\\\]\n然后进行反向传播就行了。\n\n# 测试\n---\n在测试集上面直接照搬训练过程代码就行了，按照动态规划生成一棵树就行了。\n\n然后用现成的代码和标准结果进行对比，得出F1值。\n\n# 一些问题\n---\n总的来说，大体就是这样的了，但是还有很多问题没有解决。\n\n* 动态规划结合一个节点的两个子节点的时候，现在还只是直接连接的，准备将其改成LSTM的结点函数。\n* 改成LSTM的话就有左右结点的顺序问题，准备再加一个维度，0和1分别表示左右儿子的顺序。\n* 我在$e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]$加了一个$type[A]$，其实原来没有这个的，但是不加会出现一个很大的问题，就是会出现A1->B,C和A2->B,C这两种情况，但是不加的话两种情况算出的分数是一样的，先入为主，后算的那种就永远不会考虑了。所以我强行加上了父节点类型向量，来区别这两种情况。但是具体怎么加还没有个说法，我只是随便试试。\n* 关于损失函数，论文里写的就是$result - gold + cnt$，但是这样并不能保证非负，我就强行加上了一个绝对值。貌似也可以收敛了，到底应该怎么搞不清楚。","source":"_posts/biyelunwen.md","raw":"---\ntitle: 毕业论文代码实现思路\ndate: 2018-02-26 23:35:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=526307800&auto=1&height=66\"></iframe></div>\n\n一个寒假就写了个基本的代码，难受啊，整理一下思路吧，好久不看代码头都大了。\n\n# 数据预处理\n---\n首先使用的是PTB数据集，原始的数据是长这样的：\n(S (NP-SBJ (NNP Ms.) (NNP Haag) ) (VP (VBZ plays) (NP (NNP Elianti) )) (. .) )\n\n因为不一定是二叉树，所以要先预处理成二叉树，这里全部借用了github上别人的代码来进行预处理，二叉化之后变成了这样：\n(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP Elianti))) (. .))\n\n然后将整个数据集中出现次数过小的单词替换为unk：\n(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP < unk>))) (. .))\n\n最后还需要将每个训练数据对应的句子单独提取出来，方便训练时用，比如上面的例子提取出来就是：\nMs. Haag plays Elianti . \n\n# 文法规则提取\n---\n接着还是利用现成代码将数据集中出现的所有文法生成规则提取出来，保存到文件pcfg中。\n\n# 训练\n---\n这部分大部分代码是自己写的，也有一部分是从CKY算法代码修改得到的。\n\n首先将数据集中出现的所有单词和词向量数组下标一一映射，词性类别也做一个映射吧。\n\n然后初始化神经网络的各个参数，要训练的权值矩阵一共有两个，$W$和$d$，接下来就是训练了。\n\n训练过程是这样的，采用了动态规划的思想，用三个维度$i$，$j$，$A$来表示这个句子从第$i$个位置到第$j$个位置且类别为$A$的信息。\n用$e(i,j,A)$作为每个结点的向量表示，然后对他的儿子的所有情况进行遍历：\n\\\\[e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]\\\\]\n然后计算这个节点的分数：\n\\\\[s(i,j,A) = d \\cdot e(i,j,A)\\\\]\n找出能使得分数最大的那个分割点和对应的类别，保存下来。\n\n这样动态规划做好之后一棵树实际上就已经建好了，再回溯生成这棵树就好了。\n\n但是这棵树很不准确的，刚开始就是随意生成的，所以要和标准树进行对比，计算出损失函数进行反向传播。\n\n所以接下来用当前的权值矩阵计算出标准树的分数，然后对刚刚生成的结果和这个标准括号序列进行对比，我就直接粗暴统计出两个字符串有多少位置不同，记为$cnt$。\n\n总的损失函数就是：\n\\\\[\\left| {result - gold + cnt} \\right|\\\\]\n然后进行反向传播就行了。\n\n# 测试\n---\n在测试集上面直接照搬训练过程代码就行了，按照动态规划生成一棵树就行了。\n\n然后用现成的代码和标准结果进行对比，得出F1值。\n\n# 一些问题\n---\n总的来说，大体就是这样的了，但是还有很多问题没有解决。\n\n* 动态规划结合一个节点的两个子节点的时候，现在还只是直接连接的，准备将其改成LSTM的结点函数。\n* 改成LSTM的话就有左右结点的顺序问题，准备再加一个维度，0和1分别表示左右儿子的顺序。\n* 我在$e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]$加了一个$type[A]$，其实原来没有这个的，但是不加会出现一个很大的问题，就是会出现A1->B,C和A2->B,C这两种情况，但是不加的话两种情况算出的分数是一样的，先入为主，后算的那种就永远不会考虑了。所以我强行加上了父节点类型向量，来区别这两种情况。但是具体怎么加还没有个说法，我只是随便试试。\n* 关于损失函数，论文里写的就是$result - gold + cnt$，但是这样并不能保证非负，我就强行加上了一个绝对值。貌似也可以收敛了，到底应该怎么搞不清楚。","slug":"biyelunwen","published":1,"updated":"2019-07-20T04:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982dt005l7swe7z9m9uys","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=526307800&auto=1&height=66\"></iframe></div>\n\n<p>一个寒假就写了个基本的代码，难受啊，整理一下思路吧，好久不看代码头都大了。</p>\n<h1 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h1><hr>\n<p>首先使用的是PTB数据集，原始的数据是长这样的：<br>(S (NP-SBJ (NNP Ms.) (NNP Haag) ) (VP (VBZ plays) (NP (NNP Elianti) )) (. .) )</p>\n<p>因为不一定是二叉树，所以要先预处理成二叉树，这里全部借用了github上别人的代码来进行预处理，二叉化之后变成了这样：<br>(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP Elianti))) (. .))</p>\n<p>然后将整个数据集中出现次数过小的单词替换为unk：<br>(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP &lt; unk&gt;))) (. .))</p>\n<p>最后还需要将每个训练数据对应的句子单独提取出来，方便训练时用，比如上面的例子提取出来就是：<br>Ms. Haag plays Elianti . </p>\n<h1 id=\"文法规则提取\"><a href=\"#文法规则提取\" class=\"headerlink\" title=\"文法规则提取\"></a>文法规则提取</h1><hr>\n<p>接着还是利用现成代码将数据集中出现的所有文法生成规则提取出来，保存到文件pcfg中。</p>\n<h1 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h1><hr>\n<p>这部分大部分代码是自己写的，也有一部分是从CKY算法代码修改得到的。</p>\n<p>首先将数据集中出现的所有单词和词向量数组下标一一映射，词性类别也做一个映射吧。</p>\n<p>然后初始化神经网络的各个参数，要训练的权值矩阵一共有两个，$W$和$d$，接下来就是训练了。</p>\n<p>训练过程是这样的，采用了动态规划的思想，用三个维度$i$，$j$，$A$来表示这个句子从第$i$个位置到第$j$个位置且类别为$A$的信息。<br>用$e(i,j,A)$作为每个结点的向量表示，然后对他的儿子的所有情况进行遍历：<br>\\[e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]\\]<br>然后计算这个节点的分数：<br>\\[s(i,j,A) = d \\cdot e(i,j,A)\\]<br>找出能使得分数最大的那个分割点和对应的类别，保存下来。</p>\n<p>这样动态规划做好之后一棵树实际上就已经建好了，再回溯生成这棵树就好了。</p>\n<p>但是这棵树很不准确的，刚开始就是随意生成的，所以要和标准树进行对比，计算出损失函数进行反向传播。</p>\n<p>所以接下来用当前的权值矩阵计算出标准树的分数，然后对刚刚生成的结果和这个标准括号序列进行对比，我就直接粗暴统计出两个字符串有多少位置不同，记为$cnt$。</p>\n<p>总的损失函数就是：<br>\\[\\left| {result - gold + cnt} \\right|\\]<br>然后进行反向传播就行了。</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><hr>\n<p>在测试集上面直接照搬训练过程代码就行了，按照动态规划生成一棵树就行了。</p>\n<p>然后用现成的代码和标准结果进行对比，得出F1值。</p>\n<h1 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h1><hr>\n<p>总的来说，大体就是这样的了，但是还有很多问题没有解决。</p>\n<ul>\n<li>动态规划结合一个节点的两个子节点的时候，现在还只是直接连接的，准备将其改成LSTM的结点函数。</li>\n<li>改成LSTM的话就有左右结点的顺序问题，准备再加一个维度，0和1分别表示左右儿子的顺序。</li>\n<li>我在$e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]$加了一个$type[A]$，其实原来没有这个的，但是不加会出现一个很大的问题，就是会出现A1-&gt;B,C和A2-&gt;B,C这两种情况，但是不加的话两种情况算出的分数是一样的，先入为主，后算的那种就永远不会考虑了。所以我强行加上了父节点类型向量，来区别这两种情况。但是具体怎么加还没有个说法，我只是随便试试。</li>\n<li>关于损失函数，论文里写的就是$result - gold + cnt$，但是这样并不能保证非负，我就强行加上了一个绝对值。貌似也可以收敛了，到底应该怎么搞不清楚。</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=526307800&auto=1&height=66\"></iframe></div>\n\n<p>一个寒假就写了个基本的代码，难受啊，整理一下思路吧，好久不看代码头都大了。</p>\n<h1 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h1><hr>\n<p>首先使用的是PTB数据集，原始的数据是长这样的：<br>(S (NP-SBJ (NNP Ms.) (NNP Haag) ) (VP (VBZ plays) (NP (NNP Elianti) )) (. .) )</p>\n<p>因为不一定是二叉树，所以要先预处理成二叉树，这里全部借用了github上别人的代码来进行预处理，二叉化之后变成了这样：<br>(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP Elianti))) (. .))</p>\n<p>然后将整个数据集中出现次数过小的单词替换为unk：<br>(S (S*^. (NP-SBJ (NNP Ms.) (NNP Haag)) (VP (VBZ plays) (NP_NNP &lt; unk&gt;))) (. .))</p>\n<p>最后还需要将每个训练数据对应的句子单独提取出来，方便训练时用，比如上面的例子提取出来就是：<br>Ms. Haag plays Elianti . </p>\n<h1 id=\"文法规则提取\"><a href=\"#文法规则提取\" class=\"headerlink\" title=\"文法规则提取\"></a>文法规则提取</h1><hr>\n<p>接着还是利用现成代码将数据集中出现的所有文法生成规则提取出来，保存到文件pcfg中。</p>\n<h1 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h1><hr>\n<p>这部分大部分代码是自己写的，也有一部分是从CKY算法代码修改得到的。</p>\n<p>首先将数据集中出现的所有单词和词向量数组下标一一映射，词性类别也做一个映射吧。</p>\n<p>然后初始化神经网络的各个参数，要训练的权值矩阵一共有两个，$W$和$d$，接下来就是训练了。</p>\n<p>训练过程是这样的，采用了动态规划的思想，用三个维度$i$，$j$，$A$来表示这个句子从第$i$个位置到第$j$个位置且类别为$A$的信息。<br>用$e(i,j,A)$作为每个结点的向量表示，然后对他的儿子的所有情况进行遍历：<br>\\[e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]\\]<br>然后计算这个节点的分数：<br>\\[s(i,j,A) = d \\cdot e(i,j,A)\\]<br>找出能使得分数最大的那个分割点和对应的类别，保存下来。</p>\n<p>这样动态规划做好之后一棵树实际上就已经建好了，再回溯生成这棵树就好了。</p>\n<p>但是这棵树很不准确的，刚开始就是随意生成的，所以要和标准树进行对比，计算出损失函数进行反向传播。</p>\n<p>所以接下来用当前的权值矩阵计算出标准树的分数，然后对刚刚生成的结果和这个标准括号序列进行对比，我就直接粗暴统计出两个字符串有多少位置不同，记为$cnt$。</p>\n<p>总的损失函数就是：<br>\\[\\left| {result - gold + cnt} \\right|\\]<br>然后进行反向传播就行了。</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><hr>\n<p>在测试集上面直接照搬训练过程代码就行了，按照动态规划生成一棵树就行了。</p>\n<p>然后用现成的代码和标准结果进行对比，得出F1值。</p>\n<h1 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h1><hr>\n<p>总的来说，大体就是这样的了，但是还有很多问题没有解决。</p>\n<ul>\n<li>动态规划结合一个节点的两个子节点的时候，现在还只是直接连接的，准备将其改成LSTM的结点函数。</li>\n<li>改成LSTM的话就有左右结点的顺序问题，准备再加一个维度，0和1分别表示左右儿子的顺序。</li>\n<li>我在$e(i,j,A) = \\tanh (W \\cdot [e(i,k,B),e(k,j,C)]) + type[A]$加了一个$type[A]$，其实原来没有这个的，但是不加会出现一个很大的问题，就是会出现A1-&gt;B,C和A2-&gt;B,C这两种情况，但是不加的话两种情况算出的分数是一样的，先入为主，后算的那种就永远不会考虑了。所以我强行加上了父节点类型向量，来区别这两种情况。但是具体怎么加还没有个说法，我只是随便试试。</li>\n<li>关于损失函数，论文里写的就是$result - gold + cnt$，但是这样并不能保证非负，我就强行加上了一个绝对值。貌似也可以收敛了，到底应该怎么搞不清楚。</li>\n</ul>\n"},{"title":"Faster Shift-Reduce Constituent Parsing with a Non-Binary, Bottom-Up Strategy","date":"2018-11-06T07:16:44.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33516495&auto=1&height=66\"></iframe></div>\n\n\n论文地址：[Faster Shift-Reduce Constituent Parsing with a Non-Binary, Bottom-Up Strategy](http://arxiv.org/abs/1804.07961)\n\n# 介绍\n---\n这篇论文提出了一种非二叉化、自底向上的转移系统，并且针对它提出了一种Dynamic Oracle，用损失函数的形式来实现它。\n\n之前的模型针对多叉树的处理都是采用head规则进行二叉化，或者采用空结点作为临时结点来进行隐式二叉化。但是本文将REDUCE动作扩展为REDUCE-k动作，从而可以对k叉树进行预测，这样减少了很多二叉树预测的中间过程，降低了模型的训练时间。并且为了提升准确率，还提出了一种用损失函数实现的Dynamic Oracle。\n\n自底向上的转移系统就不详细介绍了，之前都已经介绍过了，这里只说明一下之后要用到的记号。\n\n转移系统由一个stack和buffer组成，每个时刻的状态通常表示为$c = \\left\\langle {\\sum ,i,f,\\gamma} \\right\\rangle $，四个元素分别表示stack、buffer第一个单词的单词下标、分析结束标记、已经生成的短语成分的集合。\n\n# 自底向上的转移系统\n---\n传统的转移系统REDUCE操作都只是将栈顶的两个元素归约为一个结点，而本文提出的转移系统将REDUCE扩展为REDUCE-X#k动作，归约栈顶概率最大的k个结点为结点X。举个例子，对于产生式$VP \\to is \\ ADVP \\ ADJP$，使用的动作为REDUCE-VP#3，表示归约栈顶的三个结点。\n\n![](1.jpg)\n![](2.jpg)\n具体的转移系统和例子如上图所示，为了区分具有不同数量儿子的结点X，将结点的label细化为X#k，表示具有k个儿子。例如对于VP结点，如果有两个儿子，那么它的label就是VP#2，如果有三个儿子就是VP#3。\n\n# Dynamic Oracle\n---\n本文采用的Dynamic Oracle是用损失函数来实现的，损失函数衡量的是状态c可以产生的最优句法树和标准句法树之间的距离，这样就可以计算出采取每一个动作之后下一个状态的损失函数值，选择损失函数值最小的动作。\n\n对于状态c，损失函数$l(c)$定义为状态c可以产生的最终的句法树t和标准句法树$t_G$之间的最小汉明距离，即：\n\\\\[l(c) = \\min_{t|c \\to t} \\mathcal{L}(t, t_G)\\\\]\n一个训练正确的Dynamic Oracle应当使得预测的下一个状态$\\tau(c)$不会增加损失函数值，即\n\\\\[l(\\tau(c)) - l(c) = 0\\\\]\n这个最小汉明损失可以定义为$\\left| { {t_G}\\backslash t} \\right| + \\left| {t\\backslash {t_G}} \\right|$，下面就将讨论这两部分怎么计算，主要用到短语的可达性和可分解性。\n\n## 短语的可达性\n在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：\n* $(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。\n* $j \\le l < r$（因为短语还在buffer中，所以可以通过不断SHIFT然后REDUCE得到）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的）。\n\n枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。\n\n## 损失函数\n对于每一个状态c，可以定义它的损失函数为\n\\\\[l(c) = \\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\\\]\n其中第一个因子惩罚的是False Negative短语，也就是漏报的短语，即正确的但是不可能被生成的短语。第二个因子惩罚的是False Positive短语，也就是误报的短语，即已经生成的但是是错的短语。\n\n## 正确性证明\n那么我们如何证明，按照这个最小的损失函数值走下去，一定能得到最优的句法树呢？也就是要证明，这个状态c的损失函数，的确就是从状态c能得到的最优句法树和标准树的汉明损失。\n\\\\[\\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\\\]\n首先证明这个损失函数是**短语可分解**的，也就是证明，对于一个标准树中的短语集合，如果其中的每一个短语都是各自可达的，那么整个集合中的短语可以同时生成。\n\n证明这个性质要用到数学归纳法。首先$m = 1$时显然成立，然后假设集合元素个数为$m, (m > 1)$时性质成立，下面证明集合T元素个数为$m + 1$时性质也成立。\n\n令$(X, l, r)$表示集合T中偏序最小的短语，即l是最小的，如果l有相等的，就再取r最小的。根据假设，$(X, l, r)$是从状态c可到达的gold短语。令$T' = T \\backslash (X, l, r)$，所以集合T'有m个元素，根据递归定义，整个集合都是从状态c可达的。\n\n如果短语的可达性条件中第一种情况满足，那么$(X, l, r)$已经存在于状态c已生成短语集合中了，那么整个T集合当然是可达的。\n\n如果第二种情况满足，即$j \\le l < r$，那么可以通过不断SHIFT再一个REDUCE来得到短语$(X, l, r)$。那么T'集合又如何能全部生成呢？可以发现T'集合中的短语，要么是左边界等于l并且右边界大于r的（根据定义），这种可以继续SHUFT再REDUCE得到（满足条件3）。要么是左边界大于等于r的（因为都是标准树中的短语，所以不会有边界交叉），这种满足条件2，也可达。**论文中就说了这两种情况，是否还存在一种左边界大于等于l，右边界小于等于r的情况呢？当然这种情况满足条件1，因为在生成$(X, l, r)$的时候就已经生成了。**所以最终T集合还是全部可达的。\n\n如果第三种情况满足，即l是栈里某个短语的边界，而r大于等于j，那么这种情况依然可以通过不断SHIFT再REDUCE得到，而T集合仍然可以全部可达，原因和上一种情况类似。\n\n所以可以证得，从状态c开始，存在某个转移序列，使得所有可达短语全部生成，那么只有不可达的短语会被错过，即：\n\\\\[\\min_{\\gamma |c \\to \\gamma} \\left| {\\gamma_G \\backslash {\\gamma}} \\right| = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right|\\\\]\n\n最后一步就是证明另一项$\\left| {\\gamma \\backslash {\\gamma_G}} \\right|$等于$\\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。首先因为前者肯定包含了后者，因为随着转移的进行，预测错误的短语只会增加，不会减少。然后证明最优句法树不会再增加新的错误短语，即从状态c开始的最优句法树一定是$\\mathcal{R}(c, \\gamma_G) \\cup \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。这里不是很好想，可以想象从包含当前栈顶短语的最小的标准短语开始，一步步的进行转移，按照[James and Huang](https://www.aclweb.org/anthology/D/D16/D16-1001.pdf)中的Dynamic Oracle。\n\n至此已经证明了，这个损失函数可以保证每一步都按照最优的策略来进行转移。\n\n# 实验\n---\n实验采用的转移模型都是基于[Dyer et al.](http://aclweb.org/anthology/N16-1024)，并且也采用了[James and Huang](https://www.aclweb.org/anthology/D/D16/D16-1001.pdf)中的exploration策略来增加错误状态，提高Dynamic Oracle的准确率。\n\n在PTB上的实验结果如下：\n![](3.jpg)\n\n结果其实也不是很高，现在来看算低的了，本文只和其他的转移系统结果进行了比较，可以说在转移系统上还算比较高的吧，虽然今年转移系统也做到了92.0了。在运行速度上，本文的模型也比其他转移系统略有提升，我感觉虽然不需要二叉化了，但是REDUCE#k动作的增加同样会增加复杂度，这是自底向上转移系统的一个固有的问题。\n\n# 总结\n---\n本文提出了一个非二叉化的自底向上的转移系统，主要有如下几个贡献点吧：\n* 非二叉化预测，采用REDUCE#k动作。\n* 采用损失函数来实现Dynamic Oracle。\n* 准确率上超过了除了in-order的大多数转移系统。\n* 训练速度上是所有转移系统中最快的。\n\n看完这篇，我准备在chart-based的top-down模型上面也搞一个这种Dynamic Oracle试试，需要改变的就是每个状态的损失函数，现在的F1还只有91.87，希望能有所突破吧。","source":"_posts/arxiv-18-SR-CP-bottom-up.md","raw":"---\ntitle: Faster Shift-Reduce Constituent Parsing with a Non-Binary, Bottom-Up Strategy\ndate: 2018-11-06 15:16:44\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33516495&auto=1&height=66\"></iframe></div>\n\n\n论文地址：[Faster Shift-Reduce Constituent Parsing with a Non-Binary, Bottom-Up Strategy](http://arxiv.org/abs/1804.07961)\n\n# 介绍\n---\n这篇论文提出了一种非二叉化、自底向上的转移系统，并且针对它提出了一种Dynamic Oracle，用损失函数的形式来实现它。\n\n之前的模型针对多叉树的处理都是采用head规则进行二叉化，或者采用空结点作为临时结点来进行隐式二叉化。但是本文将REDUCE动作扩展为REDUCE-k动作，从而可以对k叉树进行预测，这样减少了很多二叉树预测的中间过程，降低了模型的训练时间。并且为了提升准确率，还提出了一种用损失函数实现的Dynamic Oracle。\n\n自底向上的转移系统就不详细介绍了，之前都已经介绍过了，这里只说明一下之后要用到的记号。\n\n转移系统由一个stack和buffer组成，每个时刻的状态通常表示为$c = \\left\\langle {\\sum ,i,f,\\gamma} \\right\\rangle $，四个元素分别表示stack、buffer第一个单词的单词下标、分析结束标记、已经生成的短语成分的集合。\n\n# 自底向上的转移系统\n---\n传统的转移系统REDUCE操作都只是将栈顶的两个元素归约为一个结点，而本文提出的转移系统将REDUCE扩展为REDUCE-X#k动作，归约栈顶概率最大的k个结点为结点X。举个例子，对于产生式$VP \\to is \\ ADVP \\ ADJP$，使用的动作为REDUCE-VP#3，表示归约栈顶的三个结点。\n\n![](1.jpg)\n![](2.jpg)\n具体的转移系统和例子如上图所示，为了区分具有不同数量儿子的结点X，将结点的label细化为X#k，表示具有k个儿子。例如对于VP结点，如果有两个儿子，那么它的label就是VP#2，如果有三个儿子就是VP#3。\n\n# Dynamic Oracle\n---\n本文采用的Dynamic Oracle是用损失函数来实现的，损失函数衡量的是状态c可以产生的最优句法树和标准句法树之间的距离，这样就可以计算出采取每一个动作之后下一个状态的损失函数值，选择损失函数值最小的动作。\n\n对于状态c，损失函数$l(c)$定义为状态c可以产生的最终的句法树t和标准句法树$t_G$之间的最小汉明距离，即：\n\\\\[l(c) = \\min_{t|c \\to t} \\mathcal{L}(t, t_G)\\\\]\n一个训练正确的Dynamic Oracle应当使得预测的下一个状态$\\tau(c)$不会增加损失函数值，即\n\\\\[l(\\tau(c)) - l(c) = 0\\\\]\n这个最小汉明损失可以定义为$\\left| { {t_G}\\backslash t} \\right| + \\left| {t\\backslash {t_G}} \\right|$，下面就将讨论这两部分怎么计算，主要用到短语的可达性和可分解性。\n\n## 短语的可达性\n在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：\n* $(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。\n* $j \\le l < r$（因为短语还在buffer中，所以可以通过不断SHIFT然后REDUCE得到）。\n* $l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的）。\n\n枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。\n\n## 损失函数\n对于每一个状态c，可以定义它的损失函数为\n\\\\[l(c) = \\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\\\]\n其中第一个因子惩罚的是False Negative短语，也就是漏报的短语，即正确的但是不可能被生成的短语。第二个因子惩罚的是False Positive短语，也就是误报的短语，即已经生成的但是是错的短语。\n\n## 正确性证明\n那么我们如何证明，按照这个最小的损失函数值走下去，一定能得到最优的句法树呢？也就是要证明，这个状态c的损失函数，的确就是从状态c能得到的最优句法树和标准树的汉明损失。\n\\\\[\\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\\\]\n首先证明这个损失函数是**短语可分解**的，也就是证明，对于一个标准树中的短语集合，如果其中的每一个短语都是各自可达的，那么整个集合中的短语可以同时生成。\n\n证明这个性质要用到数学归纳法。首先$m = 1$时显然成立，然后假设集合元素个数为$m, (m > 1)$时性质成立，下面证明集合T元素个数为$m + 1$时性质也成立。\n\n令$(X, l, r)$表示集合T中偏序最小的短语，即l是最小的，如果l有相等的，就再取r最小的。根据假设，$(X, l, r)$是从状态c可到达的gold短语。令$T' = T \\backslash (X, l, r)$，所以集合T'有m个元素，根据递归定义，整个集合都是从状态c可达的。\n\n如果短语的可达性条件中第一种情况满足，那么$(X, l, r)$已经存在于状态c已生成短语集合中了，那么整个T集合当然是可达的。\n\n如果第二种情况满足，即$j \\le l < r$，那么可以通过不断SHIFT再一个REDUCE来得到短语$(X, l, r)$。那么T'集合又如何能全部生成呢？可以发现T'集合中的短语，要么是左边界等于l并且右边界大于r的（根据定义），这种可以继续SHUFT再REDUCE得到（满足条件3）。要么是左边界大于等于r的（因为都是标准树中的短语，所以不会有边界交叉），这种满足条件2，也可达。**论文中就说了这两种情况，是否还存在一种左边界大于等于l，右边界小于等于r的情况呢？当然这种情况满足条件1，因为在生成$(X, l, r)$的时候就已经生成了。**所以最终T集合还是全部可达的。\n\n如果第三种情况满足，即l是栈里某个短语的边界，而r大于等于j，那么这种情况依然可以通过不断SHIFT再REDUCE得到，而T集合仍然可以全部可达，原因和上一种情况类似。\n\n所以可以证得，从状态c开始，存在某个转移序列，使得所有可达短语全部生成，那么只有不可达的短语会被错过，即：\n\\\\[\\min_{\\gamma |c \\to \\gamma} \\left| {\\gamma_G \\backslash {\\gamma}} \\right| = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right|\\\\]\n\n最后一步就是证明另一项$\\left| {\\gamma \\backslash {\\gamma_G}} \\right|$等于$\\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。首先因为前者肯定包含了后者，因为随着转移的进行，预测错误的短语只会增加，不会减少。然后证明最优句法树不会再增加新的错误短语，即从状态c开始的最优句法树一定是$\\mathcal{R}(c, \\gamma_G) \\cup \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。这里不是很好想，可以想象从包含当前栈顶短语的最小的标准短语开始，一步步的进行转移，按照[James and Huang](https://www.aclweb.org/anthology/D/D16/D16-1001.pdf)中的Dynamic Oracle。\n\n至此已经证明了，这个损失函数可以保证每一步都按照最优的策略来进行转移。\n\n# 实验\n---\n实验采用的转移模型都是基于[Dyer et al.](http://aclweb.org/anthology/N16-1024)，并且也采用了[James and Huang](https://www.aclweb.org/anthology/D/D16/D16-1001.pdf)中的exploration策略来增加错误状态，提高Dynamic Oracle的准确率。\n\n在PTB上的实验结果如下：\n![](3.jpg)\n\n结果其实也不是很高，现在来看算低的了，本文只和其他的转移系统结果进行了比较，可以说在转移系统上还算比较高的吧，虽然今年转移系统也做到了92.0了。在运行速度上，本文的模型也比其他转移系统略有提升，我感觉虽然不需要二叉化了，但是REDUCE#k动作的增加同样会增加复杂度，这是自底向上转移系统的一个固有的问题。\n\n# 总结\n---\n本文提出了一个非二叉化的自底向上的转移系统，主要有如下几个贡献点吧：\n* 非二叉化预测，采用REDUCE#k动作。\n* 采用损失函数来实现Dynamic Oracle。\n* 准确率上超过了除了in-order的大多数转移系统。\n* 训练速度上是所有转移系统中最快的。\n\n看完这篇，我准备在chart-based的top-down模型上面也搞一个这种Dynamic Oracle试试，需要改变的就是每个状态的损失函数，现在的F1还只有91.87，希望能有所突破吧。","slug":"arxiv-18-SR-CP-bottom-up","published":1,"updated":"2019-07-20T04:02:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982e4005q7sweutq60sl8","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33516495&auto=1&height=66\"></iframe></div>\n\n\n<p>论文地址：<a href=\"http://arxiv.org/abs/1804.07961\" target=\"_blank\" rel=\"noopener\">Faster Shift-Reduce Constituent Parsing with a Non-Binary, Bottom-Up Strategy</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇论文提出了一种非二叉化、自底向上的转移系统，并且针对它提出了一种Dynamic Oracle，用损失函数的形式来实现它。</p>\n<p>之前的模型针对多叉树的处理都是采用head规则进行二叉化，或者采用空结点作为临时结点来进行隐式二叉化。但是本文将REDUCE动作扩展为REDUCE-k动作，从而可以对k叉树进行预测，这样减少了很多二叉树预测的中间过程，降低了模型的训练时间。并且为了提升准确率，还提出了一种用损失函数实现的Dynamic Oracle。</p>\n<p>自底向上的转移系统就不详细介绍了，之前都已经介绍过了，这里只说明一下之后要用到的记号。</p>\n<p>转移系统由一个stack和buffer组成，每个时刻的状态通常表示为$c = \\left\\langle {\\sum ,i,f,\\gamma} \\right\\rangle $，四个元素分别表示stack、buffer第一个单词的单词下标、分析结束标记、已经生成的短语成分的集合。</p>\n<h1 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h1><hr>\n<p>传统的转移系统REDUCE操作都只是将栈顶的两个元素归约为一个结点，而本文提出的转移系统将REDUCE扩展为REDUCE-X#k动作，归约栈顶概率最大的k个结点为结点X。举个例子，对于产生式$VP \\to is \\ ADVP \\ ADJP$，使用的动作为REDUCE-VP#3，表示归约栈顶的三个结点。</p>\n<p><img src=\"1.jpg\" alt><br><img src=\"2.jpg\" alt><br>具体的转移系统和例子如上图所示，为了区分具有不同数量儿子的结点X，将结点的label细化为X#k，表示具有k个儿子。例如对于VP结点，如果有两个儿子，那么它的label就是VP#2，如果有三个儿子就是VP#3。</p>\n<h1 id=\"Dynamic-Oracle\"><a href=\"#Dynamic-Oracle\" class=\"headerlink\" title=\"Dynamic Oracle\"></a>Dynamic Oracle</h1><hr>\n<p>本文采用的Dynamic Oracle是用损失函数来实现的，损失函数衡量的是状态c可以产生的最优句法树和标准句法树之间的距离，这样就可以计算出采取每一个动作之后下一个状态的损失函数值，选择损失函数值最小的动作。</p>\n<p>对于状态c，损失函数$l(c)$定义为状态c可以产生的最终的句法树t和标准句法树$t_G$之间的最小汉明距离，即：<br>\\[l(c) = \\min_{t|c \\to t} \\mathcal{L}(t, t_G)\\]<br>一个训练正确的Dynamic Oracle应当使得预测的下一个状态$\\tau(c)$不会增加损失函数值，即<br>\\[l(\\tau(c)) - l(c) = 0\\]<br>这个最小汉明损失可以定义为$\\left| { {t_G}\\backslash t} \\right| + \\left| {t\\backslash {t_G}} \\right|$，下面就将讨论这两部分怎么计算，主要用到短语的可达性和可分解性。</p>\n<h2 id=\"短语的可达性\"><a href=\"#短语的可达性\" class=\"headerlink\" title=\"短语的可达性\"></a>短语的可达性</h2><p>在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：</p>\n<ul>\n<li>$(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。</li>\n<li>$j \\le l &lt; r$（因为短语还在buffer中，所以可以通过不断SHIFT然后REDUCE得到）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的）。</li>\n</ul>\n<p>枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。</p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>对于每一个状态c，可以定义它的损失函数为<br>\\[l(c) = \\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\]<br>其中第一个因子惩罚的是False Negative短语，也就是漏报的短语，即正确的但是不可能被生成的短语。第二个因子惩罚的是False Positive短语，也就是误报的短语，即已经生成的但是是错的短语。</p>\n<h2 id=\"正确性证明\"><a href=\"#正确性证明\" class=\"headerlink\" title=\"正确性证明\"></a>正确性证明</h2><p>那么我们如何证明，按照这个最小的损失函数值走下去，一定能得到最优的句法树呢？也就是要证明，这个状态c的损失函数，的确就是从状态c能得到的最优句法树和标准树的汉明损失。<br>\\[\\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\]<br>首先证明这个损失函数是<strong>短语可分解</strong>的，也就是证明，对于一个标准树中的短语集合，如果其中的每一个短语都是各自可达的，那么整个集合中的短语可以同时生成。</p>\n<p>证明这个性质要用到数学归纳法。首先$m = 1$时显然成立，然后假设集合元素个数为$m, (m &gt; 1)$时性质成立，下面证明集合T元素个数为$m + 1$时性质也成立。</p>\n<p>令$(X, l, r)$表示集合T中偏序最小的短语，即l是最小的，如果l有相等的，就再取r最小的。根据假设，$(X, l, r)$是从状态c可到达的gold短语。令$T’ = T \\backslash (X, l, r)$，所以集合T’有m个元素，根据递归定义，整个集合都是从状态c可达的。</p>\n<p>如果短语的可达性条件中第一种情况满足，那么$(X, l, r)$已经存在于状态c已生成短语集合中了，那么整个T集合当然是可达的。</p>\n<p>如果第二种情况满足，即$j \\le l &lt; r$，那么可以通过不断SHIFT再一个REDUCE来得到短语$(X, l, r)$。那么T’集合又如何能全部生成呢？可以发现T’集合中的短语，要么是左边界等于l并且右边界大于r的（根据定义），这种可以继续SHUFT再REDUCE得到（满足条件3）。要么是左边界大于等于r的（因为都是标准树中的短语，所以不会有边界交叉），这种满足条件2，也可达。<strong>论文中就说了这两种情况，是否还存在一种左边界大于等于l，右边界小于等于r的情况呢？当然这种情况满足条件1，因为在生成$(X, l, r)$的时候就已经生成了。</strong>所以最终T集合还是全部可达的。</p>\n<p>如果第三种情况满足，即l是栈里某个短语的边界，而r大于等于j，那么这种情况依然可以通过不断SHIFT再REDUCE得到，而T集合仍然可以全部可达，原因和上一种情况类似。</p>\n<p>所以可以证得，从状态c开始，存在某个转移序列，使得所有可达短语全部生成，那么只有不可达的短语会被错过，即：<br>\\[\\min_{\\gamma |c \\to \\gamma} \\left| {\\gamma_G \\backslash {\\gamma}} \\right| = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right|\\]</p>\n<p>最后一步就是证明另一项$\\left| {\\gamma \\backslash {\\gamma_G}} \\right|$等于$\\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。首先因为前者肯定包含了后者，因为随着转移的进行，预测错误的短语只会增加，不会减少。然后证明最优句法树不会再增加新的错误短语，即从状态c开始的最优句法树一定是$\\mathcal{R}(c, \\gamma_G) \\cup \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。这里不是很好想，可以想象从包含当前栈顶短语的最小的标准短语开始，一步步的进行转移，按照<a href=\"https://www.aclweb.org/anthology/D/D16/D16-1001.pdf\" target=\"_blank\" rel=\"noopener\">James and Huang</a>中的Dynamic Oracle。</p>\n<p>至此已经证明了，这个损失函数可以保证每一步都按照最优的策略来进行转移。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验采用的转移模型都是基于<a href=\"http://aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Dyer et al.</a>，并且也采用了<a href=\"https://www.aclweb.org/anthology/D/D16/D16-1001.pdf\" target=\"_blank\" rel=\"noopener\">James and Huang</a>中的exploration策略来增加错误状态，提高Dynamic Oracle的准确率。</p>\n<p>在PTB上的实验结果如下：<br><img src=\"3.jpg\" alt></p>\n<p>结果其实也不是很高，现在来看算低的了，本文只和其他的转移系统结果进行了比较，可以说在转移系统上还算比较高的吧，虽然今年转移系统也做到了92.0了。在运行速度上，本文的模型也比其他转移系统略有提升，我感觉虽然不需要二叉化了，但是REDUCE#k动作的增加同样会增加复杂度，这是自底向上转移系统的一个固有的问题。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文提出了一个非二叉化的自底向上的转移系统，主要有如下几个贡献点吧：</p>\n<ul>\n<li>非二叉化预测，采用REDUCE#k动作。</li>\n<li>采用损失函数来实现Dynamic Oracle。</li>\n<li>准确率上超过了除了in-order的大多数转移系统。</li>\n<li>训练速度上是所有转移系统中最快的。</li>\n</ul>\n<p>看完这篇，我准备在chart-based的top-down模型上面也搞一个这种Dynamic Oracle试试，需要改变的就是每个状态的损失函数，现在的F1还只有91.87，希望能有所突破吧。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33516495&auto=1&height=66\"></iframe></div>\n\n\n<p>论文地址：<a href=\"http://arxiv.org/abs/1804.07961\" target=\"_blank\" rel=\"noopener\">Faster Shift-Reduce Constituent Parsing with a Non-Binary, Bottom-Up Strategy</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>这篇论文提出了一种非二叉化、自底向上的转移系统，并且针对它提出了一种Dynamic Oracle，用损失函数的形式来实现它。</p>\n<p>之前的模型针对多叉树的处理都是采用head规则进行二叉化，或者采用空结点作为临时结点来进行隐式二叉化。但是本文将REDUCE动作扩展为REDUCE-k动作，从而可以对k叉树进行预测，这样减少了很多二叉树预测的中间过程，降低了模型的训练时间。并且为了提升准确率，还提出了一种用损失函数实现的Dynamic Oracle。</p>\n<p>自底向上的转移系统就不详细介绍了，之前都已经介绍过了，这里只说明一下之后要用到的记号。</p>\n<p>转移系统由一个stack和buffer组成，每个时刻的状态通常表示为$c = \\left\\langle {\\sum ,i,f,\\gamma} \\right\\rangle $，四个元素分别表示stack、buffer第一个单词的单词下标、分析结束标记、已经生成的短语成分的集合。</p>\n<h1 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h1><hr>\n<p>传统的转移系统REDUCE操作都只是将栈顶的两个元素归约为一个结点，而本文提出的转移系统将REDUCE扩展为REDUCE-X#k动作，归约栈顶概率最大的k个结点为结点X。举个例子，对于产生式$VP \\to is \\ ADVP \\ ADJP$，使用的动作为REDUCE-VP#3，表示归约栈顶的三个结点。</p>\n<p><img src=\"1.jpg\" alt><br><img src=\"2.jpg\" alt><br>具体的转移系统和例子如上图所示，为了区分具有不同数量儿子的结点X，将结点的label细化为X#k，表示具有k个儿子。例如对于VP结点，如果有两个儿子，那么它的label就是VP#2，如果有三个儿子就是VP#3。</p>\n<h1 id=\"Dynamic-Oracle\"><a href=\"#Dynamic-Oracle\" class=\"headerlink\" title=\"Dynamic Oracle\"></a>Dynamic Oracle</h1><hr>\n<p>本文采用的Dynamic Oracle是用损失函数来实现的，损失函数衡量的是状态c可以产生的最优句法树和标准句法树之间的距离，这样就可以计算出采取每一个动作之后下一个状态的损失函数值，选择损失函数值最小的动作。</p>\n<p>对于状态c，损失函数$l(c)$定义为状态c可以产生的最终的句法树t和标准句法树$t_G$之间的最小汉明距离，即：<br>\\[l(c) = \\min_{t|c \\to t} \\mathcal{L}(t, t_G)\\]<br>一个训练正确的Dynamic Oracle应当使得预测的下一个状态$\\tau(c)$不会增加损失函数值，即<br>\\[l(\\tau(c)) - l(c) = 0\\]<br>这个最小汉明损失可以定义为$\\left| { {t_G}\\backslash t} \\right| + \\left| {t\\backslash {t_G}} \\right|$，下面就将讨论这两部分怎么计算，主要用到短语的可达性和可分解性。</p>\n<h2 id=\"短语的可达性\"><a href=\"#短语的可达性\" class=\"headerlink\" title=\"短语的可达性\"></a>短语的可达性</h2><p>在这里用短语集合${(X, l, r)}$来表示一棵句法树，我们假设状态c的短语集合为$\\sum = [(Y_p, i_p, i_{p-1}) \\cdots (Y_2, i_2, i_1)|(Y_1, i_1, j)]$，那么我们说，标准句法树中的一个短语$(X, l, r) \\in \\gamma_G$当且仅当满足如下三个条件之一时，称它是“各自可达短语”：</p>\n<ul>\n<li>$(X, l, r) \\in \\gamma_c$（因为短语已经包含在了状态c已生成的短语集合里，那么它当然是可达的）。</li>\n<li>$j \\le l &lt; r$（因为短语还在buffer中，所以可以通过不断SHIFT然后REDUCE得到）。</li>\n<li>$l \\in \\{i_k | 1 \\le k \\le p\\} \\wedge j \\le r$（这种情况表明了短语的左端点恰好位于栈里某个短语的边界处，而右端点又还在buffer里，所以还可以通过不断SHUFT然后REDUCE得到短语。但是如果左端点不是栈里短语的边界，那说明产生了交叉，自然不会可达了。而如果右端点已经在栈里了，那之后也不会得到了，因为转移系统每次都是REDUCE栈顶的短语，不可能从栈里面开始REDUCE的）。</li>\n</ul>\n<p>枚举标准树中的所有短语，根据以上规则可以得到可达短语集合$\\mathcal{R}(c, \\gamma_G)$，然后从标准短语集合中排除掉这部分短语，剩下的就是不可达短语集合$\\mathcal{U}(c, \\gamma_G) = \\gamma_G \\backslash \\mathcal{R}(c, \\gamma_G)$。这部分短语就是不论采取何种动作序列，最后都不可能生成的短语集合。</p>\n<h2 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h2><p>对于每一个状态c，可以定义它的损失函数为<br>\\[l(c) = \\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\]<br>其中第一个因子惩罚的是False Negative短语，也就是漏报的短语，即正确的但是不可能被生成的短语。第二个因子惩罚的是False Positive短语，也就是误报的短语，即已经生成的但是是错的短语。</p>\n<h2 id=\"正确性证明\"><a href=\"#正确性证明\" class=\"headerlink\" title=\"正确性证明\"></a>正确性证明</h2><p>那么我们如何证明，按照这个最小的损失函数值走下去，一定能得到最优的句法树呢？也就是要证明，这个状态c的损失函数，的确就是从状态c能得到的最优句法树和标准树的汉明损失。<br>\\[\\min_{\\gamma |c \\to \\gamma} \\mathcal{L}(\\gamma, \\gamma_G) = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right| + \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|\\]<br>首先证明这个损失函数是<strong>短语可分解</strong>的，也就是证明，对于一个标准树中的短语集合，如果其中的每一个短语都是各自可达的，那么整个集合中的短语可以同时生成。</p>\n<p>证明这个性质要用到数学归纳法。首先$m = 1$时显然成立，然后假设集合元素个数为$m, (m &gt; 1)$时性质成立，下面证明集合T元素个数为$m + 1$时性质也成立。</p>\n<p>令$(X, l, r)$表示集合T中偏序最小的短语，即l是最小的，如果l有相等的，就再取r最小的。根据假设，$(X, l, r)$是从状态c可到达的gold短语。令$T’ = T \\backslash (X, l, r)$，所以集合T’有m个元素，根据递归定义，整个集合都是从状态c可达的。</p>\n<p>如果短语的可达性条件中第一种情况满足，那么$(X, l, r)$已经存在于状态c已生成短语集合中了，那么整个T集合当然是可达的。</p>\n<p>如果第二种情况满足，即$j \\le l &lt; r$，那么可以通过不断SHIFT再一个REDUCE来得到短语$(X, l, r)$。那么T’集合又如何能全部生成呢？可以发现T’集合中的短语，要么是左边界等于l并且右边界大于r的（根据定义），这种可以继续SHUFT再REDUCE得到（满足条件3）。要么是左边界大于等于r的（因为都是标准树中的短语，所以不会有边界交叉），这种满足条件2，也可达。<strong>论文中就说了这两种情况，是否还存在一种左边界大于等于l，右边界小于等于r的情况呢？当然这种情况满足条件1，因为在生成$(X, l, r)$的时候就已经生成了。</strong>所以最终T集合还是全部可达的。</p>\n<p>如果第三种情况满足，即l是栈里某个短语的边界，而r大于等于j，那么这种情况依然可以通过不断SHIFT再REDUCE得到，而T集合仍然可以全部可达，原因和上一种情况类似。</p>\n<p>所以可以证得，从状态c开始，存在某个转移序列，使得所有可达短语全部生成，那么只有不可达的短语会被错过，即：<br>\\[\\min_{\\gamma |c \\to \\gamma} \\left| {\\gamma_G \\backslash {\\gamma}} \\right| = \\left| { \\mathcal{U}(c, \\gamma_G)} \\right|\\]</p>\n<p>最后一步就是证明另一项$\\left| {\\gamma \\backslash {\\gamma_G}} \\right|$等于$\\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。首先因为前者肯定包含了后者，因为随着转移的进行，预测错误的短语只会增加，不会减少。然后证明最优句法树不会再增加新的错误短语，即从状态c开始的最优句法树一定是$\\mathcal{R}(c, \\gamma_G) \\cup \\left| {\\gamma_c \\backslash {\\gamma_G}} \\right|$。这里不是很好想，可以想象从包含当前栈顶短语的最小的标准短语开始，一步步的进行转移，按照<a href=\"https://www.aclweb.org/anthology/D/D16/D16-1001.pdf\" target=\"_blank\" rel=\"noopener\">James and Huang</a>中的Dynamic Oracle。</p>\n<p>至此已经证明了，这个损失函数可以保证每一步都按照最优的策略来进行转移。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>实验采用的转移模型都是基于<a href=\"http://aclweb.org/anthology/N16-1024\" target=\"_blank\" rel=\"noopener\">Dyer et al.</a>，并且也采用了<a href=\"https://www.aclweb.org/anthology/D/D16/D16-1001.pdf\" target=\"_blank\" rel=\"noopener\">James and Huang</a>中的exploration策略来增加错误状态，提高Dynamic Oracle的准确率。</p>\n<p>在PTB上的实验结果如下：<br><img src=\"3.jpg\" alt></p>\n<p>结果其实也不是很高，现在来看算低的了，本文只和其他的转移系统结果进行了比较，可以说在转移系统上还算比较高的吧，虽然今年转移系统也做到了92.0了。在运行速度上，本文的模型也比其他转移系统略有提升，我感觉虽然不需要二叉化了，但是REDUCE#k动作的增加同样会增加复杂度，这是自底向上转移系统的一个固有的问题。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>本文提出了一个非二叉化的自底向上的转移系统，主要有如下几个贡献点吧：</p>\n<ul>\n<li>非二叉化预测，采用REDUCE#k动作。</li>\n<li>采用损失函数来实现Dynamic Oracle。</li>\n<li>准确率上超过了除了in-order的大多数转移系统。</li>\n<li>训练速度上是所有转移系统中最快的。</li>\n</ul>\n<p>看完这篇，我准备在chart-based的top-down模型上面也搞一个这种Dynamic Oracle试试，需要改变的就是每个状态的损失函数，现在的F1还只有91.87，希望能有所突破吧。</p>\n"},{"title":"保研第一，我还是选择留在了本校","date":"2017-09-19T06:41:11.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"保研去哪？其实我刚开始也纠结过。看到其他同学忙着申报各大名校，我也曾经动摇过，但是现在却没什么感觉了。很多人不理解为什么第一不去试试清北复交，我承认，这些学校是优势很大，毕竟还是高了一个档次的。\n想当年高考时，我的梦想就是考上清华，但是最后考砸了只能来了华师。现在想来也罢了，或许本来就没有那个实力吧。从小学开始，我就一直是考上了最好的学校却去了低一个档次的学校。那时候都是因为体质不好吧，不让去太远的学校，现在反而习惯了那种拿第一的感觉。\n暑假开始前，很多人就准备报名夏令营了，我却回家考驾照了，一个也没报。其实当时就已经打算留读本校了，当时考虑是研究生阶段学校影响没有导师和专业强了，而且其他学校导师也都不熟悉，很难找到一个人品好学术好的好导师，于是就决心本校找一个了。其他原因也都是些无关紧要的了，比如本校环境熟悉、还不用大费周折搬家等等，说起来挺幼稚，哪有前途重要。\n现在也差不多定了吧，我觉得还是成事在人吧。既然自己选择了这条路，不去走更宽敞的路，那就要把它走好。去了好学校不能骄纵，留在差学校也不能自暴自弃吧，就当作是激励自己的动力吧。\n还是谢谢大家的关心，让你们失望了，我不是没有梦想，也不是懒。只要你足够努力，梦想在哪里都能发芽。\n看来不能因为保了研而放松自己了，还有那么多为了考研在奋斗的学生。下面一年三大计划：毕业论文、实习、研一的活。不管是保了研的还是还在考研的或者准备工作的，大家一起加油吧。","source":"_posts/baoyan.md","raw":"---\ntitle: 保研第一，我还是选择留在了本校\ndate: 2017-09-19 14:41:11\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 保研\ncategories:\n- 随笔\n---\n保研去哪？其实我刚开始也纠结过。看到其他同学忙着申报各大名校，我也曾经动摇过，但是现在却没什么感觉了。很多人不理解为什么第一不去试试清北复交，我承认，这些学校是优势很大，毕竟还是高了一个档次的。\n想当年高考时，我的梦想就是考上清华，但是最后考砸了只能来了华师。现在想来也罢了，或许本来就没有那个实力吧。从小学开始，我就一直是考上了最好的学校却去了低一个档次的学校。那时候都是因为体质不好吧，不让去太远的学校，现在反而习惯了那种拿第一的感觉。\n暑假开始前，很多人就准备报名夏令营了，我却回家考驾照了，一个也没报。其实当时就已经打算留读本校了，当时考虑是研究生阶段学校影响没有导师和专业强了，而且其他学校导师也都不熟悉，很难找到一个人品好学术好的好导师，于是就决心本校找一个了。其他原因也都是些无关紧要的了，比如本校环境熟悉、还不用大费周折搬家等等，说起来挺幼稚，哪有前途重要。\n现在也差不多定了吧，我觉得还是成事在人吧。既然自己选择了这条路，不去走更宽敞的路，那就要把它走好。去了好学校不能骄纵，留在差学校也不能自暴自弃吧，就当作是激励自己的动力吧。\n还是谢谢大家的关心，让你们失望了，我不是没有梦想，也不是懒。只要你足够努力，梦想在哪里都能发芽。\n看来不能因为保了研而放松自己了，还有那么多为了考研在奋斗的学生。下面一年三大计划：毕业论文、实习、研一的活。不管是保了研的还是还在考研的或者准备工作的，大家一起加油吧。","slug":"baoyan","published":1,"updated":"2019-07-19T12:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ec005t7swe6905ormb","content":"<p>保研去哪？其实我刚开始也纠结过。看到其他同学忙着申报各大名校，我也曾经动摇过，但是现在却没什么感觉了。很多人不理解为什么第一不去试试清北复交，我承认，这些学校是优势很大，毕竟还是高了一个档次的。<br>想当年高考时，我的梦想就是考上清华，但是最后考砸了只能来了华师。现在想来也罢了，或许本来就没有那个实力吧。从小学开始，我就一直是考上了最好的学校却去了低一个档次的学校。那时候都是因为体质不好吧，不让去太远的学校，现在反而习惯了那种拿第一的感觉。<br>暑假开始前，很多人就准备报名夏令营了，我却回家考驾照了，一个也没报。其实当时就已经打算留读本校了，当时考虑是研究生阶段学校影响没有导师和专业强了，而且其他学校导师也都不熟悉，很难找到一个人品好学术好的好导师，于是就决心本校找一个了。其他原因也都是些无关紧要的了，比如本校环境熟悉、还不用大费周折搬家等等，说起来挺幼稚，哪有前途重要。<br>现在也差不多定了吧，我觉得还是成事在人吧。既然自己选择了这条路，不去走更宽敞的路，那就要把它走好。去了好学校不能骄纵，留在差学校也不能自暴自弃吧，就当作是激励自己的动力吧。<br>还是谢谢大家的关心，让你们失望了，我不是没有梦想，也不是懒。只要你足够努力，梦想在哪里都能发芽。<br>看来不能因为保了研而放松自己了，还有那么多为了考研在奋斗的学生。下面一年三大计划：毕业论文、实习、研一的活。不管是保了研的还是还在考研的或者准备工作的，大家一起加油吧。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>保研去哪？其实我刚开始也纠结过。看到其他同学忙着申报各大名校，我也曾经动摇过，但是现在却没什么感觉了。很多人不理解为什么第一不去试试清北复交，我承认，这些学校是优势很大，毕竟还是高了一个档次的。<br>想当年高考时，我的梦想就是考上清华，但是最后考砸了只能来了华师。现在想来也罢了，或许本来就没有那个实力吧。从小学开始，我就一直是考上了最好的学校却去了低一个档次的学校。那时候都是因为体质不好吧，不让去太远的学校，现在反而习惯了那种拿第一的感觉。<br>暑假开始前，很多人就准备报名夏令营了，我却回家考驾照了，一个也没报。其实当时就已经打算留读本校了，当时考虑是研究生阶段学校影响没有导师和专业强了，而且其他学校导师也都不熟悉，很难找到一个人品好学术好的好导师，于是就决心本校找一个了。其他原因也都是些无关紧要的了，比如本校环境熟悉、还不用大费周折搬家等等，说起来挺幼稚，哪有前途重要。<br>现在也差不多定了吧，我觉得还是成事在人吧。既然自己选择了这条路，不去走更宽敞的路，那就要把它走好。去了好学校不能骄纵，留在差学校也不能自暴自弃吧，就当作是激励自己的动力吧。<br>还是谢谢大家的关心，让你们失望了，我不是没有梦想，也不是懒。只要你足够努力，梦想在哪里都能发芽。<br>看来不能因为保了研而放松自己了，还有那么多为了考研在奋斗的学生。下面一年三大计划：毕业论文、实习、研一的活。不管是保了研的还是还在考研的或者准备工作的，大家一起加油吧。</p>\n"},{"title":"具体数学-第10课（素数和阶乘的有趣性质）","date":"2018-04-28T06:23:58.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=25639007&auto=1&height=66\"></iframe></div>\n\n# 欧几里得数\n---\n首先我们来证明一下，素数有无穷多个。\n\n假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么我们构造下面的数字：\n\\\\[M = 2 \\cdot 3 \\cdot  \\ldots  \\cdot {P_k} + 1\\\\]\n显然$M$无法被$2,3, \\ldots ,{P_k}$中的任意一个整除，那么要么$M$可以被其他的素数整除，要么$M$自己就是一个素数。所以素数有无穷多个。\n\n下面我们来定义欧几里得数，是用递归形式来定义的：\n\\\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1\\\\]\n\n那么欧几里得数是否是素数呢？当然不是的，${e_5} = 1807 = 13 \\cdot 139$。\n\n但是欧几里得数还是有很多奇妙的性质。\n\n**性质1**\n\\\\[\\gcd ({e_m},{e_n}) = 1,m \\ne n\\\\]\n**证明：**\n假设$n > m$，那么有\n\\\\[\\gcd ({e_m},{e_n}) = \\gcd ({e_m},{e_0}{e_1} \\ldots {e_m}{e_{m + 1}} \\ldots {e_{n - 1}} + 1) = \\gcd (1,{e_m}) = 1\\\\]\n**性质2**\n如果令$q_j$等于$e_j$的最小素因子，那么${q_1},{q_2}, \\ldots $就是一个不重复的素数序列，这也证明了素数有无穷多个。\n**性质3**\n\\\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1 = ({e_{n - 1}} - 1){e_{n - 1}} + 1 = e_{n - 1}^2 - {e_{n - 1}} + 1\\\\]\n在后面的章节可以证明：\n\\\\[{e_n} = \\left\\lfloor { {E^{ {2^n}}} + \\frac{1}{2}} \\right\\rfloor \\\\]\n其中$E \\approx 1.264$\n\n下面我们稍稍探究一下下面这个数的性质：\n\\\\[{2^p} - 1\\\\]\n这个数如果是素数，那么就被叫做**梅森素数**，那么它在什么情况下是素数呢？\n\n首先$p$不能是合数，因为有\n\\\\[{2^{km}} - 1 = ({2^m} - 1)({2^{m(k - 1)}} + {2^{m(k - 2)}} +  \\cdots  + 1)\\\\]\n但是如果$p$是素数，这个数也不一定是素数，2017年年末美国一个电气工程师发现了人类历史上最大的梅森素数——${2^{77232917}} - 1$。\n\n# 阶乘\n阶乘定义如下：\n\\\\[n! = 1 \\cdot 2 \\cdot  \\ldots  \\cdot n = \\prod\\limits_{k = 1}^n k \\\\]\n所以有\n\\\\[n{!^2} = (1 \\cdot 2 \\cdot  \\ldots  \\cdot n)(n \\cdot  \\ldots  \\cdot 2 \\cdot 1) = \\prod\\limits_{k = 1}^n {k(n + 1 - k)} \\\\]\n由基本不等式可以得到\n\\\\[n \\le k(n + 1 - k) \\le \\frac{ { { {(n + 1)}^2}}}{4}\\\\]\n所以\n\\\\[\\prod\\limits_{k = 1}^n n  \\le n{!^2} \\le \\prod\\limits_{k = 1}^n {\\frac{ { { {(n + 1)}^2}}}{4}} \\\\]\n所以\n\\\\[{n^{n/2}} \\le n! \\le \\frac{ { { {(n + 1)}^n}}}{ { {2^n}}}\\\\]\n这里得到了阶乘的一个粗略范围，在后面章节中，我们会得到阶乘的一个更精确的表达式：\n\\\\[n! \\sim \\sqrt {2\\pi n} {\\left( {\\frac{n}{e}} \\right)^n}\\\\]\n这就是斯特林数，搞ACM还是很有用的。\n\n下面我们来探讨$n!$中含有多少个素因子$p$，个数记为${\\varepsilon _p}(n!)$。\n\n从特殊情况讨论起，当$p = 2$的时候，我们首先看$n!$含有多少个2，然后看有多少个4，再看有多少个8，依次下去，所以答案为：\n\\\\[{\\varepsilon _2}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {2^k}}}} \\right\\rfloor } \\\\]\n可以看出，这个答案不就是$n$的二进制表示不停右移1位，然后相加吗？所以又可以写成：\n\\\\[{\\varepsilon _2}(n!) = n - {\\nu _2}(n)\\\\]\n其中${\\nu _2}(n)$表示$n$的二进制表示中1的个数。\n\n推广到一般情况：\n\\\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor } \\\\]\n放缩一下有：\n\\\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor }  < \\sum\\limits_{k \\ge 1} {\\frac{n}{ { {p^k}}} = \\frac{n}{ {p - 1}}} \\\\]\n\n如果我们令$p = 2$和$p = 3$可以发现：\n\\\\[{\\varepsilon _2}(n!) \\approx 2{\\varepsilon _3}(n!)\\\\]\n但是这个式子在什么情况下相等呢？这仍然是一个未解之谜。\n\n所以$p$对$n!$的贡献度满足如下式子：\n\\\\[{p^{ {\\varepsilon _p}(n!)}} < {p^{\\frac{n}{ {p - 1}}}}\\\\]\n又因为$p \\le 2^{p - 1}$，所以\n\\\\[{p^{ {\\varepsilon _p}(n!)}} < {p^{\\frac{n}{ {p - 1}}}} \\le {2^n}\\\\]\n假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么有\n\\\\[n! < {({2^n})^k}\\\\]\n如果我们令$n = {2^{2k}}$，那么\n\\\\[n! < {({2^n})^k} = {2^{k{2^{2k}}}} = {2^{2k{2^{2k}}/2}} = {n^{n/2}}\\\\]\n这与我们之前推过的不等式矛盾！所以一定有无穷个素数。\n\n设小于等于$n$的素数个数为$\\pi (n)$，所以\n\\\\[n! < {2^{n\\pi (n)}}\\\\]\n根据斯特林数公式，我们可以得到\n\\\\[\\pi (n) > \\lg (n/e)\\\\]\n\n# 互素\n---\n**定义**\n$m$和$n$互素定义为$gcd(m, n) = 1$，记作$m \\bot n$。\n\n互素也有很多性质。\n\n**性质1**\n\\\\[m/\\gcd (m,n) \\bot n/\\gcd (m,n)\\\\]\n**性质2**\n\\\\[m \\bot n \\Leftrightarrow \\min ({m_p},{n_p}) = 0\\\\]\n其中${m_p},{n_p}$就是两个数的素数指数表示法，详细定义见上一节课。\n或者可以表示为\n\\\\[m \\bot n \\Leftrightarrow {m_p}{n_p} = 0\\\\]\n**性质3**\n\\\\[k \\bot m,k \\bot n \\Leftrightarrow k \\bot mn\\\\]\n\n# Stern-Brocot树\n---\n![](1.png)\n如上图所示，Stern-Brocot树就是0到1之间的分数生成的一棵二叉树。\n\n初始时只有$\\frac{0}{1},\\frac{1}{0}$两个数，第一轮将两者分母相加，分子也相加作为新的分数的分母分子。第二轮再对相邻的两个分数做相同的操作，生成新的分数序列。不断生成下去，得到了上图的二叉树。\n\nStern-Brocot树有下面四个性质：\n1. 0到1之间的所有有理数都出现在了这棵树中。\n2. 每个分数仅出现了1次。\n3. 每个分数都是不可约分的，即分子分母互素。\n4. 生成的序列是单调递增的。\n\n下面我们来一个一个证明。\n\n**引理**\n对于相邻的两个分数$\\frac{m}{n},\\frac{ {m'}}{ {n'}}$，满足：\n\\\\[m'n - mn' = 1\\\\]\n**证明**\n用数学归纳法证明。\n\n性质4就是证明：\n\\\\[\\frac{m}{n} < \\frac{ {m + m'}}{ {n + n'}} < \\frac{ {m'}}{ {n'}}\\\\]\n结论是很显然的，这样性质2同时就成立了。\n\n性质1的话，对于任意有理数$\\frac{a}{b}$，假设$\\frac{m}{n} < \\frac{a}{b} < \\frac{ {m'}}{ {n'}}$。\n我们采用如下策略生成$\\frac{a}{b}$。\n* 如果$\\frac{ {m + m'}}{ {n + n'}} = \\frac{a}{b}$，那么成功。\n* 如果$\\frac{ {m + m'}}{ {n + n'}} < \\frac{a}{b}$，那么令$m = m + m',n = n + n'$。\n* 如果$\\frac{ {m + m'}}{ {n + n'}} > \\frac{a}{b}$，那么令$m' = m + m',n' = n + n'$。\n\n那么有\n\\\\[an - bm \\ge 1,bm' - an' \\ge 1\\\\]\n所以\n\\\\[(m' + n')(an - bm) + (m + n)(bm' - an') \\ge m' + n' + m + n\\\\]\n而左边式子就等于$a + b$，所以\n\\\\[a + b \\ge m' + n' + m + n\\\\]\n因为$m,n,m',n'$都在不断增加，所以最多$a + b$轮就能生成$\\frac{a}{b}$。\n\n性质3的话，同样用数学归纳法。通过引理可以得到\n\\\\[(m + m')n - m(n + n') = 1\\\\]\n由扩展欧几里得定理可以得到$m + m'$与$n + n'$互素。\n\n**Farey序列**\n我们引申出Farey序列的概念，定义如下：\n\\\\[{F_n} = \\{ a/b|\\gcd (a,b) = 1,0 \\le a,b \\le n,0 \\le a/b \\le 1\\} \\\\]\n关于它的更多性质，留到下一节课继续。\n","source":"_posts/concrete-math-10.md","raw":"---\ntitle: 具体数学-第10课（素数和阶乘的有趣性质）\ndate: 2018-04-28 14:23:58\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=25639007&auto=1&height=66\"></iframe></div>\n\n# 欧几里得数\n---\n首先我们来证明一下，素数有无穷多个。\n\n假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么我们构造下面的数字：\n\\\\[M = 2 \\cdot 3 \\cdot  \\ldots  \\cdot {P_k} + 1\\\\]\n显然$M$无法被$2,3, \\ldots ,{P_k}$中的任意一个整除，那么要么$M$可以被其他的素数整除，要么$M$自己就是一个素数。所以素数有无穷多个。\n\n下面我们来定义欧几里得数，是用递归形式来定义的：\n\\\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1\\\\]\n\n那么欧几里得数是否是素数呢？当然不是的，${e_5} = 1807 = 13 \\cdot 139$。\n\n但是欧几里得数还是有很多奇妙的性质。\n\n**性质1**\n\\\\[\\gcd ({e_m},{e_n}) = 1,m \\ne n\\\\]\n**证明：**\n假设$n > m$，那么有\n\\\\[\\gcd ({e_m},{e_n}) = \\gcd ({e_m},{e_0}{e_1} \\ldots {e_m}{e_{m + 1}} \\ldots {e_{n - 1}} + 1) = \\gcd (1,{e_m}) = 1\\\\]\n**性质2**\n如果令$q_j$等于$e_j$的最小素因子，那么${q_1},{q_2}, \\ldots $就是一个不重复的素数序列，这也证明了素数有无穷多个。\n**性质3**\n\\\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1 = ({e_{n - 1}} - 1){e_{n - 1}} + 1 = e_{n - 1}^2 - {e_{n - 1}} + 1\\\\]\n在后面的章节可以证明：\n\\\\[{e_n} = \\left\\lfloor { {E^{ {2^n}}} + \\frac{1}{2}} \\right\\rfloor \\\\]\n其中$E \\approx 1.264$\n\n下面我们稍稍探究一下下面这个数的性质：\n\\\\[{2^p} - 1\\\\]\n这个数如果是素数，那么就被叫做**梅森素数**，那么它在什么情况下是素数呢？\n\n首先$p$不能是合数，因为有\n\\\\[{2^{km}} - 1 = ({2^m} - 1)({2^{m(k - 1)}} + {2^{m(k - 2)}} +  \\cdots  + 1)\\\\]\n但是如果$p$是素数，这个数也不一定是素数，2017年年末美国一个电气工程师发现了人类历史上最大的梅森素数——${2^{77232917}} - 1$。\n\n# 阶乘\n阶乘定义如下：\n\\\\[n! = 1 \\cdot 2 \\cdot  \\ldots  \\cdot n = \\prod\\limits_{k = 1}^n k \\\\]\n所以有\n\\\\[n{!^2} = (1 \\cdot 2 \\cdot  \\ldots  \\cdot n)(n \\cdot  \\ldots  \\cdot 2 \\cdot 1) = \\prod\\limits_{k = 1}^n {k(n + 1 - k)} \\\\]\n由基本不等式可以得到\n\\\\[n \\le k(n + 1 - k) \\le \\frac{ { { {(n + 1)}^2}}}{4}\\\\]\n所以\n\\\\[\\prod\\limits_{k = 1}^n n  \\le n{!^2} \\le \\prod\\limits_{k = 1}^n {\\frac{ { { {(n + 1)}^2}}}{4}} \\\\]\n所以\n\\\\[{n^{n/2}} \\le n! \\le \\frac{ { { {(n + 1)}^n}}}{ { {2^n}}}\\\\]\n这里得到了阶乘的一个粗略范围，在后面章节中，我们会得到阶乘的一个更精确的表达式：\n\\\\[n! \\sim \\sqrt {2\\pi n} {\\left( {\\frac{n}{e}} \\right)^n}\\\\]\n这就是斯特林数，搞ACM还是很有用的。\n\n下面我们来探讨$n!$中含有多少个素因子$p$，个数记为${\\varepsilon _p}(n!)$。\n\n从特殊情况讨论起，当$p = 2$的时候，我们首先看$n!$含有多少个2，然后看有多少个4，再看有多少个8，依次下去，所以答案为：\n\\\\[{\\varepsilon _2}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {2^k}}}} \\right\\rfloor } \\\\]\n可以看出，这个答案不就是$n$的二进制表示不停右移1位，然后相加吗？所以又可以写成：\n\\\\[{\\varepsilon _2}(n!) = n - {\\nu _2}(n)\\\\]\n其中${\\nu _2}(n)$表示$n$的二进制表示中1的个数。\n\n推广到一般情况：\n\\\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor } \\\\]\n放缩一下有：\n\\\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor }  < \\sum\\limits_{k \\ge 1} {\\frac{n}{ { {p^k}}} = \\frac{n}{ {p - 1}}} \\\\]\n\n如果我们令$p = 2$和$p = 3$可以发现：\n\\\\[{\\varepsilon _2}(n!) \\approx 2{\\varepsilon _3}(n!)\\\\]\n但是这个式子在什么情况下相等呢？这仍然是一个未解之谜。\n\n所以$p$对$n!$的贡献度满足如下式子：\n\\\\[{p^{ {\\varepsilon _p}(n!)}} < {p^{\\frac{n}{ {p - 1}}}}\\\\]\n又因为$p \\le 2^{p - 1}$，所以\n\\\\[{p^{ {\\varepsilon _p}(n!)}} < {p^{\\frac{n}{ {p - 1}}}} \\le {2^n}\\\\]\n假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么有\n\\\\[n! < {({2^n})^k}\\\\]\n如果我们令$n = {2^{2k}}$，那么\n\\\\[n! < {({2^n})^k} = {2^{k{2^{2k}}}} = {2^{2k{2^{2k}}/2}} = {n^{n/2}}\\\\]\n这与我们之前推过的不等式矛盾！所以一定有无穷个素数。\n\n设小于等于$n$的素数个数为$\\pi (n)$，所以\n\\\\[n! < {2^{n\\pi (n)}}\\\\]\n根据斯特林数公式，我们可以得到\n\\\\[\\pi (n) > \\lg (n/e)\\\\]\n\n# 互素\n---\n**定义**\n$m$和$n$互素定义为$gcd(m, n) = 1$，记作$m \\bot n$。\n\n互素也有很多性质。\n\n**性质1**\n\\\\[m/\\gcd (m,n) \\bot n/\\gcd (m,n)\\\\]\n**性质2**\n\\\\[m \\bot n \\Leftrightarrow \\min ({m_p},{n_p}) = 0\\\\]\n其中${m_p},{n_p}$就是两个数的素数指数表示法，详细定义见上一节课。\n或者可以表示为\n\\\\[m \\bot n \\Leftrightarrow {m_p}{n_p} = 0\\\\]\n**性质3**\n\\\\[k \\bot m,k \\bot n \\Leftrightarrow k \\bot mn\\\\]\n\n# Stern-Brocot树\n---\n![](1.png)\n如上图所示，Stern-Brocot树就是0到1之间的分数生成的一棵二叉树。\n\n初始时只有$\\frac{0}{1},\\frac{1}{0}$两个数，第一轮将两者分母相加，分子也相加作为新的分数的分母分子。第二轮再对相邻的两个分数做相同的操作，生成新的分数序列。不断生成下去，得到了上图的二叉树。\n\nStern-Brocot树有下面四个性质：\n1. 0到1之间的所有有理数都出现在了这棵树中。\n2. 每个分数仅出现了1次。\n3. 每个分数都是不可约分的，即分子分母互素。\n4. 生成的序列是单调递增的。\n\n下面我们来一个一个证明。\n\n**引理**\n对于相邻的两个分数$\\frac{m}{n},\\frac{ {m'}}{ {n'}}$，满足：\n\\\\[m'n - mn' = 1\\\\]\n**证明**\n用数学归纳法证明。\n\n性质4就是证明：\n\\\\[\\frac{m}{n} < \\frac{ {m + m'}}{ {n + n'}} < \\frac{ {m'}}{ {n'}}\\\\]\n结论是很显然的，这样性质2同时就成立了。\n\n性质1的话，对于任意有理数$\\frac{a}{b}$，假设$\\frac{m}{n} < \\frac{a}{b} < \\frac{ {m'}}{ {n'}}$。\n我们采用如下策略生成$\\frac{a}{b}$。\n* 如果$\\frac{ {m + m'}}{ {n + n'}} = \\frac{a}{b}$，那么成功。\n* 如果$\\frac{ {m + m'}}{ {n + n'}} < \\frac{a}{b}$，那么令$m = m + m',n = n + n'$。\n* 如果$\\frac{ {m + m'}}{ {n + n'}} > \\frac{a}{b}$，那么令$m' = m + m',n' = n + n'$。\n\n那么有\n\\\\[an - bm \\ge 1,bm' - an' \\ge 1\\\\]\n所以\n\\\\[(m' + n')(an - bm) + (m + n)(bm' - an') \\ge m' + n' + m + n\\\\]\n而左边式子就等于$a + b$，所以\n\\\\[a + b \\ge m' + n' + m + n\\\\]\n因为$m,n,m',n'$都在不断增加，所以最多$a + b$轮就能生成$\\frac{a}{b}$。\n\n性质3的话，同样用数学归纳法。通过引理可以得到\n\\\\[(m + m')n - m(n + n') = 1\\\\]\n由扩展欧几里得定理可以得到$m + m'$与$n + n'$互素。\n\n**Farey序列**\n我们引申出Farey序列的概念，定义如下：\n\\\\[{F_n} = \\{ a/b|\\gcd (a,b) = 1,0 \\le a,b \\le n,0 \\le a/b \\le 1\\} \\\\]\n关于它的更多性质，留到下一节课继续。\n","slug":"concrete-math-10","published":1,"updated":"2019-07-20T04:06:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ej005w7sweqabw08u0","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=25639007&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"欧几里得数\"><a href=\"#欧几里得数\" class=\"headerlink\" title=\"欧几里得数\"></a>欧几里得数</h1><hr>\n<p>首先我们来证明一下，素数有无穷多个。</p>\n<p>假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么我们构造下面的数字：<br>\\[M = 2 \\cdot 3 \\cdot  \\ldots  \\cdot {P_k} + 1\\]<br>显然$M$无法被$2,3, \\ldots ,{P_k}$中的任意一个整除，那么要么$M$可以被其他的素数整除，要么$M$自己就是一个素数。所以素数有无穷多个。</p>\n<p>下面我们来定义欧几里得数，是用递归形式来定义的：<br>\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1\\]</p>\n<p>那么欧几里得数是否是素数呢？当然不是的，${e_5} = 1807 = 13 \\cdot 139$。</p>\n<p>但是欧几里得数还是有很多奇妙的性质。</p>\n<p><strong>性质1</strong><br>\\[\\gcd ({e_m},{e_n}) = 1,m \\ne n\\]<br><strong>证明：</strong><br>假设$n &gt; m$，那么有<br>\\[\\gcd ({e_m},{e_n}) = \\gcd ({e_m},{e_0}{e_1} \\ldots {e_m}{e_{m + 1}} \\ldots {e_{n - 1}} + 1) = \\gcd (1,{e_m}) = 1\\]<br><strong>性质2</strong><br>如果令$q_j$等于$e_j$的最小素因子，那么${q_1},{q_2}, \\ldots $就是一个不重复的素数序列，这也证明了素数有无穷多个。<br><strong>性质3</strong><br>\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1 = ({e_{n - 1}} - 1){e_{n - 1}} + 1 = e_{n - 1}^2 - {e_{n - 1}} + 1\\]<br>在后面的章节可以证明：<br>\\[{e_n} = \\left\\lfloor { {E^{ {2^n}}} + \\frac{1}{2}} \\right\\rfloor \\]<br>其中$E \\approx 1.264$</p>\n<p>下面我们稍稍探究一下下面这个数的性质：<br>\\[{2^p} - 1\\]<br>这个数如果是素数，那么就被叫做<strong>梅森素数</strong>，那么它在什么情况下是素数呢？</p>\n<p>首先$p$不能是合数，因为有<br>\\[{2^{km}} - 1 = ({2^m} - 1)({2^{m(k - 1)}} + {2^{m(k - 2)}} +  \\cdots  + 1)\\]<br>但是如果$p$是素数，这个数也不一定是素数，2017年年末美国一个电气工程师发现了人类历史上最大的梅森素数——${2^{77232917}} - 1$。</p>\n<h1 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h1><p>阶乘定义如下：<br>\\[n! = 1 \\cdot 2 \\cdot  \\ldots  \\cdot n = \\prod\\limits_{k = 1}^n k \\]<br>所以有<br>\\[n{!^2} = (1 \\cdot 2 \\cdot  \\ldots  \\cdot n)(n \\cdot  \\ldots  \\cdot 2 \\cdot 1) = \\prod\\limits_{k = 1}^n {k(n + 1 - k)} \\]<br>由基本不等式可以得到<br>\\[n \\le k(n + 1 - k) \\le \\frac{ { { {(n + 1)}^2}}}{4}\\]<br>所以<br>\\[\\prod\\limits_{k = 1}^n n  \\le n{!^2} \\le \\prod\\limits_{k = 1}^n {\\frac{ { { {(n + 1)}^2}}}{4}} \\]<br>所以<br>\\[{n^{n/2}} \\le n! \\le \\frac{ { { {(n + 1)}^n}}}{ { {2^n}}}\\]<br>这里得到了阶乘的一个粗略范围，在后面章节中，我们会得到阶乘的一个更精确的表达式：<br>\\[n! \\sim \\sqrt {2\\pi n} {\\left( {\\frac{n}{e}} \\right)^n}\\]<br>这就是斯特林数，搞ACM还是很有用的。</p>\n<p>下面我们来探讨$n!$中含有多少个素因子$p$，个数记为${\\varepsilon _p}(n!)$。</p>\n<p>从特殊情况讨论起，当$p = 2$的时候，我们首先看$n!$含有多少个2，然后看有多少个4，再看有多少个8，依次下去，所以答案为：<br>\\[{\\varepsilon _2}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {2^k}}}} \\right\\rfloor } \\]<br>可以看出，这个答案不就是$n$的二进制表示不停右移1位，然后相加吗？所以又可以写成：<br>\\[{\\varepsilon _2}(n!) = n - {\\nu _2}(n)\\]<br>其中${\\nu _2}(n)$表示$n$的二进制表示中1的个数。</p>\n<p>推广到一般情况：<br>\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor } \\]<br>放缩一下有：<br>\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor }  &lt; \\sum\\limits_{k \\ge 1} {\\frac{n}{ { {p^k}}} = \\frac{n}{ {p - 1}}} \\]</p>\n<p>如果我们令$p = 2$和$p = 3$可以发现：<br>\\[{\\varepsilon _2}(n!) \\approx 2{\\varepsilon _3}(n!)\\]<br>但是这个式子在什么情况下相等呢？这仍然是一个未解之谜。</p>\n<p>所以$p$对$n!$的贡献度满足如下式子：<br>\\[{p^{ {\\varepsilon _p}(n!)}} &lt; {p^{\\frac{n}{ {p - 1}}}}\\]<br>又因为$p \\le 2^{p - 1}$，所以<br>\\[{p^{ {\\varepsilon _p}(n!)}} &lt; {p^{\\frac{n}{ {p - 1}}}} \\le {2^n}\\]<br>假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么有<br>\\[n! &lt; {({2^n})^k}\\]<br>如果我们令$n = {2^{2k}}$，那么<br>\\[n! &lt; {({2^n})^k} = {2^{k{2^{2k}}}} = {2^{2k{2^{2k}}/2}} = {n^{n/2}}\\]<br>这与我们之前推过的不等式矛盾！所以一定有无穷个素数。</p>\n<p>设小于等于$n$的素数个数为$\\pi (n)$，所以<br>\\[n! &lt; {2^{n\\pi (n)}}\\]<br>根据斯特林数公式，我们可以得到<br>\\[\\pi (n) &gt; \\lg (n/e)\\]</p>\n<h1 id=\"互素\"><a href=\"#互素\" class=\"headerlink\" title=\"互素\"></a>互素</h1><hr>\n<p><strong>定义</strong><br>$m$和$n$互素定义为$gcd(m, n) = 1$，记作$m \\bot n$。</p>\n<p>互素也有很多性质。</p>\n<p><strong>性质1</strong><br>\\[m/\\gcd (m,n) \\bot n/\\gcd (m,n)\\]<br><strong>性质2</strong><br>\\[m \\bot n \\Leftrightarrow \\min ({m_p},{n_p}) = 0\\]<br>其中${m_p},{n_p}$就是两个数的素数指数表示法，详细定义见上一节课。<br>或者可以表示为<br>\\[m \\bot n \\Leftrightarrow {m_p}{n_p} = 0\\]<br><strong>性质3</strong><br>\\[k \\bot m,k \\bot n \\Leftrightarrow k \\bot mn\\]</p>\n<h1 id=\"Stern-Brocot树\"><a href=\"#Stern-Brocot树\" class=\"headerlink\" title=\"Stern-Brocot树\"></a>Stern-Brocot树</h1><hr>\n<p><img src=\"1.png\" alt><br>如上图所示，Stern-Brocot树就是0到1之间的分数生成的一棵二叉树。</p>\n<p>初始时只有$\\frac{0}{1},\\frac{1}{0}$两个数，第一轮将两者分母相加，分子也相加作为新的分数的分母分子。第二轮再对相邻的两个分数做相同的操作，生成新的分数序列。不断生成下去，得到了上图的二叉树。</p>\n<p>Stern-Brocot树有下面四个性质：</p>\n<ol>\n<li>0到1之间的所有有理数都出现在了这棵树中。</li>\n<li>每个分数仅出现了1次。</li>\n<li>每个分数都是不可约分的，即分子分母互素。</li>\n<li>生成的序列是单调递增的。</li>\n</ol>\n<p>下面我们来一个一个证明。</p>\n<p><strong>引理</strong><br>对于相邻的两个分数$\\frac{m}{n},\\frac{ {m’}}{ {n’}}$，满足：<br>\\[m’n - mn’ = 1\\]<br><strong>证明</strong><br>用数学归纳法证明。</p>\n<p>性质4就是证明：<br>\\[\\frac{m}{n} &lt; \\frac{ {m + m’}}{ {n + n’}} &lt; \\frac{ {m’}}{ {n’}}\\]<br>结论是很显然的，这样性质2同时就成立了。</p>\n<p>性质1的话，对于任意有理数$\\frac{a}{b}$，假设$\\frac{m}{n} &lt; \\frac{a}{b} &lt; \\frac{ {m’}}{ {n’}}$。<br>我们采用如下策略生成$\\frac{a}{b}$。</p>\n<ul>\n<li>如果$\\frac{ {m + m’}}{ {n + n’}} = \\frac{a}{b}$，那么成功。</li>\n<li>如果$\\frac{ {m + m’}}{ {n + n’}} &lt; \\frac{a}{b}$，那么令$m = m + m’,n = n + n’$。</li>\n<li>如果$\\frac{ {m + m’}}{ {n + n’}} &gt; \\frac{a}{b}$，那么令$m’ = m + m’,n’ = n + n’$。</li>\n</ul>\n<p>那么有<br>\\[an - bm \\ge 1,bm’ - an’ \\ge 1\\]<br>所以<br>\\[(m’ + n’)(an - bm) + (m + n)(bm’ - an’) \\ge m’ + n’ + m + n\\]<br>而左边式子就等于$a + b$，所以<br>\\[a + b \\ge m’ + n’ + m + n\\]<br>因为$m,n,m’,n’$都在不断增加，所以最多$a + b$轮就能生成$\\frac{a}{b}$。</p>\n<p>性质3的话，同样用数学归纳法。通过引理可以得到<br>\\[(m + m’)n - m(n + n’) = 1\\]<br>由扩展欧几里得定理可以得到$m + m’$与$n + n’$互素。</p>\n<p><strong>Farey序列</strong><br>我们引申出Farey序列的概念，定义如下：<br>\\[{F_n} = \\{ a/b|\\gcd (a,b) = 1,0 \\le a,b \\le n,0 \\le a/b \\le 1\\} \\]<br>关于它的更多性质，留到下一节课继续。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=25639007&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"欧几里得数\"><a href=\"#欧几里得数\" class=\"headerlink\" title=\"欧几里得数\"></a>欧几里得数</h1><hr>\n<p>首先我们来证明一下，素数有无穷多个。</p>\n<p>假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么我们构造下面的数字：<br>\\[M = 2 \\cdot 3 \\cdot  \\ldots  \\cdot {P_k} + 1\\]<br>显然$M$无法被$2,3, \\ldots ,{P_k}$中的任意一个整除，那么要么$M$可以被其他的素数整除，要么$M$自己就是一个素数。所以素数有无穷多个。</p>\n<p>下面我们来定义欧几里得数，是用递归形式来定义的：<br>\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1\\]</p>\n<p>那么欧几里得数是否是素数呢？当然不是的，${e_5} = 1807 = 13 \\cdot 139$。</p>\n<p>但是欧几里得数还是有很多奇妙的性质。</p>\n<p><strong>性质1</strong><br>\\[\\gcd ({e_m},{e_n}) = 1,m \\ne n\\]<br><strong>证明：</strong><br>假设$n &gt; m$，那么有<br>\\[\\gcd ({e_m},{e_n}) = \\gcd ({e_m},{e_0}{e_1} \\ldots {e_m}{e_{m + 1}} \\ldots {e_{n - 1}} + 1) = \\gcd (1,{e_m}) = 1\\]<br><strong>性质2</strong><br>如果令$q_j$等于$e_j$的最小素因子，那么${q_1},{q_2}, \\ldots $就是一个不重复的素数序列，这也证明了素数有无穷多个。<br><strong>性质3</strong><br>\\[{e_n} = {e_0}{e_1}{e_2} \\ldots {e_{n - 1}} + 1 = ({e_{n - 1}} - 1){e_{n - 1}} + 1 = e_{n - 1}^2 - {e_{n - 1}} + 1\\]<br>在后面的章节可以证明：<br>\\[{e_n} = \\left\\lfloor { {E^{ {2^n}}} + \\frac{1}{2}} \\right\\rfloor \\]<br>其中$E \\approx 1.264$</p>\n<p>下面我们稍稍探究一下下面这个数的性质：<br>\\[{2^p} - 1\\]<br>这个数如果是素数，那么就被叫做<strong>梅森素数</strong>，那么它在什么情况下是素数呢？</p>\n<p>首先$p$不能是合数，因为有<br>\\[{2^{km}} - 1 = ({2^m} - 1)({2^{m(k - 1)}} + {2^{m(k - 2)}} +  \\cdots  + 1)\\]<br>但是如果$p$是素数，这个数也不一定是素数，2017年年末美国一个电气工程师发现了人类历史上最大的梅森素数——${2^{77232917}} - 1$。</p>\n<h1 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h1><p>阶乘定义如下：<br>\\[n! = 1 \\cdot 2 \\cdot  \\ldots  \\cdot n = \\prod\\limits_{k = 1}^n k \\]<br>所以有<br>\\[n{!^2} = (1 \\cdot 2 \\cdot  \\ldots  \\cdot n)(n \\cdot  \\ldots  \\cdot 2 \\cdot 1) = \\prod\\limits_{k = 1}^n {k(n + 1 - k)} \\]<br>由基本不等式可以得到<br>\\[n \\le k(n + 1 - k) \\le \\frac{ { { {(n + 1)}^2}}}{4}\\]<br>所以<br>\\[\\prod\\limits_{k = 1}^n n  \\le n{!^2} \\le \\prod\\limits_{k = 1}^n {\\frac{ { { {(n + 1)}^2}}}{4}} \\]<br>所以<br>\\[{n^{n/2}} \\le n! \\le \\frac{ { { {(n + 1)}^n}}}{ { {2^n}}}\\]<br>这里得到了阶乘的一个粗略范围，在后面章节中，我们会得到阶乘的一个更精确的表达式：<br>\\[n! \\sim \\sqrt {2\\pi n} {\\left( {\\frac{n}{e}} \\right)^n}\\]<br>这就是斯特林数，搞ACM还是很有用的。</p>\n<p>下面我们来探讨$n!$中含有多少个素因子$p$，个数记为${\\varepsilon _p}(n!)$。</p>\n<p>从特殊情况讨论起，当$p = 2$的时候，我们首先看$n!$含有多少个2，然后看有多少个4，再看有多少个8，依次下去，所以答案为：<br>\\[{\\varepsilon _2}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {2^k}}}} \\right\\rfloor } \\]<br>可以看出，这个答案不就是$n$的二进制表示不停右移1位，然后相加吗？所以又可以写成：<br>\\[{\\varepsilon _2}(n!) = n - {\\nu _2}(n)\\]<br>其中${\\nu _2}(n)$表示$n$的二进制表示中1的个数。</p>\n<p>推广到一般情况：<br>\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor } \\]<br>放缩一下有：<br>\\[{\\varepsilon _p}(n!) = \\sum\\limits_{k \\ge 1} {\\left\\lfloor {\\frac{n}{ { {p^k}}}} \\right\\rfloor }  &lt; \\sum\\limits_{k \\ge 1} {\\frac{n}{ { {p^k}}} = \\frac{n}{ {p - 1}}} \\]</p>\n<p>如果我们令$p = 2$和$p = 3$可以发现：<br>\\[{\\varepsilon _2}(n!) \\approx 2{\\varepsilon _3}(n!)\\]<br>但是这个式子在什么情况下相等呢？这仍然是一个未解之谜。</p>\n<p>所以$p$对$n!$的贡献度满足如下式子：<br>\\[{p^{ {\\varepsilon _p}(n!)}} &lt; {p^{\\frac{n}{ {p - 1}}}}\\]<br>又因为$p \\le 2^{p - 1}$，所以<br>\\[{p^{ {\\varepsilon _p}(n!)}} &lt; {p^{\\frac{n}{ {p - 1}}}} \\le {2^n}\\]<br>假设素数只有$k$个，分别为$2,3, \\ldots ,{P_k}$，那么有<br>\\[n! &lt; {({2^n})^k}\\]<br>如果我们令$n = {2^{2k}}$，那么<br>\\[n! &lt; {({2^n})^k} = {2^{k{2^{2k}}}} = {2^{2k{2^{2k}}/2}} = {n^{n/2}}\\]<br>这与我们之前推过的不等式矛盾！所以一定有无穷个素数。</p>\n<p>设小于等于$n$的素数个数为$\\pi (n)$，所以<br>\\[n! &lt; {2^{n\\pi (n)}}\\]<br>根据斯特林数公式，我们可以得到<br>\\[\\pi (n) &gt; \\lg (n/e)\\]</p>\n<h1 id=\"互素\"><a href=\"#互素\" class=\"headerlink\" title=\"互素\"></a>互素</h1><hr>\n<p><strong>定义</strong><br>$m$和$n$互素定义为$gcd(m, n) = 1$，记作$m \\bot n$。</p>\n<p>互素也有很多性质。</p>\n<p><strong>性质1</strong><br>\\[m/\\gcd (m,n) \\bot n/\\gcd (m,n)\\]<br><strong>性质2</strong><br>\\[m \\bot n \\Leftrightarrow \\min ({m_p},{n_p}) = 0\\]<br>其中${m_p},{n_p}$就是两个数的素数指数表示法，详细定义见上一节课。<br>或者可以表示为<br>\\[m \\bot n \\Leftrightarrow {m_p}{n_p} = 0\\]<br><strong>性质3</strong><br>\\[k \\bot m,k \\bot n \\Leftrightarrow k \\bot mn\\]</p>\n<h1 id=\"Stern-Brocot树\"><a href=\"#Stern-Brocot树\" class=\"headerlink\" title=\"Stern-Brocot树\"></a>Stern-Brocot树</h1><hr>\n<p><img src=\"1.png\" alt><br>如上图所示，Stern-Brocot树就是0到1之间的分数生成的一棵二叉树。</p>\n<p>初始时只有$\\frac{0}{1},\\frac{1}{0}$两个数，第一轮将两者分母相加，分子也相加作为新的分数的分母分子。第二轮再对相邻的两个分数做相同的操作，生成新的分数序列。不断生成下去，得到了上图的二叉树。</p>\n<p>Stern-Brocot树有下面四个性质：</p>\n<ol>\n<li>0到1之间的所有有理数都出现在了这棵树中。</li>\n<li>每个分数仅出现了1次。</li>\n<li>每个分数都是不可约分的，即分子分母互素。</li>\n<li>生成的序列是单调递增的。</li>\n</ol>\n<p>下面我们来一个一个证明。</p>\n<p><strong>引理</strong><br>对于相邻的两个分数$\\frac{m}{n},\\frac{ {m’}}{ {n’}}$，满足：<br>\\[m’n - mn’ = 1\\]<br><strong>证明</strong><br>用数学归纳法证明。</p>\n<p>性质4就是证明：<br>\\[\\frac{m}{n} &lt; \\frac{ {m + m’}}{ {n + n’}} &lt; \\frac{ {m’}}{ {n’}}\\]<br>结论是很显然的，这样性质2同时就成立了。</p>\n<p>性质1的话，对于任意有理数$\\frac{a}{b}$，假设$\\frac{m}{n} &lt; \\frac{a}{b} &lt; \\frac{ {m’}}{ {n’}}$。<br>我们采用如下策略生成$\\frac{a}{b}$。</p>\n<ul>\n<li>如果$\\frac{ {m + m’}}{ {n + n’}} = \\frac{a}{b}$，那么成功。</li>\n<li>如果$\\frac{ {m + m’}}{ {n + n’}} &lt; \\frac{a}{b}$，那么令$m = m + m’,n = n + n’$。</li>\n<li>如果$\\frac{ {m + m’}}{ {n + n’}} &gt; \\frac{a}{b}$，那么令$m’ = m + m’,n’ = n + n’$。</li>\n</ul>\n<p>那么有<br>\\[an - bm \\ge 1,bm’ - an’ \\ge 1\\]<br>所以<br>\\[(m’ + n’)(an - bm) + (m + n)(bm’ - an’) \\ge m’ + n’ + m + n\\]<br>而左边式子就等于$a + b$，所以<br>\\[a + b \\ge m’ + n’ + m + n\\]<br>因为$m,n,m’,n’$都在不断增加，所以最多$a + b$轮就能生成$\\frac{a}{b}$。</p>\n<p>性质3的话，同样用数学归纳法。通过引理可以得到<br>\\[(m + m’)n - m(n + n’) = 1\\]<br>由扩展欧几里得定理可以得到$m + m’$与$n + n’$互素。</p>\n<p><strong>Farey序列</strong><br>我们引申出Farey序列的概念，定义如下：<br>\\[{F_n} = \\{ a/b|\\gcd (a,b) = 1,0 \\le a,b \\le n,0 \\le a/b \\le 1\\} \\]<br>关于它的更多性质，留到下一节课继续。</p>\n"},{"title":"具体数学-第1课（递归求解实际问题）","date":"2018-02-27T04:52:06.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=496870798&auto=1&height=66\"></iframe></div>\n\n这学期提前选修了研究生的课程：具体数学、人工智能前沿、NLP讨论班，就随便记记具体数学每一节课所学的东西吧。\n\n第一节课讲的都是一些很简单的东西，这里就一带而过了。\n\n# 汉诺塔问题\n---\n这是个老生常谈的问题了，n个盘子，3个柱子的汉诺塔问题，最少移动次数记为$T(n)$。\n那么\\\\[T(n)=2T(n-1)+1\\\\]\n边界条件为$T(0)=0$。\n解出\\\\[T(n)=2^n-1\\\\]\n验证可以采用数学归纳法，这里就不多说了。\n\n# 直线分割平面问题\n---\n这也是个高中问题了，n条直线最多分割平面为几部分，记为$L(n)$。\n那么\\\\[L(n)=L(n-1)+n\\\\]\n边界条件为$L(0)=1$。\n解出\\\\[L(n)=n(n+1)/2+1\\\\]\n\n这题有个扩展，n个V型最多分割平面为几部分？\n解决思路如下：\n![](1.jpg)\n如上图所示，将V型补全（红色虚线部分），那么就转化为了$2n$条直线划分平面数，那么n个V型划分数只要减去$2n$就行了，所以答案为：\n\\\\[Z(n)=L(2n)-2n=2n^2-n+1\\\\]\n\n# 约瑟夫环问题\n---\n这个问题暴力求解的话模拟就行了，复杂度是$O(n^2)$的，这里探索一种直接求解的方法。\n分两种情况讨论：\n当有$2n$个人时，踢掉$n$个人之后，情况如下图所示\n![](2.jpg)\n观察对应关系可以得出\n\\\\[J(2n)=2J(n)-1\\\\]\n同理，当有$2n+1$个人时，踢掉$n+1$个人之后，情况如下图所示\n![](3.jpg)\n观察对应关系可以得出\n\\\\[J(2n+1)=2J(n)+1\\\\]\n边界条件为\n\\\\[J(1)=1\\\\]\n这个递推式很难求解，但是枚举出前面几项可以发现，如果令$n=2^m+l$，其中$2^m$是小于等于$n$的最大2的幂，那么\n\\\\[J(n)=2l+1\\\\]\n正确性可以通过数学归纳法求证。\n\n第一节课就讲了这么多，约瑟夫环还有很多问题值得探讨，下节课继续。。。","source":"_posts/concrete-math-1.md","raw":"---\ntitle: 具体数学-第1课（递归求解实际问题）\ndate: 2018-02-27 12:52:06\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=496870798&auto=1&height=66\"></iframe></div>\n\n这学期提前选修了研究生的课程：具体数学、人工智能前沿、NLP讨论班，就随便记记具体数学每一节课所学的东西吧。\n\n第一节课讲的都是一些很简单的东西，这里就一带而过了。\n\n# 汉诺塔问题\n---\n这是个老生常谈的问题了，n个盘子，3个柱子的汉诺塔问题，最少移动次数记为$T(n)$。\n那么\\\\[T(n)=2T(n-1)+1\\\\]\n边界条件为$T(0)=0$。\n解出\\\\[T(n)=2^n-1\\\\]\n验证可以采用数学归纳法，这里就不多说了。\n\n# 直线分割平面问题\n---\n这也是个高中问题了，n条直线最多分割平面为几部分，记为$L(n)$。\n那么\\\\[L(n)=L(n-1)+n\\\\]\n边界条件为$L(0)=1$。\n解出\\\\[L(n)=n(n+1)/2+1\\\\]\n\n这题有个扩展，n个V型最多分割平面为几部分？\n解决思路如下：\n![](1.jpg)\n如上图所示，将V型补全（红色虚线部分），那么就转化为了$2n$条直线划分平面数，那么n个V型划分数只要减去$2n$就行了，所以答案为：\n\\\\[Z(n)=L(2n)-2n=2n^2-n+1\\\\]\n\n# 约瑟夫环问题\n---\n这个问题暴力求解的话模拟就行了，复杂度是$O(n^2)$的，这里探索一种直接求解的方法。\n分两种情况讨论：\n当有$2n$个人时，踢掉$n$个人之后，情况如下图所示\n![](2.jpg)\n观察对应关系可以得出\n\\\\[J(2n)=2J(n)-1\\\\]\n同理，当有$2n+1$个人时，踢掉$n+1$个人之后，情况如下图所示\n![](3.jpg)\n观察对应关系可以得出\n\\\\[J(2n+1)=2J(n)+1\\\\]\n边界条件为\n\\\\[J(1)=1\\\\]\n这个递推式很难求解，但是枚举出前面几项可以发现，如果令$n=2^m+l$，其中$2^m$是小于等于$n$的最大2的幂，那么\n\\\\[J(n)=2l+1\\\\]\n正确性可以通过数学归纳法求证。\n\n第一节课就讲了这么多，约瑟夫环还有很多问题值得探讨，下节课继续。。。","slug":"concrete-math-1","published":1,"updated":"2019-07-20T04:05:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982er00607swef0owra02","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=496870798&auto=1&height=66\"></iframe></div>\n\n<p>这学期提前选修了研究生的课程：具体数学、人工智能前沿、NLP讨论班，就随便记记具体数学每一节课所学的东西吧。</p>\n<p>第一节课讲的都是一些很简单的东西，这里就一带而过了。</p>\n<h1 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h1><hr>\n<p>这是个老生常谈的问题了，n个盘子，3个柱子的汉诺塔问题，最少移动次数记为$T(n)$。<br>那么\\[T(n)=2T(n-1)+1\\]<br>边界条件为$T(0)=0$。<br>解出\\[T(n)=2^n-1\\]<br>验证可以采用数学归纳法，这里就不多说了。</p>\n<h1 id=\"直线分割平面问题\"><a href=\"#直线分割平面问题\" class=\"headerlink\" title=\"直线分割平面问题\"></a>直线分割平面问题</h1><hr>\n<p>这也是个高中问题了，n条直线最多分割平面为几部分，记为$L(n)$。<br>那么\\[L(n)=L(n-1)+n\\]<br>边界条件为$L(0)=1$。<br>解出\\[L(n)=n(n+1)/2+1\\]</p>\n<p>这题有个扩展，n个V型最多分割平面为几部分？<br>解决思路如下：<br><img src=\"1.jpg\" alt><br>如上图所示，将V型补全（红色虚线部分），那么就转化为了$2n$条直线划分平面数，那么n个V型划分数只要减去$2n$就行了，所以答案为：<br>\\[Z(n)=L(2n)-2n=2n^2-n+1\\]</p>\n<h1 id=\"约瑟夫环问题\"><a href=\"#约瑟夫环问题\" class=\"headerlink\" title=\"约瑟夫环问题\"></a>约瑟夫环问题</h1><hr>\n<p>这个问题暴力求解的话模拟就行了，复杂度是$O(n^2)$的，这里探索一种直接求解的方法。<br>分两种情况讨论：<br>当有$2n$个人时，踢掉$n$个人之后，情况如下图所示<br><img src=\"2.jpg\" alt><br>观察对应关系可以得出<br>\\[J(2n)=2J(n)-1\\]<br>同理，当有$2n+1$个人时，踢掉$n+1$个人之后，情况如下图所示<br><img src=\"3.jpg\" alt><br>观察对应关系可以得出<br>\\[J(2n+1)=2J(n)+1\\]<br>边界条件为<br>\\[J(1)=1\\]<br>这个递推式很难求解，但是枚举出前面几项可以发现，如果令$n=2^m+l$，其中$2^m$是小于等于$n$的最大2的幂，那么<br>\\[J(n)=2l+1\\]<br>正确性可以通过数学归纳法求证。</p>\n<p>第一节课就讲了这么多，约瑟夫环还有很多问题值得探讨，下节课继续。。。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=496870798&auto=1&height=66\"></iframe></div>\n\n<p>这学期提前选修了研究生的课程：具体数学、人工智能前沿、NLP讨论班，就随便记记具体数学每一节课所学的东西吧。</p>\n<p>第一节课讲的都是一些很简单的东西，这里就一带而过了。</p>\n<h1 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h1><hr>\n<p>这是个老生常谈的问题了，n个盘子，3个柱子的汉诺塔问题，最少移动次数记为$T(n)$。<br>那么\\[T(n)=2T(n-1)+1\\]<br>边界条件为$T(0)=0$。<br>解出\\[T(n)=2^n-1\\]<br>验证可以采用数学归纳法，这里就不多说了。</p>\n<h1 id=\"直线分割平面问题\"><a href=\"#直线分割平面问题\" class=\"headerlink\" title=\"直线分割平面问题\"></a>直线分割平面问题</h1><hr>\n<p>这也是个高中问题了，n条直线最多分割平面为几部分，记为$L(n)$。<br>那么\\[L(n)=L(n-1)+n\\]<br>边界条件为$L(0)=1$。<br>解出\\[L(n)=n(n+1)/2+1\\]</p>\n<p>这题有个扩展，n个V型最多分割平面为几部分？<br>解决思路如下：<br><img src=\"1.jpg\" alt><br>如上图所示，将V型补全（红色虚线部分），那么就转化为了$2n$条直线划分平面数，那么n个V型划分数只要减去$2n$就行了，所以答案为：<br>\\[Z(n)=L(2n)-2n=2n^2-n+1\\]</p>\n<h1 id=\"约瑟夫环问题\"><a href=\"#约瑟夫环问题\" class=\"headerlink\" title=\"约瑟夫环问题\"></a>约瑟夫环问题</h1><hr>\n<p>这个问题暴力求解的话模拟就行了，复杂度是$O(n^2)$的，这里探索一种直接求解的方法。<br>分两种情况讨论：<br>当有$2n$个人时，踢掉$n$个人之后，情况如下图所示<br><img src=\"2.jpg\" alt><br>观察对应关系可以得出<br>\\[J(2n)=2J(n)-1\\]<br>同理，当有$2n+1$个人时，踢掉$n+1$个人之后，情况如下图所示<br><img src=\"3.jpg\" alt><br>观察对应关系可以得出<br>\\[J(2n+1)=2J(n)+1\\]<br>边界条件为<br>\\[J(1)=1\\]<br>这个递推式很难求解，但是枚举出前面几项可以发现，如果令$n=2^m+l$，其中$2^m$是小于等于$n$的最大2的幂，那么<br>\\[J(n)=2l+1\\]<br>正确性可以通过数学归纳法求证。</p>\n<p>第一节课就讲了这么多，约瑟夫环还有很多问题值得探讨，下节课继续。。。</p>\n"},{"title":"具体数学-第11课（Stern-Brocot树和同余关系）","date":"2018-05-07T07:48:55.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=543607345&auto=1&height=66\"></iframe></div>\n\n# Stern-Brocot树\n---\n我们接着上节课讲到的Stern-Brocot树继续往下讲。\n\n## LR序列表示\n对于任意分数$\\frac{a}{b}$，我们从$\\frac{1}{1}$开始走到它所在的结点。如果向左走就记为L，向右走记为R，最终可以得到一个L和R的序列。例如$\\frac{5}{7}$的表示就是LRRL。\n\n这种表示产生了两个问题：\n1. 给定满足正整数$m$和$n$互素的分数$\\frac{m}{n}$，它所对应的LR序列是什么？\n2. 给定LR序列，它所表示的分数是什么？\n\n第二个问题看起来更好解决一点，我们先解决第二个问题。\n我们定义\n\\\\[f(S) = 与S对应的分数\\\\]\n例如\n\\\\[f(LRRL) = \\frac{5}{7}\\\\]\n如果用代码实现的话，对于每个L或者R，如果是L，那么就把右边界设为中间值，如果是R，那么就把左边界设为中间值。\n\n但是如何用数学式子来表达这一过程呢？\n\n我们建立一个2阶方阵：\n\\\\[M(S) = \\left( {\\begin{array}{*{20}{c}}n&{n'}\\\\m&{m'}\\end{array}} \\right)\\\\]\n表示$f(S)$的两个祖先分数$\\frac{m}{n}$和$\\frac{m'}{n'}$\n\n那么初始状态就可以表示为\n\\\\[M(I) = \\left( {\\begin{array}{*{20}{c}}1&0\\\\0&1\\end{array}} \\right)\\\\]\n\n如果遇到了向左符号L，那么\n\n\\\\[M(SL) = \\left( {\\begin{array}{}n&{n + n'}\\\\m&{m + m'}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right)\\\\]\n\n如果遇到了向右符号R，那么\n\\\\[M(SL) = \\left( {\\begin{array}{}{n + n'}&{n'}\\\\{m + m'}&{m'}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\\\]\n所以我们将L和R定义成2阶方阵就行了：\n\\\\[L = \\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right),R = \\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\\\]\n所以\n\\\\[\\begin{array}{l}M(LRRL) = LRRL\\\\ = \\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right)\\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{}3&4\\\\2&3\\end{array}} \\right)\\end{array}\\\\]\n所以LRRL表示的分数为\n\\\\[\\frac{ {2 + 3}}{ {3 + 4}} = \\frac{5}{7}\\\\]\n那么第一个问题如何解决呢？\n同样可以用类似二叉搜索的方法来求出LR序列，也可以用矩阵的方法来求解，根据上面的L和R的方阵，可以发现：\n\\\\[f(RS) = f(S) + 1\\\\]\n对于L也有类似的性质，所以我们得到了如下的求解算法：\n* 如果$m > n$，输出R，令$m = m - n$。\n* 如果$m < n$，输出L，令$n = n - m$。\n\n## 无理数近似表示\n虽然说无理数不在Stern-Brocot树中，但是我们可以找到无限逼近它的分数。\n\n方法仍然使用二叉搜索，不同的是，搜索过程不会终止，除非得到了我们想要的精度或者我们人为终止。\n\n值得一提的是，无理数$e$的LR表示很有规律性：\n\\\\[e = R{L^0}RL{R^2}LR{L^4}RL{R^6}LR{L^8}RL{R^{10}}LR{L^{12}} \\cdots \\\\]\n\n最后值得一提的是，欧几里得算法和有理数的Stern-Brocot树表示有密切的关系。给定$\\alpha  = \\frac{m}{n}$，根据之前的算法，它的LR表达式首先是$\\left\\lfloor {m/n} \\right\\rfloor $个R，然后是$\\left\\lfloor {n/(m\\bmod n)} \\right\\rfloor $个L，依次下去，这些系数恰好就是求最大公因数的时候用到的系数。\n\n# 同余关系\n---\n同余定义为：\n\\\\[a \\equiv b(\\bmod m) \\Leftrightarrow a\\bmod m = b\\bmod m\\\\]\n读作“a关于模m与b同余”，我们只讨论都是整数的情况。\n\n同样可以写作：\n\\\\[a \\equiv b(\\bmod m) \\Leftrightarrow a - b是m的倍数\\\\]\n\n同余是等价关系，满足自反律、对称律、传递律，即：\n\\\\[\\begin{array}{l}a \\equiv a\\\\a \\equiv b \\Rightarrow b \\equiv a\\\\a \\equiv b \\equiv c \\Rightarrow a \\equiv c\\end{array}\\\\]\n如果我们对同余两边的元素加减乘，同余仍然满足：\n\\\\[\\begin{array}{l}a \\equiv b,c \\equiv d \\Rightarrow a + c \\equiv b + d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow a - c \\equiv b - d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow ac \\equiv bd(\\bmod m)\\end{array}\\\\]\n因此可以得到\n\\\\[a \\equiv b \\Rightarrow {a^n} \\equiv {b^n}(\\bmod m)\\\\]\n\n然而对于除法同余并不总是成立，一些特殊条件下可能成立。\n如果\n\\\\[ad \\equiv bd(\\bmod m)\\\\]\n当$d,m$互素的时候，我们可以得到\n\\\\[a \\equiv b(\\bmod m)\\\\]\n同样\n\\\\[ad \\equiv bd(\\bmod md) \\Leftrightarrow a \\equiv b(\\bmod m)\\\\]\n更一般的情况下，我们有\n\\\\[ad \\equiv bd(\\bmod m) \\Leftrightarrow a \\equiv b(\\bmod \\frac{m}{ {\\gcd (d,m)}})\\\\]\n还有许多性质我就直接列举了，不做证明了，证明很简单：\n\\\\[\\begin{array}{l}a \\equiv b(\\bmod md) \\Rightarrow a \\equiv b(\\bmod m)\\\\a \\equiv b(\\bmod m),a \\equiv b(\\bmod n) \\Leftrightarrow a \\equiv b(\\bmod lcm(m,n))\\\\a \\equiv b(\\bmod mn),m \\bot n \\Leftrightarrow a \\equiv b(\\bmod m),a \\equiv b(\\bmod n)\\\\a \\equiv b(\\bmod m) \\Leftrightarrow \\forall p,a \\equiv b(\\bmod {p^{ {m_p}}})\\end{array}\\\\]\n其中$m = \\prod\\nolimits_p { {p^{ {m_p}}}} $是$m$的素因子分解。\n第三条性质是中国剩余定理的特例，今后我们再做证明。\n\n# 独立剩余\n---\n同余的应用之一就是剩余系，将整数$x$表示为一组互素的模的剩余（余数）序列：\n\\\\[(x\\bmod {m_1}, \\ldots ,x\\bmod {m_r})\\\\]\n其中模$m$两两互素。\n\n通过这个剩余序列可以确定出$x$的通解，其实可以看出来，这就是中国剩余定理的另一种表示形式。\n\n这种表示形式有很多好处，比如可以直接在每个维度上面进行加减乘法。例如对于$m_1 = 3, m_2 = 5$的剩余系，有如下表示：\n\\\\[13 = (1,3),7 = (1,2)\\\\]\n那么$13 \\cdot 7\\,\\bmod \\,15$就可以这样计算：\n\\\\[(1 \\cdot 1\\bmod 3,3 \\cdot 2\\bmod 5) = (1,1)\\\\]\n所以\n\\\\[13 \\cdot 7\\bmod 15 = 1 \\cdot 1\\bmod 15 = 1\\\\]\n\n","source":"_posts/concrete-math-11.md","raw":"---\ntitle: 具体数学-第11课（Stern-Brocot树和同余关系）\ndate: 2018-05-07 15:48:55\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=543607345&auto=1&height=66\"></iframe></div>\n\n# Stern-Brocot树\n---\n我们接着上节课讲到的Stern-Brocot树继续往下讲。\n\n## LR序列表示\n对于任意分数$\\frac{a}{b}$，我们从$\\frac{1}{1}$开始走到它所在的结点。如果向左走就记为L，向右走记为R，最终可以得到一个L和R的序列。例如$\\frac{5}{7}$的表示就是LRRL。\n\n这种表示产生了两个问题：\n1. 给定满足正整数$m$和$n$互素的分数$\\frac{m}{n}$，它所对应的LR序列是什么？\n2. 给定LR序列，它所表示的分数是什么？\n\n第二个问题看起来更好解决一点，我们先解决第二个问题。\n我们定义\n\\\\[f(S) = 与S对应的分数\\\\]\n例如\n\\\\[f(LRRL) = \\frac{5}{7}\\\\]\n如果用代码实现的话，对于每个L或者R，如果是L，那么就把右边界设为中间值，如果是R，那么就把左边界设为中间值。\n\n但是如何用数学式子来表达这一过程呢？\n\n我们建立一个2阶方阵：\n\\\\[M(S) = \\left( {\\begin{array}{*{20}{c}}n&{n'}\\\\m&{m'}\\end{array}} \\right)\\\\]\n表示$f(S)$的两个祖先分数$\\frac{m}{n}$和$\\frac{m'}{n'}$\n\n那么初始状态就可以表示为\n\\\\[M(I) = \\left( {\\begin{array}{*{20}{c}}1&0\\\\0&1\\end{array}} \\right)\\\\]\n\n如果遇到了向左符号L，那么\n\n\\\\[M(SL) = \\left( {\\begin{array}{}n&{n + n'}\\\\m&{m + m'}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right)\\\\]\n\n如果遇到了向右符号R，那么\n\\\\[M(SL) = \\left( {\\begin{array}{}{n + n'}&{n'}\\\\{m + m'}&{m'}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\\\]\n所以我们将L和R定义成2阶方阵就行了：\n\\\\[L = \\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right),R = \\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\\\]\n所以\n\\\\[\\begin{array}{l}M(LRRL) = LRRL\\\\ = \\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right)\\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\left( {\\begin{array}{}1&0\\\\1&1\\end{array}} \\right)\\left( {\\begin{array}{}1&1\\\\0&1\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{}3&4\\\\2&3\\end{array}} \\right)\\end{array}\\\\]\n所以LRRL表示的分数为\n\\\\[\\frac{ {2 + 3}}{ {3 + 4}} = \\frac{5}{7}\\\\]\n那么第一个问题如何解决呢？\n同样可以用类似二叉搜索的方法来求出LR序列，也可以用矩阵的方法来求解，根据上面的L和R的方阵，可以发现：\n\\\\[f(RS) = f(S) + 1\\\\]\n对于L也有类似的性质，所以我们得到了如下的求解算法：\n* 如果$m > n$，输出R，令$m = m - n$。\n* 如果$m < n$，输出L，令$n = n - m$。\n\n## 无理数近似表示\n虽然说无理数不在Stern-Brocot树中，但是我们可以找到无限逼近它的分数。\n\n方法仍然使用二叉搜索，不同的是，搜索过程不会终止，除非得到了我们想要的精度或者我们人为终止。\n\n值得一提的是，无理数$e$的LR表示很有规律性：\n\\\\[e = R{L^0}RL{R^2}LR{L^4}RL{R^6}LR{L^8}RL{R^{10}}LR{L^{12}} \\cdots \\\\]\n\n最后值得一提的是，欧几里得算法和有理数的Stern-Brocot树表示有密切的关系。给定$\\alpha  = \\frac{m}{n}$，根据之前的算法，它的LR表达式首先是$\\left\\lfloor {m/n} \\right\\rfloor $个R，然后是$\\left\\lfloor {n/(m\\bmod n)} \\right\\rfloor $个L，依次下去，这些系数恰好就是求最大公因数的时候用到的系数。\n\n# 同余关系\n---\n同余定义为：\n\\\\[a \\equiv b(\\bmod m) \\Leftrightarrow a\\bmod m = b\\bmod m\\\\]\n读作“a关于模m与b同余”，我们只讨论都是整数的情况。\n\n同样可以写作：\n\\\\[a \\equiv b(\\bmod m) \\Leftrightarrow a - b是m的倍数\\\\]\n\n同余是等价关系，满足自反律、对称律、传递律，即：\n\\\\[\\begin{array}{l}a \\equiv a\\\\a \\equiv b \\Rightarrow b \\equiv a\\\\a \\equiv b \\equiv c \\Rightarrow a \\equiv c\\end{array}\\\\]\n如果我们对同余两边的元素加减乘，同余仍然满足：\n\\\\[\\begin{array}{l}a \\equiv b,c \\equiv d \\Rightarrow a + c \\equiv b + d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow a - c \\equiv b - d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow ac \\equiv bd(\\bmod m)\\end{array}\\\\]\n因此可以得到\n\\\\[a \\equiv b \\Rightarrow {a^n} \\equiv {b^n}(\\bmod m)\\\\]\n\n然而对于除法同余并不总是成立，一些特殊条件下可能成立。\n如果\n\\\\[ad \\equiv bd(\\bmod m)\\\\]\n当$d,m$互素的时候，我们可以得到\n\\\\[a \\equiv b(\\bmod m)\\\\]\n同样\n\\\\[ad \\equiv bd(\\bmod md) \\Leftrightarrow a \\equiv b(\\bmod m)\\\\]\n更一般的情况下，我们有\n\\\\[ad \\equiv bd(\\bmod m) \\Leftrightarrow a \\equiv b(\\bmod \\frac{m}{ {\\gcd (d,m)}})\\\\]\n还有许多性质我就直接列举了，不做证明了，证明很简单：\n\\\\[\\begin{array}{l}a \\equiv b(\\bmod md) \\Rightarrow a \\equiv b(\\bmod m)\\\\a \\equiv b(\\bmod m),a \\equiv b(\\bmod n) \\Leftrightarrow a \\equiv b(\\bmod lcm(m,n))\\\\a \\equiv b(\\bmod mn),m \\bot n \\Leftrightarrow a \\equiv b(\\bmod m),a \\equiv b(\\bmod n)\\\\a \\equiv b(\\bmod m) \\Leftrightarrow \\forall p,a \\equiv b(\\bmod {p^{ {m_p}}})\\end{array}\\\\]\n其中$m = \\prod\\nolimits_p { {p^{ {m_p}}}} $是$m$的素因子分解。\n第三条性质是中国剩余定理的特例，今后我们再做证明。\n\n# 独立剩余\n---\n同余的应用之一就是剩余系，将整数$x$表示为一组互素的模的剩余（余数）序列：\n\\\\[(x\\bmod {m_1}, \\ldots ,x\\bmod {m_r})\\\\]\n其中模$m$两两互素。\n\n通过这个剩余序列可以确定出$x$的通解，其实可以看出来，这就是中国剩余定理的另一种表示形式。\n\n这种表示形式有很多好处，比如可以直接在每个维度上面进行加减乘法。例如对于$m_1 = 3, m_2 = 5$的剩余系，有如下表示：\n\\\\[13 = (1,3),7 = (1,2)\\\\]\n那么$13 \\cdot 7\\,\\bmod \\,15$就可以这样计算：\n\\\\[(1 \\cdot 1\\bmod 3,3 \\cdot 2\\bmod 5) = (1,1)\\\\]\n所以\n\\\\[13 \\cdot 7\\bmod 15 = 1 \\cdot 1\\bmod 15 = 1\\\\]\n\n","slug":"concrete-math-11","published":1,"updated":"2019-07-20T04:06:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982et00647swe9qgzishr","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=543607345&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"Stern-Brocot树\"><a href=\"#Stern-Brocot树\" class=\"headerlink\" title=\"Stern-Brocot树\"></a>Stern-Brocot树</h1><hr>\n<p>我们接着上节课讲到的Stern-Brocot树继续往下讲。</p>\n<h2 id=\"LR序列表示\"><a href=\"#LR序列表示\" class=\"headerlink\" title=\"LR序列表示\"></a>LR序列表示</h2><p>对于任意分数$\\frac{a}{b}$，我们从$\\frac{1}{1}$开始走到它所在的结点。如果向左走就记为L，向右走记为R，最终可以得到一个L和R的序列。例如$\\frac{5}{7}$的表示就是LRRL。</p>\n<p>这种表示产生了两个问题：</p>\n<ol>\n<li>给定满足正整数$m$和$n$互素的分数$\\frac{m}{n}$，它所对应的LR序列是什么？</li>\n<li>给定LR序列，它所表示的分数是什么？</li>\n</ol>\n<p>第二个问题看起来更好解决一点，我们先解决第二个问题。<br>我们定义<br>\\[f(S) = 与S对应的分数\\]<br>例如<br>\\[f(LRRL) = \\frac{5}{7}\\]<br>如果用代码实现的话，对于每个L或者R，如果是L，那么就把右边界设为中间值，如果是R，那么就把左边界设为中间值。</p>\n<p>但是如何用数学式子来表达这一过程呢？</p>\n<p>我们建立一个2阶方阵：<br>\\[M(S) = \\left( {\\begin{array}{*{20}{c}}n&amp;{n’}\\\\m&amp;{m’}\\end{array}} \\right)\\]<br>表示$f(S)$的两个祖先分数$\\frac{m}{n}$和$\\frac{m’}{n’}$</p>\n<p>那么初始状态就可以表示为<br>\\[M(I) = \\left( {\\begin{array}{*{20}{c}}1&amp;0\\\\0&amp;1\\end{array}} \\right)\\]</p>\n<p>如果遇到了向左符号L，那么</p>\n<p>\\[M(SL) = \\left( {\\begin{array}{}n&amp;{n + n’}\\\\m&amp;{m + m’}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right)\\]</p>\n<p>如果遇到了向右符号R，那么<br>\\[M(SL) = \\left( {\\begin{array}{}{n + n’}&amp;{n’}\\\\{m + m’}&amp;{m’}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\]<br>所以我们将L和R定义成2阶方阵就行了：<br>\\[L = \\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right),R = \\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\]<br>所以<br>\\[\\begin{array}{l}M(LRRL) = LRRL\\\\ = \\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right)\\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{}3&amp;4\\\\2&amp;3\\end{array}} \\right)\\end{array}\\]<br>所以LRRL表示的分数为<br>\\[\\frac{ {2 + 3}}{ {3 + 4}} = \\frac{5}{7}\\]<br>那么第一个问题如何解决呢？<br>同样可以用类似二叉搜索的方法来求出LR序列，也可以用矩阵的方法来求解，根据上面的L和R的方阵，可以发现：<br>\\[f(RS) = f(S) + 1\\]<br>对于L也有类似的性质，所以我们得到了如下的求解算法：</p>\n<ul>\n<li>如果$m &gt; n$，输出R，令$m = m - n$。</li>\n<li>如果$m &lt; n$，输出L，令$n = n - m$。</li>\n</ul>\n<h2 id=\"无理数近似表示\"><a href=\"#无理数近似表示\" class=\"headerlink\" title=\"无理数近似表示\"></a>无理数近似表示</h2><p>虽然说无理数不在Stern-Brocot树中，但是我们可以找到无限逼近它的分数。</p>\n<p>方法仍然使用二叉搜索，不同的是，搜索过程不会终止，除非得到了我们想要的精度或者我们人为终止。</p>\n<p>值得一提的是，无理数$e$的LR表示很有规律性：<br>\\[e = R{L^0}RL{R^2}LR{L^4}RL{R^6}LR{L^8}RL{R^{10}}LR{L^{12}} \\cdots \\]</p>\n<p>最后值得一提的是，欧几里得算法和有理数的Stern-Brocot树表示有密切的关系。给定$\\alpha  = \\frac{m}{n}$，根据之前的算法，它的LR表达式首先是$\\left\\lfloor {m/n} \\right\\rfloor $个R，然后是$\\left\\lfloor {n/(m\\bmod n)} \\right\\rfloor $个L，依次下去，这些系数恰好就是求最大公因数的时候用到的系数。</p>\n<h1 id=\"同余关系\"><a href=\"#同余关系\" class=\"headerlink\" title=\"同余关系\"></a>同余关系</h1><hr>\n<p>同余定义为：<br>\\[a \\equiv b(\\bmod m) \\Leftrightarrow a\\bmod m = b\\bmod m\\]<br>读作“a关于模m与b同余”，我们只讨论都是整数的情况。</p>\n<p>同样可以写作：<br>\\[a \\equiv b(\\bmod m) \\Leftrightarrow a - b是m的倍数\\]</p>\n<p>同余是等价关系，满足自反律、对称律、传递律，即：<br>\\[\\begin{array}{l}a \\equiv a\\\\a \\equiv b \\Rightarrow b \\equiv a\\\\a \\equiv b \\equiv c \\Rightarrow a \\equiv c\\end{array}\\]<br>如果我们对同余两边的元素加减乘，同余仍然满足：<br>\\[\\begin{array}{l}a \\equiv b,c \\equiv d \\Rightarrow a + c \\equiv b + d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow a - c \\equiv b - d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow ac \\equiv bd(\\bmod m)\\end{array}\\]<br>因此可以得到<br>\\[a \\equiv b \\Rightarrow {a^n} \\equiv {b^n}(\\bmod m)\\]</p>\n<p>然而对于除法同余并不总是成立，一些特殊条件下可能成立。<br>如果<br>\\[ad \\equiv bd(\\bmod m)\\]<br>当$d,m$互素的时候，我们可以得到<br>\\[a \\equiv b(\\bmod m)\\]<br>同样<br>\\[ad \\equiv bd(\\bmod md) \\Leftrightarrow a \\equiv b(\\bmod m)\\]<br>更一般的情况下，我们有<br>\\[ad \\equiv bd(\\bmod m) \\Leftrightarrow a \\equiv b(\\bmod \\frac{m}{ {\\gcd (d,m)}})\\]<br>还有许多性质我就直接列举了，不做证明了，证明很简单：<br>\\[\\begin{array}{l}a \\equiv b(\\bmod md) \\Rightarrow a \\equiv b(\\bmod m)\\\\a \\equiv b(\\bmod m),a \\equiv b(\\bmod n) \\Leftrightarrow a \\equiv b(\\bmod lcm(m,n))\\\\a \\equiv b(\\bmod mn),m \\bot n \\Leftrightarrow a \\equiv b(\\bmod m),a \\equiv b(\\bmod n)\\\\a \\equiv b(\\bmod m) \\Leftrightarrow \\forall p,a \\equiv b(\\bmod {p^{ {m_p}}})\\end{array}\\]<br>其中$m = \\prod\\nolimits_p { {p^{ {m_p}}}} $是$m$的素因子分解。<br>第三条性质是中国剩余定理的特例，今后我们再做证明。</p>\n<h1 id=\"独立剩余\"><a href=\"#独立剩余\" class=\"headerlink\" title=\"独立剩余\"></a>独立剩余</h1><hr>\n<p>同余的应用之一就是剩余系，将整数$x$表示为一组互素的模的剩余（余数）序列：<br>\\[(x\\bmod {m_1}, \\ldots ,x\\bmod {m_r})\\]<br>其中模$m$两两互素。</p>\n<p>通过这个剩余序列可以确定出$x$的通解，其实可以看出来，这就是中国剩余定理的另一种表示形式。</p>\n<p>这种表示形式有很多好处，比如可以直接在每个维度上面进行加减乘法。例如对于$m_1 = 3, m_2 = 5$的剩余系，有如下表示：<br>\\[13 = (1,3),7 = (1,2)\\]<br>那么$13 \\cdot 7\\,\\bmod \\,15$就可以这样计算：<br>\\[(1 \\cdot 1\\bmod 3,3 \\cdot 2\\bmod 5) = (1,1)\\]<br>所以<br>\\[13 \\cdot 7\\bmod 15 = 1 \\cdot 1\\bmod 15 = 1\\]</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=543607345&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"Stern-Brocot树\"><a href=\"#Stern-Brocot树\" class=\"headerlink\" title=\"Stern-Brocot树\"></a>Stern-Brocot树</h1><hr>\n<p>我们接着上节课讲到的Stern-Brocot树继续往下讲。</p>\n<h2 id=\"LR序列表示\"><a href=\"#LR序列表示\" class=\"headerlink\" title=\"LR序列表示\"></a>LR序列表示</h2><p>对于任意分数$\\frac{a}{b}$，我们从$\\frac{1}{1}$开始走到它所在的结点。如果向左走就记为L，向右走记为R，最终可以得到一个L和R的序列。例如$\\frac{5}{7}$的表示就是LRRL。</p>\n<p>这种表示产生了两个问题：</p>\n<ol>\n<li>给定满足正整数$m$和$n$互素的分数$\\frac{m}{n}$，它所对应的LR序列是什么？</li>\n<li>给定LR序列，它所表示的分数是什么？</li>\n</ol>\n<p>第二个问题看起来更好解决一点，我们先解决第二个问题。<br>我们定义<br>\\[f(S) = 与S对应的分数\\]<br>例如<br>\\[f(LRRL) = \\frac{5}{7}\\]<br>如果用代码实现的话，对于每个L或者R，如果是L，那么就把右边界设为中间值，如果是R，那么就把左边界设为中间值。</p>\n<p>但是如何用数学式子来表达这一过程呢？</p>\n<p>我们建立一个2阶方阵：<br>\\[M(S) = \\left( {\\begin{array}{*{20}{c}}n&amp;{n’}\\\\m&amp;{m’}\\end{array}} \\right)\\]<br>表示$f(S)$的两个祖先分数$\\frac{m}{n}$和$\\frac{m’}{n’}$</p>\n<p>那么初始状态就可以表示为<br>\\[M(I) = \\left( {\\begin{array}{*{20}{c}}1&amp;0\\\\0&amp;1\\end{array}} \\right)\\]</p>\n<p>如果遇到了向左符号L，那么</p>\n<p>\\[M(SL) = \\left( {\\begin{array}{}n&amp;{n + n’}\\\\m&amp;{m + m’}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right)\\]</p>\n<p>如果遇到了向右符号R，那么<br>\\[M(SL) = \\left( {\\begin{array}{}{n + n’}&amp;{n’}\\\\{m + m’}&amp;{m’}\\end{array}} \\right) = M(S)\\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\]<br>所以我们将L和R定义成2阶方阵就行了：<br>\\[L = \\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right),R = \\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\]<br>所以<br>\\[\\begin{array}{l}M(LRRL) = LRRL\\\\ = \\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right)\\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\left( {\\begin{array}{}1&amp;0\\\\1&amp;1\\end{array}} \\right)\\left( {\\begin{array}{}1&amp;1\\\\0&amp;1\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{}3&amp;4\\\\2&amp;3\\end{array}} \\right)\\end{array}\\]<br>所以LRRL表示的分数为<br>\\[\\frac{ {2 + 3}}{ {3 + 4}} = \\frac{5}{7}\\]<br>那么第一个问题如何解决呢？<br>同样可以用类似二叉搜索的方法来求出LR序列，也可以用矩阵的方法来求解，根据上面的L和R的方阵，可以发现：<br>\\[f(RS) = f(S) + 1\\]<br>对于L也有类似的性质，所以我们得到了如下的求解算法：</p>\n<ul>\n<li>如果$m &gt; n$，输出R，令$m = m - n$。</li>\n<li>如果$m &lt; n$，输出L，令$n = n - m$。</li>\n</ul>\n<h2 id=\"无理数近似表示\"><a href=\"#无理数近似表示\" class=\"headerlink\" title=\"无理数近似表示\"></a>无理数近似表示</h2><p>虽然说无理数不在Stern-Brocot树中，但是我们可以找到无限逼近它的分数。</p>\n<p>方法仍然使用二叉搜索，不同的是，搜索过程不会终止，除非得到了我们想要的精度或者我们人为终止。</p>\n<p>值得一提的是，无理数$e$的LR表示很有规律性：<br>\\[e = R{L^0}RL{R^2}LR{L^4}RL{R^6}LR{L^8}RL{R^{10}}LR{L^{12}} \\cdots \\]</p>\n<p>最后值得一提的是，欧几里得算法和有理数的Stern-Brocot树表示有密切的关系。给定$\\alpha  = \\frac{m}{n}$，根据之前的算法，它的LR表达式首先是$\\left\\lfloor {m/n} \\right\\rfloor $个R，然后是$\\left\\lfloor {n/(m\\bmod n)} \\right\\rfloor $个L，依次下去，这些系数恰好就是求最大公因数的时候用到的系数。</p>\n<h1 id=\"同余关系\"><a href=\"#同余关系\" class=\"headerlink\" title=\"同余关系\"></a>同余关系</h1><hr>\n<p>同余定义为：<br>\\[a \\equiv b(\\bmod m) \\Leftrightarrow a\\bmod m = b\\bmod m\\]<br>读作“a关于模m与b同余”，我们只讨论都是整数的情况。</p>\n<p>同样可以写作：<br>\\[a \\equiv b(\\bmod m) \\Leftrightarrow a - b是m的倍数\\]</p>\n<p>同余是等价关系，满足自反律、对称律、传递律，即：<br>\\[\\begin{array}{l}a \\equiv a\\\\a \\equiv b \\Rightarrow b \\equiv a\\\\a \\equiv b \\equiv c \\Rightarrow a \\equiv c\\end{array}\\]<br>如果我们对同余两边的元素加减乘，同余仍然满足：<br>\\[\\begin{array}{l}a \\equiv b,c \\equiv d \\Rightarrow a + c \\equiv b + d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow a - c \\equiv b - d(\\bmod m)\\\\a \\equiv b,c \\equiv d \\Rightarrow ac \\equiv bd(\\bmod m)\\end{array}\\]<br>因此可以得到<br>\\[a \\equiv b \\Rightarrow {a^n} \\equiv {b^n}(\\bmod m)\\]</p>\n<p>然而对于除法同余并不总是成立，一些特殊条件下可能成立。<br>如果<br>\\[ad \\equiv bd(\\bmod m)\\]<br>当$d,m$互素的时候，我们可以得到<br>\\[a \\equiv b(\\bmod m)\\]<br>同样<br>\\[ad \\equiv bd(\\bmod md) \\Leftrightarrow a \\equiv b(\\bmod m)\\]<br>更一般的情况下，我们有<br>\\[ad \\equiv bd(\\bmod m) \\Leftrightarrow a \\equiv b(\\bmod \\frac{m}{ {\\gcd (d,m)}})\\]<br>还有许多性质我就直接列举了，不做证明了，证明很简单：<br>\\[\\begin{array}{l}a \\equiv b(\\bmod md) \\Rightarrow a \\equiv b(\\bmod m)\\\\a \\equiv b(\\bmod m),a \\equiv b(\\bmod n) \\Leftrightarrow a \\equiv b(\\bmod lcm(m,n))\\\\a \\equiv b(\\bmod mn),m \\bot n \\Leftrightarrow a \\equiv b(\\bmod m),a \\equiv b(\\bmod n)\\\\a \\equiv b(\\bmod m) \\Leftrightarrow \\forall p,a \\equiv b(\\bmod {p^{ {m_p}}})\\end{array}\\]<br>其中$m = \\prod\\nolimits_p { {p^{ {m_p}}}} $是$m$的素因子分解。<br>第三条性质是中国剩余定理的特例，今后我们再做证明。</p>\n<h1 id=\"独立剩余\"><a href=\"#独立剩余\" class=\"headerlink\" title=\"独立剩余\"></a>独立剩余</h1><hr>\n<p>同余的应用之一就是剩余系，将整数$x$表示为一组互素的模的剩余（余数）序列：<br>\\[(x\\bmod {m_1}, \\ldots ,x\\bmod {m_r})\\]<br>其中模$m$两两互素。</p>\n<p>通过这个剩余序列可以确定出$x$的通解，其实可以看出来，这就是中国剩余定理的另一种表示形式。</p>\n<p>这种表示形式有很多好处，比如可以直接在每个维度上面进行加减乘法。例如对于$m_1 = 3, m_2 = 5$的剩余系，有如下表示：<br>\\[13 = (1,3),7 = (1,2)\\]<br>那么$13 \\cdot 7\\,\\bmod \\,15$就可以这样计算：<br>\\[(1 \\cdot 1\\bmod 3,3 \\cdot 2\\bmod 5) = (1,1)\\]<br>所以<br>\\[13 \\cdot 7\\bmod 15 = 1 \\cdot 1\\bmod 15 = 1\\]</p>\n"},{"title":"具体数学-第12课（数论进阶与组合数入门）","date":"2018-05-14T07:41:51.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=554191378&auto=1&height=66\"></iframe></div>\n\n> 这节课内容太多了，再加上感冒身体不舒服，下面的定理就不一一证明了，大家可以自行练习。以后有空我会补上的！\n\n# 例题1\n---\n首先接着上节课同余继续讲，在[第三章例题2](http://godweiyang.com/2018/04/23/concrete-math-9/)中，我们遗留了一个问题：对于如下序列\n\\\\[0\\bmod m,n\\bmod m,2n\\bmod m, \\ldots ,(m - 1)n\\bmod m\\\\]\n它的值就是\n\\\\[0,d,2d, \\ldots ,(m/d - 1)d\\\\]\n的某个排列，并且重复了$d$次。其中$d = gcd(m, n)$\n\n首先我们有如下同余式：\n\\\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j(n/d) \\equiv k(n/d)(\\bmod m/d)\\\\]\n这就可以看出该序列的确是重复出现了$d$次，那么剩下的问题就是证明这$m/d$个数恰好就是\n\\\\[\\{ 0,d,2d, \\ldots ,m - d\\} \\\\]\n的某个排列。\n令$m = m'd,n = n'd$，所以有\n\\\\[kn\\bmod m = d(kn'\\bmod m')\\\\]\n所以我们只考虑$m \\bot n$的情形，在此情形下，我们可以得到\n\\\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j \\equiv k(\\bmod m)\\\\]\n由此可以看出，这$m-1$个数一定就是\n\\\\[\\{ 0,1,2, \\ldots ,m - 1\\} \\\\]\n至此得证。\n\n下面介绍几个著名的数论定理。\n\n# 费马最后定理\n---\n对于所有的正整数$a,b,c,n>2$，有\n\\\\[{a^n} + {b^n} \\ne {c^n}\\\\]\n\n# 费马小定理\n---\n如果$n \\bot p$，那么有\n\\\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\\\]\n\n证明也很好证。\n\n之前证过了，序列\n\\\\[n\\bmod p,2n\\bmod p, \\ldots ,(p - 1)n\\bmod p\\\\]\n结果就是\n\\\\[1,2, \\ldots ,p-1\\\\]\n的某个排列，所以有\n\\\\[n \\cdot (2n) \\cdot  \\ldots  \\cdot ((p - 1)n) \\equiv (p - 1)!\\\\]\n所以\n\\\\[(p - 1)!{n^{p - 1}} \\equiv (p - 1)!(\\bmod p)\\\\]\n所以\n\\\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\\\]\n\n# 欧拉函数\n---\n定义$\\varphi (m)$为小于$m$且与其互素的正整数个数。\n\n所以我们有欧拉定理\n\\\\[{n^{\\varphi (m)}} \\equiv 1(\\bmod m)\\\\]\n其中$n \\bot m$，可以发现，当$m$是素数时，欧拉定理就是费马小定理，所以欧拉定理是费马小定理的推广形式。\n\n欧拉定理有很多有趣的性质，这里就不一一介绍了，详情见[博客地址](https://blog.csdn.net/howe_young/article/details/50282775)。\n\n# 莫比乌斯函数\n---\n定义莫比乌斯函数$\\mu (m)$为\n\\\\[\\sum\\limits_{d|m} {\\mu (d)}  = [m = 1]\\\\]\n\n这个定义看起来很奇怪是不是？其实这是一个递归定义，可以递归地计算得到所有的值。\n\n这个函数有什么用呢？主要用来进行莫比乌斯反演：\n\\\\[g(m) = \\sum\\limits_{d|m} {f(d)}  \\Leftrightarrow f(m) = \\sum\\limits_{d|m} {\\mu (d)g(\\frac{m}{d})} \\\\]\n\n详细的性质及应用也不介绍了，给大家推荐一个牛逼的博客[博客地址](https://blog.csdn.net/acdreamers/article/details/8542292)，我当时学ACM的时候这部分都是看着他的学的。\n\n# 组合数入门\n---\n定义组合数$\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right)$为从$n$个物品中取出$k$个物品的方法数，具体计算为\n\\\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\frac{ {n(n - 1) \\ldots (n - k + 1)}}{ {k(k - 1) \\ldots 1}}\\\\]\n\n推广到实数领域，定义\n\\\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left\\{ {\\begin{array}{c}{\\frac{ {r(r - 1) \\ldots (r - k + 1)}}{ {k(k - 1) \\ldots 1}} = \\frac{ { {r^{\\underline{k}}}}}{ {k!}},k \\ge 0}\\\\{0,k < 0}\\end{array}} \\right.\\\\]\n\n下面介绍一些组合数性质。\n## 性质1\n\\\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}n\\\\{n - k}\\end{array}} \\right),n,k \\in \\mathbb{Z},n \\ge 0\\\\]\n这里为什么要限定$n \\ge 0$呢？举个例子，如果$n = -1$，那么有\n\\\\[\\left( {\\begin{array}{c}{ - 1}\\\\k\\end{array}} \\right) \\ne \\left( {\\begin{array}{c}{ - 1}\\\\{ - 1 - k}\\end{array}} \\right)\\\\]\n因为左边等于${( - 1)^k}$，而右边等于${( - 1)^{-1-k}}$。\n\n## 性质2\n\\\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\frac{r}{k}\\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\\\]\n\n## 性质3\n\\\\[(r - k)\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = r\\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right)\\\\]\n\n## 性质4\n\\\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right) + \\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\\\]\n这条性质可以通过性质3和性质4两边分别相加得到。\n\n## 性质5\n\\\\[\\sum\\limits_{k \\le n} {\\left( {\\begin{array}{c}{r + k}\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{r + n + 1}\\\\n\\end{array}} \\right)\\\\]\n\n## 性质6\n\\\\[\\sum\\limits_{0 \\le k \\le n} {\\left( {\\begin{array}{c}k\\\\m\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{n + 1}\\\\{m + 1}\\end{array}} \\right)\\\\]\n\n## 性质7\n微分形式：\n\\\\[\\Delta \\left( {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{c}{x + 1}\\\\m\\end{array}} \\right) - \\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{c}x\\\\{m - 1}\\end{array}} \\right)\\\\]\n\\\\[\\sum {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)\\delta x = } \\left( {\\begin{array}{c}x\\\\{m + 1}\\end{array}} \\right) + C\\\\]\n\n# 二项式系数\n---\n\\\\[{(x + y)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right)} {x^k}{y^{r - k}},r \\in \\mathbb{Z}\\\\]\n\n二项式系数也有很多有趣的性质。\n\n\\\\[{2^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) + \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + \\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\\\]\n\n\\\\[{0^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) - \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + {( - 1)^n}\\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\\\]\n即奇数项系数和等于偶数项系数和。\n\n推广到实数域：\n\\\\[{(1 + z)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right){z^k}} ,\\left| z \\right| < 1,r \\in \\mathbb{R}\\\\]\n可以通过泰勒展开证明。\n\n","source":"_posts/concrete-math-12.md","raw":"---\ntitle: 具体数学-第12课（数论进阶与组合数入门）\ndate: 2018-05-14 15:41:51\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=554191378&auto=1&height=66\"></iframe></div>\n\n> 这节课内容太多了，再加上感冒身体不舒服，下面的定理就不一一证明了，大家可以自行练习。以后有空我会补上的！\n\n# 例题1\n---\n首先接着上节课同余继续讲，在[第三章例题2](http://godweiyang.com/2018/04/23/concrete-math-9/)中，我们遗留了一个问题：对于如下序列\n\\\\[0\\bmod m,n\\bmod m,2n\\bmod m, \\ldots ,(m - 1)n\\bmod m\\\\]\n它的值就是\n\\\\[0,d,2d, \\ldots ,(m/d - 1)d\\\\]\n的某个排列，并且重复了$d$次。其中$d = gcd(m, n)$\n\n首先我们有如下同余式：\n\\\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j(n/d) \\equiv k(n/d)(\\bmod m/d)\\\\]\n这就可以看出该序列的确是重复出现了$d$次，那么剩下的问题就是证明这$m/d$个数恰好就是\n\\\\[\\{ 0,d,2d, \\ldots ,m - d\\} \\\\]\n的某个排列。\n令$m = m'd,n = n'd$，所以有\n\\\\[kn\\bmod m = d(kn'\\bmod m')\\\\]\n所以我们只考虑$m \\bot n$的情形，在此情形下，我们可以得到\n\\\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j \\equiv k(\\bmod m)\\\\]\n由此可以看出，这$m-1$个数一定就是\n\\\\[\\{ 0,1,2, \\ldots ,m - 1\\} \\\\]\n至此得证。\n\n下面介绍几个著名的数论定理。\n\n# 费马最后定理\n---\n对于所有的正整数$a,b,c,n>2$，有\n\\\\[{a^n} + {b^n} \\ne {c^n}\\\\]\n\n# 费马小定理\n---\n如果$n \\bot p$，那么有\n\\\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\\\]\n\n证明也很好证。\n\n之前证过了，序列\n\\\\[n\\bmod p,2n\\bmod p, \\ldots ,(p - 1)n\\bmod p\\\\]\n结果就是\n\\\\[1,2, \\ldots ,p-1\\\\]\n的某个排列，所以有\n\\\\[n \\cdot (2n) \\cdot  \\ldots  \\cdot ((p - 1)n) \\equiv (p - 1)!\\\\]\n所以\n\\\\[(p - 1)!{n^{p - 1}} \\equiv (p - 1)!(\\bmod p)\\\\]\n所以\n\\\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\\\]\n\n# 欧拉函数\n---\n定义$\\varphi (m)$为小于$m$且与其互素的正整数个数。\n\n所以我们有欧拉定理\n\\\\[{n^{\\varphi (m)}} \\equiv 1(\\bmod m)\\\\]\n其中$n \\bot m$，可以发现，当$m$是素数时，欧拉定理就是费马小定理，所以欧拉定理是费马小定理的推广形式。\n\n欧拉定理有很多有趣的性质，这里就不一一介绍了，详情见[博客地址](https://blog.csdn.net/howe_young/article/details/50282775)。\n\n# 莫比乌斯函数\n---\n定义莫比乌斯函数$\\mu (m)$为\n\\\\[\\sum\\limits_{d|m} {\\mu (d)}  = [m = 1]\\\\]\n\n这个定义看起来很奇怪是不是？其实这是一个递归定义，可以递归地计算得到所有的值。\n\n这个函数有什么用呢？主要用来进行莫比乌斯反演：\n\\\\[g(m) = \\sum\\limits_{d|m} {f(d)}  \\Leftrightarrow f(m) = \\sum\\limits_{d|m} {\\mu (d)g(\\frac{m}{d})} \\\\]\n\n详细的性质及应用也不介绍了，给大家推荐一个牛逼的博客[博客地址](https://blog.csdn.net/acdreamers/article/details/8542292)，我当时学ACM的时候这部分都是看着他的学的。\n\n# 组合数入门\n---\n定义组合数$\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right)$为从$n$个物品中取出$k$个物品的方法数，具体计算为\n\\\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\frac{ {n(n - 1) \\ldots (n - k + 1)}}{ {k(k - 1) \\ldots 1}}\\\\]\n\n推广到实数领域，定义\n\\\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left\\{ {\\begin{array}{c}{\\frac{ {r(r - 1) \\ldots (r - k + 1)}}{ {k(k - 1) \\ldots 1}} = \\frac{ { {r^{\\underline{k}}}}}{ {k!}},k \\ge 0}\\\\{0,k < 0}\\end{array}} \\right.\\\\]\n\n下面介绍一些组合数性质。\n## 性质1\n\\\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}n\\\\{n - k}\\end{array}} \\right),n,k \\in \\mathbb{Z},n \\ge 0\\\\]\n这里为什么要限定$n \\ge 0$呢？举个例子，如果$n = -1$，那么有\n\\\\[\\left( {\\begin{array}{c}{ - 1}\\\\k\\end{array}} \\right) \\ne \\left( {\\begin{array}{c}{ - 1}\\\\{ - 1 - k}\\end{array}} \\right)\\\\]\n因为左边等于${( - 1)^k}$，而右边等于${( - 1)^{-1-k}}$。\n\n## 性质2\n\\\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\frac{r}{k}\\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\\\]\n\n## 性质3\n\\\\[(r - k)\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = r\\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right)\\\\]\n\n## 性质4\n\\\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right) + \\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\\\]\n这条性质可以通过性质3和性质4两边分别相加得到。\n\n## 性质5\n\\\\[\\sum\\limits_{k \\le n} {\\left( {\\begin{array}{c}{r + k}\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{r + n + 1}\\\\n\\end{array}} \\right)\\\\]\n\n## 性质6\n\\\\[\\sum\\limits_{0 \\le k \\le n} {\\left( {\\begin{array}{c}k\\\\m\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{n + 1}\\\\{m + 1}\\end{array}} \\right)\\\\]\n\n## 性质7\n微分形式：\n\\\\[\\Delta \\left( {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{c}{x + 1}\\\\m\\end{array}} \\right) - \\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{c}x\\\\{m - 1}\\end{array}} \\right)\\\\]\n\\\\[\\sum {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)\\delta x = } \\left( {\\begin{array}{c}x\\\\{m + 1}\\end{array}} \\right) + C\\\\]\n\n# 二项式系数\n---\n\\\\[{(x + y)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right)} {x^k}{y^{r - k}},r \\in \\mathbb{Z}\\\\]\n\n二项式系数也有很多有趣的性质。\n\n\\\\[{2^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) + \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + \\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\\\]\n\n\\\\[{0^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) - \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + {( - 1)^n}\\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\\\]\n即奇数项系数和等于偶数项系数和。\n\n推广到实数域：\n\\\\[{(1 + z)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right){z^k}} ,\\left| z \\right| < 1,r \\in \\mathbb{R}\\\\]\n可以通过泰勒展开证明。\n\n","slug":"concrete-math-12","published":1,"updated":"2019-07-20T04:06:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ev00687swe4hjd9zbr","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=554191378&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>这节课内容太多了，再加上感冒身体不舒服，下面的定理就不一一证明了，大家可以自行练习。以后有空我会补上的！</p>\n</blockquote>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>首先接着上节课同余继续讲，在<a href=\"http://godweiyang.com/2018/04/23/concrete-math-9/\">第三章例题2</a>中，我们遗留了一个问题：对于如下序列<br>\\[0\\bmod m,n\\bmod m,2n\\bmod m, \\ldots ,(m - 1)n\\bmod m\\]<br>它的值就是<br>\\[0,d,2d, \\ldots ,(m/d - 1)d\\]<br>的某个排列，并且重复了$d$次。其中$d = gcd(m, n)$</p>\n<p>首先我们有如下同余式：<br>\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j(n/d) \\equiv k(n/d)(\\bmod m/d)\\]<br>这就可以看出该序列的确是重复出现了$d$次，那么剩下的问题就是证明这$m/d$个数恰好就是<br>\\[\\{ 0,d,2d, \\ldots ,m - d\\} \\]<br>的某个排列。<br>令$m = m’d,n = n’d$，所以有<br>\\[kn\\bmod m = d(kn’\\bmod m’)\\]<br>所以我们只考虑$m \\bot n$的情形，在此情形下，我们可以得到<br>\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j \\equiv k(\\bmod m)\\]<br>由此可以看出，这$m-1$个数一定就是<br>\\[\\{ 0,1,2, \\ldots ,m - 1\\} \\]<br>至此得证。</p>\n<p>下面介绍几个著名的数论定理。</p>\n<h1 id=\"费马最后定理\"><a href=\"#费马最后定理\" class=\"headerlink\" title=\"费马最后定理\"></a>费马最后定理</h1><hr>\n<p>对于所有的正整数$a,b,c,n&gt;2$，有<br>\\[{a^n} + {b^n} \\ne {c^n}\\]</p>\n<h1 id=\"费马小定理\"><a href=\"#费马小定理\" class=\"headerlink\" title=\"费马小定理\"></a>费马小定理</h1><hr>\n<p>如果$n \\bot p$，那么有<br>\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\]</p>\n<p>证明也很好证。</p>\n<p>之前证过了，序列<br>\\[n\\bmod p,2n\\bmod p, \\ldots ,(p - 1)n\\bmod p\\]<br>结果就是<br>\\[1,2, \\ldots ,p-1\\]<br>的某个排列，所以有<br>\\[n \\cdot (2n) \\cdot  \\ldots  \\cdot ((p - 1)n) \\equiv (p - 1)!\\]<br>所以<br>\\[(p - 1)!{n^{p - 1}} \\equiv (p - 1)!(\\bmod p)\\]<br>所以<br>\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\]</p>\n<h1 id=\"欧拉函数\"><a href=\"#欧拉函数\" class=\"headerlink\" title=\"欧拉函数\"></a>欧拉函数</h1><hr>\n<p>定义$\\varphi (m)$为小于$m$且与其互素的正整数个数。</p>\n<p>所以我们有欧拉定理<br>\\[{n^{\\varphi (m)}} \\equiv 1(\\bmod m)\\]<br>其中$n \\bot m$，可以发现，当$m$是素数时，欧拉定理就是费马小定理，所以欧拉定理是费马小定理的推广形式。</p>\n<p>欧拉定理有很多有趣的性质，这里就不一一介绍了，详情见<a href=\"https://blog.csdn.net/howe_young/article/details/50282775\" target=\"_blank\" rel=\"noopener\">博客地址</a>。</p>\n<h1 id=\"莫比乌斯函数\"><a href=\"#莫比乌斯函数\" class=\"headerlink\" title=\"莫比乌斯函数\"></a>莫比乌斯函数</h1><hr>\n<p>定义莫比乌斯函数$\\mu (m)$为<br>\\[\\sum\\limits_{d|m} {\\mu (d)}  = [m = 1]\\]</p>\n<p>这个定义看起来很奇怪是不是？其实这是一个递归定义，可以递归地计算得到所有的值。</p>\n<p>这个函数有什么用呢？主要用来进行莫比乌斯反演：<br>\\[g(m) = \\sum\\limits_{d|m} {f(d)}  \\Leftrightarrow f(m) = \\sum\\limits_{d|m} {\\mu (d)g(\\frac{m}{d})} \\]</p>\n<p>详细的性质及应用也不介绍了，给大家推荐一个牛逼的博客<a href=\"https://blog.csdn.net/acdreamers/article/details/8542292\" target=\"_blank\" rel=\"noopener\">博客地址</a>，我当时学ACM的时候这部分都是看着他的学的。</p>\n<h1 id=\"组合数入门\"><a href=\"#组合数入门\" class=\"headerlink\" title=\"组合数入门\"></a>组合数入门</h1><hr>\n<p>定义组合数$\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right)$为从$n$个物品中取出$k$个物品的方法数，具体计算为<br>\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\frac{ {n(n - 1) \\ldots (n - k + 1)}}{ {k(k - 1) \\ldots 1}}\\]</p>\n<p>推广到实数领域，定义<br>\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left\\{ {\\begin{array}{c}{\\frac{ {r(r - 1) \\ldots (r - k + 1)}}{ {k(k - 1) \\ldots 1}} = \\frac{ { {r^{\\underline{k}}}}}{ {k!}},k \\ge 0}\\\\{0,k &lt; 0}\\end{array}} \\right.\\]</p>\n<p>下面介绍一些组合数性质。</p>\n<h2 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h2><p>\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}n\\\\{n - k}\\end{array}} \\right),n,k \\in \\mathbb{Z},n \\ge 0\\]<br>这里为什么要限定$n \\ge 0$呢？举个例子，如果$n = -1$，那么有<br>\\[\\left( {\\begin{array}{c}{ - 1}\\\\k\\end{array}} \\right) \\ne \\left( {\\begin{array}{c}{ - 1}\\\\{ - 1 - k}\\end{array}} \\right)\\]<br>因为左边等于${( - 1)^k}$，而右边等于${( - 1)^{-1-k}}$。</p>\n<h2 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h2><p>\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\frac{r}{k}\\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\]</p>\n<h2 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h2><p>\\[(r - k)\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = r\\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right)\\]</p>\n<h2 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h2><p>\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right) + \\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\]<br>这条性质可以通过性质3和性质4两边分别相加得到。</p>\n<h2 id=\"性质5\"><a href=\"#性质5\" class=\"headerlink\" title=\"性质5\"></a>性质5</h2><p>\\[\\sum\\limits_{k \\le n} {\\left( {\\begin{array}{c}{r + k}\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{r + n + 1}\\\\n\\end{array}} \\right)\\]</p>\n<h2 id=\"性质6\"><a href=\"#性质6\" class=\"headerlink\" title=\"性质6\"></a>性质6</h2><p>\\[\\sum\\limits_{0 \\le k \\le n} {\\left( {\\begin{array}{c}k\\\\m\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{n + 1}\\\\{m + 1}\\end{array}} \\right)\\]</p>\n<h2 id=\"性质7\"><a href=\"#性质7\" class=\"headerlink\" title=\"性质7\"></a>性质7</h2><p>微分形式：<br>\\[\\Delta \\left( {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{c}{x + 1}\\\\m\\end{array}} \\right) - \\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{c}x\\\\{m - 1}\\end{array}} \\right)\\]<br>\\[\\sum {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)\\delta x = } \\left( {\\begin{array}{c}x\\\\{m + 1}\\end{array}} \\right) + C\\]</p>\n<h1 id=\"二项式系数\"><a href=\"#二项式系数\" class=\"headerlink\" title=\"二项式系数\"></a>二项式系数</h1><hr>\n<p>\\[{(x + y)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right)} {x^k}{y^{r - k}},r \\in \\mathbb{Z}\\]</p>\n<p>二项式系数也有很多有趣的性质。</p>\n<p>\\[{2^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) + \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + \\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\]</p>\n<p>\\[{0^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) - \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + {( - 1)^n}\\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\]<br>即奇数项系数和等于偶数项系数和。</p>\n<p>推广到实数域：<br>\\[{(1 + z)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right){z^k}} ,\\left| z \\right| &lt; 1,r \\in \\mathbb{R}\\]<br>可以通过泰勒展开证明。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=554191378&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>这节课内容太多了，再加上感冒身体不舒服，下面的定理就不一一证明了，大家可以自行练习。以后有空我会补上的！</p>\n</blockquote>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>首先接着上节课同余继续讲，在<a href=\"http://godweiyang.com/2018/04/23/concrete-math-9/\">第三章例题2</a>中，我们遗留了一个问题：对于如下序列<br>\\[0\\bmod m,n\\bmod m,2n\\bmod m, \\ldots ,(m - 1)n\\bmod m\\]<br>它的值就是<br>\\[0,d,2d, \\ldots ,(m/d - 1)d\\]<br>的某个排列，并且重复了$d$次。其中$d = gcd(m, n)$</p>\n<p>首先我们有如下同余式：<br>\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j(n/d) \\equiv k(n/d)(\\bmod m/d)\\]<br>这就可以看出该序列的确是重复出现了$d$次，那么剩下的问题就是证明这$m/d$个数恰好就是<br>\\[\\{ 0,d,2d, \\ldots ,m - d\\} \\]<br>的某个排列。<br>令$m = m’d,n = n’d$，所以有<br>\\[kn\\bmod m = d(kn’\\bmod m’)\\]<br>所以我们只考虑$m \\bot n$的情形，在此情形下，我们可以得到<br>\\[jn \\equiv kn(\\bmod m) \\Leftrightarrow j \\equiv k(\\bmod m)\\]<br>由此可以看出，这$m-1$个数一定就是<br>\\[\\{ 0,1,2, \\ldots ,m - 1\\} \\]<br>至此得证。</p>\n<p>下面介绍几个著名的数论定理。</p>\n<h1 id=\"费马最后定理\"><a href=\"#费马最后定理\" class=\"headerlink\" title=\"费马最后定理\"></a>费马最后定理</h1><hr>\n<p>对于所有的正整数$a,b,c,n&gt;2$，有<br>\\[{a^n} + {b^n} \\ne {c^n}\\]</p>\n<h1 id=\"费马小定理\"><a href=\"#费马小定理\" class=\"headerlink\" title=\"费马小定理\"></a>费马小定理</h1><hr>\n<p>如果$n \\bot p$，那么有<br>\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\]</p>\n<p>证明也很好证。</p>\n<p>之前证过了，序列<br>\\[n\\bmod p,2n\\bmod p, \\ldots ,(p - 1)n\\bmod p\\]<br>结果就是<br>\\[1,2, \\ldots ,p-1\\]<br>的某个排列，所以有<br>\\[n \\cdot (2n) \\cdot  \\ldots  \\cdot ((p - 1)n) \\equiv (p - 1)!\\]<br>所以<br>\\[(p - 1)!{n^{p - 1}} \\equiv (p - 1)!(\\bmod p)\\]<br>所以<br>\\[{n^{p - 1}} \\equiv 1(\\bmod p)\\]</p>\n<h1 id=\"欧拉函数\"><a href=\"#欧拉函数\" class=\"headerlink\" title=\"欧拉函数\"></a>欧拉函数</h1><hr>\n<p>定义$\\varphi (m)$为小于$m$且与其互素的正整数个数。</p>\n<p>所以我们有欧拉定理<br>\\[{n^{\\varphi (m)}} \\equiv 1(\\bmod m)\\]<br>其中$n \\bot m$，可以发现，当$m$是素数时，欧拉定理就是费马小定理，所以欧拉定理是费马小定理的推广形式。</p>\n<p>欧拉定理有很多有趣的性质，这里就不一一介绍了，详情见<a href=\"https://blog.csdn.net/howe_young/article/details/50282775\" target=\"_blank\" rel=\"noopener\">博客地址</a>。</p>\n<h1 id=\"莫比乌斯函数\"><a href=\"#莫比乌斯函数\" class=\"headerlink\" title=\"莫比乌斯函数\"></a>莫比乌斯函数</h1><hr>\n<p>定义莫比乌斯函数$\\mu (m)$为<br>\\[\\sum\\limits_{d|m} {\\mu (d)}  = [m = 1]\\]</p>\n<p>这个定义看起来很奇怪是不是？其实这是一个递归定义，可以递归地计算得到所有的值。</p>\n<p>这个函数有什么用呢？主要用来进行莫比乌斯反演：<br>\\[g(m) = \\sum\\limits_{d|m} {f(d)}  \\Leftrightarrow f(m) = \\sum\\limits_{d|m} {\\mu (d)g(\\frac{m}{d})} \\]</p>\n<p>详细的性质及应用也不介绍了，给大家推荐一个牛逼的博客<a href=\"https://blog.csdn.net/acdreamers/article/details/8542292\" target=\"_blank\" rel=\"noopener\">博客地址</a>，我当时学ACM的时候这部分都是看着他的学的。</p>\n<h1 id=\"组合数入门\"><a href=\"#组合数入门\" class=\"headerlink\" title=\"组合数入门\"></a>组合数入门</h1><hr>\n<p>定义组合数$\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right)$为从$n$个物品中取出$k$个物品的方法数，具体计算为<br>\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\frac{ {n(n - 1) \\ldots (n - k + 1)}}{ {k(k - 1) \\ldots 1}}\\]</p>\n<p>推广到实数领域，定义<br>\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left\\{ {\\begin{array}{c}{\\frac{ {r(r - 1) \\ldots (r - k + 1)}}{ {k(k - 1) \\ldots 1}} = \\frac{ { {r^{\\underline{k}}}}}{ {k!}},k \\ge 0}\\\\{0,k &lt; 0}\\end{array}} \\right.\\]</p>\n<p>下面介绍一些组合数性质。</p>\n<h2 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h2><p>\\[\\left( {\\begin{array}{c}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}n\\\\{n - k}\\end{array}} \\right),n,k \\in \\mathbb{Z},n \\ge 0\\]<br>这里为什么要限定$n \\ge 0$呢？举个例子，如果$n = -1$，那么有<br>\\[\\left( {\\begin{array}{c}{ - 1}\\\\k\\end{array}} \\right) \\ne \\left( {\\begin{array}{c}{ - 1}\\\\{ - 1 - k}\\end{array}} \\right)\\]<br>因为左边等于${( - 1)^k}$，而右边等于${( - 1)^{-1-k}}$。</p>\n<h2 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h2><p>\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\frac{r}{k}\\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\]</p>\n<h2 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h2><p>\\[(r - k)\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = r\\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right)\\]</p>\n<h2 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h2><p>\\[\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{c}{r - 1}\\\\k\\end{array}} \\right) + \\left( {\\begin{array}{c}{r - 1}\\\\{k - 1}\\end{array}} \\right)\\]<br>这条性质可以通过性质3和性质4两边分别相加得到。</p>\n<h2 id=\"性质5\"><a href=\"#性质5\" class=\"headerlink\" title=\"性质5\"></a>性质5</h2><p>\\[\\sum\\limits_{k \\le n} {\\left( {\\begin{array}{c}{r + k}\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{r + n + 1}\\\\n\\end{array}} \\right)\\]</p>\n<h2 id=\"性质6\"><a href=\"#性质6\" class=\"headerlink\" title=\"性质6\"></a>性质6</h2><p>\\[\\sum\\limits_{0 \\le k \\le n} {\\left( {\\begin{array}{c}k\\\\m\\end{array}} \\right)}  = \\left( {\\begin{array}{c}{n + 1}\\\\{m + 1}\\end{array}} \\right)\\]</p>\n<h2 id=\"性质7\"><a href=\"#性质7\" class=\"headerlink\" title=\"性质7\"></a>性质7</h2><p>微分形式：<br>\\[\\Delta \\left( {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{c}{x + 1}\\\\m\\end{array}} \\right) - \\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{c}x\\\\{m - 1}\\end{array}} \\right)\\]<br>\\[\\sum {\\left( {\\begin{array}{c}x\\\\m\\end{array}} \\right)\\delta x = } \\left( {\\begin{array}{c}x\\\\{m + 1}\\end{array}} \\right) + C\\]</p>\n<h1 id=\"二项式系数\"><a href=\"#二项式系数\" class=\"headerlink\" title=\"二项式系数\"></a>二项式系数</h1><hr>\n<p>\\[{(x + y)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right)} {x^k}{y^{r - k}},r \\in \\mathbb{Z}\\]</p>\n<p>二项式系数也有很多有趣的性质。</p>\n<p>\\[{2^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) + \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + \\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\]</p>\n<p>\\[{0^n} = \\left( {\\begin{array}{c}n\\\\0\\end{array}} \\right) - \\left( {\\begin{array}{c}n\\\\1\\end{array}} \\right) +  \\cdots  + {( - 1)^n}\\left( {\\begin{array}{c}n\\\\n\\end{array}} \\right)\\]<br>即奇数项系数和等于偶数项系数和。</p>\n<p>推广到实数域：<br>\\[{(1 + z)^r} = \\sum\\limits_k {\\left( {\\begin{array}{c}r\\\\k\\end{array}} \\right){z^k}} ,\\left| z \\right| &lt; 1,r \\in \\mathbb{R}\\]<br>可以通过泰勒展开证明。</p>\n"},{"title":"具体数学-第13课（组合数各种性质）","date":"2018-05-27T08:30:06.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33035611&auto=1&height=66\"></iframe></div>\n\n> 首先庆祝我自己顺利毕业了，忙完了毕业论文答辩一直在浪，所以上周的具体数学没有更新，现在补更一下，大家见谅。\n\n首先这节课讲的基本都是组合数的相关性质，而且特别多，所以我就不在这里详细证明了，如果你们对某一个性质感兴趣，可以自己证明去。\n\n# 性质1\n---\n首先将组合数推广到负数域，也就是底数为负数的情况：\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{\\*{20}{c}}{k - r - 1}\\\\k\\end{array}} \\right)\\\\]\n证明可以从下降阶乘幂的定义直接得到。\n\n# 性质2\n---\n由于\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}{m + n}\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{m + n}\\\\n\\end{array}} \\right)\\\\]\n所以由性质1可得\n\\\\[{( - 1)^m}\\left( {\\begin{array}{\\*{20}{c}}{ - n - 1}\\\\m\\end{array}} \\right) = {( - 1)^n}\\left( {\\begin{array}{\\*{20}{c}}{ - m - 1}\\\\n\\end{array}} \\right)\\\\]\n\n# 性质3\n---\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = {( - 1)^m}\\left( {\\begin{array}{\\*{20}{c}}{r - 1}\\\\m\\end{array}} \\right)\\\\]\n这就说明了杨辉三角同一行的前面若干项交错和是可以求得的，但是它们的直接和是无法求出的。\n\n# 性质4\n---\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{ - r}\\\\k\\end{array}} \\right){ {( - x)}^k}{ {(x + y)}^{m - k}}} } \\\\]\n证明可以通过令\n\\\\[{S_m} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r - 1}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  + \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r - 1}\\\\{k - 1}\\end{array}} \\right){x^k}{y^{m - k}}} \\\\]\n将左边表示成递归式的形式，同理如果右边可以表示成相同的递归式，那么左右就相等了。\n\n性质4看起来特别复杂，那么它有什么用呢？如果令$x$和$y$等于不同的值，那么就可以得到许多不同的恒等式。\n\n# 性质5\n---\n令$x =  - 1,y = 1$可以得到\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r}\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = \\left( {\\begin{array}{\\*{20}{c}}{ - r}\\\\m\\end{array}} \\right)\\\\]\n这其实就是性质3的特例。\n\n# 性质6\n---\n令$x = y = 1,r = m + 1$可以得到\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{2m + 1}\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{m - k}}} \\\\]\n左边就是杨辉三角一行中左边一半的和，所以可以得到\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{ - k}}} {\\rm{ = }}{2^m}\\\\]\n\n# 性质7\n---\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}r\\\\m\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}{r - k}\\\\{m - k}\\end{array}} \\right)\\\\]\n这个公式可以形象理解为，从$r$个物品中取$m$个，再从这$m$个中取$k$个的方法数等于从$r$个物品中取$k$个，再从剩下的$r-k$个中取$m-k$个的方法数。证明的话直接用定义可证。\n\n# 性质8\n---\n之前介绍了二项式系数，那么可以推广到任意$m$个未知数，它的展开式为\n\\\\[{({x_1} + {x_2} +  \\cdots  + {x_m})^n} = \\sum\\limits_{\\scriptstyle0 \\le {a_1},{a_2}, \\cdots ,{a_m} \\le n\\atop\\scriptstyle{a_1} + {a_2} +  \\cdots  + {a_m} = n} {\\left( {\\begin{array}{\\*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right)} {x_1}^{ {a_1}}{x_2}^{ {a_2}} \\cdots {x_m}^{ {a_m}}\\\\]\n其中\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_2} +  \\cdots  + {a_m}}\\end{array}} \\right) \\cdots \\left( {\\begin{array}{\\*{20}{c}}{ {a_{m - 1}} + {a_m}}\\\\{ {a_m}}\\end{array}} \\right)\\\\]\n\n# 性质9\n---\n范德蒙德卷积式：\n\\\\[\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}r\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}s\\\\{n - k}\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{r + s}\\\\{m + n}\\end{array}} \\right)\\\\]\n很多公式都可以通过替换其中的一些变量推导得到：\n\\\\[\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}s\\\\{n + k}\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{l + s}\\\\{l - m + n}\\end{array}} \\right)\\\\\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}{s + k}\\\\n\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{\\*{20}{c}}{s - m}\\\\{n - l}\\end{array}} \\right)\\\\\\sum\\limits_{k \\le l} {\\left( {\\begin{array}{\\*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}s\\\\{k - n}\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{\\*{20}{c}}{s - m - 1}\\\\{l - m - n}\\end{array}} \\right)\\\\\\sum\\limits_{0 \\le k \\le l} {\\left( {\\begin{array}{\\*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}{q + k}\\\\n\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{l + q + 1}\\\\{m + n + 1}\\end{array}} \\right)\\end{array}\\\\]\n\n# 例题1\n---\n最后详细求解一道组合题，其他的题目就不介绍了，可以去看具体数学英文版第173页。\n\n求下面式子的闭形式解：\n\\\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)} ,n \\ge m \\ge 0\\\\]\n\n根据性质7，可以得到\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\m\\end{array}} \\right)\\\\]\n所以\n\\\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\m\\end{array}} \\right)} \\\\]\n而\n\\\\[\\begin{array}{l}\\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)}  = \\sum\\limits_{m - k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}{n - (m - k)}\\\\{m - (m - k)}\\end{array}} \\right)} \\\\ = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{n - m + k}\\\\k\\end{array}} \\right)} \\\\ = \\left( {\\begin{array}{\\*{20}{c}}{(n - m) + m + 1}\\\\m\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{\\*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)\\end{array}\\\\]\n所以\n\\\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{\\*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\m\\end{array}} \\right) = \\frac{ {n + 1}}{ {n + 1 - m}}\\\\]","source":"_posts/concrete-math-13.md","raw":"---\ntitle: 具体数学-第13课（组合数各种性质）\ndate: 2018-05-27 16:30:06\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33035611&auto=1&height=66\"></iframe></div>\n\n> 首先庆祝我自己顺利毕业了，忙完了毕业论文答辩一直在浪，所以上周的具体数学没有更新，现在补更一下，大家见谅。\n\n首先这节课讲的基本都是组合数的相关性质，而且特别多，所以我就不在这里详细证明了，如果你们对某一个性质感兴趣，可以自己证明去。\n\n# 性质1\n---\n首先将组合数推广到负数域，也就是底数为负数的情况：\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{\\*{20}{c}}{k - r - 1}\\\\k\\end{array}} \\right)\\\\]\n证明可以从下降阶乘幂的定义直接得到。\n\n# 性质2\n---\n由于\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}{m + n}\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{m + n}\\\\n\\end{array}} \\right)\\\\]\n所以由性质1可得\n\\\\[{( - 1)^m}\\left( {\\begin{array}{\\*{20}{c}}{ - n - 1}\\\\m\\end{array}} \\right) = {( - 1)^n}\\left( {\\begin{array}{\\*{20}{c}}{ - m - 1}\\\\n\\end{array}} \\right)\\\\]\n\n# 性质3\n---\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = {( - 1)^m}\\left( {\\begin{array}{\\*{20}{c}}{r - 1}\\\\m\\end{array}} \\right)\\\\]\n这就说明了杨辉三角同一行的前面若干项交错和是可以求得的，但是它们的直接和是无法求出的。\n\n# 性质4\n---\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{ - r}\\\\k\\end{array}} \\right){ {( - x)}^k}{ {(x + y)}^{m - k}}} } \\\\]\n证明可以通过令\n\\\\[{S_m} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r - 1}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  + \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r - 1}\\\\{k - 1}\\end{array}} \\right){x^k}{y^{m - k}}} \\\\]\n将左边表示成递归式的形式，同理如果右边可以表示成相同的递归式，那么左右就相等了。\n\n性质4看起来特别复杂，那么它有什么用呢？如果令$x$和$y$等于不同的值，那么就可以得到许多不同的恒等式。\n\n# 性质5\n---\n令$x =  - 1,y = 1$可以得到\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + r}\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = \\left( {\\begin{array}{\\*{20}{c}}{ - r}\\\\m\\end{array}} \\right)\\\\]\n这其实就是性质3的特例。\n\n# 性质6\n---\n令$x = y = 1,r = m + 1$可以得到\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{2m + 1}\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{m - k}}} \\\\]\n左边就是杨辉三角一行中左边一半的和，所以可以得到\n\\\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{ - k}}} {\\rm{ = }}{2^m}\\\\]\n\n# 性质7\n---\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}r\\\\m\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}{r - k}\\\\{m - k}\\end{array}} \\right)\\\\]\n这个公式可以形象理解为，从$r$个物品中取$m$个，再从这$m$个中取$k$个的方法数等于从$r$个物品中取$k$个，再从剩下的$r-k$个中取$m-k$个的方法数。证明的话直接用定义可证。\n\n# 性质8\n---\n之前介绍了二项式系数，那么可以推广到任意$m$个未知数，它的展开式为\n\\\\[{({x_1} + {x_2} +  \\cdots  + {x_m})^n} = \\sum\\limits_{\\scriptstyle0 \\le {a_1},{a_2}, \\cdots ,{a_m} \\le n\\atop\\scriptstyle{a_1} + {a_2} +  \\cdots  + {a_m} = n} {\\left( {\\begin{array}{\\*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right)} {x_1}^{ {a_1}}{x_2}^{ {a_2}} \\cdots {x_m}^{ {a_m}}\\\\]\n其中\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_2} +  \\cdots  + {a_m}}\\end{array}} \\right) \\cdots \\left( {\\begin{array}{\\*{20}{c}}{ {a_{m - 1}} + {a_m}}\\\\{ {a_m}}\\end{array}} \\right)\\\\]\n\n# 性质9\n---\n范德蒙德卷积式：\n\\\\[\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}r\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}s\\\\{n - k}\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{r + s}\\\\{m + n}\\end{array}} \\right)\\\\]\n很多公式都可以通过替换其中的一些变量推导得到：\n\\\\[\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}s\\\\{n + k}\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{l + s}\\\\{l - m + n}\\end{array}} \\right)\\\\\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}{s + k}\\\\n\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{\\*{20}{c}}{s - m}\\\\{n - l}\\end{array}} \\right)\\\\\\sum\\limits_{k \\le l} {\\left( {\\begin{array}{\\*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}s\\\\{k - n}\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{\\*{20}{c}}{s - m - 1}\\\\{l - m - n}\\end{array}} \\right)\\\\\\sum\\limits_{0 \\le k \\le l} {\\left( {\\begin{array}{\\*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{\\*{20}{c}}{q + k}\\\\n\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{l + q + 1}\\\\{m + n + 1}\\end{array}} \\right)\\end{array}\\\\]\n\n# 例题1\n---\n最后详细求解一道组合题，其他的题目就不介绍了，可以去看具体数学英文版第173页。\n\n求下面式子的闭形式解：\n\\\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)} ,n \\ge m \\ge 0\\\\]\n\n根据性质7，可以得到\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{\\*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\m\\end{array}} \\right)\\\\]\n所以\n\\\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\m\\end{array}} \\right)} \\\\]\n而\n\\\\[\\begin{array}{l}\\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)}  = \\sum\\limits_{m - k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}{n - (m - k)}\\\\{m - (m - k)}\\end{array}} \\right)} \\\\ = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{\\*{20}{c}}{n - m + k}\\\\k\\end{array}} \\right)} \\\\ = \\left( {\\begin{array}{\\*{20}{c}}{(n - m) + m + 1}\\\\m\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{\\*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)\\end{array}\\\\]\n所以\n\\\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{\\*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{\\*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)/\\left( {\\begin{array}{\\*{20}{c}}n\\\\m\\end{array}} \\right) = \\frac{ {n + 1}}{ {n + 1 - m}}\\\\]","slug":"concrete-math-13","published":1,"updated":"2019-07-20T04:06:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ex006b7swe9pyd0z26","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33035611&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>首先庆祝我自己顺利毕业了，忙完了毕业论文答辩一直在浪，所以上周的具体数学没有更新，现在补更一下，大家见谅。</p>\n</blockquote>\n<p>首先这节课讲的基本都是组合数的相关性质，而且特别多，所以我就不在这里详细证明了，如果你们对某一个性质感兴趣，可以自己证明去。</p>\n<h1 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h1><hr>\n<p>首先将组合数推广到负数域，也就是底数为负数的情况：<br>\\[\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{*{20}{c}}{k - r - 1}\\\\k\\end{array}} \\right)\\]<br>证明可以从下降阶乘幂的定义直接得到。</p>\n<h1 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h1><hr>\n<p>由于<br>\\[\\left( {\\begin{array}{*{20}{c}}{m + n}\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{m + n}\\\\n\\end{array}} \\right)\\]<br>所以由性质1可得<br>\\[{( - 1)^m}\\left( {\\begin{array}{*{20}{c}}{ - n - 1}\\\\m\\end{array}} \\right) = {( - 1)^n}\\left( {\\begin{array}{*{20}{c}}{ - m - 1}\\\\n\\end{array}} \\right)\\]</p>\n<h1 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h1><hr>\n<p>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = {( - 1)^m}\\left( {\\begin{array}{*{20}{c}}{r - 1}\\\\m\\end{array}} \\right)\\]<br>这就说明了杨辉三角同一行的前面若干项交错和是可以求得的，但是它们的直接和是无法求出的。</p>\n<h1 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h1><hr>\n<p>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{ - r}\\\\k\\end{array}} \\right){ {( - x)}^k}{ {(x + y)}^{m - k}}} } \\]<br>证明可以通过令<br>\\[{S_m} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r - 1}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  + \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r - 1}\\\\{k - 1}\\end{array}} \\right){x^k}{y^{m - k}}} \\]<br>将左边表示成递归式的形式，同理如果右边可以表示成相同的递归式，那么左右就相等了。</p>\n<p>性质4看起来特别复杂，那么它有什么用呢？如果令$x$和$y$等于不同的值，那么就可以得到许多不同的恒等式。</p>\n<h1 id=\"性质5\"><a href=\"#性质5\" class=\"headerlink\" title=\"性质5\"></a>性质5</h1><hr>\n<p>令$x =  - 1,y = 1$可以得到<br>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r}\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = \\left( {\\begin{array}{*{20}{c}}{ - r}\\\\m\\end{array}} \\right)\\]<br>这其实就是性质3的特例。</p>\n<h1 id=\"性质6\"><a href=\"#性质6\" class=\"headerlink\" title=\"性质6\"></a>性质6</h1><hr>\n<p>令$x = y = 1,r = m + 1$可以得到<br>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{2m + 1}\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{m - k}}} \\]<br>左边就是杨辉三角一行中左边一半的和，所以可以得到<br>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{ - k}}} {\\rm{ = }}{2^m}\\]</p>\n<h1 id=\"性质7\"><a href=\"#性质7\" class=\"headerlink\" title=\"性质7\"></a>性质7</h1><hr>\n<p>\\[\\left( {\\begin{array}{*{20}{c}}r\\\\m\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}{r - k}\\\\{m - k}\\end{array}} \\right)\\]<br>这个公式可以形象理解为，从$r$个物品中取$m$个，再从这$m$个中取$k$个的方法数等于从$r$个物品中取$k$个，再从剩下的$r-k$个中取$m-k$个的方法数。证明的话直接用定义可证。</p>\n<h1 id=\"性质8\"><a href=\"#性质8\" class=\"headerlink\" title=\"性质8\"></a>性质8</h1><hr>\n<p>之前介绍了二项式系数，那么可以推广到任意$m$个未知数，它的展开式为<br>\\[{({x_1} + {x_2} +  \\cdots  + {x_m})^n} = \\sum\\limits_{\\scriptstyle0 \\le {a_1},{a_2}, \\cdots ,{a_m} \\le n\\atop\\scriptstyle{a_1} + {a_2} +  \\cdots  + {a_m} = n} {\\left( {\\begin{array}{*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right)} {x_1}^{ {a_1}}{x_2}^{ {a_2}} \\cdots {x_m}^{ {a_m}}\\]<br>其中<br>\\[\\left( {\\begin{array}{*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_2} +  \\cdots  + {a_m}}\\end{array}} \\right) \\cdots \\left( {\\begin{array}{*{20}{c}}{ {a_{m - 1}} + {a_m}}\\\\{ {a_m}}\\end{array}} \\right)\\]</p>\n<h1 id=\"性质9\"><a href=\"#性质9\" class=\"headerlink\" title=\"性质9\"></a>性质9</h1><hr>\n<p>范德蒙德卷积式：<br>\\[\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}r\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}s\\\\{n - k}\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{r + s}\\\\{m + n}\\end{array}} \\right)\\]<br>很多公式都可以通过替换其中的一些变量推导得到：<br>\\[\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}s\\\\{n + k}\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{l + s}\\\\{l - m + n}\\end{array}} \\right)\\\\\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}{s + k}\\\\n\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{*{20}{c}}{s - m}\\\\{n - l}\\end{array}} \\right)\\\\\\sum\\limits_{k \\le l} {\\left( {\\begin{array}{*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}s\\\\{k - n}\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{*{20}{c}}{s - m - 1}\\\\{l - m - n}\\end{array}} \\right)\\\\\\sum\\limits_{0 \\le k \\le l} {\\left( {\\begin{array}{*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}{q + k}\\\\n\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{l + q + 1}\\\\{m + n + 1}\\end{array}} \\right)\\end{array}\\]</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>最后详细求解一道组合题，其他的题目就不介绍了，可以去看具体数学英文版第173页。</p>\n<p>求下面式子的闭形式解：<br>\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)} ,n \\ge m \\ge 0\\]</p>\n<p>根据性质7，可以得到<br>\\[\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\m\\end{array}} \\right)\\]<br>所以<br>\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\m\\end{array}} \\right)} \\]<br>而<br>\\[\\begin{array}{l}\\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)}  = \\sum\\limits_{m - k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}{n - (m - k)}\\\\{m - (m - k)}\\end{array}} \\right)} \\\\ = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{n - m + k}\\\\k\\end{array}} \\right)} \\\\ = \\left( {\\begin{array}{*{20}{c}}{(n - m) + m + 1}\\\\m\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)\\end{array}\\]<br>所以<br>\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\m\\end{array}} \\right) = \\frac{ {n + 1}}{ {n + 1 - m}}\\]</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33035611&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>首先庆祝我自己顺利毕业了，忙完了毕业论文答辩一直在浪，所以上周的具体数学没有更新，现在补更一下，大家见谅。</p>\n</blockquote>\n<p>首先这节课讲的基本都是组合数的相关性质，而且特别多，所以我就不在这里详细证明了，如果你们对某一个性质感兴趣，可以自己证明去。</p>\n<h1 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h1><hr>\n<p>首先将组合数推广到负数域，也就是底数为负数的情况：<br>\\[\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{*{20}{c}}{k - r - 1}\\\\k\\end{array}} \\right)\\]<br>证明可以从下降阶乘幂的定义直接得到。</p>\n<h1 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h1><hr>\n<p>由于<br>\\[\\left( {\\begin{array}{*{20}{c}}{m + n}\\\\m\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{m + n}\\\\n\\end{array}} \\right)\\]<br>所以由性质1可得<br>\\[{( - 1)^m}\\left( {\\begin{array}{*{20}{c}}{ - n - 1}\\\\m\\end{array}} \\right) = {( - 1)^n}\\left( {\\begin{array}{*{20}{c}}{ - m - 1}\\\\n\\end{array}} \\right)\\]</p>\n<h1 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h1><hr>\n<p>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = {( - 1)^m}\\left( {\\begin{array}{*{20}{c}}{r - 1}\\\\m\\end{array}} \\right)\\]<br>这就说明了杨辉三角同一行的前面若干项交错和是可以求得的，但是它们的直接和是无法求出的。</p>\n<h1 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h1><hr>\n<p>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{ - r}\\\\k\\end{array}} \\right){ {( - x)}^k}{ {(x + y)}^{m - k}}} } \\]<br>证明可以通过令<br>\\[{S_m} = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r - 1}\\\\k\\end{array}} \\right){x^k}{y^{m - k}}}  + \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r - 1}\\\\{k - 1}\\end{array}} \\right){x^k}{y^{m - k}}} \\]<br>将左边表示成递归式的形式，同理如果右边可以表示成相同的递归式，那么左右就相等了。</p>\n<p>性质4看起来特别复杂，那么它有什么用呢？如果令$x$和$y$等于不同的值，那么就可以得到许多不同的恒等式。</p>\n<h1 id=\"性质5\"><a href=\"#性质5\" class=\"headerlink\" title=\"性质5\"></a>性质5</h1><hr>\n<p>令$x =  - 1,y = 1$可以得到<br>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + r}\\\\k\\end{array}} \\right){ {( - 1)}^k}}  = \\left( {\\begin{array}{*{20}{c}}{ - r}\\\\m\\end{array}} \\right)\\]<br>这其实就是性质3的特例。</p>\n<h1 id=\"性质6\"><a href=\"#性质6\" class=\"headerlink\" title=\"性质6\"></a>性质6</h1><hr>\n<p>令$x = y = 1,r = m + 1$可以得到<br>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{2m + 1}\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{m - k}}} \\]<br>左边就是杨辉三角一行中左边一半的和，所以可以得到<br>\\[\\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{m + k}\\\\k\\end{array}} \\right){2^{ - k}}} {\\rm{ = }}{2^m}\\]</p>\n<h1 id=\"性质7\"><a href=\"#性质7\" class=\"headerlink\" title=\"性质7\"></a>性质7</h1><hr>\n<p>\\[\\left( {\\begin{array}{*{20}{c}}r\\\\m\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}{r - k}\\\\{m - k}\\end{array}} \\right)\\]<br>这个公式可以形象理解为，从$r$个物品中取$m$个，再从这$m$个中取$k$个的方法数等于从$r$个物品中取$k$个，再从剩下的$r-k$个中取$m-k$个的方法数。证明的话直接用定义可证。</p>\n<h1 id=\"性质8\"><a href=\"#性质8\" class=\"headerlink\" title=\"性质8\"></a>性质8</h1><hr>\n<p>之前介绍了二项式系数，那么可以推广到任意$m$个未知数，它的展开式为<br>\\[{({x_1} + {x_2} +  \\cdots  + {x_m})^n} = \\sum\\limits_{\\scriptstyle0 \\le {a_1},{a_2}, \\cdots ,{a_m} \\le n\\atop\\scriptstyle{a_1} + {a_2} +  \\cdots  + {a_m} = n} {\\left( {\\begin{array}{*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right)} {x_1}^{ {a_1}}{x_2}^{ {a_2}} \\cdots {x_m}^{ {a_m}}\\]<br>其中<br>\\[\\left( {\\begin{array}{*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_1},{a_2}, \\cdots ,{a_m}}\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{ {a_1} + {a_2} +  \\cdots  + {a_m}}\\\\{ {a_2} +  \\cdots  + {a_m}}\\end{array}} \\right) \\cdots \\left( {\\begin{array}{*{20}{c}}{ {a_{m - 1}} + {a_m}}\\\\{ {a_m}}\\end{array}} \\right)\\]</p>\n<h1 id=\"性质9\"><a href=\"#性质9\" class=\"headerlink\" title=\"性质9\"></a>性质9</h1><hr>\n<p>范德蒙德卷积式：<br>\\[\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}r\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}s\\\\{n - k}\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{r + s}\\\\{m + n}\\end{array}} \\right)\\]<br>很多公式都可以通过替换其中的一些变量推导得到：<br>\\[\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}s\\\\{n + k}\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{l + s}\\\\{l - m + n}\\end{array}} \\right)\\\\\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}l\\\\{m + k}\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}{s + k}\\\\n\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{*{20}{c}}{s - m}\\\\{n - l}\\end{array}} \\right)\\\\\\sum\\limits_{k \\le l} {\\left( {\\begin{array}{*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}s\\\\{k - n}\\end{array}} \\right){( - 1)^k} = {( - 1)^{l + m}}\\left( {\\begin{array}{*{20}{c}}{s - m - 1}\\\\{l - m - n}\\end{array}} \\right)\\\\\\sum\\limits_{0 \\le k \\le l} {\\left( {\\begin{array}{*{20}{c}}{l - k}\\\\m\\end{array}} \\right)} \\left( {\\begin{array}{*{20}{c}}{q + k}\\\\n\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{l + q + 1}\\\\{m + n + 1}\\end{array}} \\right)\\end{array}\\]</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>最后详细求解一道组合题，其他的题目就不介绍了，可以去看具体数学英文版第173页。</p>\n<p>求下面式子的闭形式解：<br>\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)} ,n \\ge m \\ge 0\\]</p>\n<p>根据性质7，可以得到<br>\\[\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right) = \\left( {\\begin{array}{*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\m\\end{array}} \\right)\\]<br>所以<br>\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\m\\end{array}} \\right)} \\]<br>而<br>\\[\\begin{array}{l}\\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}{n - k}\\\\{m - k}\\end{array}} \\right)}  = \\sum\\limits_{m - k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}{n - (m - k)}\\\\{m - (m - k)}\\end{array}} \\right)} \\\\ = \\sum\\limits_{k \\le m} {\\left( {\\begin{array}{*{20}{c}}{n - m + k}\\\\k\\end{array}} \\right)} \\\\ = \\left( {\\begin{array}{*{20}{c}}{(n - m) + m + 1}\\\\m\\end{array}} \\right)\\\\ = \\left( {\\begin{array}{*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)\\end{array}\\]<br>所以<br>\\[\\sum\\limits_{k = 0}^m {\\left( {\\begin{array}{*{20}{c}}m\\\\k\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)}  = \\left( {\\begin{array}{*{20}{c}}{n + 1}\\\\m\\end{array}} \\right)/\\left( {\\begin{array}{*{20}{c}}n\\\\m\\end{array}} \\right) = \\frac{ {n + 1}}{ {n + 1 - m}}\\]</p>\n"},{"title":"具体数学-第2课（成套方法求解递归式）","date":"2018-03-05T05:06:28.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=316275&auto=1&height=66\"></iframe></div>\n\n今天主要讲了关于递推式和求和的一些方法，主要是成套方法。\n\n# 约瑟夫环推广\n上一节课说到，约瑟夫环问题的解是\n\\\\[f(n) = 2l + 1\\\\]\n其中$n = {2^m} + l$\n将$n$写成二进制可以发现，$f(n)$就是$n$的二进制循环左移1位。\n现在做一下推广，求解如下递推式：\n\\\\[\\begin{array}{l}f(1) = \\alpha \\\\f(2n) = 2f(n) + \\beta \\\\f(2n + 1) = 2f(n) + \\gamma \\end{array}\\\\]\n可以设\n\\\\[f(n) = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\\\]\n同样，令$n = {2^m} + l$\n可以解出\n\\\\[\\begin{array}{l}A(n) = {2^m}\\\\B(n) = {2^m} - 1 - l\\\\C(n) = l\\end{array}\\\\]\n再从二进制角度理解一下，将递推式继续推广：\n\\\\[\\begin{array}{l}f(j) = {\\alpha _j},1 \\le j < d\\\\f(dn + j) = cf(n) + {\\beta _j},0 \\le j \\le d,n \\ge 1\\end{array}\\\\]\n可以得到解为\n\\\\[f({({b_m}{b_{m - 1}} \\ldots {b_1}{b_0})_d}) = {({\\alpha _{ {b_m}}}{\\beta _{ {b_{m - 1}}}}{\\beta _{ {b_{m - 2}}}} \\ldots {\\beta _{ {b_1}}}{\\beta _{ {b_0}}})_c}\\\\]\n\n# 递推式求和\n求解如下递推式：\n\\\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta n + \\gamma \\end{array}\\\\]\n用成套方法求解，设\n\\\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\\\]\n首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 1$。\n再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = 0,\\gamma  = 1$，所以$C(n) = n$。\n最后令${R_n} = {n^2}$，可以得到$\\alpha  = 0,\\beta  = 2,\\gamma  =  - 1$，所以$2B(n) - C(n) = {n^2}$，所以$B(n) = ({n^2} + n)/2$\n\n再来一个更复杂的递推式：\n\\\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = 2{R_{n - 1}} + \\beta n + \\gamma \\end{array}\\\\]\n同样的方法，设\n\\\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\\\]\n首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = -1$，所以$A(n) - C(n) = 1$。\n再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = -1,\\gamma  = 2$，所以$2C(n) - B(n) = n$。\n这时候能不能令${R_n} = {n^2}$呢？答案是不能，因为如果${R_n} = {n^2}$，那么\n\\\\[{n^2} = 2{(n - 1)^2} + \\beta n + \\gamma \\\\]显然不可能成立。\n观察系数，可以令${R_n} = 2^n$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 2^n$。\n所以\n\\\\[A(n) = {2^n},B(n) = {2^{n + 1}} - n + 2,C(n) = {2^n} + 1\\\\]\n","source":"_posts/concrete-math-2.md","raw":"---\ntitle: 具体数学-第2课（成套方法求解递归式）\ndate: 2018-03-05 13:06:28\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=316275&auto=1&height=66\"></iframe></div>\n\n今天主要讲了关于递推式和求和的一些方法，主要是成套方法。\n\n# 约瑟夫环推广\n上一节课说到，约瑟夫环问题的解是\n\\\\[f(n) = 2l + 1\\\\]\n其中$n = {2^m} + l$\n将$n$写成二进制可以发现，$f(n)$就是$n$的二进制循环左移1位。\n现在做一下推广，求解如下递推式：\n\\\\[\\begin{array}{l}f(1) = \\alpha \\\\f(2n) = 2f(n) + \\beta \\\\f(2n + 1) = 2f(n) + \\gamma \\end{array}\\\\]\n可以设\n\\\\[f(n) = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\\\]\n同样，令$n = {2^m} + l$\n可以解出\n\\\\[\\begin{array}{l}A(n) = {2^m}\\\\B(n) = {2^m} - 1 - l\\\\C(n) = l\\end{array}\\\\]\n再从二进制角度理解一下，将递推式继续推广：\n\\\\[\\begin{array}{l}f(j) = {\\alpha _j},1 \\le j < d\\\\f(dn + j) = cf(n) + {\\beta _j},0 \\le j \\le d,n \\ge 1\\end{array}\\\\]\n可以得到解为\n\\\\[f({({b_m}{b_{m - 1}} \\ldots {b_1}{b_0})_d}) = {({\\alpha _{ {b_m}}}{\\beta _{ {b_{m - 1}}}}{\\beta _{ {b_{m - 2}}}} \\ldots {\\beta _{ {b_1}}}{\\beta _{ {b_0}}})_c}\\\\]\n\n# 递推式求和\n求解如下递推式：\n\\\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta n + \\gamma \\end{array}\\\\]\n用成套方法求解，设\n\\\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\\\]\n首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 1$。\n再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = 0,\\gamma  = 1$，所以$C(n) = n$。\n最后令${R_n} = {n^2}$，可以得到$\\alpha  = 0,\\beta  = 2,\\gamma  =  - 1$，所以$2B(n) - C(n) = {n^2}$，所以$B(n) = ({n^2} + n)/2$\n\n再来一个更复杂的递推式：\n\\\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = 2{R_{n - 1}} + \\beta n + \\gamma \\end{array}\\\\]\n同样的方法，设\n\\\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\\\]\n首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = -1$，所以$A(n) - C(n) = 1$。\n再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = -1,\\gamma  = 2$，所以$2C(n) - B(n) = n$。\n这时候能不能令${R_n} = {n^2}$呢？答案是不能，因为如果${R_n} = {n^2}$，那么\n\\\\[{n^2} = 2{(n - 1)^2} + \\beta n + \\gamma \\\\]显然不可能成立。\n观察系数，可以令${R_n} = 2^n$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 2^n$。\n所以\n\\\\[A(n) = {2^n},B(n) = {2^{n + 1}} - n + 2,C(n) = {2^n} + 1\\\\]\n","slug":"concrete-math-2","published":1,"updated":"2019-07-20T04:05:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982f3006f7swegiidv0hp","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=316275&auto=1&height=66\"></iframe></div>\n\n<p>今天主要讲了关于递推式和求和的一些方法，主要是成套方法。</p>\n<h1 id=\"约瑟夫环推广\"><a href=\"#约瑟夫环推广\" class=\"headerlink\" title=\"约瑟夫环推广\"></a>约瑟夫环推广</h1><p>上一节课说到，约瑟夫环问题的解是<br>\\[f(n) = 2l + 1\\]<br>其中$n = {2^m} + l$<br>将$n$写成二进制可以发现，$f(n)$就是$n$的二进制循环左移1位。<br>现在做一下推广，求解如下递推式：<br>\\[\\begin{array}{l}f(1) = \\alpha \\\\f(2n) = 2f(n) + \\beta \\\\f(2n + 1) = 2f(n) + \\gamma \\end{array}\\]<br>可以设<br>\\[f(n) = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\]<br>同样，令$n = {2^m} + l$<br>可以解出<br>\\[\\begin{array}{l}A(n) = {2^m}\\\\B(n) = {2^m} - 1 - l\\\\C(n) = l\\end{array}\\]<br>再从二进制角度理解一下，将递推式继续推广：<br>\\[\\begin{array}{l}f(j) = {\\alpha _j},1 \\le j &lt; d\\\\f(dn + j) = cf(n) + {\\beta _j},0 \\le j \\le d,n \\ge 1\\end{array}\\]<br>可以得到解为<br>\\[f({({b_m}{b_{m - 1}} \\ldots {b_1}{b_0})_d}) = {({\\alpha _{ {b_m}}}{\\beta _{ {b_{m - 1}}}}{\\beta _{ {b_{m - 2}}}} \\ldots {\\beta _{ {b_1}}}{\\beta _{ {b_0}}})_c}\\]</p>\n<h1 id=\"递推式求和\"><a href=\"#递推式求和\" class=\"headerlink\" title=\"递推式求和\"></a>递推式求和</h1><p>求解如下递推式：<br>\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta n + \\gamma \\end{array}\\]<br>用成套方法求解，设<br>\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\]<br>首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 1$。<br>再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = 0,\\gamma  = 1$，所以$C(n) = n$。<br>最后令${R_n} = {n^2}$，可以得到$\\alpha  = 0,\\beta  = 2,\\gamma  =  - 1$，所以$2B(n) - C(n) = {n^2}$，所以$B(n) = ({n^2} + n)/2$</p>\n<p>再来一个更复杂的递推式：<br>\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = 2{R_{n - 1}} + \\beta n + \\gamma \\end{array}\\]<br>同样的方法，设<br>\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\]<br>首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = -1$，所以$A(n) - C(n) = 1$。<br>再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = -1,\\gamma  = 2$，所以$2C(n) - B(n) = n$。<br>这时候能不能令${R_n} = {n^2}$呢？答案是不能，因为如果${R_n} = {n^2}$，那么<br>\\[{n^2} = 2{(n - 1)^2} + \\beta n + \\gamma \\]显然不可能成立。<br>观察系数，可以令${R_n} = 2^n$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 2^n$。<br>所以<br>\\[A(n) = {2^n},B(n) = {2^{n + 1}} - n + 2,C(n) = {2^n} + 1\\]</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=316275&auto=1&height=66\"></iframe></div>\n\n<p>今天主要讲了关于递推式和求和的一些方法，主要是成套方法。</p>\n<h1 id=\"约瑟夫环推广\"><a href=\"#约瑟夫环推广\" class=\"headerlink\" title=\"约瑟夫环推广\"></a>约瑟夫环推广</h1><p>上一节课说到，约瑟夫环问题的解是<br>\\[f(n) = 2l + 1\\]<br>其中$n = {2^m} + l$<br>将$n$写成二进制可以发现，$f(n)$就是$n$的二进制循环左移1位。<br>现在做一下推广，求解如下递推式：<br>\\[\\begin{array}{l}f(1) = \\alpha \\\\f(2n) = 2f(n) + \\beta \\\\f(2n + 1) = 2f(n) + \\gamma \\end{array}\\]<br>可以设<br>\\[f(n) = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\]<br>同样，令$n = {2^m} + l$<br>可以解出<br>\\[\\begin{array}{l}A(n) = {2^m}\\\\B(n) = {2^m} - 1 - l\\\\C(n) = l\\end{array}\\]<br>再从二进制角度理解一下，将递推式继续推广：<br>\\[\\begin{array}{l}f(j) = {\\alpha _j},1 \\le j &lt; d\\\\f(dn + j) = cf(n) + {\\beta _j},0 \\le j \\le d,n \\ge 1\\end{array}\\]<br>可以得到解为<br>\\[f({({b_m}{b_{m - 1}} \\ldots {b_1}{b_0})_d}) = {({\\alpha _{ {b_m}}}{\\beta _{ {b_{m - 1}}}}{\\beta _{ {b_{m - 2}}}} \\ldots {\\beta _{ {b_1}}}{\\beta _{ {b_0}}})_c}\\]</p>\n<h1 id=\"递推式求和\"><a href=\"#递推式求和\" class=\"headerlink\" title=\"递推式求和\"></a>递推式求和</h1><p>求解如下递推式：<br>\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta n + \\gamma \\end{array}\\]<br>用成套方法求解，设<br>\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\]<br>首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 1$。<br>再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = 0,\\gamma  = 1$，所以$C(n) = n$。<br>最后令${R_n} = {n^2}$，可以得到$\\alpha  = 0,\\beta  = 2,\\gamma  =  - 1$，所以$2B(n) - C(n) = {n^2}$，所以$B(n) = ({n^2} + n)/2$</p>\n<p>再来一个更复杂的递推式：<br>\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = 2{R_{n - 1}} + \\beta n + \\gamma \\end{array}\\]<br>同样的方法，设<br>\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma \\]<br>首先令${R_n} = 1$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = -1$，所以$A(n) - C(n) = 1$。<br>再令${R_n} = n$，可以得到$\\alpha  = 0,\\beta  = -1,\\gamma  = 2$，所以$2C(n) - B(n) = n$。<br>这时候能不能令${R_n} = {n^2}$呢？答案是不能，因为如果${R_n} = {n^2}$，那么<br>\\[{n^2} = 2{(n - 1)^2} + \\beta n + \\gamma \\]显然不可能成立。<br>观察系数，可以令${R_n} = 2^n$，可以得到$\\alpha  = 1,\\beta  = 0,\\gamma  = 0$，所以$A(n) = 2^n$。<br>所以<br>\\[A(n) = {2^n},B(n) = {2^{n + 1}} - n + 2,C(n) = {2^n} + 1\\]</p>\n"},{"title":"具体数学-第4课（多重求和方法）","date":"2018-03-19T04:48:32.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=436514312&auto=1&height=66\"></iframe></div>\n\n今天讲了多重求和，也就是一个和式由多个下标来指定。\n\n首先是最简单的形式：\n\\\\[\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}}  = (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )\\\\]\n\n# 例题1\n---\n下面给出一个对称矩阵：\n\\\\[A(i,j) = {a_i}{a_j}\\\\]\n求：\n\\\\[S = \\sum\\limits_{1 \\le j \\le k \\le n} { {a_j}{a_k}} \\\\]\n这是这个矩阵的上三角加对角线求和，因为是对称的嘛，可以补全下三角，加上对角线就行了。\n\\\\[2S = \\sum\\limits_{1 \\le j,k \\le n} { {a_j}{a_k}}  + \\sum\\limits_{1 \\le j = k \\le n} { {a_j}{a_k}}  = {(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} \\\\]\n所以\n\\\\[S = \\frac{1}{2}({(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} )\\\\]\n\n# 例题2\n---\n下面再看一个例子：\n\\\\[S = \\sum\\limits_{1 \\le j < k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\]\n同样模仿上例调换$j,k$位置，得到：\n\\\\[\\begin{array}{l}2S = \\sum\\limits_{1 \\le j,k \\le n} {({a_j} - {a_k})({b_j} - {b_k})}  - \\sum\\limits_{1 \\le j = k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\ = \\sum\\limits_{1 \\le j,k \\le n} {({a_j}{b_j} - {a_j}{b_k} - {a_k}{b_j} + {a_k}{b_k})} \\\\ = 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_j}}  - 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}} \\\\ = 2n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - 2(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\end{array}\\\\]\n所以\n\\\\[S = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\\\]\n至此解完，然后可以推出一个著名的不等式————切比雪夫不等式：\n\\\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - \\sum\\limits_{1 \\le j < k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\]\n如果\n\\\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\le {b_2} \\le  \\cdots  \\le {b_n}\\\\]\n那么\n\\\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\le n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\\\]\n反之如果\n\\\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\ge {b_2} \\ge  \\cdots  \\ge {b_n}\\\\]\n那么\n\\\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\ge n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\\\]\n更一般的结论，给定两个序列$a$和$b$，求下面式子最大值与最小值：\n\\\\[\\sum\\limits_{k = 1}^n { {a_k}{b_{p(k)}}} \\\\]\n其中$p(k)$是$\\{ 1,2, \\cdots ,n\\} $的一个排列。\n答案是$b$增序最大，降序最小，至于为什么，下面给出两种证明方法。\n### 方法1\n![](1.jpg)\n如上图所示，$a$和$b$按照递增顺序排列，每个方格的面积代表$a_i$与$b_j$的乘积，记为$s_{ij}$。\n那么上面的求和式其实就是每一行每一列都必须有且只有一块被取。\n考虑第一行，如果不取$s_{11}$，取其他的$s_{1j}$，那么第一列也只能取其他的$s_{i1}$，这样的话$s_{ij}$也就取不了了。但是发现\n\\\\[s_{11}+s_{ij} \\ge s_{i1}+s_{1j}\\\\]\n并且两种取法影响的行和列都是相同的，这说明了，取$s_{i1}$和$s_{1j}$不如取$s_{11}$和$s_{ij}$。所以$s_{11}$必取，然后第一行第一列就不能取了。剩下的方阵用相同的方法可以得出必取$s_{22}, \\cdots ,s_{nn}$，也就是主对角线。\n同理最小取法用副对角线可以推出。\n\n### 方法2\n设数列$a$和$b$非单调递减，那么有如下证明：\n\\\\[\\begin{array}{l}{S_k} = \\sum\\limits_{i = 1}^k { {b_i}} ,{ {S'}_k} = \\sum\\limits_{i = 1}^k { {b_{p(i)}}} \\\\ \\Rightarrow {S_k} \\le { {S'}_k}\\\\ \\Rightarrow \\\\\\sum\\limits_{i = 1}^n { {a_i}{b_i}}  = {S_1}{a_1} - {S_1}{a_2} + {S_2}{a_2} - {S_2}{a_3} +  \\cdots  + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^{n - 1} { {S_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ \\ge \\sum\\limits_{i = 1}^{n - 1} { { {S'}_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^n { {a_i}{b_{p(i)}}} \\end{array}\\\\]\n反之亦证。\n\n\n题外话，其实切比雪夫不等式原来是以微积分形式给出的：\n如果函数$f(x)$和$g(x)$非单调递减，那么有：\n\\\\[(\\int_a^b {f(x)dx} )(\\int_a^b {g(x)dx} ) \\le (b - a)(\\int_a^b {f(x)g(x)dx} )\\\\]\n\n# 例题3\n---\n求\n\\\\[S = \\sum\\limits_{1 \\le j < k \\le n} {\\frac{1}{ {k - j}}} \\\\]\n我将用三种方法来求解这个式子。\n### 方法1\n首先将$j$和$k$分开，首先计算对$j$求和：\n\\\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j < k} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le k - j < k} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{0 < j \\le k - 1} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} { {H_{k - 1}}} \\\\ = \\sum\\limits_{0 \\le k < n} { {H_k}} \\end{array}\\\\]\n### 方法2\n先计算对$k$求和：\n\\\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j < k \\le n} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j < k + j \\le n} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{0 < k \\le n - j} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} { {H_{n - j}}} \\\\ = \\sum\\limits_{0 \\le j < n} { {H_j}} \\end{array}\\\\]\n### 方法3\n按对角线求和：\n\\\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j < k \\le n} {\\frac{1}{ {k - j}}} \\\\ = \\sum\\limits_{1 \\le j < k + j \\le n} {\\frac{1}{k}} \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j \\le n - k} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\frac{ {n - k}}{k}} \\\\ = n\\sum\\limits_{1 \\le k \\le n} {\\frac{1}{k} - } \\sum\\limits_{1 \\le k \\le n} 1 \\\\ = n{H_n} - n\\end{array}\\\\]\n\n由此得到了一个完全不同的表示形式！\n所以我们得到了：\n\\\\[\\sum\\limits_{0 \\le j < n} { {H_j}}  = n{H_n} - n\\\\]","source":"_posts/concrete-math-4.md","raw":"---\ntitle: 具体数学-第4课（多重求和方法）\ndate: 2018-03-19 12:48:32\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=436514312&auto=1&height=66\"></iframe></div>\n\n今天讲了多重求和，也就是一个和式由多个下标来指定。\n\n首先是最简单的形式：\n\\\\[\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}}  = (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )\\\\]\n\n# 例题1\n---\n下面给出一个对称矩阵：\n\\\\[A(i,j) = {a_i}{a_j}\\\\]\n求：\n\\\\[S = \\sum\\limits_{1 \\le j \\le k \\le n} { {a_j}{a_k}} \\\\]\n这是这个矩阵的上三角加对角线求和，因为是对称的嘛，可以补全下三角，加上对角线就行了。\n\\\\[2S = \\sum\\limits_{1 \\le j,k \\le n} { {a_j}{a_k}}  + \\sum\\limits_{1 \\le j = k \\le n} { {a_j}{a_k}}  = {(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} \\\\]\n所以\n\\\\[S = \\frac{1}{2}({(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} )\\\\]\n\n# 例题2\n---\n下面再看一个例子：\n\\\\[S = \\sum\\limits_{1 \\le j < k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\]\n同样模仿上例调换$j,k$位置，得到：\n\\\\[\\begin{array}{l}2S = \\sum\\limits_{1 \\le j,k \\le n} {({a_j} - {a_k})({b_j} - {b_k})}  - \\sum\\limits_{1 \\le j = k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\ = \\sum\\limits_{1 \\le j,k \\le n} {({a_j}{b_j} - {a_j}{b_k} - {a_k}{b_j} + {a_k}{b_k})} \\\\ = 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_j}}  - 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}} \\\\ = 2n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - 2(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\end{array}\\\\]\n所以\n\\\\[S = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\\\]\n至此解完，然后可以推出一个著名的不等式————切比雪夫不等式：\n\\\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - \\sum\\limits_{1 \\le j < k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\]\n如果\n\\\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\le {b_2} \\le  \\cdots  \\le {b_n}\\\\]\n那么\n\\\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\le n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\\\]\n反之如果\n\\\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\ge {b_2} \\ge  \\cdots  \\ge {b_n}\\\\]\n那么\n\\\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\ge n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\\\]\n更一般的结论，给定两个序列$a$和$b$，求下面式子最大值与最小值：\n\\\\[\\sum\\limits_{k = 1}^n { {a_k}{b_{p(k)}}} \\\\]\n其中$p(k)$是$\\{ 1,2, \\cdots ,n\\} $的一个排列。\n答案是$b$增序最大，降序最小，至于为什么，下面给出两种证明方法。\n### 方法1\n![](1.jpg)\n如上图所示，$a$和$b$按照递增顺序排列，每个方格的面积代表$a_i$与$b_j$的乘积，记为$s_{ij}$。\n那么上面的求和式其实就是每一行每一列都必须有且只有一块被取。\n考虑第一行，如果不取$s_{11}$，取其他的$s_{1j}$，那么第一列也只能取其他的$s_{i1}$，这样的话$s_{ij}$也就取不了了。但是发现\n\\\\[s_{11}+s_{ij} \\ge s_{i1}+s_{1j}\\\\]\n并且两种取法影响的行和列都是相同的，这说明了，取$s_{i1}$和$s_{1j}$不如取$s_{11}$和$s_{ij}$。所以$s_{11}$必取，然后第一行第一列就不能取了。剩下的方阵用相同的方法可以得出必取$s_{22}, \\cdots ,s_{nn}$，也就是主对角线。\n同理最小取法用副对角线可以推出。\n\n### 方法2\n设数列$a$和$b$非单调递减，那么有如下证明：\n\\\\[\\begin{array}{l}{S_k} = \\sum\\limits_{i = 1}^k { {b_i}} ,{ {S'}_k} = \\sum\\limits_{i = 1}^k { {b_{p(i)}}} \\\\ \\Rightarrow {S_k} \\le { {S'}_k}\\\\ \\Rightarrow \\\\\\sum\\limits_{i = 1}^n { {a_i}{b_i}}  = {S_1}{a_1} - {S_1}{a_2} + {S_2}{a_2} - {S_2}{a_3} +  \\cdots  + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^{n - 1} { {S_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ \\ge \\sum\\limits_{i = 1}^{n - 1} { { {S'}_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^n { {a_i}{b_{p(i)}}} \\end{array}\\\\]\n反之亦证。\n\n\n题外话，其实切比雪夫不等式原来是以微积分形式给出的：\n如果函数$f(x)$和$g(x)$非单调递减，那么有：\n\\\\[(\\int_a^b {f(x)dx} )(\\int_a^b {g(x)dx} ) \\le (b - a)(\\int_a^b {f(x)g(x)dx} )\\\\]\n\n# 例题3\n---\n求\n\\\\[S = \\sum\\limits_{1 \\le j < k \\le n} {\\frac{1}{ {k - j}}} \\\\]\n我将用三种方法来求解这个式子。\n### 方法1\n首先将$j$和$k$分开，首先计算对$j$求和：\n\\\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j < k} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le k - j < k} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{0 < j \\le k - 1} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} { {H_{k - 1}}} \\\\ = \\sum\\limits_{0 \\le k < n} { {H_k}} \\end{array}\\\\]\n### 方法2\n先计算对$k$求和：\n\\\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j < k \\le n} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j < k + j \\le n} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{0 < k \\le n - j} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} { {H_{n - j}}} \\\\ = \\sum\\limits_{0 \\le j < n} { {H_j}} \\end{array}\\\\]\n### 方法3\n按对角线求和：\n\\\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j < k \\le n} {\\frac{1}{ {k - j}}} \\\\ = \\sum\\limits_{1 \\le j < k + j \\le n} {\\frac{1}{k}} \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j \\le n - k} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\frac{ {n - k}}{k}} \\\\ = n\\sum\\limits_{1 \\le k \\le n} {\\frac{1}{k} - } \\sum\\limits_{1 \\le k \\le n} 1 \\\\ = n{H_n} - n\\end{array}\\\\]\n\n由此得到了一个完全不同的表示形式！\n所以我们得到了：\n\\\\[\\sum\\limits_{0 \\le j < n} { {H_j}}  = n{H_n} - n\\\\]","slug":"concrete-math-4","published":1,"updated":"2019-07-20T04:05:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982f7006h7swemo9qfsgu","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=436514312&auto=1&height=66\"></iframe></div>\n\n<p>今天讲了多重求和，也就是一个和式由多个下标来指定。</p>\n<p>首先是最简单的形式：<br>\\[\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}}  = (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )\\]</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>下面给出一个对称矩阵：<br>\\[A(i,j) = {a_i}{a_j}\\]<br>求：<br>\\[S = \\sum\\limits_{1 \\le j \\le k \\le n} { {a_j}{a_k}} \\]<br>这是这个矩阵的上三角加对角线求和，因为是对称的嘛，可以补全下三角，加上对角线就行了。<br>\\[2S = \\sum\\limits_{1 \\le j,k \\le n} { {a_j}{a_k}}  + \\sum\\limits_{1 \\le j = k \\le n} { {a_j}{a_k}}  = {(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} \\]<br>所以<br>\\[S = \\frac{1}{2}({(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} )\\]</p>\n<h1 id=\"例题2\"><a href=\"#例题2\" class=\"headerlink\" title=\"例题2\"></a>例题2</h1><hr>\n<p>下面再看一个例子：<br>\\[S = \\sum\\limits_{1 \\le j &lt; k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\]<br>同样模仿上例调换$j,k$位置，得到：<br>\\[\\begin{array}{l}2S = \\sum\\limits_{1 \\le j,k \\le n} {({a_j} - {a_k})({b_j} - {b_k})}  - \\sum\\limits_{1 \\le j = k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\ = \\sum\\limits_{1 \\le j,k \\le n} {({a_j}{b_j} - {a_j}{b_k} - {a_k}{b_j} + {a_k}{b_k})} \\\\ = 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_j}}  - 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}} \\\\ = 2n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - 2(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\end{array}\\]<br>所以<br>\\[S = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\]<br>至此解完，然后可以推出一个著名的不等式————切比雪夫不等式：<br>\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - \\sum\\limits_{1 \\le j &lt; k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\]<br>如果<br>\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\le {b_2} \\le  \\cdots  \\le {b_n}\\]<br>那么<br>\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\le n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\]<br>反之如果<br>\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\ge {b_2} \\ge  \\cdots  \\ge {b_n}\\]<br>那么<br>\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\ge n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\]<br>更一般的结论，给定两个序列$a$和$b$，求下面式子最大值与最小值：<br>\\[\\sum\\limits_{k = 1}^n { {a_k}{b_{p(k)}}} \\]<br>其中$p(k)$是$\\{ 1,2, \\cdots ,n\\} $的一个排列。<br>答案是$b$增序最大，降序最小，至于为什么，下面给出两种证明方法。</p>\n<h3 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3><p><img src=\"1.jpg\" alt><br>如上图所示，$a$和$b$按照递增顺序排列，每个方格的面积代表$a_i$与$b_j$的乘积，记为$s_{ij}$。<br>那么上面的求和式其实就是每一行每一列都必须有且只有一块被取。<br>考虑第一行，如果不取$s_{11}$，取其他的$s_{1j}$，那么第一列也只能取其他的$s_{i1}$，这样的话$s_{ij}$也就取不了了。但是发现<br>\\[s_{11}+s_{ij} \\ge s_{i1}+s_{1j}\\]<br>并且两种取法影响的行和列都是相同的，这说明了，取$s_{i1}$和$s_{1j}$不如取$s_{11}$和$s_{ij}$。所以$s_{11}$必取，然后第一行第一列就不能取了。剩下的方阵用相同的方法可以得出必取$s_{22}, \\cdots ,s_{nn}$，也就是主对角线。<br>同理最小取法用副对角线可以推出。</p>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>设数列$a$和$b$非单调递减，那么有如下证明：<br>\\[\\begin{array}{l}{S_k} = \\sum\\limits_{i = 1}^k { {b_i}} ,{ {S’}_k} = \\sum\\limits_{i = 1}^k { {b_{p(i)}}} \\\\ \\Rightarrow {S_k} \\le { {S’}_k}\\\\ \\Rightarrow \\\\\\sum\\limits_{i = 1}^n { {a_i}{b_i}}  = {S_1}{a_1} - {S_1}{a_2} + {S_2}{a_2} - {S_2}{a_3} +  \\cdots  + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^{n - 1} { {S_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ \\ge \\sum\\limits_{i = 1}^{n - 1} { { {S’}_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^n { {a_i}{b_{p(i)}}} \\end{array}\\]<br>反之亦证。</p>\n<p>题外话，其实切比雪夫不等式原来是以微积分形式给出的：<br>如果函数$f(x)$和$g(x)$非单调递减，那么有：<br>\\[(\\int_a^b {f(x)dx} )(\\int_a^b {g(x)dx} ) \\le (b - a)(\\int_a^b {f(x)g(x)dx} )\\]</p>\n<h1 id=\"例题3\"><a href=\"#例题3\" class=\"headerlink\" title=\"例题3\"></a>例题3</h1><hr>\n<p>求<br>\\[S = \\sum\\limits_{1 \\le j &lt; k \\le n} {\\frac{1}{ {k - j}}} \\]<br>我将用三种方法来求解这个式子。</p>\n<h3 id=\"方法1-1\"><a href=\"#方法1-1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3><p>首先将$j$和$k$分开，首先计算对$j$求和：<br>\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j &lt; k} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le k - j &lt; k} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{0 &lt; j \\le k - 1} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} { {H_{k - 1}}} \\\\ = \\sum\\limits_{0 \\le k &lt; n} { {H_k}} \\end{array}\\]</p>\n<h3 id=\"方法2-1\"><a href=\"#方法2-1\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>先计算对$k$求和：<br>\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j &lt; k \\le n} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j &lt; k + j \\le n} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{0 &lt; k \\le n - j} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} { {H_{n - j}}} \\\\ = \\sum\\limits_{0 \\le j &lt; n} { {H_j}} \\end{array}\\]</p>\n<h3 id=\"方法3\"><a href=\"#方法3\" class=\"headerlink\" title=\"方法3\"></a>方法3</h3><p>按对角线求和：<br>\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j &lt; k \\le n} {\\frac{1}{ {k - j}}} \\\\ = \\sum\\limits_{1 \\le j &lt; k + j \\le n} {\\frac{1}{k}} \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j \\le n - k} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\frac{ {n - k}}{k}} \\\\ = n\\sum\\limits_{1 \\le k \\le n} {\\frac{1}{k} - } \\sum\\limits_{1 \\le k \\le n} 1 \\\\ = n{H_n} - n\\end{array}\\]</p>\n<p>由此得到了一个完全不同的表示形式！<br>所以我们得到了：<br>\\[\\sum\\limits_{0 \\le j &lt; n} { {H_j}}  = n{H_n} - n\\]</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=436514312&auto=1&height=66\"></iframe></div>\n\n<p>今天讲了多重求和，也就是一个和式由多个下标来指定。</p>\n<p>首先是最简单的形式：<br>\\[\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}}  = (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )\\]</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>下面给出一个对称矩阵：<br>\\[A(i,j) = {a_i}{a_j}\\]<br>求：<br>\\[S = \\sum\\limits_{1 \\le j \\le k \\le n} { {a_j}{a_k}} \\]<br>这是这个矩阵的上三角加对角线求和，因为是对称的嘛，可以补全下三角，加上对角线就行了。<br>\\[2S = \\sum\\limits_{1 \\le j,k \\le n} { {a_j}{a_k}}  + \\sum\\limits_{1 \\le j = k \\le n} { {a_j}{a_k}}  = {(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} \\]<br>所以<br>\\[S = \\frac{1}{2}({(\\sum\\limits_{1 \\le k \\le n} { {a_k}} )^2} + \\sum\\limits_{1 \\le k \\le n}^{} { {a_k}^2} )\\]</p>\n<h1 id=\"例题2\"><a href=\"#例题2\" class=\"headerlink\" title=\"例题2\"></a>例题2</h1><hr>\n<p>下面再看一个例子：<br>\\[S = \\sum\\limits_{1 \\le j &lt; k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\]<br>同样模仿上例调换$j,k$位置，得到：<br>\\[\\begin{array}{l}2S = \\sum\\limits_{1 \\le j,k \\le n} {({a_j} - {a_k})({b_j} - {b_k})}  - \\sum\\limits_{1 \\le j = k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\\\ = \\sum\\limits_{1 \\le j,k \\le n} {({a_j}{b_j} - {a_j}{b_k} - {a_k}{b_j} + {a_k}{b_k})} \\\\ = 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_j}}  - 2\\sum\\limits_{1 \\le j,k \\le n} { {a_j}{b_k}} \\\\ = 2n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - 2(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\end{array}\\]<br>所以<br>\\[S = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - (\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} )\\]<br>至此解完，然后可以推出一个著名的不等式————切比雪夫不等式：<br>\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) = n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}}  - \\sum\\limits_{1 \\le j &lt; k \\le n} {({a_j} - {a_k})({b_j} - {b_k})} \\]<br>如果<br>\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\le {b_2} \\le  \\cdots  \\le {b_n}\\]<br>那么<br>\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\le n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\]<br>反之如果<br>\\[{a_1} \\le {a_2} \\le  \\cdots  \\le {a_n},{b_1} \\ge {b_2} \\ge  \\cdots  \\ge {b_n}\\]<br>那么<br>\\[(\\sum\\limits_{1 \\le j \\le n} { {a_j}} )(\\sum\\limits_{1 \\le k \\le n} { {b_k}} ) \\ge n\\sum\\limits_{1 \\le j \\le n} { {a_j}{b_j}} \\]<br>更一般的结论，给定两个序列$a$和$b$，求下面式子最大值与最小值：<br>\\[\\sum\\limits_{k = 1}^n { {a_k}{b_{p(k)}}} \\]<br>其中$p(k)$是$\\{ 1,2, \\cdots ,n\\} $的一个排列。<br>答案是$b$增序最大，降序最小，至于为什么，下面给出两种证明方法。</p>\n<h3 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3><p><img src=\"1.jpg\" alt><br>如上图所示，$a$和$b$按照递增顺序排列，每个方格的面积代表$a_i$与$b_j$的乘积，记为$s_{ij}$。<br>那么上面的求和式其实就是每一行每一列都必须有且只有一块被取。<br>考虑第一行，如果不取$s_{11}$，取其他的$s_{1j}$，那么第一列也只能取其他的$s_{i1}$，这样的话$s_{ij}$也就取不了了。但是发现<br>\\[s_{11}+s_{ij} \\ge s_{i1}+s_{1j}\\]<br>并且两种取法影响的行和列都是相同的，这说明了，取$s_{i1}$和$s_{1j}$不如取$s_{11}$和$s_{ij}$。所以$s_{11}$必取，然后第一行第一列就不能取了。剩下的方阵用相同的方法可以得出必取$s_{22}, \\cdots ,s_{nn}$，也就是主对角线。<br>同理最小取法用副对角线可以推出。</p>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>设数列$a$和$b$非单调递减，那么有如下证明：<br>\\[\\begin{array}{l}{S_k} = \\sum\\limits_{i = 1}^k { {b_i}} ,{ {S’}_k} = \\sum\\limits_{i = 1}^k { {b_{p(i)}}} \\\\ \\Rightarrow {S_k} \\le { {S’}_k}\\\\ \\Rightarrow \\\\\\sum\\limits_{i = 1}^n { {a_i}{b_i}}  = {S_1}{a_1} - {S_1}{a_2} + {S_2}{a_2} - {S_2}{a_3} +  \\cdots  + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^{n - 1} { {S_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ \\ge \\sum\\limits_{i = 1}^{n - 1} { { {S’}_i}} ({a_i} - {a_{i + 1}}) + {S_n}{a_n}\\\\ = \\sum\\limits_{i = 1}^n { {a_i}{b_{p(i)}}} \\end{array}\\]<br>反之亦证。</p>\n<p>题外话，其实切比雪夫不等式原来是以微积分形式给出的：<br>如果函数$f(x)$和$g(x)$非单调递减，那么有：<br>\\[(\\int_a^b {f(x)dx} )(\\int_a^b {g(x)dx} ) \\le (b - a)(\\int_a^b {f(x)g(x)dx} )\\]</p>\n<h1 id=\"例题3\"><a href=\"#例题3\" class=\"headerlink\" title=\"例题3\"></a>例题3</h1><hr>\n<p>求<br>\\[S = \\sum\\limits_{1 \\le j &lt; k \\le n} {\\frac{1}{ {k - j}}} \\]<br>我将用三种方法来求解这个式子。</p>\n<h3 id=\"方法1-1\"><a href=\"#方法1-1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3><p>首先将$j$和$k$分开，首先计算对$j$求和：<br>\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j &lt; k} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le k - j &lt; k} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{0 &lt; j \\le k - 1} {\\frac{1}{j}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} { {H_{k - 1}}} \\\\ = \\sum\\limits_{0 \\le k &lt; n} { {H_k}} \\end{array}\\]</p>\n<h3 id=\"方法2-1\"><a href=\"#方法2-1\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>先计算对$k$求和：<br>\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j &lt; k \\le n} {\\frac{1}{ {k - j}}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j &lt; k + j \\le n} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{0 &lt; k \\le n - j} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le j \\le n} { {H_{n - j}}} \\\\ = \\sum\\limits_{0 \\le j &lt; n} { {H_j}} \\end{array}\\]</p>\n<h3 id=\"方法3\"><a href=\"#方法3\" class=\"headerlink\" title=\"方法3\"></a>方法3</h3><p>按对角线求和：<br>\\[\\begin{array}{l}S = \\sum\\limits_{1 \\le j &lt; k \\le n} {\\frac{1}{ {k - j}}} \\\\ = \\sum\\limits_{1 \\le j &lt; k + j \\le n} {\\frac{1}{k}} \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\sum\\limits_{1 \\le j \\le n - k} {\\frac{1}{k}} } \\\\ = \\sum\\limits_{1 \\le k \\le n} {\\frac{ {n - k}}{k}} \\\\ = n\\sum\\limits_{1 \\le k \\le n} {\\frac{1}{k} - } \\sum\\limits_{1 \\le k \\le n} 1 \\\\ = n{H_n} - n\\end{array}\\]</p>\n<p>由此得到了一个完全不同的表示形式！<br>所以我们得到了：<br>\\[\\sum\\limits_{0 \\le j &lt; n} { {H_j}}  = n{H_n} - n\\]</p>\n"},{"title":"具体数学-第3课（递归式转化为求和求解）","date":"2018-03-12T07:01:44.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=539941039&auto=1&height=66\"></iframe></div>\n\n今天讲了一种将递归式转化为求和的方法。\n\n考虑如下递归式：\n\\\\[{a_n}{T_n} = {b_n}{T_{n - 1}} + {c_n}\\\\]\n两边同时乘以$s_n$得到：\n\\\\[{s_n}{a_n}{T_n} = {s_n}{b_n}{T_{n - 1}} + {s_n}{c_n}\\\\]\n要想转化成可以求和的递归式，那么必须有：\n\\\\[{s_n}{b_n} = {s_{n - 1}}{a_{n - 1}}\\\\]\n也就是：\n\\\\[{s_n} = \\frac { { {a_{n - 1}}{a_{n - 2}} \\cdots {a_1}}}{ { {b_n}{b_{n - 1}} \\cdots {b_2}}}\\\\]\n这时令\n\\\\[{S_n} = {s_n}{a_n}{T_n}\\\\]\n得到：\n\\\\[{S_n} = {S_{n - 1}} + {s_n}{c_n}\\\\]\n这时就可以转化为求和了，解出：\n\\\\[{S_n} = {s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} \\\\]\n所以\n\\\\[{T_n} = \\frac{1}{ { {s_n}{a_n}}}({s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} )\\\\]\n\n# 例题1\n---\n设$n$个数快速排序的操作次数为$C_n$，那么有\n\\\\[\\begin{array}{l}{C_0} = 0\\\\{C_n} = n + 1 + \\frac{2}{n}\\sum\\limits_{k = 0}^{n - 1} { {C_k}} ,n > 0\\end{array}\\\\]\n用$n-1$取代$n$可以得到\n\\\\[{C_{n - 1}} = n + \\frac{2}{ {n - 1}}\\sum\\limits_{k = 0}^{n - 2} { {C_k}} ,n > 1\\\\]\n两式相减可以得到\n\\\\[\\begin{array}{l}{C_0} = 0\\\\n{C_n} = (n + 1){C_{n - 1}} + 2n,n > 0\\end{array}\\\\]\n由上面方法可以得到\n\\\\[{a_n} = n,{b_n} = n + 1,{c_n} = 2n\\\\]\n所以\n\\\\[{s_n} = \\frac{2}{ {n(n + 1)}}\\\\]\n进而可以求出\n\\\\[{C_n} = 2(n + 1)\\sum\\limits_{k = 1}^n {\\frac{1}{ {k + 1}}} \\\\]\n这里介绍一个概念叫做调和级数：\n\\\\[{H_n} = 1 + \\frac{1}{2} +  \\cdots  + \\frac{1}{n} = \\sum\\limits_{k = 1}^n {\\frac{1}{k}} \\\\]\n所以\n\\\\[{C_n} = 2(n + 1){H_n} - 2n\\\\]\n\n# 求和三大定律\n---\n结合律、分配率、交换律。这里就不展开说了，相信你们都知道的。\n来两题简单的例题说明一下。\n\n# 例题2\n---\n求\n\\\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + bk)} \\\\]\n普通的方法每个人应该都会，等差数列嘛。这里用求和定律来做一做。\n用$n-k$取代$k$，得到\n\\\\[S = \\sum\\limits_{0 \\le n - k \\le n} {(a + b(n - k))} \\\\]\n即\n\\\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + b(n - k))} \\\\]\n两式相加得到\n\\\\[2S = \\sum\\limits_{0 \\le k \\le n} {(2a + bn)}  = (2a + bn)\\sum\\limits_{0 \\le k \\le n} 1  = (2a + bn)(n + 1)\\\\]\n所以\n\\\\[S = (2a + bn)(n + 1)/2\\\\]\n\n# 例题3\n---\n求\n\\\\[S = \\sum\\limits_{0 \\le k \\le n} {k{x^k}} \\\\]\n这里用到另一种求和的方法。\n两边同时加上第$n+1$项，得到\n\\\\[\\begin{array}{l}S + (n + 1){x^{n + 1}}\\\\ = \\sum\\limits_{0 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{0 \\le k \\le n} {(k + 1){x^{k + 1}}} \\\\ = x\\sum\\limits_{0 \\le k \\le n} {(k{x^k} + {x^k})} \\\\ = xS + x\\sum\\limits_{0 \\le k \\le n} { {x^k}} \\\\ = xS + x\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\end{array}\\\\]\n所以\n\\\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\\\]\n这里介绍另一种方法来求解。\n令\n\\\\[f(x) = \\sum\\limits_{0 \\le k \\le n} { {x^k}}  = \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\\\]\n求导得到\n\\\\[f'(x) = \\sum\\limits_{0 \\le k \\le n} {k{x^{k - 1}}}  = \\frac{1}{x}S\\\\]\n所以\n\\\\[\\frac{1}{x}S = \\frac{ {\\partial f}}{ {\\partial x}}(\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}) = \\frac{ {1 - (n + 1){x^n} + n{x^{n + 1}}}}{ { { {(1 - x)}^2}}}\\\\]\n同样可以得到\n\\\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\\\]","source":"_posts/concrete-math-3.md","raw":"---\ntitle: 具体数学-第3课（递归式转化为求和求解）\ndate: 2018-03-12 15:01:44\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=539941039&auto=1&height=66\"></iframe></div>\n\n今天讲了一种将递归式转化为求和的方法。\n\n考虑如下递归式：\n\\\\[{a_n}{T_n} = {b_n}{T_{n - 1}} + {c_n}\\\\]\n两边同时乘以$s_n$得到：\n\\\\[{s_n}{a_n}{T_n} = {s_n}{b_n}{T_{n - 1}} + {s_n}{c_n}\\\\]\n要想转化成可以求和的递归式，那么必须有：\n\\\\[{s_n}{b_n} = {s_{n - 1}}{a_{n - 1}}\\\\]\n也就是：\n\\\\[{s_n} = \\frac { { {a_{n - 1}}{a_{n - 2}} \\cdots {a_1}}}{ { {b_n}{b_{n - 1}} \\cdots {b_2}}}\\\\]\n这时令\n\\\\[{S_n} = {s_n}{a_n}{T_n}\\\\]\n得到：\n\\\\[{S_n} = {S_{n - 1}} + {s_n}{c_n}\\\\]\n这时就可以转化为求和了，解出：\n\\\\[{S_n} = {s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} \\\\]\n所以\n\\\\[{T_n} = \\frac{1}{ { {s_n}{a_n}}}({s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} )\\\\]\n\n# 例题1\n---\n设$n$个数快速排序的操作次数为$C_n$，那么有\n\\\\[\\begin{array}{l}{C_0} = 0\\\\{C_n} = n + 1 + \\frac{2}{n}\\sum\\limits_{k = 0}^{n - 1} { {C_k}} ,n > 0\\end{array}\\\\]\n用$n-1$取代$n$可以得到\n\\\\[{C_{n - 1}} = n + \\frac{2}{ {n - 1}}\\sum\\limits_{k = 0}^{n - 2} { {C_k}} ,n > 1\\\\]\n两式相减可以得到\n\\\\[\\begin{array}{l}{C_0} = 0\\\\n{C_n} = (n + 1){C_{n - 1}} + 2n,n > 0\\end{array}\\\\]\n由上面方法可以得到\n\\\\[{a_n} = n,{b_n} = n + 1,{c_n} = 2n\\\\]\n所以\n\\\\[{s_n} = \\frac{2}{ {n(n + 1)}}\\\\]\n进而可以求出\n\\\\[{C_n} = 2(n + 1)\\sum\\limits_{k = 1}^n {\\frac{1}{ {k + 1}}} \\\\]\n这里介绍一个概念叫做调和级数：\n\\\\[{H_n} = 1 + \\frac{1}{2} +  \\cdots  + \\frac{1}{n} = \\sum\\limits_{k = 1}^n {\\frac{1}{k}} \\\\]\n所以\n\\\\[{C_n} = 2(n + 1){H_n} - 2n\\\\]\n\n# 求和三大定律\n---\n结合律、分配率、交换律。这里就不展开说了，相信你们都知道的。\n来两题简单的例题说明一下。\n\n# 例题2\n---\n求\n\\\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + bk)} \\\\]\n普通的方法每个人应该都会，等差数列嘛。这里用求和定律来做一做。\n用$n-k$取代$k$，得到\n\\\\[S = \\sum\\limits_{0 \\le n - k \\le n} {(a + b(n - k))} \\\\]\n即\n\\\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + b(n - k))} \\\\]\n两式相加得到\n\\\\[2S = \\sum\\limits_{0 \\le k \\le n} {(2a + bn)}  = (2a + bn)\\sum\\limits_{0 \\le k \\le n} 1  = (2a + bn)(n + 1)\\\\]\n所以\n\\\\[S = (2a + bn)(n + 1)/2\\\\]\n\n# 例题3\n---\n求\n\\\\[S = \\sum\\limits_{0 \\le k \\le n} {k{x^k}} \\\\]\n这里用到另一种求和的方法。\n两边同时加上第$n+1$项，得到\n\\\\[\\begin{array}{l}S + (n + 1){x^{n + 1}}\\\\ = \\sum\\limits_{0 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{0 \\le k \\le n} {(k + 1){x^{k + 1}}} \\\\ = x\\sum\\limits_{0 \\le k \\le n} {(k{x^k} + {x^k})} \\\\ = xS + x\\sum\\limits_{0 \\le k \\le n} { {x^k}} \\\\ = xS + x\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\end{array}\\\\]\n所以\n\\\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\\\]\n这里介绍另一种方法来求解。\n令\n\\\\[f(x) = \\sum\\limits_{0 \\le k \\le n} { {x^k}}  = \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\\\]\n求导得到\n\\\\[f'(x) = \\sum\\limits_{0 \\le k \\le n} {k{x^{k - 1}}}  = \\frac{1}{x}S\\\\]\n所以\n\\\\[\\frac{1}{x}S = \\frac{ {\\partial f}}{ {\\partial x}}(\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}) = \\frac{ {1 - (n + 1){x^n} + n{x^{n + 1}}}}{ { { {(1 - x)}^2}}}\\\\]\n同样可以得到\n\\\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\\\]","slug":"concrete-math-3","published":1,"updated":"2019-07-20T04:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982fc006m7swe200anrmv","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=539941039&auto=1&height=66\"></iframe></div>\n\n<p>今天讲了一种将递归式转化为求和的方法。</p>\n<p>考虑如下递归式：<br>\\[{a_n}{T_n} = {b_n}{T_{n - 1}} + {c_n}\\]<br>两边同时乘以$s_n$得到：<br>\\[{s_n}{a_n}{T_n} = {s_n}{b_n}{T_{n - 1}} + {s_n}{c_n}\\]<br>要想转化成可以求和的递归式，那么必须有：<br>\\[{s_n}{b_n} = {s_{n - 1}}{a_{n - 1}}\\]<br>也就是：<br>\\[{s_n} = \\frac { { {a_{n - 1}}{a_{n - 2}} \\cdots {a_1}}}{ { {b_n}{b_{n - 1}} \\cdots {b_2}}}\\]<br>这时令<br>\\[{S_n} = {s_n}{a_n}{T_n}\\]<br>得到：<br>\\[{S_n} = {S_{n - 1}} + {s_n}{c_n}\\]<br>这时就可以转化为求和了，解出：<br>\\[{S_n} = {s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} \\]<br>所以<br>\\[{T_n} = \\frac{1}{ { {s_n}{a_n}}}({s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} )\\]</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>设$n$个数快速排序的操作次数为$C_n$，那么有<br>\\[\\begin{array}{l}{C_0} = 0\\\\{C_n} = n + 1 + \\frac{2}{n}\\sum\\limits_{k = 0}^{n - 1} { {C_k}} ,n &gt; 0\\end{array}\\]<br>用$n-1$取代$n$可以得到<br>\\[{C_{n - 1}} = n + \\frac{2}{ {n - 1}}\\sum\\limits_{k = 0}^{n - 2} { {C_k}} ,n &gt; 1\\]<br>两式相减可以得到<br>\\[\\begin{array}{l}{C_0} = 0\\\\n{C_n} = (n + 1){C_{n - 1}} + 2n,n &gt; 0\\end{array}\\]<br>由上面方法可以得到<br>\\[{a_n} = n,{b_n} = n + 1,{c_n} = 2n\\]<br>所以<br>\\[{s_n} = \\frac{2}{ {n(n + 1)}}\\]<br>进而可以求出<br>\\[{C_n} = 2(n + 1)\\sum\\limits_{k = 1}^n {\\frac{1}{ {k + 1}}} \\]<br>这里介绍一个概念叫做调和级数：<br>\\[{H_n} = 1 + \\frac{1}{2} +  \\cdots  + \\frac{1}{n} = \\sum\\limits_{k = 1}^n {\\frac{1}{k}} \\]<br>所以<br>\\[{C_n} = 2(n + 1){H_n} - 2n\\]</p>\n<h1 id=\"求和三大定律\"><a href=\"#求和三大定律\" class=\"headerlink\" title=\"求和三大定律\"></a>求和三大定律</h1><hr>\n<p>结合律、分配率、交换律。这里就不展开说了，相信你们都知道的。<br>来两题简单的例题说明一下。</p>\n<h1 id=\"例题2\"><a href=\"#例题2\" class=\"headerlink\" title=\"例题2\"></a>例题2</h1><hr>\n<p>求<br>\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + bk)} \\]<br>普通的方法每个人应该都会，等差数列嘛。这里用求和定律来做一做。<br>用$n-k$取代$k$，得到<br>\\[S = \\sum\\limits_{0 \\le n - k \\le n} {(a + b(n - k))} \\]<br>即<br>\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + b(n - k))} \\]<br>两式相加得到<br>\\[2S = \\sum\\limits_{0 \\le k \\le n} {(2a + bn)}  = (2a + bn)\\sum\\limits_{0 \\le k \\le n} 1  = (2a + bn)(n + 1)\\]<br>所以<br>\\[S = (2a + bn)(n + 1)/2\\]</p>\n<h1 id=\"例题3\"><a href=\"#例题3\" class=\"headerlink\" title=\"例题3\"></a>例题3</h1><hr>\n<p>求<br>\\[S = \\sum\\limits_{0 \\le k \\le n} {k{x^k}} \\]<br>这里用到另一种求和的方法。<br>两边同时加上第$n+1$项，得到<br>\\[\\begin{array}{l}S + (n + 1){x^{n + 1}}\\\\ = \\sum\\limits_{0 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{0 \\le k \\le n} {(k + 1){x^{k + 1}}} \\\\ = x\\sum\\limits_{0 \\le k \\le n} {(k{x^k} + {x^k})} \\\\ = xS + x\\sum\\limits_{0 \\le k \\le n} { {x^k}} \\\\ = xS + x\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\end{array}\\]<br>所以<br>\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\]<br>这里介绍另一种方法来求解。<br>令<br>\\[f(x) = \\sum\\limits_{0 \\le k \\le n} { {x^k}}  = \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\]<br>求导得到<br>\\[f’(x) = \\sum\\limits_{0 \\le k \\le n} {k{x^{k - 1}}}  = \\frac{1}{x}S\\]<br>所以<br>\\[\\frac{1}{x}S = \\frac{ {\\partial f}}{ {\\partial x}}(\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}) = \\frac{ {1 - (n + 1){x^n} + n{x^{n + 1}}}}{ { { {(1 - x)}^2}}}\\]<br>同样可以得到<br>\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\]</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=539941039&auto=1&height=66\"></iframe></div>\n\n<p>今天讲了一种将递归式转化为求和的方法。</p>\n<p>考虑如下递归式：<br>\\[{a_n}{T_n} = {b_n}{T_{n - 1}} + {c_n}\\]<br>两边同时乘以$s_n$得到：<br>\\[{s_n}{a_n}{T_n} = {s_n}{b_n}{T_{n - 1}} + {s_n}{c_n}\\]<br>要想转化成可以求和的递归式，那么必须有：<br>\\[{s_n}{b_n} = {s_{n - 1}}{a_{n - 1}}\\]<br>也就是：<br>\\[{s_n} = \\frac { { {a_{n - 1}}{a_{n - 2}} \\cdots {a_1}}}{ { {b_n}{b_{n - 1}} \\cdots {b_2}}}\\]<br>这时令<br>\\[{S_n} = {s_n}{a_n}{T_n}\\]<br>得到：<br>\\[{S_n} = {S_{n - 1}} + {s_n}{c_n}\\]<br>这时就可以转化为求和了，解出：<br>\\[{S_n} = {s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} \\]<br>所以<br>\\[{T_n} = \\frac{1}{ { {s_n}{a_n}}}({s_0}{a_0}{T_0} + \\sum\\limits_{k = 1}^n { {s_k}{c_k}} )\\]</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>设$n$个数快速排序的操作次数为$C_n$，那么有<br>\\[\\begin{array}{l}{C_0} = 0\\\\{C_n} = n + 1 + \\frac{2}{n}\\sum\\limits_{k = 0}^{n - 1} { {C_k}} ,n &gt; 0\\end{array}\\]<br>用$n-1$取代$n$可以得到<br>\\[{C_{n - 1}} = n + \\frac{2}{ {n - 1}}\\sum\\limits_{k = 0}^{n - 2} { {C_k}} ,n &gt; 1\\]<br>两式相减可以得到<br>\\[\\begin{array}{l}{C_0} = 0\\\\n{C_n} = (n + 1){C_{n - 1}} + 2n,n &gt; 0\\end{array}\\]<br>由上面方法可以得到<br>\\[{a_n} = n,{b_n} = n + 1,{c_n} = 2n\\]<br>所以<br>\\[{s_n} = \\frac{2}{ {n(n + 1)}}\\]<br>进而可以求出<br>\\[{C_n} = 2(n + 1)\\sum\\limits_{k = 1}^n {\\frac{1}{ {k + 1}}} \\]<br>这里介绍一个概念叫做调和级数：<br>\\[{H_n} = 1 + \\frac{1}{2} +  \\cdots  + \\frac{1}{n} = \\sum\\limits_{k = 1}^n {\\frac{1}{k}} \\]<br>所以<br>\\[{C_n} = 2(n + 1){H_n} - 2n\\]</p>\n<h1 id=\"求和三大定律\"><a href=\"#求和三大定律\" class=\"headerlink\" title=\"求和三大定律\"></a>求和三大定律</h1><hr>\n<p>结合律、分配率、交换律。这里就不展开说了，相信你们都知道的。<br>来两题简单的例题说明一下。</p>\n<h1 id=\"例题2\"><a href=\"#例题2\" class=\"headerlink\" title=\"例题2\"></a>例题2</h1><hr>\n<p>求<br>\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + bk)} \\]<br>普通的方法每个人应该都会，等差数列嘛。这里用求和定律来做一做。<br>用$n-k$取代$k$，得到<br>\\[S = \\sum\\limits_{0 \\le n - k \\le n} {(a + b(n - k))} \\]<br>即<br>\\[S = \\sum\\limits_{0 \\le k \\le n} {(a + b(n - k))} \\]<br>两式相加得到<br>\\[2S = \\sum\\limits_{0 \\le k \\le n} {(2a + bn)}  = (2a + bn)\\sum\\limits_{0 \\le k \\le n} 1  = (2a + bn)(n + 1)\\]<br>所以<br>\\[S = (2a + bn)(n + 1)/2\\]</p>\n<h1 id=\"例题3\"><a href=\"#例题3\" class=\"headerlink\" title=\"例题3\"></a>例题3</h1><hr>\n<p>求<br>\\[S = \\sum\\limits_{0 \\le k \\le n} {k{x^k}} \\]<br>这里用到另一种求和的方法。<br>两边同时加上第$n+1$项，得到<br>\\[\\begin{array}{l}S + (n + 1){x^{n + 1}}\\\\ = \\sum\\limits_{0 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} {k{x^k}} \\\\ = \\sum\\limits_{0 \\le k \\le n} {(k + 1){x^{k + 1}}} \\\\ = x\\sum\\limits_{0 \\le k \\le n} {(k{x^k} + {x^k})} \\\\ = xS + x\\sum\\limits_{0 \\le k \\le n} { {x^k}} \\\\ = xS + x\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\end{array}\\]<br>所以<br>\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\]<br>这里介绍另一种方法来求解。<br>令<br>\\[f(x) = \\sum\\limits_{0 \\le k \\le n} { {x^k}}  = \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}\\]<br>求导得到<br>\\[f’(x) = \\sum\\limits_{0 \\le k \\le n} {k{x^{k - 1}}}  = \\frac{1}{x}S\\]<br>所以<br>\\[\\frac{1}{x}S = \\frac{ {\\partial f}}{ {\\partial x}}(\\frac{ {1 - {x^{n + 1}}}}{ {1 - x}}) = \\frac{ {1 - (n + 1){x^n} + n{x^{n + 1}}}}{ { { {(1 - x)}^2}}}\\]<br>同样可以得到<br>\\[S = \\frac{ {x - (n + 1){x^{n + 1}} + n{x^{n + 2}}}}{ { { {(1 - x)}^2}}}\\]</p>\n"},{"title":"具体数学-第14课（牛顿级数和生成函数）","date":"2018-05-28T05:43:43.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26492802&auto=1&height=66\"></iframe></div>\n\n# 牛顿级数\n---\n多项式函数的一般表示形式为：\n\\\\[f(x) = {a_d}{x^d} + {a_{d - 1}}{x^{d - 1}} +  \\cdots  + {a_1}{x^1} + {a_0}{x^0}\\\\]\n也可以将其表示为下降阶乘幂的形式：\n\\\\[f(x) = {b_d}{x^\\underline{d}} + {b_{d - 1}}{x^{\\underline{d - 1}}} +  \\cdots  + {b_1}{x^\\underline{1}} + {b_0}{x^\\underline{0}}\\\\]\n这种表示的好处是，求差分更加方便：\n\\\\[\\Delta (f(x)) = {b_d}d{x^{\\underline{d - 1}}} + {b_{d - 1}}(d - 1){x^{\\underline {d - 2} }} +  \\cdots  + {b_1}{x^\\underline{0}}\\\\]\n因为有\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}x\\\\k\\end{array}} \\right) = \\frac{ { {x^\\underline{k}}}}{ {k!}}\\\\]\n所以多项式又可以表示为组合数的形式，也被叫做牛顿级数：\n\\\\[f(x) = {c_d}\\left( {\\begin{array}{\\*{20}{c}}x\\\\d\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{\\*{20}{c}}x\\\\1\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{\\*{20}{c}}x\\\\0\\end{array}} \\right)\\\\]\n这种形式的差分也特别简单，因为有\n\\\\[\\Delta \\left( {\\left( {\\begin{array}{\\*{20}{c}}x\\\\k\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{\\*{20}{c}}x\\\\{k - 1}\\end{array}} \\right)\\\\]\n所以$n$阶差分可以写为：\n\\\\[{\\Delta ^n}(f(x)) = {c_d}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - n}\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - 1 - n}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{1 - n}\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{ - n}\\end{array}} \\right)\\\\]\n所以有：\n\\\\[{\\Delta ^n}(f(0)) = \\left\\{ {\\begin{array}{\\*{20}{c}}{ {c_n},n \\le d}\\\\{0,n > d}\\end{array}} \\right.\\\\]\n所以牛顿级数又可以写为：\n\\\\[f(x) = {\\Delta ^d}(f(0))\\left( {\\begin{array}{\\*{20}{c}}x\\\\d\\end{array}} \\right) + {\\Delta ^{d - 1}}(f(0))\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + \\Delta (f(0))\\left( {\\begin{array}{\\*{20}{c}}x\\\\1\\end{array}} \\right) + f(0){c_0}\\left( {\\begin{array}{\\*{20}{c}}x\\\\0\\end{array}} \\right)\\\\]\n这个形式是不是很像泰勒展开？\n\n# 生成函数\n---\n对于无限序列$\\left\\langle { {a_0},{a_1},{a_2}, \\ldots } \\right\\rangle $，定义它的生成函数为：\n\\\\[A(z) = {a_0} + {a_1}z + {a_2}{z^2} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {a_k}{z^k}} \\\\]\n定义一个函数用来表示$z^n$的系数：\n\\\\[[{z^n}]A(z) = {a_n}\\\\]\n两个生成函数相乘的结果为：\n\\\\[A(z)B(z) = \\sum\\limits_{k \\ge 0} {\\sum\\limits_{i = 0}^k { {a_i}{b_{k - i}}} {z^k}} \\\\]\n考虑下面的二项展开：\n\\\\[{(1 + z)^r} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right){z^k}} \\\\]\n可以发现这就是序列$\\left\\langle {\\left( {\\begin{array}{\\*{20}{c}}r\\\\0\\end{array}} \\right),\\left( {\\begin{array}{\\*{20}{c}}r\\\\1\\end{array}} \\right),\\left( {\\begin{array}{\\*{20}{c}}r\\\\2\\end{array}} \\right), \\ldots } \\right\\rangle $的生成函数。\n替换变量可以得到：\n\\\\[{(1 + z)^s} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}s\\\\k\\end{array}} \\right){z^k}} \\\\]\n两个式子相乘可以得到：\n\\\\[{(1 + z)^r}{(1 + z)^s} = {(1 + z)^{r + s}}\\\\]\n等式两边$z^n$的系数相等，于是：\n\\\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}s\\\\{n - k}\\end{array}} \\right)}  = \\left( {\\begin{array}{\\*{20}{c}}{r + s}\\\\n\\end{array}} \\right)\\\\]\n这和上节课讲到的范德蒙德卷积公式类似！这里是用生成函数证出来的。\n\n同理根据\n\\\\[{(1 + z)^r}{(1 - z)^r} = {(1 - {z^2})^r}\\\\]\n可以得到\n\\\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}r\\\\{n - k}\\end{array}} \\right)} {( - 1)^k} = {( - 1)^{n/2}}\\left( {\\begin{array}{\\*{20}{c}}r\\\\{n/2}\\end{array}} \\right)[n是偶数]\\\\]\n下面是一个重要的生成函数：\n\\\\[\\frac{1}{ {1 - z}} = 1 + z + {z^2} + {z^3} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {z^k}} \\\\]\n它其实就是序列$\\left\\langle { {1},{1},{1}, \\ldots } \\right\\rangle $的生成函数。\n\n# 生成函数应用\n---\n那么生成函数有什么应用呢？一个很重要的应用就是用来求解递归式。\n\n例如大家很熟悉的斐波那契数列：\n\\\\[\\begin{array}{l}{g_0} = 0;{g_1} = 1\\\\{g_n} = {g_{n - 1}} + {g_{n - 2}},n \\ge 2\\end{array}\\\\]\n\n首先为了统一表示，将递归式改写为如下形式：\n\\\\[{g_n} = {g_{n - 1}} + {g_{n - 2}} + [n = 1]\\\\]\n然后两边同时乘以$z^n$，得到：\n\\\\[{g_n}{z^n} = {g_{n - 1}}{z^n} + {g_{n - 2}}{z^n} + [n = 1]{z^n}\\\\]\n两边对指标$n$同时求和，可以得到：\n\\\\[G(z) = zG(z) + {z^2}G(z) + z\\\\]\n所以\n\\\\[G(z) = \\frac{z}{ {1 - z - {z^2}}}\\\\]\n最后只要将$\\frac{z}{ {1 - z - {z^2}}}$表示成多项式的形式就行了，$[{z^n}]\\frac{z}{ {1 - z - {z^2}}}$就是斐波那契数列的通项公式了。","source":"_posts/concrete-math-14.md","raw":"---\ntitle: 具体数学-第14课（牛顿级数和生成函数）\ndate: 2018-05-28 13:43:43\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26492802&auto=1&height=66\"></iframe></div>\n\n# 牛顿级数\n---\n多项式函数的一般表示形式为：\n\\\\[f(x) = {a_d}{x^d} + {a_{d - 1}}{x^{d - 1}} +  \\cdots  + {a_1}{x^1} + {a_0}{x^0}\\\\]\n也可以将其表示为下降阶乘幂的形式：\n\\\\[f(x) = {b_d}{x^\\underline{d}} + {b_{d - 1}}{x^{\\underline{d - 1}}} +  \\cdots  + {b_1}{x^\\underline{1}} + {b_0}{x^\\underline{0}}\\\\]\n这种表示的好处是，求差分更加方便：\n\\\\[\\Delta (f(x)) = {b_d}d{x^{\\underline{d - 1}}} + {b_{d - 1}}(d - 1){x^{\\underline {d - 2} }} +  \\cdots  + {b_1}{x^\\underline{0}}\\\\]\n因为有\n\\\\[\\left( {\\begin{array}{\\*{20}{c}}x\\\\k\\end{array}} \\right) = \\frac{ { {x^\\underline{k}}}}{ {k!}}\\\\]\n所以多项式又可以表示为组合数的形式，也被叫做牛顿级数：\n\\\\[f(x) = {c_d}\\left( {\\begin{array}{\\*{20}{c}}x\\\\d\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{\\*{20}{c}}x\\\\1\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{\\*{20}{c}}x\\\\0\\end{array}} \\right)\\\\]\n这种形式的差分也特别简单，因为有\n\\\\[\\Delta \\left( {\\left( {\\begin{array}{\\*{20}{c}}x\\\\k\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{\\*{20}{c}}x\\\\{k - 1}\\end{array}} \\right)\\\\]\n所以$n$阶差分可以写为：\n\\\\[{\\Delta ^n}(f(x)) = {c_d}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - n}\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - 1 - n}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{1 - n}\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{\\*{20}{c}}x\\\\{ - n}\\end{array}} \\right)\\\\]\n所以有：\n\\\\[{\\Delta ^n}(f(0)) = \\left\\{ {\\begin{array}{\\*{20}{c}}{ {c_n},n \\le d}\\\\{0,n > d}\\end{array}} \\right.\\\\]\n所以牛顿级数又可以写为：\n\\\\[f(x) = {\\Delta ^d}(f(0))\\left( {\\begin{array}{\\*{20}{c}}x\\\\d\\end{array}} \\right) + {\\Delta ^{d - 1}}(f(0))\\left( {\\begin{array}{\\*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + \\Delta (f(0))\\left( {\\begin{array}{\\*{20}{c}}x\\\\1\\end{array}} \\right) + f(0){c_0}\\left( {\\begin{array}{\\*{20}{c}}x\\\\0\\end{array}} \\right)\\\\]\n这个形式是不是很像泰勒展开？\n\n# 生成函数\n---\n对于无限序列$\\left\\langle { {a_0},{a_1},{a_2}, \\ldots } \\right\\rangle $，定义它的生成函数为：\n\\\\[A(z) = {a_0} + {a_1}z + {a_2}{z^2} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {a_k}{z^k}} \\\\]\n定义一个函数用来表示$z^n$的系数：\n\\\\[[{z^n}]A(z) = {a_n}\\\\]\n两个生成函数相乘的结果为：\n\\\\[A(z)B(z) = \\sum\\limits_{k \\ge 0} {\\sum\\limits_{i = 0}^k { {a_i}{b_{k - i}}} {z^k}} \\\\]\n考虑下面的二项展开：\n\\\\[{(1 + z)^r} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right){z^k}} \\\\]\n可以发现这就是序列$\\left\\langle {\\left( {\\begin{array}{\\*{20}{c}}r\\\\0\\end{array}} \\right),\\left( {\\begin{array}{\\*{20}{c}}r\\\\1\\end{array}} \\right),\\left( {\\begin{array}{\\*{20}{c}}r\\\\2\\end{array}} \\right), \\ldots } \\right\\rangle $的生成函数。\n替换变量可以得到：\n\\\\[{(1 + z)^s} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{\\*{20}{c}}s\\\\k\\end{array}} \\right){z^k}} \\\\]\n两个式子相乘可以得到：\n\\\\[{(1 + z)^r}{(1 + z)^s} = {(1 + z)^{r + s}}\\\\]\n等式两边$z^n$的系数相等，于是：\n\\\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}s\\\\{n - k}\\end{array}} \\right)}  = \\left( {\\begin{array}{\\*{20}{c}}{r + s}\\\\n\\end{array}} \\right)\\\\]\n这和上节课讲到的范德蒙德卷积公式类似！这里是用生成函数证出来的。\n\n同理根据\n\\\\[{(1 + z)^r}{(1 - z)^r} = {(1 - {z^2})^r}\\\\]\n可以得到\n\\\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}r\\\\{n - k}\\end{array}} \\right)} {( - 1)^k} = {( - 1)^{n/2}}\\left( {\\begin{array}{\\*{20}{c}}r\\\\{n/2}\\end{array}} \\right)[n是偶数]\\\\]\n下面是一个重要的生成函数：\n\\\\[\\frac{1}{ {1 - z}} = 1 + z + {z^2} + {z^3} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {z^k}} \\\\]\n它其实就是序列$\\left\\langle { {1},{1},{1}, \\ldots } \\right\\rangle $的生成函数。\n\n# 生成函数应用\n---\n那么生成函数有什么应用呢？一个很重要的应用就是用来求解递归式。\n\n例如大家很熟悉的斐波那契数列：\n\\\\[\\begin{array}{l}{g_0} = 0;{g_1} = 1\\\\{g_n} = {g_{n - 1}} + {g_{n - 2}},n \\ge 2\\end{array}\\\\]\n\n首先为了统一表示，将递归式改写为如下形式：\n\\\\[{g_n} = {g_{n - 1}} + {g_{n - 2}} + [n = 1]\\\\]\n然后两边同时乘以$z^n$，得到：\n\\\\[{g_n}{z^n} = {g_{n - 1}}{z^n} + {g_{n - 2}}{z^n} + [n = 1]{z^n}\\\\]\n两边对指标$n$同时求和，可以得到：\n\\\\[G(z) = zG(z) + {z^2}G(z) + z\\\\]\n所以\n\\\\[G(z) = \\frac{z}{ {1 - z - {z^2}}}\\\\]\n最后只要将$\\frac{z}{ {1 - z - {z^2}}}$表示成多项式的形式就行了，$[{z^n}]\\frac{z}{ {1 - z - {z^2}}}$就是斐波那契数列的通项公式了。","slug":"concrete-math-14","published":1,"updated":"2019-07-20T04:06:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ff006p7swejx97r4wu","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26492802&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"牛顿级数\"><a href=\"#牛顿级数\" class=\"headerlink\" title=\"牛顿级数\"></a>牛顿级数</h1><hr>\n<p>多项式函数的一般表示形式为：<br>\\[f(x) = {a_d}{x^d} + {a_{d - 1}}{x^{d - 1}} +  \\cdots  + {a_1}{x^1} + {a_0}{x^0}\\]<br>也可以将其表示为下降阶乘幂的形式：<br>\\[f(x) = {b_d}{x^\\underline{d}} + {b_{d - 1}}{x^{\\underline{d - 1}}} +  \\cdots  + {b_1}{x^\\underline{1}} + {b_0}{x^\\underline{0}}\\]<br>这种表示的好处是，求差分更加方便：<br>\\[\\Delta (f(x)) = {b_d}d{x^{\\underline{d - 1}}} + {b_{d - 1}}(d - 1){x^{\\underline {d - 2} }} +  \\cdots  + {b_1}{x^\\underline{0}}\\]<br>因为有<br>\\[\\left( {\\begin{array}{*{20}{c}}x\\\\k\\end{array}} \\right) = \\frac{ { {x^\\underline{k}}}}{ {k!}}\\]<br>所以多项式又可以表示为组合数的形式，也被叫做牛顿级数：<br>\\[f(x) = {c_d}\\left( {\\begin{array}{*{20}{c}}x\\\\d\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{*{20}{c}}x\\\\1\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{*{20}{c}}x\\\\0\\end{array}} \\right)\\]<br>这种形式的差分也特别简单，因为有<br>\\[\\Delta \\left( {\\left( {\\begin{array}{*{20}{c}}x\\\\k\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{*{20}{c}}x\\\\{k - 1}\\end{array}} \\right)\\]<br>所以$n$阶差分可以写为：<br>\\[{\\Delta ^n}(f(x)) = {c_d}\\left( {\\begin{array}{*{20}{c}}x\\\\{d - n}\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{*{20}{c}}x\\\\{d - 1 - n}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{*{20}{c}}x\\\\{1 - n}\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{*{20}{c}}x\\\\{ - n}\\end{array}} \\right)\\]<br>所以有：<br>\\[{\\Delta ^n}(f(0)) = \\left\\{ {\\begin{array}{*{20}{c}}{ {c_n},n \\le d}\\\\{0,n &gt; d}\\end{array}} \\right.\\]<br>所以牛顿级数又可以写为：<br>\\[f(x) = {\\Delta ^d}(f(0))\\left( {\\begin{array}{*{20}{c}}x\\\\d\\end{array}} \\right) + {\\Delta ^{d - 1}}(f(0))\\left( {\\begin{array}{*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + \\Delta (f(0))\\left( {\\begin{array}{*{20}{c}}x\\\\1\\end{array}} \\right) + f(0){c_0}\\left( {\\begin{array}{*{20}{c}}x\\\\0\\end{array}} \\right)\\]<br>这个形式是不是很像泰勒展开？</p>\n<h1 id=\"生成函数\"><a href=\"#生成函数\" class=\"headerlink\" title=\"生成函数\"></a>生成函数</h1><hr>\n<p>对于无限序列$\\left\\langle { {a_0},{a_1},{a_2}, \\ldots } \\right\\rangle $，定义它的生成函数为：<br>\\[A(z) = {a_0} + {a_1}z + {a_2}{z^2} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {a_k}{z^k}} \\]<br>定义一个函数用来表示$z^n$的系数：<br>\\[[{z^n}]A(z) = {a_n}\\]<br>两个生成函数相乘的结果为：<br>\\[A(z)B(z) = \\sum\\limits_{k \\ge 0} {\\sum\\limits_{i = 0}^k { {a_i}{b_{k - i}}} {z^k}} \\]<br>考虑下面的二项展开：<br>\\[{(1 + z)^r} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right){z^k}} \\]<br>可以发现这就是序列$\\left\\langle {\\left( {\\begin{array}{*{20}{c}}r\\\\0\\end{array}} \\right),\\left( {\\begin{array}{*{20}{c}}r\\\\1\\end{array}} \\right),\\left( {\\begin{array}{*{20}{c}}r\\\\2\\end{array}} \\right), \\ldots } \\right\\rangle $的生成函数。<br>替换变量可以得到：<br>\\[{(1 + z)^s} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}s\\\\k\\end{array}} \\right){z^k}} \\]<br>两个式子相乘可以得到：<br>\\[{(1 + z)^r}{(1 + z)^s} = {(1 + z)^{r + s}}\\]<br>等式两边$z^n$的系数相等，于是：<br>\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}s\\\\{n - k}\\end{array}} \\right)}  = \\left( {\\begin{array}{*{20}{c}}{r + s}\\\\n\\end{array}} \\right)\\]<br>这和上节课讲到的范德蒙德卷积公式类似！这里是用生成函数证出来的。</p>\n<p>同理根据<br>\\[{(1 + z)^r}{(1 - z)^r} = {(1 - {z^2})^r}\\]<br>可以得到<br>\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}r\\\\{n - k}\\end{array}} \\right)} {( - 1)^k} = {( - 1)^{n/2}}\\left( {\\begin{array}{*{20}{c}}r\\\\{n/2}\\end{array}} \\right)[n是偶数]\\]<br>下面是一个重要的生成函数：<br>\\[\\frac{1}{ {1 - z}} = 1 + z + {z^2} + {z^3} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {z^k}} \\]<br>它其实就是序列$\\left\\langle { {1},{1},{1}, \\ldots } \\right\\rangle $的生成函数。</p>\n<h1 id=\"生成函数应用\"><a href=\"#生成函数应用\" class=\"headerlink\" title=\"生成函数应用\"></a>生成函数应用</h1><hr>\n<p>那么生成函数有什么应用呢？一个很重要的应用就是用来求解递归式。</p>\n<p>例如大家很熟悉的斐波那契数列：<br>\\[\\begin{array}{l}{g_0} = 0;{g_1} = 1\\\\{g_n} = {g_{n - 1}} + {g_{n - 2}},n \\ge 2\\end{array}\\]</p>\n<p>首先为了统一表示，将递归式改写为如下形式：<br>\\[{g_n} = {g_{n - 1}} + {g_{n - 2}} + [n = 1]\\]<br>然后两边同时乘以$z^n$，得到：<br>\\[{g_n}{z^n} = {g_{n - 1}}{z^n} + {g_{n - 2}}{z^n} + [n = 1]{z^n}\\]<br>两边对指标$n$同时求和，可以得到：<br>\\[G(z) = zG(z) + {z^2}G(z) + z\\]<br>所以<br>\\[G(z) = \\frac{z}{ {1 - z - {z^2}}}\\]<br>最后只要将$\\frac{z}{ {1 - z - {z^2}}}$表示成多项式的形式就行了，$[{z^n}]\\frac{z}{ {1 - z - {z^2}}}$就是斐波那契数列的通项公式了。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26492802&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"牛顿级数\"><a href=\"#牛顿级数\" class=\"headerlink\" title=\"牛顿级数\"></a>牛顿级数</h1><hr>\n<p>多项式函数的一般表示形式为：<br>\\[f(x) = {a_d}{x^d} + {a_{d - 1}}{x^{d - 1}} +  \\cdots  + {a_1}{x^1} + {a_0}{x^0}\\]<br>也可以将其表示为下降阶乘幂的形式：<br>\\[f(x) = {b_d}{x^\\underline{d}} + {b_{d - 1}}{x^{\\underline{d - 1}}} +  \\cdots  + {b_1}{x^\\underline{1}} + {b_0}{x^\\underline{0}}\\]<br>这种表示的好处是，求差分更加方便：<br>\\[\\Delta (f(x)) = {b_d}d{x^{\\underline{d - 1}}} + {b_{d - 1}}(d - 1){x^{\\underline {d - 2} }} +  \\cdots  + {b_1}{x^\\underline{0}}\\]<br>因为有<br>\\[\\left( {\\begin{array}{*{20}{c}}x\\\\k\\end{array}} \\right) = \\frac{ { {x^\\underline{k}}}}{ {k!}}\\]<br>所以多项式又可以表示为组合数的形式，也被叫做牛顿级数：<br>\\[f(x) = {c_d}\\left( {\\begin{array}{*{20}{c}}x\\\\d\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{*{20}{c}}x\\\\1\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{*{20}{c}}x\\\\0\\end{array}} \\right)\\]<br>这种形式的差分也特别简单，因为有<br>\\[\\Delta \\left( {\\left( {\\begin{array}{*{20}{c}}x\\\\k\\end{array}} \\right)} \\right) = \\left( {\\begin{array}{*{20}{c}}x\\\\{k - 1}\\end{array}} \\right)\\]<br>所以$n$阶差分可以写为：<br>\\[{\\Delta ^n}(f(x)) = {c_d}\\left( {\\begin{array}{*{20}{c}}x\\\\{d - n}\\end{array}} \\right) + {c_{d - 1}}\\left( {\\begin{array}{*{20}{c}}x\\\\{d - 1 - n}\\end{array}} \\right) +  \\cdots  + {c_1}\\left( {\\begin{array}{*{20}{c}}x\\\\{1 - n}\\end{array}} \\right) + {c_0}\\left( {\\begin{array}{*{20}{c}}x\\\\{ - n}\\end{array}} \\right)\\]<br>所以有：<br>\\[{\\Delta ^n}(f(0)) = \\left\\{ {\\begin{array}{*{20}{c}}{ {c_n},n \\le d}\\\\{0,n &gt; d}\\end{array}} \\right.\\]<br>所以牛顿级数又可以写为：<br>\\[f(x) = {\\Delta ^d}(f(0))\\left( {\\begin{array}{*{20}{c}}x\\\\d\\end{array}} \\right) + {\\Delta ^{d - 1}}(f(0))\\left( {\\begin{array}{*{20}{c}}x\\\\{d - 1}\\end{array}} \\right) +  \\cdots  + \\Delta (f(0))\\left( {\\begin{array}{*{20}{c}}x\\\\1\\end{array}} \\right) + f(0){c_0}\\left( {\\begin{array}{*{20}{c}}x\\\\0\\end{array}} \\right)\\]<br>这个形式是不是很像泰勒展开？</p>\n<h1 id=\"生成函数\"><a href=\"#生成函数\" class=\"headerlink\" title=\"生成函数\"></a>生成函数</h1><hr>\n<p>对于无限序列$\\left\\langle { {a_0},{a_1},{a_2}, \\ldots } \\right\\rangle $，定义它的生成函数为：<br>\\[A(z) = {a_0} + {a_1}z + {a_2}{z^2} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {a_k}{z^k}} \\]<br>定义一个函数用来表示$z^n$的系数：<br>\\[[{z^n}]A(z) = {a_n}\\]<br>两个生成函数相乘的结果为：<br>\\[A(z)B(z) = \\sum\\limits_{k \\ge 0} {\\sum\\limits_{i = 0}^k { {a_i}{b_{k - i}}} {z^k}} \\]<br>考虑下面的二项展开：<br>\\[{(1 + z)^r} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right){z^k}} \\]<br>可以发现这就是序列$\\left\\langle {\\left( {\\begin{array}{*{20}{c}}r\\\\0\\end{array}} \\right),\\left( {\\begin{array}{*{20}{c}}r\\\\1\\end{array}} \\right),\\left( {\\begin{array}{*{20}{c}}r\\\\2\\end{array}} \\right), \\ldots } \\right\\rangle $的生成函数。<br>替换变量可以得到：<br>\\[{(1 + z)^s} = \\sum\\limits_{k \\ge 0} {\\left( {\\begin{array}{*{20}{c}}s\\\\k\\end{array}} \\right){z^k}} \\]<br>两个式子相乘可以得到：<br>\\[{(1 + z)^r}{(1 + z)^s} = {(1 + z)^{r + s}}\\]<br>等式两边$z^n$的系数相等，于是：<br>\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}s\\\\{n - k}\\end{array}} \\right)}  = \\left( {\\begin{array}{*{20}{c}}{r + s}\\\\n\\end{array}} \\right)\\]<br>这和上节课讲到的范德蒙德卷积公式类似！这里是用生成函数证出来的。</p>\n<p>同理根据<br>\\[{(1 + z)^r}{(1 - z)^r} = {(1 - {z^2})^r}\\]<br>可以得到<br>\\[\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}r\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}r\\\\{n - k}\\end{array}} \\right)} {( - 1)^k} = {( - 1)^{n/2}}\\left( {\\begin{array}{*{20}{c}}r\\\\{n/2}\\end{array}} \\right)[n是偶数]\\]<br>下面是一个重要的生成函数：<br>\\[\\frac{1}{ {1 - z}} = 1 + z + {z^2} + {z^3} +  \\cdots  = \\sum\\limits_{k \\ge 0} { {z^k}} \\]<br>它其实就是序列$\\left\\langle { {1},{1},{1}, \\ldots } \\right\\rangle $的生成函数。</p>\n<h1 id=\"生成函数应用\"><a href=\"#生成函数应用\" class=\"headerlink\" title=\"生成函数应用\"></a>生成函数应用</h1><hr>\n<p>那么生成函数有什么应用呢？一个很重要的应用就是用来求解递归式。</p>\n<p>例如大家很熟悉的斐波那契数列：<br>\\[\\begin{array}{l}{g_0} = 0;{g_1} = 1\\\\{g_n} = {g_{n - 1}} + {g_{n - 2}},n \\ge 2\\end{array}\\]</p>\n<p>首先为了统一表示，将递归式改写为如下形式：<br>\\[{g_n} = {g_{n - 1}} + {g_{n - 2}} + [n = 1]\\]<br>然后两边同时乘以$z^n$，得到：<br>\\[{g_n}{z^n} = {g_{n - 1}}{z^n} + {g_{n - 2}}{z^n} + [n = 1]{z^n}\\]<br>两边对指标$n$同时求和，可以得到：<br>\\[G(z) = zG(z) + {z^2}G(z) + z\\]<br>所以<br>\\[G(z) = \\frac{z}{ {1 - z - {z^2}}}\\]<br>最后只要将$\\frac{z}{ {1 - z - {z^2}}}$表示成多项式的形式就行了，$[{z^n}]\\frac{z}{ {1 - z - {z^2}}}$就是斐波那契数列的通项公式了。</p>\n"},{"title":"具体数学-第5课（8种方法求和）","date":"2018-03-26T03:44:26.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=4875084&auto=1&height=66\"></iframe></div>\n\n今天继续讲求和的方法。\n针对以下求和式，我们用8种方法来求解：\n\\\\[{S_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}} \\\\]\n大家应该都已经背上了它的答案：\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n# 方法0\n---\n**查表。**\n这就不用说了，很多文献都有现成的解，拿来直接用就行了。\n再给大家推荐一个整数序列查询网站OEIS：[链接](http://oeis.org/)\n\n# 方法1\n---\n**猜答案，然后用数学归纳法证明。**\n这个也不多说了，前提是你得猜得出来，这题的公式还是很难猜的。\n\n# 方法2\n---\n**扰动法。**\n令\n\\\\[T = \\sum\\limits_{0 \\le k \\le n} { {k^3}} \\\\]\n所以\n\\\\[\\begin{array}{l}T + {(n + 1)^3}\\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { {k^3}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { { {(k - 1)}^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {(3{k^2} - 3k + 1)} \\\\ = \\sum\\limits_{0 \\le k \\le n} { {k^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {[3{ {(k - 1)}^2} + 3k - 2]} \\\\ = T + 3{S_n} + \\frac{ {3(n + 2)(n + 1)}}{2} - 2(n + 1)\\end{array}\\\\]\n解出\n\\\\[3{S_n} = {(n + 1)^3} - \\frac{ {3(n + 2)(n + 1)}}{2} + 2(n + 1) = n(n + \\frac{1}{2})(n + 1)\\\\]\n最终得到\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n可以看出，我们本来是要对$k^2$求和的，但是只要对$k^3$用扰动法求和即可，因为求和过程中$k^3$项会被抵消掉。\n\n# 方法3\n---\n**成套方法。**\n定义如下递归式：\n\\\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta  + \\gamma n + \\delta {n^2}\\end{array}\\\\]\n由[第2课](http://godweiyang.com/2018/03/05/concrete-math-2/)可知，设解的形式为：\n\\\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma  + D(n)\\delta \\\\]\n分别令${R_n} = 1,n,{n^2}$可以解出\n\\\\[A(n) = 1,B(n) = n,C(n) = \\frac{ {n(n + 1)}}{2}\\\\]\n再另${R_n} = {n^3}$，可以得到\n\\\\[3D(n) = {n^3} + 3C(n) - B(n) = n(n + \\frac{1}{2})(n + 1)\\\\]\n即\n\\\\[D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n这时如果令\n\\\\[\\alpha  = \\beta  = \\gamma  = 0,\\delta  = 1\\\\]\n那么\n\\\\[{R_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}}  = D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n# 方法4\n---\n**积分法**\n求和式可以近似成积分\\\\[\\int_0^n { {x^2}dx}  = {n^3}/3\\\\]\n但是还少算了一部分误差，设为$E_n$，则有\n\\\\[{E_n} = {S_n} - \\frac{1}{3}{n^3} = {S_{n - 1}} + {n^2} - \\frac{1}{3}{n^3} = {E_{n - 1}} + n - \\frac{1}{3}\\\\]\n解得\n\\\\[{E_n} = \\frac{ {3{n^2} + n}}{6}\\\\]\n所以\n\\\\[{S_n} = {E_n} + \\frac{1}{3}{n^3} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n其实这种方法就是把最高次直接给算出来了，低次项可以直接求和的。\n\n# 方法5\n---\n**扩展成二重指标求和**\n\\\\[\\begin{array}{l}{S_n} = \\sum\\limits_{1 \\le k \\le n} { {k^2}}  = \\sum\\limits_{1 \\le j \\le k \\le n} { {k^2}} \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j \\le k \\le n} k } \\\\ = \\sum\\limits_{1 \\le j \\le n} {(\\frac{ {j + n}}{2})(n - j + 1)} \\\\ = \\frac{1}{2}\\sum\\limits_{1 \\le j \\le n} {(n(n + 1) + j - {j^2})} \\\\ = \\frac{1}{2}{n^2}(n + 1) + \\frac{1}{4}n(n + 1) - \\frac{1}{2}{S_n}\\\\ = \\frac{1}{2}n(n + \\frac{1}{2})(n + 1) - \\frac{1}{2}{S_n}\\end{array}\\\\]\n所以\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n# 方法6\n---\n**用有限微分求和**\n微分的形式大家都知道，如下：\n\\\\[\\Delta f(x) = f(x + 1) - f(x)\\\\]\n那如果我们定义\n\\\\[f(x) = {x^m}\\\\]\n则有\n\\\\[\\Delta f(x) = {(x + 1)^m} - {x^m}\\\\]\n似乎并不能和导数形式统一起来，用起来也不方便，那么我们定义一个新的函数，叫做**下降阶乘幂**：\n\\\\[f(x) = {x^{\\underline{m}}} = x(x - 1) \\ldots (x - m + 1)\\\\]\n同理还可以定义**上升阶乘幂**。\n这个函数有一个很好的性质，那就是\n\\\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\\\]\n令\n\\\\[g(x) = \\Delta f(x)\\\\]\n那么和积分类似，有\n\\\\[\\sum\\nolimits_a^b {g(x)\\delta x}  = f(b) - f(a)\\\\]\n所以\n\\\\[\\sum\\limits_{0 \\le k < n} { {k^{\\underline{m}}}}  = \\left. {\\frac{ { {k^{ {\\underline{m + 1}}}}}}{ {m + 1}}} \\right|_0^n = \\frac{ { {n^{ {\\underline{m + 1}}}}}}{ {m + 1}}\\\\]\n\n因为有\n\\\\[{k^2} = {k^{\\underline{2}}} + {k^{\\underline{1}}}\\\\]\n所以\n\\\\[\\sum\\limits_{0 \\le k < n} { {k^2}}  = \\frac{ { {n^{\\underline{3}}}}}{3} + \\frac{ { {n^{\\underline{2}}}}}{2} = \\frac{ {n(n - 1)(2n - 1)}}{6}\\\\]\n同样可以得到\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n下降阶乘幂还有很多好用的性质，下节课继续。\n\n# 方法7\n---\n**生成函数。**\n以后章节会讲。","source":"_posts/concrete-math-5.md","raw":"---\ntitle: 具体数学-第5课（8种方法求和）\ndate: 2018-03-26 11:44:26\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=4875084&auto=1&height=66\"></iframe></div>\n\n今天继续讲求和的方法。\n针对以下求和式，我们用8种方法来求解：\n\\\\[{S_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}} \\\\]\n大家应该都已经背上了它的答案：\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n# 方法0\n---\n**查表。**\n这就不用说了，很多文献都有现成的解，拿来直接用就行了。\n再给大家推荐一个整数序列查询网站OEIS：[链接](http://oeis.org/)\n\n# 方法1\n---\n**猜答案，然后用数学归纳法证明。**\n这个也不多说了，前提是你得猜得出来，这题的公式还是很难猜的。\n\n# 方法2\n---\n**扰动法。**\n令\n\\\\[T = \\sum\\limits_{0 \\le k \\le n} { {k^3}} \\\\]\n所以\n\\\\[\\begin{array}{l}T + {(n + 1)^3}\\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { {k^3}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { { {(k - 1)}^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {(3{k^2} - 3k + 1)} \\\\ = \\sum\\limits_{0 \\le k \\le n} { {k^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {[3{ {(k - 1)}^2} + 3k - 2]} \\\\ = T + 3{S_n} + \\frac{ {3(n + 2)(n + 1)}}{2} - 2(n + 1)\\end{array}\\\\]\n解出\n\\\\[3{S_n} = {(n + 1)^3} - \\frac{ {3(n + 2)(n + 1)}}{2} + 2(n + 1) = n(n + \\frac{1}{2})(n + 1)\\\\]\n最终得到\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n可以看出，我们本来是要对$k^2$求和的，但是只要对$k^3$用扰动法求和即可，因为求和过程中$k^3$项会被抵消掉。\n\n# 方法3\n---\n**成套方法。**\n定义如下递归式：\n\\\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta  + \\gamma n + \\delta {n^2}\\end{array}\\\\]\n由[第2课](http://godweiyang.com/2018/03/05/concrete-math-2/)可知，设解的形式为：\n\\\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma  + D(n)\\delta \\\\]\n分别令${R_n} = 1,n,{n^2}$可以解出\n\\\\[A(n) = 1,B(n) = n,C(n) = \\frac{ {n(n + 1)}}{2}\\\\]\n再另${R_n} = {n^3}$，可以得到\n\\\\[3D(n) = {n^3} + 3C(n) - B(n) = n(n + \\frac{1}{2})(n + 1)\\\\]\n即\n\\\\[D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n这时如果令\n\\\\[\\alpha  = \\beta  = \\gamma  = 0,\\delta  = 1\\\\]\n那么\n\\\\[{R_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}}  = D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n# 方法4\n---\n**积分法**\n求和式可以近似成积分\\\\[\\int_0^n { {x^2}dx}  = {n^3}/3\\\\]\n但是还少算了一部分误差，设为$E_n$，则有\n\\\\[{E_n} = {S_n} - \\frac{1}{3}{n^3} = {S_{n - 1}} + {n^2} - \\frac{1}{3}{n^3} = {E_{n - 1}} + n - \\frac{1}{3}\\\\]\n解得\n\\\\[{E_n} = \\frac{ {3{n^2} + n}}{6}\\\\]\n所以\n\\\\[{S_n} = {E_n} + \\frac{1}{3}{n^3} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n其实这种方法就是把最高次直接给算出来了，低次项可以直接求和的。\n\n# 方法5\n---\n**扩展成二重指标求和**\n\\\\[\\begin{array}{l}{S_n} = \\sum\\limits_{1 \\le k \\le n} { {k^2}}  = \\sum\\limits_{1 \\le j \\le k \\le n} { {k^2}} \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j \\le k \\le n} k } \\\\ = \\sum\\limits_{1 \\le j \\le n} {(\\frac{ {j + n}}{2})(n - j + 1)} \\\\ = \\frac{1}{2}\\sum\\limits_{1 \\le j \\le n} {(n(n + 1) + j - {j^2})} \\\\ = \\frac{1}{2}{n^2}(n + 1) + \\frac{1}{4}n(n + 1) - \\frac{1}{2}{S_n}\\\\ = \\frac{1}{2}n(n + \\frac{1}{2})(n + 1) - \\frac{1}{2}{S_n}\\end{array}\\\\]\n所以\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n# 方法6\n---\n**用有限微分求和**\n微分的形式大家都知道，如下：\n\\\\[\\Delta f(x) = f(x + 1) - f(x)\\\\]\n那如果我们定义\n\\\\[f(x) = {x^m}\\\\]\n则有\n\\\\[\\Delta f(x) = {(x + 1)^m} - {x^m}\\\\]\n似乎并不能和导数形式统一起来，用起来也不方便，那么我们定义一个新的函数，叫做**下降阶乘幂**：\n\\\\[f(x) = {x^{\\underline{m}}} = x(x - 1) \\ldots (x - m + 1)\\\\]\n同理还可以定义**上升阶乘幂**。\n这个函数有一个很好的性质，那就是\n\\\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\\\]\n令\n\\\\[g(x) = \\Delta f(x)\\\\]\n那么和积分类似，有\n\\\\[\\sum\\nolimits_a^b {g(x)\\delta x}  = f(b) - f(a)\\\\]\n所以\n\\\\[\\sum\\limits_{0 \\le k < n} { {k^{\\underline{m}}}}  = \\left. {\\frac{ { {k^{ {\\underline{m + 1}}}}}}{ {m + 1}}} \\right|_0^n = \\frac{ { {n^{ {\\underline{m + 1}}}}}}{ {m + 1}}\\\\]\n\n因为有\n\\\\[{k^2} = {k^{\\underline{2}}} + {k^{\\underline{1}}}\\\\]\n所以\n\\\\[\\sum\\limits_{0 \\le k < n} { {k^2}}  = \\frac{ { {n^{\\underline{3}}}}}{3} + \\frac{ { {n^{\\underline{2}}}}}{2} = \\frac{ {n(n - 1)(2n - 1)}}{6}\\\\]\n同样可以得到\n\\\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\\\]\n\n下降阶乘幂还有很多好用的性质，下节课继续。\n\n# 方法7\n---\n**生成函数。**\n以后章节会讲。","slug":"concrete-math-5","published":1,"updated":"2019-07-20T04:05:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982fk006t7swe4iijnlti","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=4875084&auto=1&height=66\"></iframe></div>\n\n<p>今天继续讲求和的方法。<br>针对以下求和式，我们用8种方法来求解：<br>\\[{S_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}} \\]<br>大家应该都已经背上了它的答案：<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<h1 id=\"方法0\"><a href=\"#方法0\" class=\"headerlink\" title=\"方法0\"></a>方法0</h1><hr>\n<p><strong>查表。</strong><br>这就不用说了，很多文献都有现成的解，拿来直接用就行了。<br>再给大家推荐一个整数序列查询网站OEIS：<a href=\"http://oeis.org/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h1 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h1><hr>\n<p><strong>猜答案，然后用数学归纳法证明。</strong><br>这个也不多说了，前提是你得猜得出来，这题的公式还是很难猜的。</p>\n<h1 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h1><hr>\n<p><strong>扰动法。</strong><br>令<br>\\[T = \\sum\\limits_{0 \\le k \\le n} { {k^3}} \\]<br>所以<br>\\[\\begin{array}{l}T + {(n + 1)^3}\\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { {k^3}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { { {(k - 1)}^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {(3{k^2} - 3k + 1)} \\\\ = \\sum\\limits_{0 \\le k \\le n} { {k^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {[3{ {(k - 1)}^2} + 3k - 2]} \\\\ = T + 3{S_n} + \\frac{ {3(n + 2)(n + 1)}}{2} - 2(n + 1)\\end{array}\\]<br>解出<br>\\[3{S_n} = {(n + 1)^3} - \\frac{ {3(n + 2)(n + 1)}}{2} + 2(n + 1) = n(n + \\frac{1}{2})(n + 1)\\]<br>最终得到<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>可以看出，我们本来是要对$k^2$求和的，但是只要对$k^3$用扰动法求和即可，因为求和过程中$k^3$项会被抵消掉。</p>\n<h1 id=\"方法3\"><a href=\"#方法3\" class=\"headerlink\" title=\"方法3\"></a>方法3</h1><hr>\n<p><strong>成套方法。</strong><br>定义如下递归式：<br>\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta  + \\gamma n + \\delta {n^2}\\end{array}\\]<br>由<a href=\"http://godweiyang.com/2018/03/05/concrete-math-2/\">第2课</a>可知，设解的形式为：<br>\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma  + D(n)\\delta \\]<br>分别令${R_n} = 1,n,{n^2}$可以解出<br>\\[A(n) = 1,B(n) = n,C(n) = \\frac{ {n(n + 1)}}{2}\\]<br>再另${R_n} = {n^3}$，可以得到<br>\\[3D(n) = {n^3} + 3C(n) - B(n) = n(n + \\frac{1}{2})(n + 1)\\]<br>即<br>\\[D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>这时如果令<br>\\[\\alpha  = \\beta  = \\gamma  = 0,\\delta  = 1\\]<br>那么<br>\\[{R_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}}  = D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<h1 id=\"方法4\"><a href=\"#方法4\" class=\"headerlink\" title=\"方法4\"></a>方法4</h1><hr>\n<p><strong>积分法</strong><br>求和式可以近似成积分\\[\\int_0^n { {x^2}dx}  = {n^3}/3\\]<br>但是还少算了一部分误差，设为$E_n$，则有<br>\\[{E_n} = {S_n} - \\frac{1}{3}{n^3} = {S_{n - 1}} + {n^2} - \\frac{1}{3}{n^3} = {E_{n - 1}} + n - \\frac{1}{3}\\]<br>解得<br>\\[{E_n} = \\frac{ {3{n^2} + n}}{6}\\]<br>所以<br>\\[{S_n} = {E_n} + \\frac{1}{3}{n^3} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>其实这种方法就是把最高次直接给算出来了，低次项可以直接求和的。</p>\n<h1 id=\"方法5\"><a href=\"#方法5\" class=\"headerlink\" title=\"方法5\"></a>方法5</h1><hr>\n<p><strong>扩展成二重指标求和</strong><br>\\[\\begin{array}{l}{S_n} = \\sum\\limits_{1 \\le k \\le n} { {k^2}}  = \\sum\\limits_{1 \\le j \\le k \\le n} { {k^2}} \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j \\le k \\le n} k } \\\\ = \\sum\\limits_{1 \\le j \\le n} {(\\frac{ {j + n}}{2})(n - j + 1)} \\\\ = \\frac{1}{2}\\sum\\limits_{1 \\le j \\le n} {(n(n + 1) + j - {j^2})} \\\\ = \\frac{1}{2}{n^2}(n + 1) + \\frac{1}{4}n(n + 1) - \\frac{1}{2}{S_n}\\\\ = \\frac{1}{2}n(n + \\frac{1}{2})(n + 1) - \\frac{1}{2}{S_n}\\end{array}\\]<br>所以<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<h1 id=\"方法6\"><a href=\"#方法6\" class=\"headerlink\" title=\"方法6\"></a>方法6</h1><hr>\n<p><strong>用有限微分求和</strong><br>微分的形式大家都知道，如下：<br>\\[\\Delta f(x) = f(x + 1) - f(x)\\]<br>那如果我们定义<br>\\[f(x) = {x^m}\\]<br>则有<br>\\[\\Delta f(x) = {(x + 1)^m} - {x^m}\\]<br>似乎并不能和导数形式统一起来，用起来也不方便，那么我们定义一个新的函数，叫做<strong>下降阶乘幂</strong>：<br>\\[f(x) = {x^{\\underline{m}}} = x(x - 1) \\ldots (x - m + 1)\\]<br>同理还可以定义<strong>上升阶乘幂</strong>。<br>这个函数有一个很好的性质，那就是<br>\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\]<br>令<br>\\[g(x) = \\Delta f(x)\\]<br>那么和积分类似，有<br>\\[\\sum\\nolimits_a^b {g(x)\\delta x}  = f(b) - f(a)\\]<br>所以<br>\\[\\sum\\limits_{0 \\le k &lt; n} { {k^{\\underline{m}}}}  = \\left. {\\frac{ { {k^{ {\\underline{m + 1}}}}}}{ {m + 1}}} \\right|_0^n = \\frac{ { {n^{ {\\underline{m + 1}}}}}}{ {m + 1}}\\]</p>\n<p>因为有<br>\\[{k^2} = {k^{\\underline{2}}} + {k^{\\underline{1}}}\\]<br>所以<br>\\[\\sum\\limits_{0 \\le k &lt; n} { {k^2}}  = \\frac{ { {n^{\\underline{3}}}}}{3} + \\frac{ { {n^{\\underline{2}}}}}{2} = \\frac{ {n(n - 1)(2n - 1)}}{6}\\]<br>同样可以得到<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>下降阶乘幂还有很多好用的性质，下节课继续。</p>\n<h1 id=\"方法7\"><a href=\"#方法7\" class=\"headerlink\" title=\"方法7\"></a>方法7</h1><hr>\n<p><strong>生成函数。</strong><br>以后章节会讲。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=4875084&auto=1&height=66\"></iframe></div>\n\n<p>今天继续讲求和的方法。<br>针对以下求和式，我们用8种方法来求解：<br>\\[{S_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}} \\]<br>大家应该都已经背上了它的答案：<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<h1 id=\"方法0\"><a href=\"#方法0\" class=\"headerlink\" title=\"方法0\"></a>方法0</h1><hr>\n<p><strong>查表。</strong><br>这就不用说了，很多文献都有现成的解，拿来直接用就行了。<br>再给大家推荐一个整数序列查询网站OEIS：<a href=\"http://oeis.org/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<h1 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h1><hr>\n<p><strong>猜答案，然后用数学归纳法证明。</strong><br>这个也不多说了，前提是你得猜得出来，这题的公式还是很难猜的。</p>\n<h1 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h1><hr>\n<p><strong>扰动法。</strong><br>令<br>\\[T = \\sum\\limits_{0 \\le k \\le n} { {k^3}} \\]<br>所以<br>\\[\\begin{array}{l}T + {(n + 1)^3}\\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { {k^3}} \\\\ = \\sum\\limits_{1 \\le k \\le n + 1} { { {(k - 1)}^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {(3{k^2} - 3k + 1)} \\\\ = \\sum\\limits_{0 \\le k \\le n} { {k^3}}  + \\sum\\limits_{1 \\le k \\le n + 1} {[3{ {(k - 1)}^2} + 3k - 2]} \\\\ = T + 3{S_n} + \\frac{ {3(n + 2)(n + 1)}}{2} - 2(n + 1)\\end{array}\\]<br>解出<br>\\[3{S_n} = {(n + 1)^3} - \\frac{ {3(n + 2)(n + 1)}}{2} + 2(n + 1) = n(n + \\frac{1}{2})(n + 1)\\]<br>最终得到<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>可以看出，我们本来是要对$k^2$求和的，但是只要对$k^3$用扰动法求和即可，因为求和过程中$k^3$项会被抵消掉。</p>\n<h1 id=\"方法3\"><a href=\"#方法3\" class=\"headerlink\" title=\"方法3\"></a>方法3</h1><hr>\n<p><strong>成套方法。</strong><br>定义如下递归式：<br>\\[\\begin{array}{l}{R_0} = \\alpha \\\\{R_n} = {R_{n - 1}} + \\beta  + \\gamma n + \\delta {n^2}\\end{array}\\]<br>由<a href=\"http://godweiyang.com/2018/03/05/concrete-math-2/\">第2课</a>可知，设解的形式为：<br>\\[{R_n} = A(n)\\alpha  + B(n)\\beta  + C(n)\\gamma  + D(n)\\delta \\]<br>分别令${R_n} = 1,n,{n^2}$可以解出<br>\\[A(n) = 1,B(n) = n,C(n) = \\frac{ {n(n + 1)}}{2}\\]<br>再另${R_n} = {n^3}$，可以得到<br>\\[3D(n) = {n^3} + 3C(n) - B(n) = n(n + \\frac{1}{2})(n + 1)\\]<br>即<br>\\[D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>这时如果令<br>\\[\\alpha  = \\beta  = \\gamma  = 0,\\delta  = 1\\]<br>那么<br>\\[{R_n} = \\sum\\limits_{0 \\le k \\le n} { {k^2}}  = D(n) = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<h1 id=\"方法4\"><a href=\"#方法4\" class=\"headerlink\" title=\"方法4\"></a>方法4</h1><hr>\n<p><strong>积分法</strong><br>求和式可以近似成积分\\[\\int_0^n { {x^2}dx}  = {n^3}/3\\]<br>但是还少算了一部分误差，设为$E_n$，则有<br>\\[{E_n} = {S_n} - \\frac{1}{3}{n^3} = {S_{n - 1}} + {n^2} - \\frac{1}{3}{n^3} = {E_{n - 1}} + n - \\frac{1}{3}\\]<br>解得<br>\\[{E_n} = \\frac{ {3{n^2} + n}}{6}\\]<br>所以<br>\\[{S_n} = {E_n} + \\frac{1}{3}{n^3} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>其实这种方法就是把最高次直接给算出来了，低次项可以直接求和的。</p>\n<h1 id=\"方法5\"><a href=\"#方法5\" class=\"headerlink\" title=\"方法5\"></a>方法5</h1><hr>\n<p><strong>扩展成二重指标求和</strong><br>\\[\\begin{array}{l}{S_n} = \\sum\\limits_{1 \\le k \\le n} { {k^2}}  = \\sum\\limits_{1 \\le j \\le k \\le n} { {k^2}} \\\\ = \\sum\\limits_{1 \\le j \\le n} {\\sum\\limits_{j \\le k \\le n} k } \\\\ = \\sum\\limits_{1 \\le j \\le n} {(\\frac{ {j + n}}{2})(n - j + 1)} \\\\ = \\frac{1}{2}\\sum\\limits_{1 \\le j \\le n} {(n(n + 1) + j - {j^2})} \\\\ = \\frac{1}{2}{n^2}(n + 1) + \\frac{1}{4}n(n + 1) - \\frac{1}{2}{S_n}\\\\ = \\frac{1}{2}n(n + \\frac{1}{2})(n + 1) - \\frac{1}{2}{S_n}\\end{array}\\]<br>所以<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<h1 id=\"方法6\"><a href=\"#方法6\" class=\"headerlink\" title=\"方法6\"></a>方法6</h1><hr>\n<p><strong>用有限微分求和</strong><br>微分的形式大家都知道，如下：<br>\\[\\Delta f(x) = f(x + 1) - f(x)\\]<br>那如果我们定义<br>\\[f(x) = {x^m}\\]<br>则有<br>\\[\\Delta f(x) = {(x + 1)^m} - {x^m}\\]<br>似乎并不能和导数形式统一起来，用起来也不方便，那么我们定义一个新的函数，叫做<strong>下降阶乘幂</strong>：<br>\\[f(x) = {x^{\\underline{m}}} = x(x - 1) \\ldots (x - m + 1)\\]<br>同理还可以定义<strong>上升阶乘幂</strong>。<br>这个函数有一个很好的性质，那就是<br>\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\]<br>令<br>\\[g(x) = \\Delta f(x)\\]<br>那么和积分类似，有<br>\\[\\sum\\nolimits_a^b {g(x)\\delta x}  = f(b) - f(a)\\]<br>所以<br>\\[\\sum\\limits_{0 \\le k &lt; n} { {k^{\\underline{m}}}}  = \\left. {\\frac{ { {k^{ {\\underline{m + 1}}}}}}{ {m + 1}}} \\right|_0^n = \\frac{ { {n^{ {\\underline{m + 1}}}}}}{ {m + 1}}\\]</p>\n<p>因为有<br>\\[{k^2} = {k^{\\underline{2}}} + {k^{\\underline{1}}}\\]<br>所以<br>\\[\\sum\\limits_{0 \\le k &lt; n} { {k^2}}  = \\frac{ { {n^{\\underline{3}}}}}{3} + \\frac{ { {n^{\\underline{2}}}}}{2} = \\frac{ {n(n - 1)(2n - 1)}}{6}\\]<br>同样可以得到<br>\\[{S_n} = \\frac{ {n(n + 1)(2n + 1)}}{6}\\]</p>\n<p>下降阶乘幂还有很多好用的性质，下节课继续。</p>\n<h1 id=\"方法7\"><a href=\"#方法7\" class=\"headerlink\" title=\"方法7\"></a>方法7</h1><hr>\n<p><strong>生成函数。</strong><br>以后章节会讲。</p>\n"},{"title":"具体数学-第6课（下降阶乘幂）","date":"2018-04-02T03:35:17.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28680028&auto=1&height=66\"></iframe></div>\n\n上节课讲到下降阶乘幂和差分运算，这节课继续讲它和差分的各种性质。\n\n# 性质1\n---\n首先在后面章节会证明，${(x + y)^{\\underline{m}}}$的二项展开形式和普通的${(x + y)^m}$是一样的，这里提一下，暂时用不到。\n\n# 性质2\n---\n接下来给出下降阶乘幂为负数的定义：\n\\\\[{x^{ \\underline{- m}}} = \\frac{1}{ {(x + 1)(x + 2) \\ldots (x + m)}}\\\\]\n\n# 性质3\n---\n和普通幂${x^{m + n}} = {x^m}{x^n}$不同，下降阶乘幂有如下性质：\n\\\\[{x^{\\underline{m + n}}} = {x^{\\underline{m}}}{(x - m)^{\\underline{n}}}\\\\]\n\n# 性质4\n---\n上一节课说到，定义下降阶乘幂的好处就是为了求差分方便，下降阶乘幂的差分为：\n\\\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\\\]\n反之，类比不定积分，它的不定和为：\n\\\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b\\\\]\n\n但是这里$m \\ne  - 1$，那要是$m =  - 1$怎么办呢？\n直接运用差分定义可以求出\n\\\\[\\begin{array}{l}{x^{ \\underline{- 1}}} = \\frac{1}{ {x + 1}} = \\Delta f(x) = f(x + 1) - f(x)\\\\ \\Rightarrow f(x) = {H_x}\\end{array}\\\\]\n\n所以\n\\\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left\\{ {\\begin{array}{*{20}{c}}{\\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b,m \\ne  - 1}\\\\{\\left. { {H_x}} \\right|_a^b,m =  - 1}\\end{array}} \\right.\\\\]\n\n\n# 性质5\n---\n在微积分里面，$e^x$的导数是它自身。那么什么函数的差分是自身呢？\n通过定义可以很容易算出来：\n\\\\[\\begin{array}{l}f(x + 1) - f(x) = f(x)\\\\ \\Rightarrow f(x + 1) = 2f(x)\\\\ \\Rightarrow f(x) = {2^x}\\end{array}\\\\]\n\n进一步推广可以得到：\n\\\\[\\Delta ({c^x}) = {c^{x + 1}} - {c^x} = (c - 1){c^x}\\\\]\n所以得到如下一种新的等比数列计算方式：\n\\\\[\\sum\\limits_{a \\le k < b} { {c^k}}  = \\sum\\nolimits_a^b { {c^x}\\delta x}  = \\left. {\\frac{ { {c^x}}}{ {c - 1}}} \\right|_a^b = \\frac{ { {c^b} - {c^a}}}{ {c - 1}}\\\\]\n\n# 性质6\n---\n结合律和分配律在差分运算里也适用。\n\\\\[\\begin{array}{l}\\Delta (cf) = c\\Delta (f)\\\\\\Delta (f + g) = \\Delta (f) + \\Delta (g)\\end{array}\\\\]\n\n# 性质7\n---\n类似分部积分，这里也可以分部来求差分。\n\\\\[\\begin{array}{l}\\Delta (u(x)v(x)) = u(x + 1)v(x + 1) - u(x)v(x)\\\\ = u(x + 1)v(x + 1) - u(x)v(x + 1) + u(x)v(x + 1) - u(x)v(x)\\\\ = [u(x + 1) - u(x)]v(x + 1) + u(x)[v(x + 1) - v(x)]\\\\ = u(x)\\Delta (v(x)) + v(x + 1)\\Delta (u(x))\\end{array}\\\\]\n这里给出一个新的记号叫做移位运算：\n\\\\[Ef(x) = f(x + 1)\\\\]\n所以就得到了差分的分部运算法则：\n\\\\[\\Delta (uv) = u\\Delta (v) + Ev\\Delta (u)\\\\]\n对两边求和，又可以得到不定求和的分部运算法则：\n\\\\[\\sum {u\\Delta (v)}  = uv - \\sum {Ev\\Delta (u)} \\\\]\n\n这个分部法则非常有用，下面举两个例子来说明一下怎么用。\n\n## 例1\n一道老题，计算：\n\\\\[\\sum\\limits_{k = 0}^n {k{2^k}} \\\\]\n首先计算\n\\\\[\\sum {x{2^x}\\delta x} \\\\]\n在这里可以令\n\\\\[u = x,v = {2^x}\\\\]\n所以\n\\\\[\\sum {x{2^x}\\delta x}  = x{2^x} - \\sum { {2^{x + 1}}\\delta x}  = x{2^x} - {2^{x + 1}} + C\\\\]\n那么求和式就可以转化为不定求和来算了：\n\\\\[\\begin{array}{l}\\sum\\limits_{k = 0}^n {k{2^k}}  = \\sum\\nolimits_0^{n + 1} {x{2^x}\\delta x} \\\\ = \\left. {x{2^x} - {2^{x + 1}}} \\right|_0^{n + 1}\\\\ = (n - 1){2^{n + 1}} + 2\\end{array}\\\\]\n\n## 例2\n计算\n\\\\[\\sum\\limits_{0 \\le k < n} {k{H_k}} \\\\]\n首先计算\n\\\\[\\sum {x{H_x}\\delta x} \\\\]\n这里注意要令\n\\\\[u = {H_x},\\Delta v = x\\\\]\n不能倒过来哦，因为$H_x$的不定和很难求出来的。所以\n\\\\[\\begin{array}{l}\\sum {x{H_x}\\delta x}  = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\sum {\\frac{ { { {(x + 1)}^{\\underline{2}}}}}{2}} {x^{ \\underline{- 1}}}\\delta x\\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{1}{2}\\sum { {x^{\\underline{1}}}\\delta x} \\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{ { {x^{\\underline{2}}}}}{4} + C\\end{array}\\\\]\n\n所以\n\\\\[\\sum\\limits_{0 \\le k < n} {k{H_k}}  = \\sum\\nolimits_0^n {x{H_x}\\delta x}  = \\frac{ { {n^{\\underline{2}}}}}{2}({H_n} - \\frac{1}{2})\\\\]\n\n# 无限求和\n---\n回顾一下以前我们是怎么计算下面求和式的。\n\\\\[S = {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots \\\\]\n首先两边同时乘2，得到：\n\\\\[2S = 2 + {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots  = 2 + S\\\\]\n解出\n\\\\[S = 2\\\\]\n\n那么可不可以用同样的方法计算下面式子呢？\n\\\\[T = 1 + 2 + 4 + 8 +  \\cdots \\\\]\n两边同时乘2，得到：\n\\\\[2T = 2 + 4 + 8 +  \\cdots  = T - 1\\\\]\n解出\n\\\\[T = -1\\\\]\n显然不可能，因为这里的$T$是发散的，所以不能这么求。那么如何用一般的方法来求解呢？\n\n首先我们只考虑正数求和，求解$\\sum\\limits_{k \\in K} { {a_k}} $，其中$K$是一个无限集合。\n那么，如果存在$A$，使得对任意$F \\subset K$，都有\n\\\\[\\sum\\limits_{k \\in F} { {a_k}}  \\le A\\\\]\n那么我们说这个最小的$A$就是$\\sum\\limits_{k \\in K} { {a_k}} $的结果。\n如果不存在这么一个$A$，那么这个求和式就是发散的，即结果为正无穷。\n\n一般使用中，对于$K = N$，我们可以令$F = \\{ 0,1,2, \\ldots ,n\\} $\n所以\n\\\\[\\sum\\limits_{k \\ge 0} { {a_k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {a_k}} \\\\]\n\n举两个例子，比如\n\\\\[\\sum\\limits_{k \\ge 0} { {x^k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}} = \\left\\{ {\\begin{array}{*{20}{c}}{\\frac{1}{ {1 - x}},0 \\le x < 1}\\\\{\\infty ,x \\ge 1}\\end{array}} \\right.\\\\]\n再如：\n\\\\[\\sum\\limits_{k \\ge 0} {\\frac{1}{ {(k + 1)(k + 2)}}}  = \\sum\\limits_{k \\ge 0} { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\left. {\\frac{ { {k^{ \\underline{- 1}}}}}{ { - 1}}} \\right|_0^{n + 1} = 1\\\\]\n\n剩下的问题就是如何求有正有负的和式？\n\n可以考虑的方案就是用不同的配对，将正负组合在一起，从而相消求和。\n\n但是不同的组合方式会得到不同的答案。就比如：\n\\\\[\\sum\\limits_{k \\ge 0} { { {( - 1)}^k}}  = 1 - 1 + 1 - 1 +  \\cdots \\\\]\n有两种组合方式：\n\\\\[(1 - 1) + (1 - 1) +  \\cdots  = 0\\\\]\n和\n\\\\[1 - (1 - 1) - (1 - 1) -  \\cdots  = 1\\\\]\n得到了两种不同的结果。\n\n事实上，我们可以将正数和负数分开求和，因为正数求和我们已经解决了，所以我们定义：\n\\\\[x = {x^ + } - {x^ - }\\\\]\n其中\n\\\\[{x^ + } = x \\cdot [x > 0],{x^ - } =  - x \\cdot [x < 0]\\\\]\n\n所以求和式可以分成两部分分别求和：\n\\\\[\\sum\\limits_{k \\in K} { {a_k}}  = \\sum\\limits_{k \\in K} { {a_k}^ + }  - \\sum\\limits_{k \\in K} { {a_k}^ - } \\\\]\n\n最后推广到二重求和：\n\\\\[\\sum\\limits_{j \\in J,k \\in {K_j}} { {a_{j,k}}}  = \\sum\\limits_{j \\in J} {\\sum\\limits_{k \\in {K_j}} { {a_{j,k}}} }  = \\sum\\limits_{j \\in J} { {A_j}}  = A\\\\]\n\n这里也没啥好细说的，就先了解了解吧。","source":"_posts/concrete-math-6.md","raw":"---\ntitle: 具体数学-第6课（下降阶乘幂）\ndate: 2018-04-02 11:35:17\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28680028&auto=1&height=66\"></iframe></div>\n\n上节课讲到下降阶乘幂和差分运算，这节课继续讲它和差分的各种性质。\n\n# 性质1\n---\n首先在后面章节会证明，${(x + y)^{\\underline{m}}}$的二项展开形式和普通的${(x + y)^m}$是一样的，这里提一下，暂时用不到。\n\n# 性质2\n---\n接下来给出下降阶乘幂为负数的定义：\n\\\\[{x^{ \\underline{- m}}} = \\frac{1}{ {(x + 1)(x + 2) \\ldots (x + m)}}\\\\]\n\n# 性质3\n---\n和普通幂${x^{m + n}} = {x^m}{x^n}$不同，下降阶乘幂有如下性质：\n\\\\[{x^{\\underline{m + n}}} = {x^{\\underline{m}}}{(x - m)^{\\underline{n}}}\\\\]\n\n# 性质4\n---\n上一节课说到，定义下降阶乘幂的好处就是为了求差分方便，下降阶乘幂的差分为：\n\\\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\\\]\n反之，类比不定积分，它的不定和为：\n\\\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b\\\\]\n\n但是这里$m \\ne  - 1$，那要是$m =  - 1$怎么办呢？\n直接运用差分定义可以求出\n\\\\[\\begin{array}{l}{x^{ \\underline{- 1}}} = \\frac{1}{ {x + 1}} = \\Delta f(x) = f(x + 1) - f(x)\\\\ \\Rightarrow f(x) = {H_x}\\end{array}\\\\]\n\n所以\n\\\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left\\{ {\\begin{array}{*{20}{c}}{\\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b,m \\ne  - 1}\\\\{\\left. { {H_x}} \\right|_a^b,m =  - 1}\\end{array}} \\right.\\\\]\n\n\n# 性质5\n---\n在微积分里面，$e^x$的导数是它自身。那么什么函数的差分是自身呢？\n通过定义可以很容易算出来：\n\\\\[\\begin{array}{l}f(x + 1) - f(x) = f(x)\\\\ \\Rightarrow f(x + 1) = 2f(x)\\\\ \\Rightarrow f(x) = {2^x}\\end{array}\\\\]\n\n进一步推广可以得到：\n\\\\[\\Delta ({c^x}) = {c^{x + 1}} - {c^x} = (c - 1){c^x}\\\\]\n所以得到如下一种新的等比数列计算方式：\n\\\\[\\sum\\limits_{a \\le k < b} { {c^k}}  = \\sum\\nolimits_a^b { {c^x}\\delta x}  = \\left. {\\frac{ { {c^x}}}{ {c - 1}}} \\right|_a^b = \\frac{ { {c^b} - {c^a}}}{ {c - 1}}\\\\]\n\n# 性质6\n---\n结合律和分配律在差分运算里也适用。\n\\\\[\\begin{array}{l}\\Delta (cf) = c\\Delta (f)\\\\\\Delta (f + g) = \\Delta (f) + \\Delta (g)\\end{array}\\\\]\n\n# 性质7\n---\n类似分部积分，这里也可以分部来求差分。\n\\\\[\\begin{array}{l}\\Delta (u(x)v(x)) = u(x + 1)v(x + 1) - u(x)v(x)\\\\ = u(x + 1)v(x + 1) - u(x)v(x + 1) + u(x)v(x + 1) - u(x)v(x)\\\\ = [u(x + 1) - u(x)]v(x + 1) + u(x)[v(x + 1) - v(x)]\\\\ = u(x)\\Delta (v(x)) + v(x + 1)\\Delta (u(x))\\end{array}\\\\]\n这里给出一个新的记号叫做移位运算：\n\\\\[Ef(x) = f(x + 1)\\\\]\n所以就得到了差分的分部运算法则：\n\\\\[\\Delta (uv) = u\\Delta (v) + Ev\\Delta (u)\\\\]\n对两边求和，又可以得到不定求和的分部运算法则：\n\\\\[\\sum {u\\Delta (v)}  = uv - \\sum {Ev\\Delta (u)} \\\\]\n\n这个分部法则非常有用，下面举两个例子来说明一下怎么用。\n\n## 例1\n一道老题，计算：\n\\\\[\\sum\\limits_{k = 0}^n {k{2^k}} \\\\]\n首先计算\n\\\\[\\sum {x{2^x}\\delta x} \\\\]\n在这里可以令\n\\\\[u = x,v = {2^x}\\\\]\n所以\n\\\\[\\sum {x{2^x}\\delta x}  = x{2^x} - \\sum { {2^{x + 1}}\\delta x}  = x{2^x} - {2^{x + 1}} + C\\\\]\n那么求和式就可以转化为不定求和来算了：\n\\\\[\\begin{array}{l}\\sum\\limits_{k = 0}^n {k{2^k}}  = \\sum\\nolimits_0^{n + 1} {x{2^x}\\delta x} \\\\ = \\left. {x{2^x} - {2^{x + 1}}} \\right|_0^{n + 1}\\\\ = (n - 1){2^{n + 1}} + 2\\end{array}\\\\]\n\n## 例2\n计算\n\\\\[\\sum\\limits_{0 \\le k < n} {k{H_k}} \\\\]\n首先计算\n\\\\[\\sum {x{H_x}\\delta x} \\\\]\n这里注意要令\n\\\\[u = {H_x},\\Delta v = x\\\\]\n不能倒过来哦，因为$H_x$的不定和很难求出来的。所以\n\\\\[\\begin{array}{l}\\sum {x{H_x}\\delta x}  = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\sum {\\frac{ { { {(x + 1)}^{\\underline{2}}}}}{2}} {x^{ \\underline{- 1}}}\\delta x\\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{1}{2}\\sum { {x^{\\underline{1}}}\\delta x} \\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{ { {x^{\\underline{2}}}}}{4} + C\\end{array}\\\\]\n\n所以\n\\\\[\\sum\\limits_{0 \\le k < n} {k{H_k}}  = \\sum\\nolimits_0^n {x{H_x}\\delta x}  = \\frac{ { {n^{\\underline{2}}}}}{2}({H_n} - \\frac{1}{2})\\\\]\n\n# 无限求和\n---\n回顾一下以前我们是怎么计算下面求和式的。\n\\\\[S = {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots \\\\]\n首先两边同时乘2，得到：\n\\\\[2S = 2 + {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots  = 2 + S\\\\]\n解出\n\\\\[S = 2\\\\]\n\n那么可不可以用同样的方法计算下面式子呢？\n\\\\[T = 1 + 2 + 4 + 8 +  \\cdots \\\\]\n两边同时乘2，得到：\n\\\\[2T = 2 + 4 + 8 +  \\cdots  = T - 1\\\\]\n解出\n\\\\[T = -1\\\\]\n显然不可能，因为这里的$T$是发散的，所以不能这么求。那么如何用一般的方法来求解呢？\n\n首先我们只考虑正数求和，求解$\\sum\\limits_{k \\in K} { {a_k}} $，其中$K$是一个无限集合。\n那么，如果存在$A$，使得对任意$F \\subset K$，都有\n\\\\[\\sum\\limits_{k \\in F} { {a_k}}  \\le A\\\\]\n那么我们说这个最小的$A$就是$\\sum\\limits_{k \\in K} { {a_k}} $的结果。\n如果不存在这么一个$A$，那么这个求和式就是发散的，即结果为正无穷。\n\n一般使用中，对于$K = N$，我们可以令$F = \\{ 0,1,2, \\ldots ,n\\} $\n所以\n\\\\[\\sum\\limits_{k \\ge 0} { {a_k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {a_k}} \\\\]\n\n举两个例子，比如\n\\\\[\\sum\\limits_{k \\ge 0} { {x^k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}} = \\left\\{ {\\begin{array}{*{20}{c}}{\\frac{1}{ {1 - x}},0 \\le x < 1}\\\\{\\infty ,x \\ge 1}\\end{array}} \\right.\\\\]\n再如：\n\\\\[\\sum\\limits_{k \\ge 0} {\\frac{1}{ {(k + 1)(k + 2)}}}  = \\sum\\limits_{k \\ge 0} { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\left. {\\frac{ { {k^{ \\underline{- 1}}}}}{ { - 1}}} \\right|_0^{n + 1} = 1\\\\]\n\n剩下的问题就是如何求有正有负的和式？\n\n可以考虑的方案就是用不同的配对，将正负组合在一起，从而相消求和。\n\n但是不同的组合方式会得到不同的答案。就比如：\n\\\\[\\sum\\limits_{k \\ge 0} { { {( - 1)}^k}}  = 1 - 1 + 1 - 1 +  \\cdots \\\\]\n有两种组合方式：\n\\\\[(1 - 1) + (1 - 1) +  \\cdots  = 0\\\\]\n和\n\\\\[1 - (1 - 1) - (1 - 1) -  \\cdots  = 1\\\\]\n得到了两种不同的结果。\n\n事实上，我们可以将正数和负数分开求和，因为正数求和我们已经解决了，所以我们定义：\n\\\\[x = {x^ + } - {x^ - }\\\\]\n其中\n\\\\[{x^ + } = x \\cdot [x > 0],{x^ - } =  - x \\cdot [x < 0]\\\\]\n\n所以求和式可以分成两部分分别求和：\n\\\\[\\sum\\limits_{k \\in K} { {a_k}}  = \\sum\\limits_{k \\in K} { {a_k}^ + }  - \\sum\\limits_{k \\in K} { {a_k}^ - } \\\\]\n\n最后推广到二重求和：\n\\\\[\\sum\\limits_{j \\in J,k \\in {K_j}} { {a_{j,k}}}  = \\sum\\limits_{j \\in J} {\\sum\\limits_{k \\in {K_j}} { {a_{j,k}}} }  = \\sum\\limits_{j \\in J} { {A_j}}  = A\\\\]\n\n这里也没啥好细说的，就先了解了解吧。","slug":"concrete-math-6","published":1,"updated":"2019-07-20T04:06:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982fo006w7swesd1dqlp6","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28680028&auto=1&height=66\"></iframe></div>\n\n<p>上节课讲到下降阶乘幂和差分运算，这节课继续讲它和差分的各种性质。</p>\n<h1 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h1><hr>\n<p>首先在后面章节会证明，${(x + y)^{\\underline{m}}}$的二项展开形式和普通的${(x + y)^m}$是一样的，这里提一下，暂时用不到。</p>\n<h1 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h1><hr>\n<p>接下来给出下降阶乘幂为负数的定义：<br>\\[{x^{ \\underline{- m}}} = \\frac{1}{ {(x + 1)(x + 2) \\ldots (x + m)}}\\]</p>\n<h1 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h1><hr>\n<p>和普通幂${x^{m + n}} = {x^m}{x^n}$不同，下降阶乘幂有如下性质：<br>\\[{x^{\\underline{m + n}}} = {x^{\\underline{m}}}{(x - m)^{\\underline{n}}}\\]</p>\n<h1 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h1><hr>\n<p>上一节课说到，定义下降阶乘幂的好处就是为了求差分方便，下降阶乘幂的差分为：<br>\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\]<br>反之，类比不定积分，它的不定和为：<br>\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b\\]</p>\n<p>但是这里$m \\ne  - 1$，那要是$m =  - 1$怎么办呢？<br>直接运用差分定义可以求出<br>\\[\\begin{array}{l}{x^{ \\underline{- 1}}} = \\frac{1}{ {x + 1}} = \\Delta f(x) = f(x + 1) - f(x)\\\\ \\Rightarrow f(x) = {H_x}\\end{array}\\]</p>\n<p>所以<br>\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left\\{ {\\begin{array}{*{20}{c}}{\\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b,m \\ne  - 1}\\\\{\\left. { {H_x}} \\right|_a^b,m =  - 1}\\end{array}} \\right.\\]</p>\n<h1 id=\"性质5\"><a href=\"#性质5\" class=\"headerlink\" title=\"性质5\"></a>性质5</h1><hr>\n<p>在微积分里面，$e^x$的导数是它自身。那么什么函数的差分是自身呢？<br>通过定义可以很容易算出来：<br>\\[\\begin{array}{l}f(x + 1) - f(x) = f(x)\\\\ \\Rightarrow f(x + 1) = 2f(x)\\\\ \\Rightarrow f(x) = {2^x}\\end{array}\\]</p>\n<p>进一步推广可以得到：<br>\\[\\Delta ({c^x}) = {c^{x + 1}} - {c^x} = (c - 1){c^x}\\]<br>所以得到如下一种新的等比数列计算方式：<br>\\[\\sum\\limits_{a \\le k &lt; b} { {c^k}}  = \\sum\\nolimits_a^b { {c^x}\\delta x}  = \\left. {\\frac{ { {c^x}}}{ {c - 1}}} \\right|_a^b = \\frac{ { {c^b} - {c^a}}}{ {c - 1}}\\]</p>\n<h1 id=\"性质6\"><a href=\"#性质6\" class=\"headerlink\" title=\"性质6\"></a>性质6</h1><hr>\n<p>结合律和分配律在差分运算里也适用。<br>\\[\\begin{array}{l}\\Delta (cf) = c\\Delta (f)\\\\\\Delta (f + g) = \\Delta (f) + \\Delta (g)\\end{array}\\]</p>\n<h1 id=\"性质7\"><a href=\"#性质7\" class=\"headerlink\" title=\"性质7\"></a>性质7</h1><hr>\n<p>类似分部积分，这里也可以分部来求差分。<br>\\[\\begin{array}{l}\\Delta (u(x)v(x)) = u(x + 1)v(x + 1) - u(x)v(x)\\\\ = u(x + 1)v(x + 1) - u(x)v(x + 1) + u(x)v(x + 1) - u(x)v(x)\\\\ = [u(x + 1) - u(x)]v(x + 1) + u(x)[v(x + 1) - v(x)]\\\\ = u(x)\\Delta (v(x)) + v(x + 1)\\Delta (u(x))\\end{array}\\]<br>这里给出一个新的记号叫做移位运算：<br>\\[Ef(x) = f(x + 1)\\]<br>所以就得到了差分的分部运算法则：<br>\\[\\Delta (uv) = u\\Delta (v) + Ev\\Delta (u)\\]<br>对两边求和，又可以得到不定求和的分部运算法则：<br>\\[\\sum {u\\Delta (v)}  = uv - \\sum {Ev\\Delta (u)} \\]</p>\n<p>这个分部法则非常有用，下面举两个例子来说明一下怎么用。</p>\n<h2 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h2><p>一道老题，计算：<br>\\[\\sum\\limits_{k = 0}^n {k{2^k}} \\]<br>首先计算<br>\\[\\sum {x{2^x}\\delta x} \\]<br>在这里可以令<br>\\[u = x,v = {2^x}\\]<br>所以<br>\\[\\sum {x{2^x}\\delta x}  = x{2^x} - \\sum { {2^{x + 1}}\\delta x}  = x{2^x} - {2^{x + 1}} + C\\]<br>那么求和式就可以转化为不定求和来算了：<br>\\[\\begin{array}{l}\\sum\\limits_{k = 0}^n {k{2^k}}  = \\sum\\nolimits_0^{n + 1} {x{2^x}\\delta x} \\\\ = \\left. {x{2^x} - {2^{x + 1}}} \\right|_0^{n + 1}\\\\ = (n - 1){2^{n + 1}} + 2\\end{array}\\]</p>\n<h2 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h2><p>计算<br>\\[\\sum\\limits_{0 \\le k &lt; n} {k{H_k}} \\]<br>首先计算<br>\\[\\sum {x{H_x}\\delta x} \\]<br>这里注意要令<br>\\[u = {H_x},\\Delta v = x\\]<br>不能倒过来哦，因为$H_x$的不定和很难求出来的。所以<br>\\[\\begin{array}{l}\\sum {x{H_x}\\delta x}  = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\sum {\\frac{ { { {(x + 1)}^{\\underline{2}}}}}{2}} {x^{ \\underline{- 1}}}\\delta x\\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{1}{2}\\sum { {x^{\\underline{1}}}\\delta x} \\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{ { {x^{\\underline{2}}}}}{4} + C\\end{array}\\]</p>\n<p>所以<br>\\[\\sum\\limits_{0 \\le k &lt; n} {k{H_k}}  = \\sum\\nolimits_0^n {x{H_x}\\delta x}  = \\frac{ { {n^{\\underline{2}}}}}{2}({H_n} - \\frac{1}{2})\\]</p>\n<h1 id=\"无限求和\"><a href=\"#无限求和\" class=\"headerlink\" title=\"无限求和\"></a>无限求和</h1><hr>\n<p>回顾一下以前我们是怎么计算下面求和式的。<br>\\[S = {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots \\]<br>首先两边同时乘2，得到：<br>\\[2S = 2 + {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots  = 2 + S\\]<br>解出<br>\\[S = 2\\]</p>\n<p>那么可不可以用同样的方法计算下面式子呢？<br>\\[T = 1 + 2 + 4 + 8 +  \\cdots \\]<br>两边同时乘2，得到：<br>\\[2T = 2 + 4 + 8 +  \\cdots  = T - 1\\]<br>解出<br>\\[T = -1\\]<br>显然不可能，因为这里的$T$是发散的，所以不能这么求。那么如何用一般的方法来求解呢？</p>\n<p>首先我们只考虑正数求和，求解$\\sum\\limits_{k \\in K} { {a_k}} $，其中$K$是一个无限集合。<br>那么，如果存在$A$，使得对任意$F \\subset K$，都有<br>\\[\\sum\\limits_{k \\in F} { {a_k}}  \\le A\\]<br>那么我们说这个最小的$A$就是$\\sum\\limits_{k \\in K} { {a_k}} $的结果。<br>如果不存在这么一个$A$，那么这个求和式就是发散的，即结果为正无穷。</p>\n<p>一般使用中，对于$K = N$，我们可以令$F = \\{ 0,1,2, \\ldots ,n\\} $<br>所以<br>\\[\\sum\\limits_{k \\ge 0} { {a_k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {a_k}} \\]</p>\n<p>举两个例子，比如<br>\\[\\sum\\limits_{k \\ge 0} { {x^k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}} = \\left\\{ {\\begin{array}{*{20}{c}}{\\frac{1}{ {1 - x}},0 \\le x &lt; 1}\\\\{\\infty ,x \\ge 1}\\end{array}} \\right.\\]<br>再如：<br>\\[\\sum\\limits_{k \\ge 0} {\\frac{1}{ {(k + 1)(k + 2)}}}  = \\sum\\limits_{k \\ge 0} { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\left. {\\frac{ { {k^{ \\underline{- 1}}}}}{ { - 1}}} \\right|_0^{n + 1} = 1\\]</p>\n<p>剩下的问题就是如何求有正有负的和式？</p>\n<p>可以考虑的方案就是用不同的配对，将正负组合在一起，从而相消求和。</p>\n<p>但是不同的组合方式会得到不同的答案。就比如：<br>\\[\\sum\\limits_{k \\ge 0} { { {( - 1)}^k}}  = 1 - 1 + 1 - 1 +  \\cdots \\]<br>有两种组合方式：<br>\\[(1 - 1) + (1 - 1) +  \\cdots  = 0\\]<br>和<br>\\[1 - (1 - 1) - (1 - 1) -  \\cdots  = 1\\]<br>得到了两种不同的结果。</p>\n<p>事实上，我们可以将正数和负数分开求和，因为正数求和我们已经解决了，所以我们定义：<br>\\[x = {x^ + } - {x^ - }\\]<br>其中<br>\\[{x^ + } = x \\cdot [x &gt; 0],{x^ - } =  - x \\cdot [x &lt; 0]\\]</p>\n<p>所以求和式可以分成两部分分别求和：<br>\\[\\sum\\limits_{k \\in K} { {a_k}}  = \\sum\\limits_{k \\in K} { {a_k}^ + }  - \\sum\\limits_{k \\in K} { {a_k}^ - } \\]</p>\n<p>最后推广到二重求和：<br>\\[\\sum\\limits_{j \\in J,k \\in {K_j}} { {a_{j,k}}}  = \\sum\\limits_{j \\in J} {\\sum\\limits_{k \\in {K_j}} { {a_{j,k}}} }  = \\sum\\limits_{j \\in J} { {A_j}}  = A\\]</p>\n<p>这里也没啥好细说的，就先了解了解吧。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28680028&auto=1&height=66\"></iframe></div>\n\n<p>上节课讲到下降阶乘幂和差分运算，这节课继续讲它和差分的各种性质。</p>\n<h1 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h1><hr>\n<p>首先在后面章节会证明，${(x + y)^{\\underline{m}}}$的二项展开形式和普通的${(x + y)^m}$是一样的，这里提一下，暂时用不到。</p>\n<h1 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h1><hr>\n<p>接下来给出下降阶乘幂为负数的定义：<br>\\[{x^{ \\underline{- m}}} = \\frac{1}{ {(x + 1)(x + 2) \\ldots (x + m)}}\\]</p>\n<h1 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h1><hr>\n<p>和普通幂${x^{m + n}} = {x^m}{x^n}$不同，下降阶乘幂有如下性质：<br>\\[{x^{\\underline{m + n}}} = {x^{\\underline{m}}}{(x - m)^{\\underline{n}}}\\]</p>\n<h1 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h1><hr>\n<p>上一节课说到，定义下降阶乘幂的好处就是为了求差分方便，下降阶乘幂的差分为：<br>\\[\\Delta ({x^{\\underline{m}}}) = m{x^{\\underline{ {m - 1}}}}\\]<br>反之，类比不定积分，它的不定和为：<br>\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b\\]</p>\n<p>但是这里$m \\ne  - 1$，那要是$m =  - 1$怎么办呢？<br>直接运用差分定义可以求出<br>\\[\\begin{array}{l}{x^{ \\underline{- 1}}} = \\frac{1}{ {x + 1}} = \\Delta f(x) = f(x + 1) - f(x)\\\\ \\Rightarrow f(x) = {H_x}\\end{array}\\]</p>\n<p>所以<br>\\[\\sum\\nolimits_a^b { {x^{\\underline{m}}}\\delta x}  = \\left\\{ {\\begin{array}{*{20}{c}}{\\left. {\\frac{ { {x^{\\underline{m + 1}}}}}{ {m + 1}}} \\right|_a^b,m \\ne  - 1}\\\\{\\left. { {H_x}} \\right|_a^b,m =  - 1}\\end{array}} \\right.\\]</p>\n<h1 id=\"性质5\"><a href=\"#性质5\" class=\"headerlink\" title=\"性质5\"></a>性质5</h1><hr>\n<p>在微积分里面，$e^x$的导数是它自身。那么什么函数的差分是自身呢？<br>通过定义可以很容易算出来：<br>\\[\\begin{array}{l}f(x + 1) - f(x) = f(x)\\\\ \\Rightarrow f(x + 1) = 2f(x)\\\\ \\Rightarrow f(x) = {2^x}\\end{array}\\]</p>\n<p>进一步推广可以得到：<br>\\[\\Delta ({c^x}) = {c^{x + 1}} - {c^x} = (c - 1){c^x}\\]<br>所以得到如下一种新的等比数列计算方式：<br>\\[\\sum\\limits_{a \\le k &lt; b} { {c^k}}  = \\sum\\nolimits_a^b { {c^x}\\delta x}  = \\left. {\\frac{ { {c^x}}}{ {c - 1}}} \\right|_a^b = \\frac{ { {c^b} - {c^a}}}{ {c - 1}}\\]</p>\n<h1 id=\"性质6\"><a href=\"#性质6\" class=\"headerlink\" title=\"性质6\"></a>性质6</h1><hr>\n<p>结合律和分配律在差分运算里也适用。<br>\\[\\begin{array}{l}\\Delta (cf) = c\\Delta (f)\\\\\\Delta (f + g) = \\Delta (f) + \\Delta (g)\\end{array}\\]</p>\n<h1 id=\"性质7\"><a href=\"#性质7\" class=\"headerlink\" title=\"性质7\"></a>性质7</h1><hr>\n<p>类似分部积分，这里也可以分部来求差分。<br>\\[\\begin{array}{l}\\Delta (u(x)v(x)) = u(x + 1)v(x + 1) - u(x)v(x)\\\\ = u(x + 1)v(x + 1) - u(x)v(x + 1) + u(x)v(x + 1) - u(x)v(x)\\\\ = [u(x + 1) - u(x)]v(x + 1) + u(x)[v(x + 1) - v(x)]\\\\ = u(x)\\Delta (v(x)) + v(x + 1)\\Delta (u(x))\\end{array}\\]<br>这里给出一个新的记号叫做移位运算：<br>\\[Ef(x) = f(x + 1)\\]<br>所以就得到了差分的分部运算法则：<br>\\[\\Delta (uv) = u\\Delta (v) + Ev\\Delta (u)\\]<br>对两边求和，又可以得到不定求和的分部运算法则：<br>\\[\\sum {u\\Delta (v)}  = uv - \\sum {Ev\\Delta (u)} \\]</p>\n<p>这个分部法则非常有用，下面举两个例子来说明一下怎么用。</p>\n<h2 id=\"例1\"><a href=\"#例1\" class=\"headerlink\" title=\"例1\"></a>例1</h2><p>一道老题，计算：<br>\\[\\sum\\limits_{k = 0}^n {k{2^k}} \\]<br>首先计算<br>\\[\\sum {x{2^x}\\delta x} \\]<br>在这里可以令<br>\\[u = x,v = {2^x}\\]<br>所以<br>\\[\\sum {x{2^x}\\delta x}  = x{2^x} - \\sum { {2^{x + 1}}\\delta x}  = x{2^x} - {2^{x + 1}} + C\\]<br>那么求和式就可以转化为不定求和来算了：<br>\\[\\begin{array}{l}\\sum\\limits_{k = 0}^n {k{2^k}}  = \\sum\\nolimits_0^{n + 1} {x{2^x}\\delta x} \\\\ = \\left. {x{2^x} - {2^{x + 1}}} \\right|_0^{n + 1}\\\\ = (n - 1){2^{n + 1}} + 2\\end{array}\\]</p>\n<h2 id=\"例2\"><a href=\"#例2\" class=\"headerlink\" title=\"例2\"></a>例2</h2><p>计算<br>\\[\\sum\\limits_{0 \\le k &lt; n} {k{H_k}} \\]<br>首先计算<br>\\[\\sum {x{H_x}\\delta x} \\]<br>这里注意要令<br>\\[u = {H_x},\\Delta v = x\\]<br>不能倒过来哦，因为$H_x$的不定和很难求出来的。所以<br>\\[\\begin{array}{l}\\sum {x{H_x}\\delta x}  = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\sum {\\frac{ { { {(x + 1)}^{\\underline{2}}}}}{2}} {x^{ \\underline{- 1}}}\\delta x\\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{1}{2}\\sum { {x^{\\underline{1}}}\\delta x} \\\\ = \\frac{ { {x^{\\underline{2}}}}}{2}{H_x} - \\frac{ { {x^{\\underline{2}}}}}{4} + C\\end{array}\\]</p>\n<p>所以<br>\\[\\sum\\limits_{0 \\le k &lt; n} {k{H_k}}  = \\sum\\nolimits_0^n {x{H_x}\\delta x}  = \\frac{ { {n^{\\underline{2}}}}}{2}({H_n} - \\frac{1}{2})\\]</p>\n<h1 id=\"无限求和\"><a href=\"#无限求和\" class=\"headerlink\" title=\"无限求和\"></a>无限求和</h1><hr>\n<p>回顾一下以前我们是怎么计算下面求和式的。<br>\\[S = {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots \\]<br>首先两边同时乘2，得到：<br>\\[2S = 2 + {\\rm{1}} + \\frac{1}{2} + \\frac{1}{4} +  \\cdots  = 2 + S\\]<br>解出<br>\\[S = 2\\]</p>\n<p>那么可不可以用同样的方法计算下面式子呢？<br>\\[T = 1 + 2 + 4 + 8 +  \\cdots \\]<br>两边同时乘2，得到：<br>\\[2T = 2 + 4 + 8 +  \\cdots  = T - 1\\]<br>解出<br>\\[T = -1\\]<br>显然不可能，因为这里的$T$是发散的，所以不能这么求。那么如何用一般的方法来求解呢？</p>\n<p>首先我们只考虑正数求和，求解$\\sum\\limits_{k \\in K} { {a_k}} $，其中$K$是一个无限集合。<br>那么，如果存在$A$，使得对任意$F \\subset K$，都有<br>\\[\\sum\\limits_{k \\in F} { {a_k}}  \\le A\\]<br>那么我们说这个最小的$A$就是$\\sum\\limits_{k \\in K} { {a_k}} $的结果。<br>如果不存在这么一个$A$，那么这个求和式就是发散的，即结果为正无穷。</p>\n<p>一般使用中，对于$K = N$，我们可以令$F = \\{ 0,1,2, \\ldots ,n\\} $<br>所以<br>\\[\\sum\\limits_{k \\ge 0} { {a_k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {a_k}} \\]</p>\n<p>举两个例子，比如<br>\\[\\sum\\limits_{k \\ge 0} { {x^k}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{ {1 - {x^{n + 1}}}}{ {1 - x}} = \\left\\{ {\\begin{array}{*{20}{c}}{\\frac{1}{ {1 - x}},0 \\le x &lt; 1}\\\\{\\infty ,x \\ge 1}\\end{array}} \\right.\\]<br>再如：<br>\\[\\sum\\limits_{k \\ge 0} {\\frac{1}{ {(k + 1)(k + 2)}}}  = \\sum\\limits_{k \\ge 0} { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\sum\\limits_{k = 0}^n { {k^{ \\underline{- 2}}}}  = \\mathop {\\lim }\\limits_{n \\to \\infty } \\left. {\\frac{ { {k^{ \\underline{- 1}}}}}{ { - 1}}} \\right|_0^{n + 1} = 1\\]</p>\n<p>剩下的问题就是如何求有正有负的和式？</p>\n<p>可以考虑的方案就是用不同的配对，将正负组合在一起，从而相消求和。</p>\n<p>但是不同的组合方式会得到不同的答案。就比如：<br>\\[\\sum\\limits_{k \\ge 0} { { {( - 1)}^k}}  = 1 - 1 + 1 - 1 +  \\cdots \\]<br>有两种组合方式：<br>\\[(1 - 1) + (1 - 1) +  \\cdots  = 0\\]<br>和<br>\\[1 - (1 - 1) - (1 - 1) -  \\cdots  = 1\\]<br>得到了两种不同的结果。</p>\n<p>事实上，我们可以将正数和负数分开求和，因为正数求和我们已经解决了，所以我们定义：<br>\\[x = {x^ + } - {x^ - }\\]<br>其中<br>\\[{x^ + } = x \\cdot [x &gt; 0],{x^ - } =  - x \\cdot [x &lt; 0]\\]</p>\n<p>所以求和式可以分成两部分分别求和：<br>\\[\\sum\\limits_{k \\in K} { {a_k}}  = \\sum\\limits_{k \\in K} { {a_k}^ + }  - \\sum\\limits_{k \\in K} { {a_k}^ - } \\]</p>\n<p>最后推广到二重求和：<br>\\[\\sum\\limits_{j \\in J,k \\in {K_j}} { {a_{j,k}}}  = \\sum\\limits_{j \\in J} {\\sum\\limits_{k \\in {K_j}} { {a_{j,k}}} }  = \\sum\\limits_{j \\in J} { {A_j}}  = A\\]</p>\n<p>这里也没啥好细说的，就先了解了解吧。</p>\n"},{"title":"具体数学-第7课（取整基础）","date":"2018-04-09T03:34:19.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=509728841&auto=1&height=66\"></iframe></div>\n\n首先声明一下，最近这段时间忙毕设，没时间更新博客了，大家见谅。\n\n今天这节课开始讲解取整相关知识，主要是数论相关的了。\n\n# 符号定义\n---\n向下取整函数$\\left\\lfloor x \\right\\rfloor $定义为小于等于$x$的最大整数。\n向上取整函数$\\left\\lceil x \\right\\rceil $定义为大于等于$x$的最小整数。\n$\\{ x\\} $定义为实数$x$的小数部分，即\n\\\\[\\{ x\\}  = x - \\left\\lfloor x \\right\\rfloor \\\\]\n\n# 性质\n---\n## 性质1\n\\\\[\\left\\lceil x \\right\\rceil  - \\left\\lfloor x \\right\\rfloor  = [x \\in \\mathbb{Z}]\\\\]\n\n## 性质2\n取整函数范围：\n\\\\[x - 1 < \\left\\lfloor x \\right\\rfloor  \\le x \\le \\left\\lceil x \\right\\rceil  < x + 1\\\\]\n\n## 性质3\n负数的取整：\n\\\\[\\begin{array}{l}\\left\\lfloor { - x} \\right\\rfloor  =  - \\left\\lceil x \\right\\rceil \\\\\\left\\lceil { - x} \\right\\rceil  =  - \\left\\lfloor x \\right\\rfloor \\end{array}\\\\]\n\n## 性质4\n取整函数中的整数可以提取出来：\n\\\\[\\left\\lfloor {x + n} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + n\\\\]\n\n# 应用\n---\n## 应用1\n证明：\n\\\\[\\left\\lfloor {\\sqrt {\\left\\lfloor x \\right\\rfloor } } \\right\\rfloor  = \\left\\lfloor {\\sqrt x } \\right\\rfloor \\\\]\n\n更一般的，我们还可以证明，对于任意连续、递增的函数$f(x)$，如果它满足\n\\\\[f(x) \\in \\mathbb{Z} \\Rightarrow x \\in \\mathbb{Z}\\\\]\n那么有\n\\\\[\\begin{array}{l}\\left\\lfloor {f(x)} \\right\\rfloor  = \\left\\lfloor {f(\\left\\lfloor x \\right\\rfloor )} \\right\\rfloor \\\\\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\end{array}\\\\]\n\n我们证明第2个式子，第1个同理可证。\n\n如果$x = \\left\\lceil x \\right\\rceil $，显然成立。\n\n否则$x < \\left\\lceil x \\right\\rceil $，因为$f(x)$递增，所以有\n\\\\[f(x) < f(\\left\\lceil x \\right\\rceil )\\\\]\n两边同时取整，有\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n要证左右两边相等，那么只要证\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n不成立即可。假设上式成立，那么由中间值定理，一定存在$x \\le y < \\left\\lceil x \\right\\rceil $，使得\n\\\\[f(y) = \\left\\lceil {f(x)} \\right\\rceil \\\\]\n**敲黑板！！**这里是怎么来的呢？\n由下图可以看出，当下面式子成立时，满足中间值定理\n\\\\[f(x) < \\left\\lceil {f(x)} \\right\\rceil  < f(\\left\\lceil x \\right\\rceil )\\\\]\n但是在这里，我们假设是\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n那么由$\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil $能否推出$\\left\\lceil {f(x)} \\right\\rceil  < f(\\left\\lceil x \\right\\rceil )$呢？当然是可以的。\n\\\\[\\begin{array}{l}\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\ \\Rightarrow \\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil  - 1 < f(\\left\\lceil x \\right\\rceil )\\end{array}\\\\]\n![](1.jpg)\n所以\n\\\\[f(y) \\in \\mathbb{Z} \\Rightarrow y \\in \\mathbb{Z}\\\\]\n又因为$x \\le y < \\left\\lceil x \\right\\rceil $，所以不存在整数$y$，矛盾！\n\n所以证得\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n\n另一个特殊的例子是\n\\\\[\\left\\lfloor {\\frac{ {x + m}}{n}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {\\left\\lfloor x \\right\\rfloor  + m}}{n}} \\right\\rfloor \\\\]\n其中$m$和$n$都是整数，并且$n$是正整数。\n\n## 应用2\n接着介绍区间相关的性质。\n\n求1到1000中使得下列式子成立的$n$一共有多少个？\n\\\\[\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n\\\\]\n求解方法如下：\n\\\\[\\begin{array}{l}W{\\rm{ = }}\\sum\\limits_{1 \\le n \\le 1000} {\\left[ {\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n} \\right]} \\\\ = \\sum\\limits_{k,n} {\\left[ {k = \\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor } \\right]\\left[ {k|n} \\right]\\left[ {1 \\le n \\le 1000} \\right]} \\\\ = \\sum\\limits_{k,m,n} {\\left[ { {k^3} \\le n < { {(k + 1)}^3}} \\right]\\left[ {n = km} \\right]} \\left[ {1 \\le n \\le 1000} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ { {k^3} \\le km < { {(k + 1)}^3}} \\right]} \\left[ {1 \\le k < 10} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ {m \\in [{k^2},{ {(k + 1)}^3}/k)} \\right]} \\left[ {1 \\le k < 10} \\right]\\\\ = 1 + \\sum\\limits_{1 \\le k < 10} {(\\left\\lceil { {k^2} + 3k + 3 + 1/k} \\right\\rceil  - \\left\\lceil { {k^2}} \\right\\rceil )} \\\\ = 1 + \\sum\\limits_{1 \\le k < 10} {(3k + 4)} \\\\ = 172\\end{array}\\\\]\n\n继续推广，求1到$N$中使得上面式子成立的$n$有多少个？\n令\n\\\\[K = \\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor \\\\]\n也就是小于等于$\\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor $的最大整数。\n所以\n\\\\[\\begin{array}{l}W = \\sum\\limits_{1 \\le k < K} {(3k + 4)}  + \\sum\\limits_m {\\left[ { {K^3} \\le Km \\le N} \\right]} \\\\ = \\left\\lfloor {N/K} \\right\\rfloor  + \\frac{1}{2}{K^2} + \\frac{5}{2}K - 3\\end{array}\\\\]\n渐进地等于\n\\\\[W = \\frac{3}{2}{N^{2/3}} + O({N^{1/3}})\\\\]\n\n## 应用3\n定义一个实数的谱为：\n\\\\[Spec(\\alpha ) = \\{ \\left\\lfloor \\alpha  \\right\\rfloor ,\\left\\lfloor {2\\alpha } \\right\\rfloor ,\\left\\lfloor {3\\alpha } \\right\\rfloor , \\ldots \\} \\\\]\n\n很容易证明如果两个实数$\\alpha  \\ne \\beta $，那么\n\\\\[Spec(\\alpha ) \\ne Spec(\\beta )\\\\]\n\n假设$\\alpha  < \\beta $，那么令\n\\\\[m(\\beta  - \\alpha ) \\ge 1\\\\]\n所以\n$m\\beta  \\ge m\\alpha  + 1 \\Rightarrow \\left\\lfloor {m\\beta } \\right\\rfloor  > \\left\\lfloor {m\\alpha } \\right\\rfloor $\n所以集合$Spec(\\beta )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数小于$m$。而集合$Spec(\\alpha )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数大于等于$m$。所以两个集合不相等。\n\n谱有很多奇妙的性质，例如下面两个谱：\n\\\\[\\begin{array}{l}Spec(\\sqrt 2 ) = \\{ \\left\\lfloor {\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {3\\sqrt 2 } \\right\\rfloor , \\ldots \\} \\\\Spec(2{\\rm{ + }}\\sqrt 2 ) = \\{ \\left\\lfloor {2{\\rm{ + }}\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor ,\\left\\lfloor {3(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor , \\ldots \\} \\end{array}\\\\]\n可以发现，这两个谱正好划分了正整数集。\n证明方法也很简单，只要证明对任意正整数$n$，两个集合中小于$n$的元素个数之和为$n$，过程如下：\n\\\\[\\begin{array}{l}\\left\\lfloor {k\\sqrt 2 } \\right\\rfloor  \\le n\\\\ \\Rightarrow k\\sqrt 2  < n + 1\\\\ \\Rightarrow k < \\frac{ {n + 1}}{ {\\sqrt 2 }}\\end{array}\\\\]\n所以第一个集合中小于$n$的元素个数为\n\\\\[\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor \\\\]\n同理第二个集合中小于$n$的元素个数为\n\\\\[\\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\\\]\n所以总个数为\n\\\\[\\begin{array}{l}\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\\\ = \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {2 - \\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor { - \\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  - 1\\\\ = n\\end{array}\\\\]\n得证。","source":"_posts/concrete-math-7.md","raw":"---\ntitle: 具体数学-第7课（取整基础）\ndate: 2018-04-09 11:34:19\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=509728841&auto=1&height=66\"></iframe></div>\n\n首先声明一下，最近这段时间忙毕设，没时间更新博客了，大家见谅。\n\n今天这节课开始讲解取整相关知识，主要是数论相关的了。\n\n# 符号定义\n---\n向下取整函数$\\left\\lfloor x \\right\\rfloor $定义为小于等于$x$的最大整数。\n向上取整函数$\\left\\lceil x \\right\\rceil $定义为大于等于$x$的最小整数。\n$\\{ x\\} $定义为实数$x$的小数部分，即\n\\\\[\\{ x\\}  = x - \\left\\lfloor x \\right\\rfloor \\\\]\n\n# 性质\n---\n## 性质1\n\\\\[\\left\\lceil x \\right\\rceil  - \\left\\lfloor x \\right\\rfloor  = [x \\in \\mathbb{Z}]\\\\]\n\n## 性质2\n取整函数范围：\n\\\\[x - 1 < \\left\\lfloor x \\right\\rfloor  \\le x \\le \\left\\lceil x \\right\\rceil  < x + 1\\\\]\n\n## 性质3\n负数的取整：\n\\\\[\\begin{array}{l}\\left\\lfloor { - x} \\right\\rfloor  =  - \\left\\lceil x \\right\\rceil \\\\\\left\\lceil { - x} \\right\\rceil  =  - \\left\\lfloor x \\right\\rfloor \\end{array}\\\\]\n\n## 性质4\n取整函数中的整数可以提取出来：\n\\\\[\\left\\lfloor {x + n} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + n\\\\]\n\n# 应用\n---\n## 应用1\n证明：\n\\\\[\\left\\lfloor {\\sqrt {\\left\\lfloor x \\right\\rfloor } } \\right\\rfloor  = \\left\\lfloor {\\sqrt x } \\right\\rfloor \\\\]\n\n更一般的，我们还可以证明，对于任意连续、递增的函数$f(x)$，如果它满足\n\\\\[f(x) \\in \\mathbb{Z} \\Rightarrow x \\in \\mathbb{Z}\\\\]\n那么有\n\\\\[\\begin{array}{l}\\left\\lfloor {f(x)} \\right\\rfloor  = \\left\\lfloor {f(\\left\\lfloor x \\right\\rfloor )} \\right\\rfloor \\\\\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\end{array}\\\\]\n\n我们证明第2个式子，第1个同理可证。\n\n如果$x = \\left\\lceil x \\right\\rceil $，显然成立。\n\n否则$x < \\left\\lceil x \\right\\rceil $，因为$f(x)$递增，所以有\n\\\\[f(x) < f(\\left\\lceil x \\right\\rceil )\\\\]\n两边同时取整，有\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n要证左右两边相等，那么只要证\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n不成立即可。假设上式成立，那么由中间值定理，一定存在$x \\le y < \\left\\lceil x \\right\\rceil $，使得\n\\\\[f(y) = \\left\\lceil {f(x)} \\right\\rceil \\\\]\n**敲黑板！！**这里是怎么来的呢？\n由下图可以看出，当下面式子成立时，满足中间值定理\n\\\\[f(x) < \\left\\lceil {f(x)} \\right\\rceil  < f(\\left\\lceil x \\right\\rceil )\\\\]\n但是在这里，我们假设是\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n那么由$\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil $能否推出$\\left\\lceil {f(x)} \\right\\rceil  < f(\\left\\lceil x \\right\\rceil )$呢？当然是可以的。\n\\\\[\\begin{array}{l}\\left\\lceil {f(x)} \\right\\rceil  < \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\ \\Rightarrow \\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil  - 1 < f(\\left\\lceil x \\right\\rceil )\\end{array}\\\\]\n![](1.jpg)\n所以\n\\\\[f(y) \\in \\mathbb{Z} \\Rightarrow y \\in \\mathbb{Z}\\\\]\n又因为$x \\le y < \\left\\lceil x \\right\\rceil $，所以不存在整数$y$，矛盾！\n\n所以证得\n\\\\[\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\]\n\n另一个特殊的例子是\n\\\\[\\left\\lfloor {\\frac{ {x + m}}{n}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {\\left\\lfloor x \\right\\rfloor  + m}}{n}} \\right\\rfloor \\\\]\n其中$m$和$n$都是整数，并且$n$是正整数。\n\n## 应用2\n接着介绍区间相关的性质。\n\n求1到1000中使得下列式子成立的$n$一共有多少个？\n\\\\[\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n\\\\]\n求解方法如下：\n\\\\[\\begin{array}{l}W{\\rm{ = }}\\sum\\limits_{1 \\le n \\le 1000} {\\left[ {\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n} \\right]} \\\\ = \\sum\\limits_{k,n} {\\left[ {k = \\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor } \\right]\\left[ {k|n} \\right]\\left[ {1 \\le n \\le 1000} \\right]} \\\\ = \\sum\\limits_{k,m,n} {\\left[ { {k^3} \\le n < { {(k + 1)}^3}} \\right]\\left[ {n = km} \\right]} \\left[ {1 \\le n \\le 1000} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ { {k^3} \\le km < { {(k + 1)}^3}} \\right]} \\left[ {1 \\le k < 10} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ {m \\in [{k^2},{ {(k + 1)}^3}/k)} \\right]} \\left[ {1 \\le k < 10} \\right]\\\\ = 1 + \\sum\\limits_{1 \\le k < 10} {(\\left\\lceil { {k^2} + 3k + 3 + 1/k} \\right\\rceil  - \\left\\lceil { {k^2}} \\right\\rceil )} \\\\ = 1 + \\sum\\limits_{1 \\le k < 10} {(3k + 4)} \\\\ = 172\\end{array}\\\\]\n\n继续推广，求1到$N$中使得上面式子成立的$n$有多少个？\n令\n\\\\[K = \\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor \\\\]\n也就是小于等于$\\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor $的最大整数。\n所以\n\\\\[\\begin{array}{l}W = \\sum\\limits_{1 \\le k < K} {(3k + 4)}  + \\sum\\limits_m {\\left[ { {K^3} \\le Km \\le N} \\right]} \\\\ = \\left\\lfloor {N/K} \\right\\rfloor  + \\frac{1}{2}{K^2} + \\frac{5}{2}K - 3\\end{array}\\\\]\n渐进地等于\n\\\\[W = \\frac{3}{2}{N^{2/3}} + O({N^{1/3}})\\\\]\n\n## 应用3\n定义一个实数的谱为：\n\\\\[Spec(\\alpha ) = \\{ \\left\\lfloor \\alpha  \\right\\rfloor ,\\left\\lfloor {2\\alpha } \\right\\rfloor ,\\left\\lfloor {3\\alpha } \\right\\rfloor , \\ldots \\} \\\\]\n\n很容易证明如果两个实数$\\alpha  \\ne \\beta $，那么\n\\\\[Spec(\\alpha ) \\ne Spec(\\beta )\\\\]\n\n假设$\\alpha  < \\beta $，那么令\n\\\\[m(\\beta  - \\alpha ) \\ge 1\\\\]\n所以\n$m\\beta  \\ge m\\alpha  + 1 \\Rightarrow \\left\\lfloor {m\\beta } \\right\\rfloor  > \\left\\lfloor {m\\alpha } \\right\\rfloor $\n所以集合$Spec(\\beta )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数小于$m$。而集合$Spec(\\alpha )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数大于等于$m$。所以两个集合不相等。\n\n谱有很多奇妙的性质，例如下面两个谱：\n\\\\[\\begin{array}{l}Spec(\\sqrt 2 ) = \\{ \\left\\lfloor {\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {3\\sqrt 2 } \\right\\rfloor , \\ldots \\} \\\\Spec(2{\\rm{ + }}\\sqrt 2 ) = \\{ \\left\\lfloor {2{\\rm{ + }}\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor ,\\left\\lfloor {3(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor , \\ldots \\} \\end{array}\\\\]\n可以发现，这两个谱正好划分了正整数集。\n证明方法也很简单，只要证明对任意正整数$n$，两个集合中小于$n$的元素个数之和为$n$，过程如下：\n\\\\[\\begin{array}{l}\\left\\lfloor {k\\sqrt 2 } \\right\\rfloor  \\le n\\\\ \\Rightarrow k\\sqrt 2  < n + 1\\\\ \\Rightarrow k < \\frac{ {n + 1}}{ {\\sqrt 2 }}\\end{array}\\\\]\n所以第一个集合中小于$n$的元素个数为\n\\\\[\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor \\\\]\n同理第二个集合中小于$n$的元素个数为\n\\\\[\\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\\\]\n所以总个数为\n\\\\[\\begin{array}{l}\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\\\ = \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {2 - \\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor { - \\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  - 1\\\\ = n\\end{array}\\\\]\n得证。","slug":"concrete-math-7","published":1,"updated":"2019-07-20T04:06:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982fs006z7sweetb2anzx","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=509728841&auto=1&height=66\"></iframe></div>\n\n<p>首先声明一下，最近这段时间忙毕设，没时间更新博客了，大家见谅。</p>\n<p>今天这节课开始讲解取整相关知识，主要是数论相关的了。</p>\n<h1 id=\"符号定义\"><a href=\"#符号定义\" class=\"headerlink\" title=\"符号定义\"></a>符号定义</h1><hr>\n<p>向下取整函数$\\left\\lfloor x \\right\\rfloor $定义为小于等于$x$的最大整数。<br>向上取整函数$\\left\\lceil x \\right\\rceil $定义为大于等于$x$的最小整数。<br>$\\{ x\\} $定义为实数$x$的小数部分，即<br>\\[\\{ x\\}  = x - \\left\\lfloor x \\right\\rfloor \\]</p>\n<h1 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h1><hr>\n<h2 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h2><p>\\[\\left\\lceil x \\right\\rceil  - \\left\\lfloor x \\right\\rfloor  = [x \\in \\mathbb{Z}]\\]</p>\n<h2 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h2><p>取整函数范围：<br>\\[x - 1 &lt; \\left\\lfloor x \\right\\rfloor  \\le x \\le \\left\\lceil x \\right\\rceil  &lt; x + 1\\]</p>\n<h2 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h2><p>负数的取整：<br>\\[\\begin{array}{l}\\left\\lfloor { - x} \\right\\rfloor  =  - \\left\\lceil x \\right\\rceil \\\\\\left\\lceil { - x} \\right\\rceil  =  - \\left\\lfloor x \\right\\rfloor \\end{array}\\]</p>\n<h2 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h2><p>取整函数中的整数可以提取出来：<br>\\[\\left\\lfloor {x + n} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + n\\]</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><hr>\n<h2 id=\"应用1\"><a href=\"#应用1\" class=\"headerlink\" title=\"应用1\"></a>应用1</h2><p>证明：<br>\\[\\left\\lfloor {\\sqrt {\\left\\lfloor x \\right\\rfloor } } \\right\\rfloor  = \\left\\lfloor {\\sqrt x } \\right\\rfloor \\]</p>\n<p>更一般的，我们还可以证明，对于任意连续、递增的函数$f(x)$，如果它满足<br>\\[f(x) \\in \\mathbb{Z} \\Rightarrow x \\in \\mathbb{Z}\\]<br>那么有<br>\\[\\begin{array}{l}\\left\\lfloor {f(x)} \\right\\rfloor  = \\left\\lfloor {f(\\left\\lfloor x \\right\\rfloor )} \\right\\rfloor \\\\\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\end{array}\\]</p>\n<p>我们证明第2个式子，第1个同理可证。</p>\n<p>如果$x = \\left\\lceil x \\right\\rceil $，显然成立。</p>\n<p>否则$x &lt; \\left\\lceil x \\right\\rceil $，因为$f(x)$递增，所以有<br>\\[f(x) &lt; f(\\left\\lceil x \\right\\rceil )\\]<br>两边同时取整，有<br>\\[\\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]<br>要证左右两边相等，那么只要证<br>\\[\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]<br>不成立即可。假设上式成立，那么由中间值定理，一定存在$x \\le y &lt; \\left\\lceil x \\right\\rceil $，使得<br>\\[f(y) = \\left\\lceil {f(x)} \\right\\rceil \\]<br><strong>敲黑板！！</strong>这里是怎么来的呢？<br>由下图可以看出，当下面式子成立时，满足中间值定理<br>\\[f(x) &lt; \\left\\lceil {f(x)} \\right\\rceil  &lt; f(\\left\\lceil x \\right\\rceil )\\]<br>但是在这里，我们假设是<br>\\[\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]<br>那么由$\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil $能否推出$\\left\\lceil {f(x)} \\right\\rceil  &lt; f(\\left\\lceil x \\right\\rceil )$呢？当然是可以的。<br>\\[\\begin{array}{l}\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\ \\Rightarrow \\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil  - 1 &lt; f(\\left\\lceil x \\right\\rceil )\\end{array}\\]<br><img src=\"1.jpg\" alt><br>所以<br>\\[f(y) \\in \\mathbb{Z} \\Rightarrow y \\in \\mathbb{Z}\\]<br>又因为$x \\le y &lt; \\left\\lceil x \\right\\rceil $，所以不存在整数$y$，矛盾！</p>\n<p>所以证得<br>\\[\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]</p>\n<p>另一个特殊的例子是<br>\\[\\left\\lfloor {\\frac{ {x + m}}{n}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {\\left\\lfloor x \\right\\rfloor  + m}}{n}} \\right\\rfloor \\]<br>其中$m$和$n$都是整数，并且$n$是正整数。</p>\n<h2 id=\"应用2\"><a href=\"#应用2\" class=\"headerlink\" title=\"应用2\"></a>应用2</h2><p>接着介绍区间相关的性质。</p>\n<p>求1到1000中使得下列式子成立的$n$一共有多少个？<br>\\[\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n\\]<br>求解方法如下：<br>\\[\\begin{array}{l}W{\\rm{ = }}\\sum\\limits_{1 \\le n \\le 1000} {\\left[ {\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n} \\right]} \\\\ = \\sum\\limits_{k,n} {\\left[ {k = \\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor } \\right]\\left[ {k|n} \\right]\\left[ {1 \\le n \\le 1000} \\right]} \\\\ = \\sum\\limits_{k,m,n} {\\left[ { {k^3} \\le n &lt; { {(k + 1)}^3}} \\right]\\left[ {n = km} \\right]} \\left[ {1 \\le n \\le 1000} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ { {k^3} \\le km &lt; { {(k + 1)}^3}} \\right]} \\left[ {1 \\le k &lt; 10} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ {m \\in [{k^2},{ {(k + 1)}^3}/k)} \\right]} \\left[ {1 \\le k &lt; 10} \\right]\\\\ = 1 + \\sum\\limits_{1 \\le k &lt; 10} {(\\left\\lceil { {k^2} + 3k + 3 + 1/k} \\right\\rceil  - \\left\\lceil { {k^2}} \\right\\rceil )} \\\\ = 1 + \\sum\\limits_{1 \\le k &lt; 10} {(3k + 4)} \\\\ = 172\\end{array}\\]</p>\n<p>继续推广，求1到$N$中使得上面式子成立的$n$有多少个？<br>令<br>\\[K = \\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor \\]<br>也就是小于等于$\\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor $的最大整数。<br>所以<br>\\[\\begin{array}{l}W = \\sum\\limits_{1 \\le k &lt; K} {(3k + 4)}  + \\sum\\limits_m {\\left[ { {K^3} \\le Km \\le N} \\right]} \\\\ = \\left\\lfloor {N/K} \\right\\rfloor  + \\frac{1}{2}{K^2} + \\frac{5}{2}K - 3\\end{array}\\]<br>渐进地等于<br>\\[W = \\frac{3}{2}{N^{2/3}} + O({N^{1/3}})\\]</p>\n<h2 id=\"应用3\"><a href=\"#应用3\" class=\"headerlink\" title=\"应用3\"></a>应用3</h2><p>定义一个实数的谱为：<br>\\[Spec(\\alpha ) = \\{ \\left\\lfloor \\alpha  \\right\\rfloor ,\\left\\lfloor {2\\alpha } \\right\\rfloor ,\\left\\lfloor {3\\alpha } \\right\\rfloor , \\ldots \\} \\]</p>\n<p>很容易证明如果两个实数$\\alpha  \\ne \\beta $，那么<br>\\[Spec(\\alpha ) \\ne Spec(\\beta )\\]</p>\n<p>假设$\\alpha  &lt; \\beta $，那么令<br>\\[m(\\beta  - \\alpha ) \\ge 1\\]<br>所以<br>$m\\beta  \\ge m\\alpha  + 1 \\Rightarrow \\left\\lfloor {m\\beta } \\right\\rfloor  &gt; \\left\\lfloor {m\\alpha } \\right\\rfloor $<br>所以集合$Spec(\\beta )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数小于$m$。而集合$Spec(\\alpha )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数大于等于$m$。所以两个集合不相等。</p>\n<p>谱有很多奇妙的性质，例如下面两个谱：<br>\\[\\begin{array}{l}Spec(\\sqrt 2 ) = \\{ \\left\\lfloor {\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {3\\sqrt 2 } \\right\\rfloor , \\ldots \\} \\\\Spec(2{\\rm{ + }}\\sqrt 2 ) = \\{ \\left\\lfloor {2{\\rm{ + }}\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor ,\\left\\lfloor {3(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor , \\ldots \\} \\end{array}\\]<br>可以发现，这两个谱正好划分了正整数集。<br>证明方法也很简单，只要证明对任意正整数$n$，两个集合中小于$n$的元素个数之和为$n$，过程如下：<br>\\[\\begin{array}{l}\\left\\lfloor {k\\sqrt 2 } \\right\\rfloor  \\le n\\\\ \\Rightarrow k\\sqrt 2  &lt; n + 1\\\\ \\Rightarrow k &lt; \\frac{ {n + 1}}{ {\\sqrt 2 }}\\end{array}\\]<br>所以第一个集合中小于$n$的元素个数为<br>\\[\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor \\]<br>同理第二个集合中小于$n$的元素个数为<br>\\[\\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\]<br>所以总个数为<br>\\[\\begin{array}{l}\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\\\ = \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {2 - \\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor { - \\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  - 1\\\\ = n\\end{array}\\]<br>得证。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=509728841&auto=1&height=66\"></iframe></div>\n\n<p>首先声明一下，最近这段时间忙毕设，没时间更新博客了，大家见谅。</p>\n<p>今天这节课开始讲解取整相关知识，主要是数论相关的了。</p>\n<h1 id=\"符号定义\"><a href=\"#符号定义\" class=\"headerlink\" title=\"符号定义\"></a>符号定义</h1><hr>\n<p>向下取整函数$\\left\\lfloor x \\right\\rfloor $定义为小于等于$x$的最大整数。<br>向上取整函数$\\left\\lceil x \\right\\rceil $定义为大于等于$x$的最小整数。<br>$\\{ x\\} $定义为实数$x$的小数部分，即<br>\\[\\{ x\\}  = x - \\left\\lfloor x \\right\\rfloor \\]</p>\n<h1 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h1><hr>\n<h2 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h2><p>\\[\\left\\lceil x \\right\\rceil  - \\left\\lfloor x \\right\\rfloor  = [x \\in \\mathbb{Z}]\\]</p>\n<h2 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h2><p>取整函数范围：<br>\\[x - 1 &lt; \\left\\lfloor x \\right\\rfloor  \\le x \\le \\left\\lceil x \\right\\rceil  &lt; x + 1\\]</p>\n<h2 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h2><p>负数的取整：<br>\\[\\begin{array}{l}\\left\\lfloor { - x} \\right\\rfloor  =  - \\left\\lceil x \\right\\rceil \\\\\\left\\lceil { - x} \\right\\rceil  =  - \\left\\lfloor x \\right\\rfloor \\end{array}\\]</p>\n<h2 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h2><p>取整函数中的整数可以提取出来：<br>\\[\\left\\lfloor {x + n} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + n\\]</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><hr>\n<h2 id=\"应用1\"><a href=\"#应用1\" class=\"headerlink\" title=\"应用1\"></a>应用1</h2><p>证明：<br>\\[\\left\\lfloor {\\sqrt {\\left\\lfloor x \\right\\rfloor } } \\right\\rfloor  = \\left\\lfloor {\\sqrt x } \\right\\rfloor \\]</p>\n<p>更一般的，我们还可以证明，对于任意连续、递增的函数$f(x)$，如果它满足<br>\\[f(x) \\in \\mathbb{Z} \\Rightarrow x \\in \\mathbb{Z}\\]<br>那么有<br>\\[\\begin{array}{l}\\left\\lfloor {f(x)} \\right\\rfloor  = \\left\\lfloor {f(\\left\\lfloor x \\right\\rfloor )} \\right\\rfloor \\\\\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\end{array}\\]</p>\n<p>我们证明第2个式子，第1个同理可证。</p>\n<p>如果$x = \\left\\lceil x \\right\\rceil $，显然成立。</p>\n<p>否则$x &lt; \\left\\lceil x \\right\\rceil $，因为$f(x)$递增，所以有<br>\\[f(x) &lt; f(\\left\\lceil x \\right\\rceil )\\]<br>两边同时取整，有<br>\\[\\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]<br>要证左右两边相等，那么只要证<br>\\[\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]<br>不成立即可。假设上式成立，那么由中间值定理，一定存在$x \\le y &lt; \\left\\lceil x \\right\\rceil $，使得<br>\\[f(y) = \\left\\lceil {f(x)} \\right\\rceil \\]<br><strong>敲黑板！！</strong>这里是怎么来的呢？<br>由下图可以看出，当下面式子成立时，满足中间值定理<br>\\[f(x) &lt; \\left\\lceil {f(x)} \\right\\rceil  &lt; f(\\left\\lceil x \\right\\rceil )\\]<br>但是在这里，我们假设是<br>\\[\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]<br>那么由$\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil $能否推出$\\left\\lceil {f(x)} \\right\\rceil  &lt; f(\\left\\lceil x \\right\\rceil )$呢？当然是可以的。<br>\\[\\begin{array}{l}\\left\\lceil {f(x)} \\right\\rceil  &lt; \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\\\ \\Rightarrow \\left\\lceil {f(x)} \\right\\rceil  \\le \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil  - 1 &lt; f(\\left\\lceil x \\right\\rceil )\\end{array}\\]<br><img src=\"1.jpg\" alt><br>所以<br>\\[f(y) \\in \\mathbb{Z} \\Rightarrow y \\in \\mathbb{Z}\\]<br>又因为$x \\le y &lt; \\left\\lceil x \\right\\rceil $，所以不存在整数$y$，矛盾！</p>\n<p>所以证得<br>\\[\\left\\lceil {f(x)} \\right\\rceil  = \\left\\lceil {f(\\left\\lceil x \\right\\rceil )} \\right\\rceil \\]</p>\n<p>另一个特殊的例子是<br>\\[\\left\\lfloor {\\frac{ {x + m}}{n}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {\\left\\lfloor x \\right\\rfloor  + m}}{n}} \\right\\rfloor \\]<br>其中$m$和$n$都是整数，并且$n$是正整数。</p>\n<h2 id=\"应用2\"><a href=\"#应用2\" class=\"headerlink\" title=\"应用2\"></a>应用2</h2><p>接着介绍区间相关的性质。</p>\n<p>求1到1000中使得下列式子成立的$n$一共有多少个？<br>\\[\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n\\]<br>求解方法如下：<br>\\[\\begin{array}{l}W{\\rm{ = }}\\sum\\limits_{1 \\le n \\le 1000} {\\left[ {\\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor |n} \\right]} \\\\ = \\sum\\limits_{k,n} {\\left[ {k = \\left\\lfloor {\\sqrt[3]{n}} \\right\\rfloor } \\right]\\left[ {k|n} \\right]\\left[ {1 \\le n \\le 1000} \\right]} \\\\ = \\sum\\limits_{k,m,n} {\\left[ { {k^3} \\le n &lt; { {(k + 1)}^3}} \\right]\\left[ {n = km} \\right]} \\left[ {1 \\le n \\le 1000} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ { {k^3} \\le km &lt; { {(k + 1)}^3}} \\right]} \\left[ {1 \\le k &lt; 10} \\right]\\\\ = 1 + \\sum\\limits_{k,m} {\\left[ {m \\in [{k^2},{ {(k + 1)}^3}/k)} \\right]} \\left[ {1 \\le k &lt; 10} \\right]\\\\ = 1 + \\sum\\limits_{1 \\le k &lt; 10} {(\\left\\lceil { {k^2} + 3k + 3 + 1/k} \\right\\rceil  - \\left\\lceil { {k^2}} \\right\\rceil )} \\\\ = 1 + \\sum\\limits_{1 \\le k &lt; 10} {(3k + 4)} \\\\ = 172\\end{array}\\]</p>\n<p>继续推广，求1到$N$中使得上面式子成立的$n$有多少个？<br>令<br>\\[K = \\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor \\]<br>也就是小于等于$\\left\\lfloor {\\sqrt[3]{N}} \\right\\rfloor $的最大整数。<br>所以<br>\\[\\begin{array}{l}W = \\sum\\limits_{1 \\le k &lt; K} {(3k + 4)}  + \\sum\\limits_m {\\left[ { {K^3} \\le Km \\le N} \\right]} \\\\ = \\left\\lfloor {N/K} \\right\\rfloor  + \\frac{1}{2}{K^2} + \\frac{5}{2}K - 3\\end{array}\\]<br>渐进地等于<br>\\[W = \\frac{3}{2}{N^{2/3}} + O({N^{1/3}})\\]</p>\n<h2 id=\"应用3\"><a href=\"#应用3\" class=\"headerlink\" title=\"应用3\"></a>应用3</h2><p>定义一个实数的谱为：<br>\\[Spec(\\alpha ) = \\{ \\left\\lfloor \\alpha  \\right\\rfloor ,\\left\\lfloor {2\\alpha } \\right\\rfloor ,\\left\\lfloor {3\\alpha } \\right\\rfloor , \\ldots \\} \\]</p>\n<p>很容易证明如果两个实数$\\alpha  \\ne \\beta $，那么<br>\\[Spec(\\alpha ) \\ne Spec(\\beta )\\]</p>\n<p>假设$\\alpha  &lt; \\beta $，那么令<br>\\[m(\\beta  - \\alpha ) \\ge 1\\]<br>所以<br>$m\\beta  \\ge m\\alpha  + 1 \\Rightarrow \\left\\lfloor {m\\beta } \\right\\rfloor  &gt; \\left\\lfloor {m\\alpha } \\right\\rfloor $<br>所以集合$Spec(\\beta )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数小于$m$。而集合$Spec(\\alpha )$中小于$\\left\\lfloor {m\\alpha } \\right\\rfloor $的元素个数大于等于$m$。所以两个集合不相等。</p>\n<p>谱有很多奇妙的性质，例如下面两个谱：<br>\\[\\begin{array}{l}Spec(\\sqrt 2 ) = \\{ \\left\\lfloor {\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {3\\sqrt 2 } \\right\\rfloor , \\ldots \\} \\\\Spec(2{\\rm{ + }}\\sqrt 2 ) = \\{ \\left\\lfloor {2{\\rm{ + }}\\sqrt 2 } \\right\\rfloor ,\\left\\lfloor {2(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor ,\\left\\lfloor {3(2{\\rm{ + }}\\sqrt 2 )} \\right\\rfloor , \\ldots \\} \\end{array}\\]<br>可以发现，这两个谱正好划分了正整数集。<br>证明方法也很简单，只要证明对任意正整数$n$，两个集合中小于$n$的元素个数之和为$n$，过程如下：<br>\\[\\begin{array}{l}\\left\\lfloor {k\\sqrt 2 } \\right\\rfloor  \\le n\\\\ \\Rightarrow k\\sqrt 2  &lt; n + 1\\\\ \\Rightarrow k &lt; \\frac{ {n + 1}}{ {\\sqrt 2 }}\\end{array}\\]<br>所以第一个集合中小于$n$的元素个数为<br>\\[\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor \\]<br>同理第二个集合中小于$n$的元素个数为<br>\\[\\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\]<br>所以总个数为<br>\\[\\begin{array}{l}\\left\\lfloor {\\frac{ {n + 1}}{ {\\sqrt 2 }}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{ {2 + \\sqrt 2 }}} \\right\\rfloor \\\\ = \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {2 - \\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor { - \\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor \\\\ = n + 1 + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  + \\left\\lfloor {\\frac{ {\\sqrt 2 }}{2}(n + 1)} \\right\\rfloor  - 1\\\\ = n\\end{array}\\]<br>得证。</p>\n"},{"title":"具体数学-第8课（取整进阶）","date":"2018-04-16T04:29:51.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=306662&auto=1&height=66\"></iframe></div>\n\n今天主要讲了取整与递归式的结合，还有取模的相关知识。\n\n# 例题1\n---\n给出下列递归式：\n\\\\[\\begin{array}{l}{K_0}{\\rm{ = }}1\\\\{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }}),n \\ge 0\\end{array}\\\\]\n现在不要求你求解，要你证明：\n\\\\[{K_n} \\ge n\\\\]\n首先想到的就是数学归纳法，假设对于任意$k \\le n$，都有${K_k} \\ge k$，那么：\n\\\\[\\begin{array}{l}{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }})\\\\ \\ge 1 + \\min (2\\left\\lfloor {\\frac{n}{2}} \\right\\rfloor ,3\\left\\lfloor {\\frac{n}{3}} \\right\\rfloor )\\end{array}\\\\]\n如果$n = 2k$，那么${K_{n + 1}} \\ge 1 + n$。\n如果$n = 2k + 1$，那么${K_{n + 1}} \\ge n$，这时不成立。\n\n所以数学归纳法无法证明，今后我们会用其他方法来证明这个式子。\n\n# 约瑟夫环新解\n---\n还记得约瑟夫环问题吗？详见[第一节课](http://godweiyang.com/2018/02/27/concrete-math-1/)。\n\n这里我们继续推广到一般情况，如果有$n$个人，每隔$q$个人踢掉一个人，最后剩下的是几号？\n\n初始编号为$1 \\ldots n$，现在考虑一种新的编号方式。\n\n第一个人不会被踢掉，编号加$1$，变成$n + 1$，然后第二个人编号变为$n + 2$，直到第$q$个人，他被踢掉了。\n\n然后第$q + 1$个人编号继续加$1$，变成了$n + q$，依次下去。\n\n考虑当前踢到的人编号为$kq$，那么此时已经踢掉了$k$个人，所以接下去的人新的编号为$n + k(q - 1) + 1 \\ldots$。\n\n所以编号为$kq+d$的人编号变成了$n + k(q - 1) + d$，其中$1 \\le d < q$。\n\n直到最后，可以发现活下来的人编号为$qn$，问题是怎么根据这个编号推出他原来的编号？\n\n以$n = 10$，$q = 3$为例，下图就是每个人新的编号：\n![](1.jpg)\n\n令\n\\\\[N = n + k(q - 1) + d\\\\]\n所以他上一次的编号是\n\\\\[kq + d = kq + N - n - k(q - 1) = k + N - n\\\\]\n因为\n\\\\[k = \\frac{ {N - n - d}}{ {q - 1}} = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor \\\\]\n所以上一次编号可以写为\n\\\\[\\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor  + N - n\\\\]\n\n因此最后存活的人编号可以用如下的算法计算：\n```\nN = qn\nwhile N > n:\n\tN = k + N - n\nans = N\n```\n其中$k = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor $\n\n如果我们用$D = qn + 1 - N$替代$N$，将会进一步简化算法：\n\\\\[\\begin{array}{l}D = qn + 1 - N\\\\ = qn + 1 - \\left( {\\left\\lfloor {\\frac{ {(qn + 1 - D) - n - 1}}{ {q - 1}}} \\right\\rfloor  + qn + 1 - D - n} \\right)\\\\ = n + D - \\left\\lfloor {\\frac{ {(q - 1)n - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D - \\left\\lfloor {\\frac{ { - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D + \\left\\lceil {\\frac{D}{ {q - 1}}} \\right\\rceil \\\\ = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil \\end{array}\\\\]\n\n算法伪代码如下：\n```\nD = 1\nwhile D <= (q-1)n:\n\tD = k\nans = qn + 1 - D\n```\n其中$k = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil $\n\n# 模的性质\n---\n## 定义与性质\n模定义如下：\n\\\\[x\\bmod y = x - y\\left\\lfloor {\\frac{x}{y}} \\right\\rfloor \\\\]\n特别的\n\\\\[x\\bmod 0 = x\\\\]\n\n与此类似，定义一个与模类似的运算：\n\\\\[x{\\rm{ mumble }}y = y\\left\\lceil {\\frac{x}{y}} \\right\\rceil  - x\\\\]\n形象理解如下图所示：\n![](2.jpg)\n圆的周长是$y$，一共走过的路长（红色+绿色部分）是$x$，所以$x\\bmod y$就是绿色部分，$x{\\rm{ mumble }}y$就是一圈长度减去绿色部分。\n\n模有一些性质：\n\\\\[c(x\\bmod y) = (cx)\\bmod (cy)\\\\]\n\n## 应用\n考虑如下问题，怎么平均分配$n$个东西给$m$个人？\n\n很容易想到，首先分给每个人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $个东西，剩下$n\\bmod m$件东西分给前$n\\bmod m$个人，一人多一件就行。\n\n概括起来就是，前$n\\bmod m$个人，每人$\\left\\lceil {\\frac{n}{m}} \\right\\rceil $件，剩下的人，每人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $件。\n\n那有没有办法统一表示呢？有的，每个人分到的件数为\n\\\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil ,1 \\le k \\le m\\\\]\n\n为什么呢？假设\n\\\\[n = qm + r,0 \\le r < m\\\\]\n那么\n\\\\[\\begin{array}{l}\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = \\left\\lceil {\\frac{ {qm + r - k + 1}}{m}} \\right\\rceil \\\\ = q + \\left\\lceil {\\frac{ {r - k + 1}}{m}} \\right\\rceil \\end{array}\\\\]\n当$1 \\le k \\le r$时，\n\\\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 1\\\\]\n当$r < k \\le m$时，\n\\\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 0\\\\]\n\n得证，因此可以得到如下等式：\n\\\\[n = \\left\\lceil {\\frac{n}{m}} \\right\\rceil  + \\left\\lceil {\\frac{ {n - 1}}{m}} \\right\\rceil  +  \\cdots  + \\left\\lceil {\\frac{ {n - m + 1}}{m}} \\right\\rceil \\\\]\n\n由$n = \\left\\lfloor {\\frac{n}{2}} \\right\\rfloor  + \\left\\lceil {\\frac{n}{2}} \\right\\rceil $\n可以进一步将其转换为下取整形式：\n\\\\[n = \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {n + m - 1}}{m}} \\right\\rfloor \\\\]\n\n令$n = \\left\\lfloor {mx} \\right\\rfloor $\n我们得到了一个令人惊奇的等式：\n\\\\[\\left\\lfloor {mx} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {x + \\frac{1}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {x + \\frac{ {m - 1}}{m}} \\right\\rfloor \\\\]\n\n# HDU3089\n---\n最后用今天介绍的约瑟夫环算法来解决一道经典的ACM题！题目链接：[杭电3089](http://acm.hdu.edu.cn/showproblem.php?pid=3089)。\n\nC++代码如下：\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL Ceil(LL x, LL y) {\n    if (x % y == 0) return x / y;\n    return x / y + 1;\n}\n\nLL J(LL n, LL q) {\n    LL D = 1, end = (q - 1) * n;\n    while (D <= end) {\n        D = Ceil(q * D, q - 1);\n    }\n    return q * n + 1 - D;\n}\n\nint main() {\n    LL n, q;\n    while (~scanf(\"%lld%lld\", &n, &q)) {\n        printf(\"%lld\\n\", J(n, q));\n    }\n    return 0;\n}\n```\n\n比网上各种快速算法还要快哦，理论时间复杂度是$\\log n$的。","source":"_posts/concrete-math-8.md","raw":"---\ntitle: 具体数学-第8课（取整进阶）\ndate: 2018-04-16 12:29:51\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=306662&auto=1&height=66\"></iframe></div>\n\n今天主要讲了取整与递归式的结合，还有取模的相关知识。\n\n# 例题1\n---\n给出下列递归式：\n\\\\[\\begin{array}{l}{K_0}{\\rm{ = }}1\\\\{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }}),n \\ge 0\\end{array}\\\\]\n现在不要求你求解，要你证明：\n\\\\[{K_n} \\ge n\\\\]\n首先想到的就是数学归纳法，假设对于任意$k \\le n$，都有${K_k} \\ge k$，那么：\n\\\\[\\begin{array}{l}{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }})\\\\ \\ge 1 + \\min (2\\left\\lfloor {\\frac{n}{2}} \\right\\rfloor ,3\\left\\lfloor {\\frac{n}{3}} \\right\\rfloor )\\end{array}\\\\]\n如果$n = 2k$，那么${K_{n + 1}} \\ge 1 + n$。\n如果$n = 2k + 1$，那么${K_{n + 1}} \\ge n$，这时不成立。\n\n所以数学归纳法无法证明，今后我们会用其他方法来证明这个式子。\n\n# 约瑟夫环新解\n---\n还记得约瑟夫环问题吗？详见[第一节课](http://godweiyang.com/2018/02/27/concrete-math-1/)。\n\n这里我们继续推广到一般情况，如果有$n$个人，每隔$q$个人踢掉一个人，最后剩下的是几号？\n\n初始编号为$1 \\ldots n$，现在考虑一种新的编号方式。\n\n第一个人不会被踢掉，编号加$1$，变成$n + 1$，然后第二个人编号变为$n + 2$，直到第$q$个人，他被踢掉了。\n\n然后第$q + 1$个人编号继续加$1$，变成了$n + q$，依次下去。\n\n考虑当前踢到的人编号为$kq$，那么此时已经踢掉了$k$个人，所以接下去的人新的编号为$n + k(q - 1) + 1 \\ldots$。\n\n所以编号为$kq+d$的人编号变成了$n + k(q - 1) + d$，其中$1 \\le d < q$。\n\n直到最后，可以发现活下来的人编号为$qn$，问题是怎么根据这个编号推出他原来的编号？\n\n以$n = 10$，$q = 3$为例，下图就是每个人新的编号：\n![](1.jpg)\n\n令\n\\\\[N = n + k(q - 1) + d\\\\]\n所以他上一次的编号是\n\\\\[kq + d = kq + N - n - k(q - 1) = k + N - n\\\\]\n因为\n\\\\[k = \\frac{ {N - n - d}}{ {q - 1}} = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor \\\\]\n所以上一次编号可以写为\n\\\\[\\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor  + N - n\\\\]\n\n因此最后存活的人编号可以用如下的算法计算：\n```\nN = qn\nwhile N > n:\n\tN = k + N - n\nans = N\n```\n其中$k = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor $\n\n如果我们用$D = qn + 1 - N$替代$N$，将会进一步简化算法：\n\\\\[\\begin{array}{l}D = qn + 1 - N\\\\ = qn + 1 - \\left( {\\left\\lfloor {\\frac{ {(qn + 1 - D) - n - 1}}{ {q - 1}}} \\right\\rfloor  + qn + 1 - D - n} \\right)\\\\ = n + D - \\left\\lfloor {\\frac{ {(q - 1)n - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D - \\left\\lfloor {\\frac{ { - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D + \\left\\lceil {\\frac{D}{ {q - 1}}} \\right\\rceil \\\\ = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil \\end{array}\\\\]\n\n算法伪代码如下：\n```\nD = 1\nwhile D <= (q-1)n:\n\tD = k\nans = qn + 1 - D\n```\n其中$k = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil $\n\n# 模的性质\n---\n## 定义与性质\n模定义如下：\n\\\\[x\\bmod y = x - y\\left\\lfloor {\\frac{x}{y}} \\right\\rfloor \\\\]\n特别的\n\\\\[x\\bmod 0 = x\\\\]\n\n与此类似，定义一个与模类似的运算：\n\\\\[x{\\rm{ mumble }}y = y\\left\\lceil {\\frac{x}{y}} \\right\\rceil  - x\\\\]\n形象理解如下图所示：\n![](2.jpg)\n圆的周长是$y$，一共走过的路长（红色+绿色部分）是$x$，所以$x\\bmod y$就是绿色部分，$x{\\rm{ mumble }}y$就是一圈长度减去绿色部分。\n\n模有一些性质：\n\\\\[c(x\\bmod y) = (cx)\\bmod (cy)\\\\]\n\n## 应用\n考虑如下问题，怎么平均分配$n$个东西给$m$个人？\n\n很容易想到，首先分给每个人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $个东西，剩下$n\\bmod m$件东西分给前$n\\bmod m$个人，一人多一件就行。\n\n概括起来就是，前$n\\bmod m$个人，每人$\\left\\lceil {\\frac{n}{m}} \\right\\rceil $件，剩下的人，每人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $件。\n\n那有没有办法统一表示呢？有的，每个人分到的件数为\n\\\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil ,1 \\le k \\le m\\\\]\n\n为什么呢？假设\n\\\\[n = qm + r,0 \\le r < m\\\\]\n那么\n\\\\[\\begin{array}{l}\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = \\left\\lceil {\\frac{ {qm + r - k + 1}}{m}} \\right\\rceil \\\\ = q + \\left\\lceil {\\frac{ {r - k + 1}}{m}} \\right\\rceil \\end{array}\\\\]\n当$1 \\le k \\le r$时，\n\\\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 1\\\\]\n当$r < k \\le m$时，\n\\\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 0\\\\]\n\n得证，因此可以得到如下等式：\n\\\\[n = \\left\\lceil {\\frac{n}{m}} \\right\\rceil  + \\left\\lceil {\\frac{ {n - 1}}{m}} \\right\\rceil  +  \\cdots  + \\left\\lceil {\\frac{ {n - m + 1}}{m}} \\right\\rceil \\\\]\n\n由$n = \\left\\lfloor {\\frac{n}{2}} \\right\\rfloor  + \\left\\lceil {\\frac{n}{2}} \\right\\rceil $\n可以进一步将其转换为下取整形式：\n\\\\[n = \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {n + m - 1}}{m}} \\right\\rfloor \\\\]\n\n令$n = \\left\\lfloor {mx} \\right\\rfloor $\n我们得到了一个令人惊奇的等式：\n\\\\[\\left\\lfloor {mx} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {x + \\frac{1}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {x + \\frac{ {m - 1}}{m}} \\right\\rfloor \\\\]\n\n# HDU3089\n---\n最后用今天介绍的约瑟夫环算法来解决一道经典的ACM题！题目链接：[杭电3089](http://acm.hdu.edu.cn/showproblem.php?pid=3089)。\n\nC++代码如下：\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL Ceil(LL x, LL y) {\n    if (x % y == 0) return x / y;\n    return x / y + 1;\n}\n\nLL J(LL n, LL q) {\n    LL D = 1, end = (q - 1) * n;\n    while (D <= end) {\n        D = Ceil(q * D, q - 1);\n    }\n    return q * n + 1 - D;\n}\n\nint main() {\n    LL n, q;\n    while (~scanf(\"%lld%lld\", &n, &q)) {\n        printf(\"%lld\\n\", J(n, q));\n    }\n    return 0;\n}\n```\n\n比网上各种快速算法还要快哦，理论时间复杂度是$\\log n$的。","slug":"concrete-math-8","published":1,"updated":"2019-07-20T04:06:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982fx00737swepktpt7s2","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=306662&auto=1&height=66\"></iframe></div>\n\n<p>今天主要讲了取整与递归式的结合，还有取模的相关知识。</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>给出下列递归式：<br>\\[\\begin{array}{l}{K_0}{\\rm{ = }}1\\\\{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }}),n \\ge 0\\end{array}\\]<br>现在不要求你求解，要你证明：<br>\\[{K_n} \\ge n\\]<br>首先想到的就是数学归纳法，假设对于任意$k \\le n$，都有${K_k} \\ge k$，那么：<br>\\[\\begin{array}{l}{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }})\\\\ \\ge 1 + \\min (2\\left\\lfloor {\\frac{n}{2}} \\right\\rfloor ,3\\left\\lfloor {\\frac{n}{3}} \\right\\rfloor )\\end{array}\\]<br>如果$n = 2k$，那么${K_{n + 1}} \\ge 1 + n$。<br>如果$n = 2k + 1$，那么${K_{n + 1}} \\ge n$，这时不成立。</p>\n<p>所以数学归纳法无法证明，今后我们会用其他方法来证明这个式子。</p>\n<h1 id=\"约瑟夫环新解\"><a href=\"#约瑟夫环新解\" class=\"headerlink\" title=\"约瑟夫环新解\"></a>约瑟夫环新解</h1><hr>\n<p>还记得约瑟夫环问题吗？详见<a href=\"http://godweiyang.com/2018/02/27/concrete-math-1/\">第一节课</a>。</p>\n<p>这里我们继续推广到一般情况，如果有$n$个人，每隔$q$个人踢掉一个人，最后剩下的是几号？</p>\n<p>初始编号为$1 \\ldots n$，现在考虑一种新的编号方式。</p>\n<p>第一个人不会被踢掉，编号加$1$，变成$n + 1$，然后第二个人编号变为$n + 2$，直到第$q$个人，他被踢掉了。</p>\n<p>然后第$q + 1$个人编号继续加$1$，变成了$n + q$，依次下去。</p>\n<p>考虑当前踢到的人编号为$kq$，那么此时已经踢掉了$k$个人，所以接下去的人新的编号为$n + k(q - 1) + 1 \\ldots$。</p>\n<p>所以编号为$kq+d$的人编号变成了$n + k(q - 1) + d$，其中$1 \\le d &lt; q$。</p>\n<p>直到最后，可以发现活下来的人编号为$qn$，问题是怎么根据这个编号推出他原来的编号？</p>\n<p>以$n = 10$，$q = 3$为例，下图就是每个人新的编号：<br><img src=\"1.jpg\" alt></p>\n<p>令<br>\\[N = n + k(q - 1) + d\\]<br>所以他上一次的编号是<br>\\[kq + d = kq + N - n - k(q - 1) = k + N - n\\]<br>因为<br>\\[k = \\frac{ {N - n - d}}{ {q - 1}} = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor \\]<br>所以上一次编号可以写为<br>\\[\\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor  + N - n\\]</p>\n<p>因此最后存活的人编号可以用如下的算法计算：</p>\n<pre><code>N = qn\nwhile N &gt; n:\n    N = k + N - n\nans = N</code></pre><p>其中$k = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor $</p>\n<p>如果我们用$D = qn + 1 - N$替代$N$，将会进一步简化算法：<br>\\[\\begin{array}{l}D = qn + 1 - N\\\\ = qn + 1 - \\left( {\\left\\lfloor {\\frac{ {(qn + 1 - D) - n - 1}}{ {q - 1}}} \\right\\rfloor  + qn + 1 - D - n} \\right)\\\\ = n + D - \\left\\lfloor {\\frac{ {(q - 1)n - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D - \\left\\lfloor {\\frac{ { - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D + \\left\\lceil {\\frac{D}{ {q - 1}}} \\right\\rceil \\\\ = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil \\end{array}\\]</p>\n<p>算法伪代码如下：</p>\n<pre><code>D = 1\nwhile D &lt;= (q-1)n:\n    D = k\nans = qn + 1 - D</code></pre><p>其中$k = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil $</p>\n<h1 id=\"模的性质\"><a href=\"#模的性质\" class=\"headerlink\" title=\"模的性质\"></a>模的性质</h1><hr>\n<h2 id=\"定义与性质\"><a href=\"#定义与性质\" class=\"headerlink\" title=\"定义与性质\"></a>定义与性质</h2><p>模定义如下：<br>\\[x\\bmod y = x - y\\left\\lfloor {\\frac{x}{y}} \\right\\rfloor \\]<br>特别的<br>\\[x\\bmod 0 = x\\]</p>\n<p>与此类似，定义一个与模类似的运算：<br>\\[x{\\rm{ mumble }}y = y\\left\\lceil {\\frac{x}{y}} \\right\\rceil  - x\\]<br>形象理解如下图所示：<br><img src=\"2.jpg\" alt><br>圆的周长是$y$，一共走过的路长（红色+绿色部分）是$x$，所以$x\\bmod y$就是绿色部分，$x{\\rm{ mumble }}y$就是一圈长度减去绿色部分。</p>\n<p>模有一些性质：<br>\\[c(x\\bmod y) = (cx)\\bmod (cy)\\]</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>考虑如下问题，怎么平均分配$n$个东西给$m$个人？</p>\n<p>很容易想到，首先分给每个人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $个东西，剩下$n\\bmod m$件东西分给前$n\\bmod m$个人，一人多一件就行。</p>\n<p>概括起来就是，前$n\\bmod m$个人，每人$\\left\\lceil {\\frac{n}{m}} \\right\\rceil $件，剩下的人，每人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $件。</p>\n<p>那有没有办法统一表示呢？有的，每个人分到的件数为<br>\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil ,1 \\le k \\le m\\]</p>\n<p>为什么呢？假设<br>\\[n = qm + r,0 \\le r &lt; m\\]<br>那么<br>\\[\\begin{array}{l}\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = \\left\\lceil {\\frac{ {qm + r - k + 1}}{m}} \\right\\rceil \\\\ = q + \\left\\lceil {\\frac{ {r - k + 1}}{m}} \\right\\rceil \\end{array}\\]<br>当$1 \\le k \\le r$时，<br>\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 1\\]<br>当$r &lt; k \\le m$时，<br>\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 0\\]</p>\n<p>得证，因此可以得到如下等式：<br>\\[n = \\left\\lceil {\\frac{n}{m}} \\right\\rceil  + \\left\\lceil {\\frac{ {n - 1}}{m}} \\right\\rceil  +  \\cdots  + \\left\\lceil {\\frac{ {n - m + 1}}{m}} \\right\\rceil \\]</p>\n<p>由$n = \\left\\lfloor {\\frac{n}{2}} \\right\\rfloor  + \\left\\lceil {\\frac{n}{2}} \\right\\rceil $<br>可以进一步将其转换为下取整形式：<br>\\[n = \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {n + m - 1}}{m}} \\right\\rfloor \\]</p>\n<p>令$n = \\left\\lfloor {mx} \\right\\rfloor $<br>我们得到了一个令人惊奇的等式：<br>\\[\\left\\lfloor {mx} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {x + \\frac{1}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {x + \\frac{ {m - 1}}{m}} \\right\\rfloor \\]</p>\n<h1 id=\"HDU3089\"><a href=\"#HDU3089\" class=\"headerlink\" title=\"HDU3089\"></a>HDU3089</h1><hr>\n<p>最后用今天介绍的约瑟夫环算法来解决一道经典的ACM题！题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=3089\" target=\"_blank\" rel=\"noopener\">杭电3089</a>。</p>\n<p>C++代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n\nLL <span class=\"token function\">Ceil</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">,</span> LL y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nLL <span class=\"token function\">J</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">,</span> LL q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LL D <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>D <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        D <span class=\"token operator\">=</span> <span class=\"token function\">Ceil</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span> D<span class=\"token punctuation\">,</span> q <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> q <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> D<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LL n<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">J</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>比网上各种快速算法还要快哦，理论时间复杂度是$\\log n$的。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=306662&auto=1&height=66\"></iframe></div>\n\n<p>今天主要讲了取整与递归式的结合，还有取模的相关知识。</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>给出下列递归式：<br>\\[\\begin{array}{l}{K_0}{\\rm{ = }}1\\\\{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }}),n \\ge 0\\end{array}\\]<br>现在不要求你求解，要你证明：<br>\\[{K_n} \\ge n\\]<br>首先想到的就是数学归纳法，假设对于任意$k \\le n$，都有${K_k} \\ge k$，那么：<br>\\[\\begin{array}{l}{K_{n + 1}} = 1 + \\min (2{K_{\\left\\lfloor {n/2} \\right\\rfloor }},3{K_{\\left\\lfloor {n/3} \\right\\rfloor }})\\\\ \\ge 1 + \\min (2\\left\\lfloor {\\frac{n}{2}} \\right\\rfloor ,3\\left\\lfloor {\\frac{n}{3}} \\right\\rfloor )\\end{array}\\]<br>如果$n = 2k$，那么${K_{n + 1}} \\ge 1 + n$。<br>如果$n = 2k + 1$，那么${K_{n + 1}} \\ge n$，这时不成立。</p>\n<p>所以数学归纳法无法证明，今后我们会用其他方法来证明这个式子。</p>\n<h1 id=\"约瑟夫环新解\"><a href=\"#约瑟夫环新解\" class=\"headerlink\" title=\"约瑟夫环新解\"></a>约瑟夫环新解</h1><hr>\n<p>还记得约瑟夫环问题吗？详见<a href=\"http://godweiyang.com/2018/02/27/concrete-math-1/\">第一节课</a>。</p>\n<p>这里我们继续推广到一般情况，如果有$n$个人，每隔$q$个人踢掉一个人，最后剩下的是几号？</p>\n<p>初始编号为$1 \\ldots n$，现在考虑一种新的编号方式。</p>\n<p>第一个人不会被踢掉，编号加$1$，变成$n + 1$，然后第二个人编号变为$n + 2$，直到第$q$个人，他被踢掉了。</p>\n<p>然后第$q + 1$个人编号继续加$1$，变成了$n + q$，依次下去。</p>\n<p>考虑当前踢到的人编号为$kq$，那么此时已经踢掉了$k$个人，所以接下去的人新的编号为$n + k(q - 1) + 1 \\ldots$。</p>\n<p>所以编号为$kq+d$的人编号变成了$n + k(q - 1) + d$，其中$1 \\le d &lt; q$。</p>\n<p>直到最后，可以发现活下来的人编号为$qn$，问题是怎么根据这个编号推出他原来的编号？</p>\n<p>以$n = 10$，$q = 3$为例，下图就是每个人新的编号：<br><img src=\"1.jpg\" alt></p>\n<p>令<br>\\[N = n + k(q - 1) + d\\]<br>所以他上一次的编号是<br>\\[kq + d = kq + N - n - k(q - 1) = k + N - n\\]<br>因为<br>\\[k = \\frac{ {N - n - d}}{ {q - 1}} = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor \\]<br>所以上一次编号可以写为<br>\\[\\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor  + N - n\\]</p>\n<p>因此最后存活的人编号可以用如下的算法计算：</p>\n<pre><code>N = qn\nwhile N &gt; n:\n    N = k + N - n\nans = N</code></pre><p>其中$k = \\left\\lfloor {\\frac{ {N - n - 1}}{ {q - 1}}} \\right\\rfloor $</p>\n<p>如果我们用$D = qn + 1 - N$替代$N$，将会进一步简化算法：<br>\\[\\begin{array}{l}D = qn + 1 - N\\\\ = qn + 1 - \\left( {\\left\\lfloor {\\frac{ {(qn + 1 - D) - n - 1}}{ {q - 1}}} \\right\\rfloor  + qn + 1 - D - n} \\right)\\\\ = n + D - \\left\\lfloor {\\frac{ {(q - 1)n - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D - \\left\\lfloor {\\frac{ { - D}}{ {q - 1}}} \\right\\rfloor \\\\ = D + \\left\\lceil {\\frac{D}{ {q - 1}}} \\right\\rceil \\\\ = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil \\end{array}\\]</p>\n<p>算法伪代码如下：</p>\n<pre><code>D = 1\nwhile D &lt;= (q-1)n:\n    D = k\nans = qn + 1 - D</code></pre><p>其中$k = \\left\\lceil {\\frac{q}{ {q - 1}}D} \\right\\rceil $</p>\n<h1 id=\"模的性质\"><a href=\"#模的性质\" class=\"headerlink\" title=\"模的性质\"></a>模的性质</h1><hr>\n<h2 id=\"定义与性质\"><a href=\"#定义与性质\" class=\"headerlink\" title=\"定义与性质\"></a>定义与性质</h2><p>模定义如下：<br>\\[x\\bmod y = x - y\\left\\lfloor {\\frac{x}{y}} \\right\\rfloor \\]<br>特别的<br>\\[x\\bmod 0 = x\\]</p>\n<p>与此类似，定义一个与模类似的运算：<br>\\[x{\\rm{ mumble }}y = y\\left\\lceil {\\frac{x}{y}} \\right\\rceil  - x\\]<br>形象理解如下图所示：<br><img src=\"2.jpg\" alt><br>圆的周长是$y$，一共走过的路长（红色+绿色部分）是$x$，所以$x\\bmod y$就是绿色部分，$x{\\rm{ mumble }}y$就是一圈长度减去绿色部分。</p>\n<p>模有一些性质：<br>\\[c(x\\bmod y) = (cx)\\bmod (cy)\\]</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>考虑如下问题，怎么平均分配$n$个东西给$m$个人？</p>\n<p>很容易想到，首先分给每个人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $个东西，剩下$n\\bmod m$件东西分给前$n\\bmod m$个人，一人多一件就行。</p>\n<p>概括起来就是，前$n\\bmod m$个人，每人$\\left\\lceil {\\frac{n}{m}} \\right\\rceil $件，剩下的人，每人$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor $件。</p>\n<p>那有没有办法统一表示呢？有的，每个人分到的件数为<br>\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil ,1 \\le k \\le m\\]</p>\n<p>为什么呢？假设<br>\\[n = qm + r,0 \\le r &lt; m\\]<br>那么<br>\\[\\begin{array}{l}\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = \\left\\lceil {\\frac{ {qm + r - k + 1}}{m}} \\right\\rceil \\\\ = q + \\left\\lceil {\\frac{ {r - k + 1}}{m}} \\right\\rceil \\end{array}\\]<br>当$1 \\le k \\le r$时，<br>\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 1\\]<br>当$r &lt; k \\le m$时，<br>\\[\\left\\lceil {\\frac{ {n - k + 1}}{m}} \\right\\rceil  = 0\\]</p>\n<p>得证，因此可以得到如下等式：<br>\\[n = \\left\\lceil {\\frac{n}{m}} \\right\\rceil  + \\left\\lceil {\\frac{ {n - 1}}{m}} \\right\\rceil  +  \\cdots  + \\left\\lceil {\\frac{ {n - m + 1}}{m}} \\right\\rceil \\]</p>\n<p>由$n = \\left\\lfloor {\\frac{n}{2}} \\right\\rfloor  + \\left\\lceil {\\frac{n}{2}} \\right\\rceil $<br>可以进一步将其转换为下取整形式：<br>\\[n = \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {n + 1}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {n + m - 1}}{m}} \\right\\rfloor \\]</p>\n<p>令$n = \\left\\lfloor {mx} \\right\\rfloor $<br>我们得到了一个令人惊奇的等式：<br>\\[\\left\\lfloor {mx} \\right\\rfloor  = \\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {x + \\frac{1}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {x + \\frac{ {m - 1}}{m}} \\right\\rfloor \\]</p>\n<h1 id=\"HDU3089\"><a href=\"#HDU3089\" class=\"headerlink\" title=\"HDU3089\"></a>HDU3089</h1><hr>\n<p>最后用今天介绍的约瑟夫环算法来解决一道经典的ACM题！题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=3089\" target=\"_blank\" rel=\"noopener\">杭电3089</a>。</p>\n<p>C++代码如下：</p>\n<pre><code class=\"cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\n\nLL Ceil(LL x, LL y) {\n    if (x % y == 0) return x / y;\n    return x / y + 1;\n}\n\nLL J(LL n, LL q) {\n    LL D = 1, end = (q - 1) * n;\n    while (D &lt;= end) {\n        D = Ceil(q * D, q - 1);\n    }\n    return q * n + 1 - D;\n}\n\nint main() {\n    LL n, q;\n    while (~scanf(&quot;%lld%lld&quot;, &amp;n, &amp;q)) {\n        printf(&quot;%lld\\n&quot;, J(n, q));\n    }\n    return 0;\n}</code></pre>\n<p>比网上各种快速算法还要快哦，理论时间复杂度是$\\log n$的。</p>\n"},{"title":"具体数学-第9课（取整进阶与数论入门）","date":"2018-04-23T04:02:13.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=108910&auto=1&height=66\"></iframe></div>\n\n今天讲完了取整的最后一部分知识，并给第四章数论开了个头。\n\n首先还是以一道例题开始我们今天的课程。\n# 例题1\n---\n求和：\n\\\\[\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor } \\\\]\n## 方法1\n首先令$m = \\left\\lfloor {\\sqrt k } \\right\\rfloor $\n那么有\n\\\\[\\begin{array}{l}\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k < n} \\right]\\left[ {m = \\left\\lfloor {\\sqrt k } \\right\\rfloor } \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k < n} \\right]\\left[ {m \\le \\sqrt k  < m + 1} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k < n} \\right]\\left[ { {m^2} \\le k < { {(m + 1)}^2}} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k < { {(m + 1)}^2} \\le n} \\right]} \\\\ + \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k < n < { {(m + 1)}^2}} \\right]} \\end{array}\\\\]\n我们先算左半部分，先假设$n = {a^2}$，那么有\n\\\\[\\begin{array}{l}\\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k < { {(m + 1)}^2} \\le {a^2}} \\right]} \\\\ = \\sum\\limits_{m \\ge 0} {m(2m + 1)\\left[ {m < a} \\right]} \\\\ = \\frac{1}{6}(4a + 1)a(a - 1)\\end{array}\\\\]\n而对于一般的$n$，令$a = \\left\\lfloor {\\sqrt n } \\right\\rfloor $，我们只需要计算${a^2} \\le k < n$的部分，而这部分$\\sqrt k  = a$，所以结果为$(n - {a^2})a$。\n\n所以总的结果为：\n\\\\[\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = na - \\frac{1}{3}{a^3} - \\frac{1}{2}{a^2} - \\frac{1}{6}a,a = \\left\\lfloor {\\sqrt n } \\right\\rfloor \\\\]\n\n这里解释一下为什么没有算右半部分？因为右半部分就是${a^2} \\le k < n$的这部分，已经计算过了。\n\n## 方法2\n因为$\\left\\lfloor x \\right\\rfloor  = \\sum\\nolimits_j {\\left[ {1 \\le j \\le x} \\right]} $，所以可以将原式替换掉，还是令$n = {a^2}$，然后如下计算：\n\\\\[\\begin{array}{l}\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{j,k} {\\left[ {1 \\le j \\le \\sqrt k } \\right]\\left[ {0 \\le k < {a^2}} \\right]} \\\\ = \\sum\\limits_{1 \\le j < a} {\\sum\\limits_k {\\left[ { {j^2} \\le k < {a^2}} \\right]} } \\\\ = \\sum\\limits_{1 \\le j < a} {({a^2} - {j^2})}  = {a^3} - \\frac{1}{3}a(a + \\frac{1}{2})(a + 1)\\end{array}\\\\]\n其中第二行交换了变量计算顺序。\n\n# 定理1\n---\n这里直接介绍一个定理，就不证明了，过程比较复杂：\n\\\\[\\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{1}{n}\\sum\\limits_{0 \\le k < n} {f(\\{ k\\alpha \\} )}  = \\int_0^1 {f(x)dx} \\\\]\n其中$\\alpha $是一个无理数。\n\n这个公式说明了，无理数$\\alpha $的整数倍的小数部分均匀分布在$(0,1)$之间。\n\n这就给了我们一个启示，我们可以用它来生成随机数啊！其他用处还有很多，自己想咯。\n\n# 例题2\n---\n求如下和式：\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor } \\\\]\n其中整数$m > 0$，$n$也是整数。\n\n通过枚举$m = 1,2,3, \\ldots $，可以发现和式满足如下形式：\n\\\\[a\\left\\lfloor {\\frac{x}{a}} \\right\\rfloor  + bn + c\\\\]\n那么怎么计算出来呢？\n\n首先做一个变形：\n\\\\[\\left\\lfloor {\\frac{ {x + kn}}{m}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {x + kn\\bmod m}}{m}} \\right\\rfloor  + \\frac{ {kn}}{m} - \\frac{ {kn\\bmod m}}{m}\\\\]\n这就将原来的和式分为了三个部分求和。\n\n**第一个部分为：**\n\\\\[\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + n\\bmod m}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + (m - 1)n\\bmod m}}{m}} \\right\\rfloor \\\\]\n具体怎么算留到下一章节，这里通过枚举可以发现它的值是有周期的，周期重复次数是$d = \\gcd (m,n)$。所以算出来结果为：\n\\\\[\\begin{array}{l}d\\left( {\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + d}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + m - d}}{m}} \\right\\rfloor } \\right)\\\\ = d\\left( {\\left\\lfloor {\\frac{ {x/d}}{ {m/d}}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x/d + 1}}{ {m/d}}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x/d + m/d - 1}}{ {m/d}}} \\right\\rfloor } \\right)\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor \\end{array}\\\\]\n**第二个部分为：**\n\\\\[\\sum\\limits_{0 \\le k < m} {\\frac{ {kn}}{m}}  = \\frac{ {(m - 1)n}}{2}\\\\]\n**第三个部分为：**\n\\\\[d\\left( {\\frac{0}{m} + \\frac{d}{m} +  \\cdots  + \\frac{ {m - d}}{m}} \\right) = \\frac{ {m - d}}{2}\\\\]\n\n所以总的结果为：\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)n}}{2} + \\frac{ {d - m}}{2}\\\\]\n\n这里我们对结果稍稍变形，可以得到另一个结果：\n\\\\[\\begin{array}{l}\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {m - 1}}{2} + \\frac{ {d - m}}{2}\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {d - 1}}{2}\\end{array}\\\\]\n可以发现，$m$和$n$是对称的！所以可以得到如下结论：\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = \\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\frac{ {mk + x}}{n}} \\right\\rfloor } \\\\]\n这有什么用呢？当$m$特别大、$n$很小的时候可以大大减少项的个数！\n\n如果我们令$n=1$，就会发现，得到的式子和之前证过的一个式子一模一样！\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {k + x}}{m}} \\right\\rfloor }  = \\left\\lfloor x \\right\\rfloor \\\\]\n\n到这里为止，第三章取整就讲完了，下面开始讲第四章数论部分。\n\n# 数论相关性质\n---\n## 整除定义\n\\\\[m|n \\Leftrightarrow m > 0,n = mk,k \\in \\mathbb{Z}\\\\]\n注意这里整除的定义中要求$m>0$。\n\n## 最大公约数和最小公倍数\n定义我就不说了，大家应该都知道的。\n\n## 欧几里得定理\n又叫辗转相除法，就是用来求最大公约数的。\n\\\\[\\begin{array}{l}\\gcd (0,n) = n\\\\\\gcd (m,n) = \\gcd (n\\bmod m,m)\\end{array}\\\\]\n\n## 扩展欧几里得定理\n在用欧几里得定理求到最大公约数之后，反过来可以将最大公约数表示为两个数的线性和：\n\\\\[\\gcd (m,n) = m'm + n'n\\\\]\n\n## 性质1\n如果$k|m,k|n$，那么$k|gcd(m,n)$。\n\n## 性质2\n\\\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_{m|n} { {a_{n/m}}} \\\\]\n这个就是用了交换律，按照因子顺序倒过来算。\n\n## 性质3\n\\\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_k {\\sum\\limits_{m > 0} { {a_m}[n = mk]} } \\\\]\n这个虽然变成了二重求和，但是对于每个$k$，其实只有一个$m$有效。\n\n## 性质4\n\\\\[\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} } \\\\]\n这个一眼就不一定能看出来了。\n\n左边等于：\n\\\\[\\begin{array}{l}\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{j,l} {\\sum\\limits_{k,m > 0} { {a_{k,m}}[n = jm][m = kl]} } \\\\ = \\sum\\limits_j {\\sum\\limits_{k,l > 0} { {a_{k,kl}}[n = jkl]} } \\end{array}\\\\]\n右边等于：\n\\\\[\\begin{array}{l}\\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} }  = \\sum\\limits_{j,m} {\\sum\\limits_{k,l > 0} { {a_{k,kl}}[n = jk][n/k = ml]} } \\\\ = \\sum\\limits_m {\\sum\\limits_{k,l > 0} { {a_{k,kl}}[n = mlk]} } \\end{array}\\\\]\n可以看出左右两边相等。\n\n## 算数基本定理\n一个整数可以唯一表示为若干个素数乘积：\n\\\\[n = \\prod\\limits_p { {p^{ {n_p}}}} ,{n_p} \\ge 0\\\\]\n所以用指数形式来表示一个整数$n$，例如$18 = {2^1} \\times {3^2}$，那么$18$可以表示为：\n\\\\[ < 1,2,0,0, \\ldots  > \\\\]\n最大公约数和最小公倍数也能很方便的用指数形式计算：\n其中最大公约数的每个素数的指数等于两个数对应指数最小值，最小公倍数的每个素数的指数等于两个数对应指数最大值。\n","source":"_posts/concrete-math-9.md","raw":"---\ntitle: 具体数学-第9课（取整进阶与数论入门）\ndate: 2018-04-23 12:02:13\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=108910&auto=1&height=66\"></iframe></div>\n\n今天讲完了取整的最后一部分知识，并给第四章数论开了个头。\n\n首先还是以一道例题开始我们今天的课程。\n# 例题1\n---\n求和：\n\\\\[\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor } \\\\]\n## 方法1\n首先令$m = \\left\\lfloor {\\sqrt k } \\right\\rfloor $\n那么有\n\\\\[\\begin{array}{l}\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k < n} \\right]\\left[ {m = \\left\\lfloor {\\sqrt k } \\right\\rfloor } \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k < n} \\right]\\left[ {m \\le \\sqrt k  < m + 1} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k < n} \\right]\\left[ { {m^2} \\le k < { {(m + 1)}^2}} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k < { {(m + 1)}^2} \\le n} \\right]} \\\\ + \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k < n < { {(m + 1)}^2}} \\right]} \\end{array}\\\\]\n我们先算左半部分，先假设$n = {a^2}$，那么有\n\\\\[\\begin{array}{l}\\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k < { {(m + 1)}^2} \\le {a^2}} \\right]} \\\\ = \\sum\\limits_{m \\ge 0} {m(2m + 1)\\left[ {m < a} \\right]} \\\\ = \\frac{1}{6}(4a + 1)a(a - 1)\\end{array}\\\\]\n而对于一般的$n$，令$a = \\left\\lfloor {\\sqrt n } \\right\\rfloor $，我们只需要计算${a^2} \\le k < n$的部分，而这部分$\\sqrt k  = a$，所以结果为$(n - {a^2})a$。\n\n所以总的结果为：\n\\\\[\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = na - \\frac{1}{3}{a^3} - \\frac{1}{2}{a^2} - \\frac{1}{6}a,a = \\left\\lfloor {\\sqrt n } \\right\\rfloor \\\\]\n\n这里解释一下为什么没有算右半部分？因为右半部分就是${a^2} \\le k < n$的这部分，已经计算过了。\n\n## 方法2\n因为$\\left\\lfloor x \\right\\rfloor  = \\sum\\nolimits_j {\\left[ {1 \\le j \\le x} \\right]} $，所以可以将原式替换掉，还是令$n = {a^2}$，然后如下计算：\n\\\\[\\begin{array}{l}\\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{j,k} {\\left[ {1 \\le j \\le \\sqrt k } \\right]\\left[ {0 \\le k < {a^2}} \\right]} \\\\ = \\sum\\limits_{1 \\le j < a} {\\sum\\limits_k {\\left[ { {j^2} \\le k < {a^2}} \\right]} } \\\\ = \\sum\\limits_{1 \\le j < a} {({a^2} - {j^2})}  = {a^3} - \\frac{1}{3}a(a + \\frac{1}{2})(a + 1)\\end{array}\\\\]\n其中第二行交换了变量计算顺序。\n\n# 定理1\n---\n这里直接介绍一个定理，就不证明了，过程比较复杂：\n\\\\[\\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{1}{n}\\sum\\limits_{0 \\le k < n} {f(\\{ k\\alpha \\} )}  = \\int_0^1 {f(x)dx} \\\\]\n其中$\\alpha $是一个无理数。\n\n这个公式说明了，无理数$\\alpha $的整数倍的小数部分均匀分布在$(0,1)$之间。\n\n这就给了我们一个启示，我们可以用它来生成随机数啊！其他用处还有很多，自己想咯。\n\n# 例题2\n---\n求如下和式：\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor } \\\\]\n其中整数$m > 0$，$n$也是整数。\n\n通过枚举$m = 1,2,3, \\ldots $，可以发现和式满足如下形式：\n\\\\[a\\left\\lfloor {\\frac{x}{a}} \\right\\rfloor  + bn + c\\\\]\n那么怎么计算出来呢？\n\n首先做一个变形：\n\\\\[\\left\\lfloor {\\frac{ {x + kn}}{m}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {x + kn\\bmod m}}{m}} \\right\\rfloor  + \\frac{ {kn}}{m} - \\frac{ {kn\\bmod m}}{m}\\\\]\n这就将原来的和式分为了三个部分求和。\n\n**第一个部分为：**\n\\\\[\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + n\\bmod m}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + (m - 1)n\\bmod m}}{m}} \\right\\rfloor \\\\]\n具体怎么算留到下一章节，这里通过枚举可以发现它的值是有周期的，周期重复次数是$d = \\gcd (m,n)$。所以算出来结果为：\n\\\\[\\begin{array}{l}d\\left( {\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + d}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + m - d}}{m}} \\right\\rfloor } \\right)\\\\ = d\\left( {\\left\\lfloor {\\frac{ {x/d}}{ {m/d}}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x/d + 1}}{ {m/d}}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x/d + m/d - 1}}{ {m/d}}} \\right\\rfloor } \\right)\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor \\end{array}\\\\]\n**第二个部分为：**\n\\\\[\\sum\\limits_{0 \\le k < m} {\\frac{ {kn}}{m}}  = \\frac{ {(m - 1)n}}{2}\\\\]\n**第三个部分为：**\n\\\\[d\\left( {\\frac{0}{m} + \\frac{d}{m} +  \\cdots  + \\frac{ {m - d}}{m}} \\right) = \\frac{ {m - d}}{2}\\\\]\n\n所以总的结果为：\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)n}}{2} + \\frac{ {d - m}}{2}\\\\]\n\n这里我们对结果稍稍变形，可以得到另一个结果：\n\\\\[\\begin{array}{l}\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {m - 1}}{2} + \\frac{ {d - m}}{2}\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {d - 1}}{2}\\end{array}\\\\]\n可以发现，$m$和$n$是对称的！所以可以得到如下结论：\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = \\sum\\limits_{0 \\le k < n} {\\left\\lfloor {\\frac{ {mk + x}}{n}} \\right\\rfloor } \\\\]\n这有什么用呢？当$m$特别大、$n$很小的时候可以大大减少项的个数！\n\n如果我们令$n=1$，就会发现，得到的式子和之前证过的一个式子一模一样！\n\\\\[\\sum\\limits_{0 \\le k < m} {\\left\\lfloor {\\frac{ {k + x}}{m}} \\right\\rfloor }  = \\left\\lfloor x \\right\\rfloor \\\\]\n\n到这里为止，第三章取整就讲完了，下面开始讲第四章数论部分。\n\n# 数论相关性质\n---\n## 整除定义\n\\\\[m|n \\Leftrightarrow m > 0,n = mk,k \\in \\mathbb{Z}\\\\]\n注意这里整除的定义中要求$m>0$。\n\n## 最大公约数和最小公倍数\n定义我就不说了，大家应该都知道的。\n\n## 欧几里得定理\n又叫辗转相除法，就是用来求最大公约数的。\n\\\\[\\begin{array}{l}\\gcd (0,n) = n\\\\\\gcd (m,n) = \\gcd (n\\bmod m,m)\\end{array}\\\\]\n\n## 扩展欧几里得定理\n在用欧几里得定理求到最大公约数之后，反过来可以将最大公约数表示为两个数的线性和：\n\\\\[\\gcd (m,n) = m'm + n'n\\\\]\n\n## 性质1\n如果$k|m,k|n$，那么$k|gcd(m,n)$。\n\n## 性质2\n\\\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_{m|n} { {a_{n/m}}} \\\\]\n这个就是用了交换律，按照因子顺序倒过来算。\n\n## 性质3\n\\\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_k {\\sum\\limits_{m > 0} { {a_m}[n = mk]} } \\\\]\n这个虽然变成了二重求和，但是对于每个$k$，其实只有一个$m$有效。\n\n## 性质4\n\\\\[\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} } \\\\]\n这个一眼就不一定能看出来了。\n\n左边等于：\n\\\\[\\begin{array}{l}\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{j,l} {\\sum\\limits_{k,m > 0} { {a_{k,m}}[n = jm][m = kl]} } \\\\ = \\sum\\limits_j {\\sum\\limits_{k,l > 0} { {a_{k,kl}}[n = jkl]} } \\end{array}\\\\]\n右边等于：\n\\\\[\\begin{array}{l}\\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} }  = \\sum\\limits_{j,m} {\\sum\\limits_{k,l > 0} { {a_{k,kl}}[n = jk][n/k = ml]} } \\\\ = \\sum\\limits_m {\\sum\\limits_{k,l > 0} { {a_{k,kl}}[n = mlk]} } \\end{array}\\\\]\n可以看出左右两边相等。\n\n## 算数基本定理\n一个整数可以唯一表示为若干个素数乘积：\n\\\\[n = \\prod\\limits_p { {p^{ {n_p}}}} ,{n_p} \\ge 0\\\\]\n所以用指数形式来表示一个整数$n$，例如$18 = {2^1} \\times {3^2}$，那么$18$可以表示为：\n\\\\[ < 1,2,0,0, \\ldots  > \\\\]\n最大公约数和最小公倍数也能很方便的用指数形式计算：\n其中最大公约数的每个素数的指数等于两个数对应指数最小值，最小公倍数的每个素数的指数等于两个数对应指数最大值。\n","slug":"concrete-math-9","published":1,"updated":"2019-07-20T04:06:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982g000767swekt9goqe1","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=108910&auto=1&height=66\"></iframe></div>\n\n<p>今天讲完了取整的最后一部分知识，并给第四章数论开了个头。</p>\n<p>首先还是以一道例题开始我们今天的课程。</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>求和：<br>\\[\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor } \\]</p>\n<h2 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h2><p>首先令$m = \\left\\lfloor {\\sqrt k } \\right\\rfloor $<br>那么有<br>\\[\\begin{array}{l}\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k &lt; n} \\right]\\left[ {m = \\left\\lfloor {\\sqrt k } \\right\\rfloor } \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k &lt; n} \\right]\\left[ {m \\le \\sqrt k  &lt; m + 1} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k &lt; n} \\right]\\left[ { {m^2} \\le k &lt; { {(m + 1)}^2}} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k &lt; { {(m + 1)}^2} \\le n} \\right]} \\\\ + \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k &lt; n &lt; { {(m + 1)}^2}} \\right]} \\end{array}\\]<br>我们先算左半部分，先假设$n = {a^2}$，那么有<br>\\[\\begin{array}{l}\\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k &lt; { {(m + 1)}^2} \\le {a^2}} \\right]} \\\\ = \\sum\\limits_{m \\ge 0} {m(2m + 1)\\left[ {m &lt; a} \\right]} \\\\ = \\frac{1}{6}(4a + 1)a(a - 1)\\end{array}\\]<br>而对于一般的$n$，令$a = \\left\\lfloor {\\sqrt n } \\right\\rfloor $，我们只需要计算${a^2} \\le k &lt; n$的部分，而这部分$\\sqrt k  = a$，所以结果为$(n - {a^2})a$。</p>\n<p>所以总的结果为：<br>\\[\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = na - \\frac{1}{3}{a^3} - \\frac{1}{2}{a^2} - \\frac{1}{6}a,a = \\left\\lfloor {\\sqrt n } \\right\\rfloor \\]</p>\n<p>这里解释一下为什么没有算右半部分？因为右半部分就是${a^2} \\le k &lt; n$的这部分，已经计算过了。</p>\n<h2 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h2><p>因为$\\left\\lfloor x \\right\\rfloor  = \\sum\\nolimits_j {\\left[ {1 \\le j \\le x} \\right]} $，所以可以将原式替换掉，还是令$n = {a^2}$，然后如下计算：<br>\\[\\begin{array}{l}\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{j,k} {\\left[ {1 \\le j \\le \\sqrt k } \\right]\\left[ {0 \\le k &lt; {a^2}} \\right]} \\\\ = \\sum\\limits_{1 \\le j &lt; a} {\\sum\\limits_k {\\left[ { {j^2} \\le k &lt; {a^2}} \\right]} } \\\\ = \\sum\\limits_{1 \\le j &lt; a} {({a^2} - {j^2})}  = {a^3} - \\frac{1}{3}a(a + \\frac{1}{2})(a + 1)\\end{array}\\]<br>其中第二行交换了变量计算顺序。</p>\n<h1 id=\"定理1\"><a href=\"#定理1\" class=\"headerlink\" title=\"定理1\"></a>定理1</h1><hr>\n<p>这里直接介绍一个定理，就不证明了，过程比较复杂：<br>\\[\\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{1}{n}\\sum\\limits_{0 \\le k &lt; n} {f(\\{ k\\alpha \\} )}  = \\int_0^1 {f(x)dx} \\]<br>其中$\\alpha $是一个无理数。</p>\n<p>这个公式说明了，无理数$\\alpha $的整数倍的小数部分均匀分布在$(0,1)$之间。</p>\n<p>这就给了我们一个启示，我们可以用它来生成随机数啊！其他用处还有很多，自己想咯。</p>\n<h1 id=\"例题2\"><a href=\"#例题2\" class=\"headerlink\" title=\"例题2\"></a>例题2</h1><hr>\n<p>求如下和式：<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor } \\]<br>其中整数$m &gt; 0$，$n$也是整数。</p>\n<p>通过枚举$m = 1,2,3, \\ldots $，可以发现和式满足如下形式：<br>\\[a\\left\\lfloor {\\frac{x}{a}} \\right\\rfloor  + bn + c\\]<br>那么怎么计算出来呢？</p>\n<p>首先做一个变形：<br>\\[\\left\\lfloor {\\frac{ {x + kn}}{m}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {x + kn\\bmod m}}{m}} \\right\\rfloor  + \\frac{ {kn}}{m} - \\frac{ {kn\\bmod m}}{m}\\]<br>这就将原来的和式分为了三个部分求和。</p>\n<p><strong>第一个部分为：</strong><br>\\[\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + n\\bmod m}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + (m - 1)n\\bmod m}}{m}} \\right\\rfloor \\]<br>具体怎么算留到下一章节，这里通过枚举可以发现它的值是有周期的，周期重复次数是$d = \\gcd (m,n)$。所以算出来结果为：<br>\\[\\begin{array}{l}d\\left( {\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + d}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + m - d}}{m}} \\right\\rfloor } \\right)\\\\ = d\\left( {\\left\\lfloor {\\frac{ {x/d}}{ {m/d}}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x/d + 1}}{ {m/d}}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x/d + m/d - 1}}{ {m/d}}} \\right\\rfloor } \\right)\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor \\end{array}\\]<br><strong>第二个部分为：</strong><br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\frac{ {kn}}{m}}  = \\frac{ {(m - 1)n}}{2}\\]<br><strong>第三个部分为：</strong><br>\\[d\\left( {\\frac{0}{m} + \\frac{d}{m} +  \\cdots  + \\frac{ {m - d}}{m}} \\right) = \\frac{ {m - d}}{2}\\]</p>\n<p>所以总的结果为：<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)n}}{2} + \\frac{ {d - m}}{2}\\]</p>\n<p>这里我们对结果稍稍变形，可以得到另一个结果：<br>\\[\\begin{array}{l}\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {m - 1}}{2} + \\frac{ {d - m}}{2}\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {d - 1}}{2}\\end{array}\\]<br>可以发现，$m$和$n$是对称的！所以可以得到如下结论：<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = \\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\frac{ {mk + x}}{n}} \\right\\rfloor } \\]<br>这有什么用呢？当$m$特别大、$n$很小的时候可以大大减少项的个数！</p>\n<p>如果我们令$n=1$，就会发现，得到的式子和之前证过的一个式子一模一样！<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {k + x}}{m}} \\right\\rfloor }  = \\left\\lfloor x \\right\\rfloor \\]</p>\n<p>到这里为止，第三章取整就讲完了，下面开始讲第四章数论部分。</p>\n<h1 id=\"数论相关性质\"><a href=\"#数论相关性质\" class=\"headerlink\" title=\"数论相关性质\"></a>数论相关性质</h1><hr>\n<h2 id=\"整除定义\"><a href=\"#整除定义\" class=\"headerlink\" title=\"整除定义\"></a>整除定义</h2><p>\\[m|n \\Leftrightarrow m &gt; 0,n = mk,k \\in \\mathbb{Z}\\]<br>注意这里整除的定义中要求$m&gt;0$。</p>\n<h2 id=\"最大公约数和最小公倍数\"><a href=\"#最大公约数和最小公倍数\" class=\"headerlink\" title=\"最大公约数和最小公倍数\"></a>最大公约数和最小公倍数</h2><p>定义我就不说了，大家应该都知道的。</p>\n<h2 id=\"欧几里得定理\"><a href=\"#欧几里得定理\" class=\"headerlink\" title=\"欧几里得定理\"></a>欧几里得定理</h2><p>又叫辗转相除法，就是用来求最大公约数的。<br>\\[\\begin{array}{l}\\gcd (0,n) = n\\\\\\gcd (m,n) = \\gcd (n\\bmod m,m)\\end{array}\\]</p>\n<h2 id=\"扩展欧几里得定理\"><a href=\"#扩展欧几里得定理\" class=\"headerlink\" title=\"扩展欧几里得定理\"></a>扩展欧几里得定理</h2><p>在用欧几里得定理求到最大公约数之后，反过来可以将最大公约数表示为两个数的线性和：<br>\\[\\gcd (m,n) = m’m + n’n\\]</p>\n<h2 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h2><p>如果$k|m,k|n$，那么$k|gcd(m,n)$。</p>\n<h2 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h2><p>\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_{m|n} { {a_{n/m}}} \\]<br>这个就是用了交换律，按照因子顺序倒过来算。</p>\n<h2 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h2><p>\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_k {\\sum\\limits_{m &gt; 0} { {a_m}[n = mk]} } \\]<br>这个虽然变成了二重求和，但是对于每个$k$，其实只有一个$m$有效。</p>\n<h2 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h2><p>\\[\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} } \\]<br>这个一眼就不一定能看出来了。</p>\n<p>左边等于：<br>\\[\\begin{array}{l}\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{j,l} {\\sum\\limits_{k,m &gt; 0} { {a_{k,m}}[n = jm][m = kl]} } \\\\ = \\sum\\limits_j {\\sum\\limits_{k,l &gt; 0} { {a_{k,kl}}[n = jkl]} } \\end{array}\\]<br>右边等于：<br>\\[\\begin{array}{l}\\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} }  = \\sum\\limits_{j,m} {\\sum\\limits_{k,l &gt; 0} { {a_{k,kl}}[n = jk][n/k = ml]} } \\\\ = \\sum\\limits_m {\\sum\\limits_{k,l &gt; 0} { {a_{k,kl}}[n = mlk]} } \\end{array}\\]<br>可以看出左右两边相等。</p>\n<h2 id=\"算数基本定理\"><a href=\"#算数基本定理\" class=\"headerlink\" title=\"算数基本定理\"></a>算数基本定理</h2><p>一个整数可以唯一表示为若干个素数乘积：<br>\\[n = \\prod\\limits_p { {p^{ {n_p}}}} ,{n_p} \\ge 0\\]<br>所以用指数形式来表示一个整数$n$，例如$18 = {2^1} \\times {3^2}$，那么$18$可以表示为：<br>\\[ &lt; 1,2,0,0, \\ldots  &gt; \\]<br>最大公约数和最小公倍数也能很方便的用指数形式计算：<br>其中最大公约数的每个素数的指数等于两个数对应指数最小值，最小公倍数的每个素数的指数等于两个数对应指数最大值。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=108910&auto=1&height=66\"></iframe></div>\n\n<p>今天讲完了取整的最后一部分知识，并给第四章数论开了个头。</p>\n<p>首先还是以一道例题开始我们今天的课程。</p>\n<h1 id=\"例题1\"><a href=\"#例题1\" class=\"headerlink\" title=\"例题1\"></a>例题1</h1><hr>\n<p>求和：<br>\\[\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor } \\]</p>\n<h2 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h2><p>首先令$m = \\left\\lfloor {\\sqrt k } \\right\\rfloor $<br>那么有<br>\\[\\begin{array}{l}\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k &lt; n} \\right]\\left[ {m = \\left\\lfloor {\\sqrt k } \\right\\rfloor } \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k &lt; n} \\right]\\left[ {m \\le \\sqrt k  &lt; m + 1} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ {k &lt; n} \\right]\\left[ { {m^2} \\le k &lt; { {(m + 1)}^2}} \\right]} \\\\ = \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k &lt; { {(m + 1)}^2} \\le n} \\right]} \\\\ + \\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k &lt; n &lt; { {(m + 1)}^2}} \\right]} \\end{array}\\]<br>我们先算左半部分，先假设$n = {a^2}$，那么有<br>\\[\\begin{array}{l}\\sum\\limits_{k,m \\ge 0} {m\\left[ { {m^2} \\le k &lt; { {(m + 1)}^2} \\le {a^2}} \\right]} \\\\ = \\sum\\limits_{m \\ge 0} {m(2m + 1)\\left[ {m &lt; a} \\right]} \\\\ = \\frac{1}{6}(4a + 1)a(a - 1)\\end{array}\\]<br>而对于一般的$n$，令$a = \\left\\lfloor {\\sqrt n } \\right\\rfloor $，我们只需要计算${a^2} \\le k &lt; n$的部分，而这部分$\\sqrt k  = a$，所以结果为$(n - {a^2})a$。</p>\n<p>所以总的结果为：<br>\\[\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = na - \\frac{1}{3}{a^3} - \\frac{1}{2}{a^2} - \\frac{1}{6}a,a = \\left\\lfloor {\\sqrt n } \\right\\rfloor \\]</p>\n<p>这里解释一下为什么没有算右半部分？因为右半部分就是${a^2} \\le k &lt; n$的这部分，已经计算过了。</p>\n<h2 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h2><p>因为$\\left\\lfloor x \\right\\rfloor  = \\sum\\nolimits_j {\\left[ {1 \\le j \\le x} \\right]} $，所以可以将原式替换掉，还是令$n = {a^2}$，然后如下计算：<br>\\[\\begin{array}{l}\\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\sqrt k } \\right\\rfloor }  = \\sum\\limits_{j,k} {\\left[ {1 \\le j \\le \\sqrt k } \\right]\\left[ {0 \\le k &lt; {a^2}} \\right]} \\\\ = \\sum\\limits_{1 \\le j &lt; a} {\\sum\\limits_k {\\left[ { {j^2} \\le k &lt; {a^2}} \\right]} } \\\\ = \\sum\\limits_{1 \\le j &lt; a} {({a^2} - {j^2})}  = {a^3} - \\frac{1}{3}a(a + \\frac{1}{2})(a + 1)\\end{array}\\]<br>其中第二行交换了变量计算顺序。</p>\n<h1 id=\"定理1\"><a href=\"#定理1\" class=\"headerlink\" title=\"定理1\"></a>定理1</h1><hr>\n<p>这里直接介绍一个定理，就不证明了，过程比较复杂：<br>\\[\\mathop {\\lim }\\limits_{n \\to \\infty } \\frac{1}{n}\\sum\\limits_{0 \\le k &lt; n} {f(\\{ k\\alpha \\} )}  = \\int_0^1 {f(x)dx} \\]<br>其中$\\alpha $是一个无理数。</p>\n<p>这个公式说明了，无理数$\\alpha $的整数倍的小数部分均匀分布在$(0,1)$之间。</p>\n<p>这就给了我们一个启示，我们可以用它来生成随机数啊！其他用处还有很多，自己想咯。</p>\n<h1 id=\"例题2\"><a href=\"#例题2\" class=\"headerlink\" title=\"例题2\"></a>例题2</h1><hr>\n<p>求如下和式：<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor } \\]<br>其中整数$m &gt; 0$，$n$也是整数。</p>\n<p>通过枚举$m = 1,2,3, \\ldots $，可以发现和式满足如下形式：<br>\\[a\\left\\lfloor {\\frac{x}{a}} \\right\\rfloor  + bn + c\\]<br>那么怎么计算出来呢？</p>\n<p>首先做一个变形：<br>\\[\\left\\lfloor {\\frac{ {x + kn}}{m}} \\right\\rfloor  = \\left\\lfloor {\\frac{ {x + kn\\bmod m}}{m}} \\right\\rfloor  + \\frac{ {kn}}{m} - \\frac{ {kn\\bmod m}}{m}\\]<br>这就将原来的和式分为了三个部分求和。</p>\n<p><strong>第一个部分为：</strong><br>\\[\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + n\\bmod m}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + (m - 1)n\\bmod m}}{m}} \\right\\rfloor \\]<br>具体怎么算留到下一章节，这里通过枚举可以发现它的值是有周期的，周期重复次数是$d = \\gcd (m,n)$。所以算出来结果为：<br>\\[\\begin{array}{l}d\\left( {\\left\\lfloor {\\frac{x}{m}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x + d}}{m}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x + m - d}}{m}} \\right\\rfloor } \\right)\\\\ = d\\left( {\\left\\lfloor {\\frac{ {x/d}}{ {m/d}}} \\right\\rfloor  + \\left\\lfloor {\\frac{ {x/d + 1}}{ {m/d}}} \\right\\rfloor  +  \\cdots  + \\left\\lfloor {\\frac{ {x/d + m/d - 1}}{ {m/d}}} \\right\\rfloor } \\right)\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor \\end{array}\\]<br><strong>第二个部分为：</strong><br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\frac{ {kn}}{m}}  = \\frac{ {(m - 1)n}}{2}\\]<br><strong>第三个部分为：</strong><br>\\[d\\left( {\\frac{0}{m} + \\frac{d}{m} +  \\cdots  + \\frac{ {m - d}}{m}} \\right) = \\frac{ {m - d}}{2}\\]</p>\n<p>所以总的结果为：<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)n}}{2} + \\frac{ {d - m}}{2}\\]</p>\n<p>这里我们对结果稍稍变形，可以得到另一个结果：<br>\\[\\begin{array}{l}\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {m - 1}}{2} + \\frac{ {d - m}}{2}\\\\ = d\\left\\lfloor {\\frac{x}{d}} \\right\\rfloor  + \\frac{ {(m - 1)(n - 1)}}{2} + \\frac{ {d - 1}}{2}\\end{array}\\]<br>可以发现，$m$和$n$是对称的！所以可以得到如下结论：<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {nk + x}}{m}} \\right\\rfloor }  = \\sum\\limits_{0 \\le k &lt; n} {\\left\\lfloor {\\frac{ {mk + x}}{n}} \\right\\rfloor } \\]<br>这有什么用呢？当$m$特别大、$n$很小的时候可以大大减少项的个数！</p>\n<p>如果我们令$n=1$，就会发现，得到的式子和之前证过的一个式子一模一样！<br>\\[\\sum\\limits_{0 \\le k &lt; m} {\\left\\lfloor {\\frac{ {k + x}}{m}} \\right\\rfloor }  = \\left\\lfloor x \\right\\rfloor \\]</p>\n<p>到这里为止，第三章取整就讲完了，下面开始讲第四章数论部分。</p>\n<h1 id=\"数论相关性质\"><a href=\"#数论相关性质\" class=\"headerlink\" title=\"数论相关性质\"></a>数论相关性质</h1><hr>\n<h2 id=\"整除定义\"><a href=\"#整除定义\" class=\"headerlink\" title=\"整除定义\"></a>整除定义</h2><p>\\[m|n \\Leftrightarrow m &gt; 0,n = mk,k \\in \\mathbb{Z}\\]<br>注意这里整除的定义中要求$m&gt;0$。</p>\n<h2 id=\"最大公约数和最小公倍数\"><a href=\"#最大公约数和最小公倍数\" class=\"headerlink\" title=\"最大公约数和最小公倍数\"></a>最大公约数和最小公倍数</h2><p>定义我就不说了，大家应该都知道的。</p>\n<h2 id=\"欧几里得定理\"><a href=\"#欧几里得定理\" class=\"headerlink\" title=\"欧几里得定理\"></a>欧几里得定理</h2><p>又叫辗转相除法，就是用来求最大公约数的。<br>\\[\\begin{array}{l}\\gcd (0,n) = n\\\\\\gcd (m,n) = \\gcd (n\\bmod m,m)\\end{array}\\]</p>\n<h2 id=\"扩展欧几里得定理\"><a href=\"#扩展欧几里得定理\" class=\"headerlink\" title=\"扩展欧几里得定理\"></a>扩展欧几里得定理</h2><p>在用欧几里得定理求到最大公约数之后，反过来可以将最大公约数表示为两个数的线性和：<br>\\[\\gcd (m,n) = m’m + n’n\\]</p>\n<h2 id=\"性质1\"><a href=\"#性质1\" class=\"headerlink\" title=\"性质1\"></a>性质1</h2><p>如果$k|m,k|n$，那么$k|gcd(m,n)$。</p>\n<h2 id=\"性质2\"><a href=\"#性质2\" class=\"headerlink\" title=\"性质2\"></a>性质2</h2><p>\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_{m|n} { {a_{n/m}}} \\]<br>这个就是用了交换律，按照因子顺序倒过来算。</p>\n<h2 id=\"性质3\"><a href=\"#性质3\" class=\"headerlink\" title=\"性质3\"></a>性质3</h2><p>\\[\\sum\\limits_{m|n} { {a_m}}  = \\sum\\limits_k {\\sum\\limits_{m &gt; 0} { {a_m}[n = mk]} } \\]<br>这个虽然变成了二重求和，但是对于每个$k$，其实只有一个$m$有效。</p>\n<h2 id=\"性质4\"><a href=\"#性质4\" class=\"headerlink\" title=\"性质4\"></a>性质4</h2><p>\\[\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} } \\]<br>这个一眼就不一定能看出来了。</p>\n<p>左边等于：<br>\\[\\begin{array}{l}\\sum\\limits_{m|n} {\\sum\\limits_{k|m} { {a_{k,m}}} }  = \\sum\\limits_{j,l} {\\sum\\limits_{k,m &gt; 0} { {a_{k,m}}[n = jm][m = kl]} } \\\\ = \\sum\\limits_j {\\sum\\limits_{k,l &gt; 0} { {a_{k,kl}}[n = jkl]} } \\end{array}\\]<br>右边等于：<br>\\[\\begin{array}{l}\\sum\\limits_{k|n} {\\sum\\limits_{l|(n/k)} { {a_{k,kl}}} }  = \\sum\\limits_{j,m} {\\sum\\limits_{k,l &gt; 0} { {a_{k,kl}}[n = jk][n/k = ml]} } \\\\ = \\sum\\limits_m {\\sum\\limits_{k,l &gt; 0} { {a_{k,kl}}[n = mlk]} } \\end{array}\\]<br>可以看出左右两边相等。</p>\n<h2 id=\"算数基本定理\"><a href=\"#算数基本定理\" class=\"headerlink\" title=\"算数基本定理\"></a>算数基本定理</h2><p>一个整数可以唯一表示为若干个素数乘积：<br>\\[n = \\prod\\limits_p { {p^{ {n_p}}}} ,{n_p} \\ge 0\\]<br>所以用指数形式来表示一个整数$n$，例如$18 = {2^1} \\times {3^2}$，那么$18$可以表示为：<br>\\[ &lt; 1,2,0,0, \\ldots  &gt; \\]<br>最大公约数和最小公倍数也能很方便的用指数形式计算：<br>其中最大公约数的每个素数的指数等于两个数对应指数最小值，最小公倍数的每个素数的指数等于两个数对应指数最大值。</p>\n"},{"title":"具体数学-第一章作业解答","date":"2018-03-05T12:48:38.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=371362&auto=1&height=66\"></iframe></div>\n\n这是我的第一章作业答案，只有四题，标准答案太精简了。\n\n总体做下来，只有最后一题的第二小问一开始算错了，正如题目所说，的确有点难想。我看了标准答案的式子，想了一会儿才想出来的。。。\n\n![](1.jpg)\n![](2.jpg)\n![](3.jpg)\n![](4.jpg)","source":"_posts/concrete-math-hw1.md","raw":"---\ntitle: 具体数学-第一章作业解答\ndate: 2018-03-05 20:48:38\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=371362&auto=1&height=66\"></iframe></div>\n\n这是我的第一章作业答案，只有四题，标准答案太精简了。\n\n总体做下来，只有最后一题的第二小问一开始算错了，正如题目所说，的确有点难想。我看了标准答案的式子，想了一会儿才想出来的。。。\n\n![](1.jpg)\n![](2.jpg)\n![](3.jpg)\n![](4.jpg)","slug":"concrete-math-hw1","published":1,"updated":"2019-07-20T04:06:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982g6007a7swe0pgwevzc","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=371362&auto=1&height=66\"></iframe></div>\n\n<p>这是我的第一章作业答案，只有四题，标准答案太精简了。</p>\n<p>总体做下来，只有最后一题的第二小问一开始算错了，正如题目所说，的确有点难想。我看了标准答案的式子，想了一会儿才想出来的。。。</p>\n<p><img src=\"1.jpg\" alt><br><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=371362&auto=1&height=66\"></iframe></div>\n\n<p>这是我的第一章作业答案，只有四题，标准答案太精简了。</p>\n<p>总体做下来，只有最后一题的第二小问一开始算错了，正如题目所说，的确有点难想。我看了标准答案的式子，想了一会儿才想出来的。。。</p>\n<p><img src=\"1.jpg\" alt><br><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt></p>\n"},{"title":"具体数学-第三章作业解答","date":"2018-04-20T06:01:06.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29534449&auto=1&height=66\"></iframe></div>\n\n# 题3\n---\n**题目**\n求$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor $的充要条件。\n**解答**\n因为\n\n\\\\[\nx = \\left\\lfloor x \\right\\rfloor  + \\{ x\\}\n\\\\]\n所以\n\n\\\\[\n\\left\\lfloor {nx} \\right\\rfloor  = \\left\\lfloor {n(\\left\\lfloor x \\right\\rfloor  + \\{ x\\} )} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {n\\{ x\\} } \\right\\rfloor\n\\\\]\n要使得$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor$，就必须有\n\n\\\\[\n\\left\\lfloor {n\\{ x\\} } \\right\\rfloor  = 0\n\\\\]\n所以\n\n\\\\[\nn\\{ x\\}  < 1\n\\\\]\n即\n\n\\\\[\n\\{ x\\}  < \\frac{1}{n}\n\\\\]\n# 题7\n---\n**题目**\n求下列递推式\n\\\\[\\begin{array}{l}{X_n} = n,0 \\le n < m\\\\{X_n} = {X_{n - m}} + 1,n \\ge m\\end{array}\\\\]\n**解答**\n因为\n\n\\\\[\nn - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m = n\\bmod m < m\n\\\\]\n所以\n\n\\\\[\n\\begin{array}{l}{X_n} = {X_{n - m}} + 1 = {X_{n - 2m}} + 2 =  \\cdots \\\\ = {X_{n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m}} + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  = n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\\\ = n\\,\\bmod \\,m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\end{array}\n\\\\]\n# 题8\n---\n**题目**\n$n$个物品放到$m$个盒子中，求证至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。\n**解答**\n假设所有的盒子物品数都小于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，那么总物品数$S$满足\n\n\\\\[\nS \\le m(\\left\\lceil {\\frac{n}{m}} \\right\\rceil  - 1)\n\\\\]\n令$n = qm + r,0 \\le r < m$，那么有\n\n\\\\[\nS \\le m(\\left\\lceil {q + \\frac{r}{m}} \\right\\rceil  - 1) = qm - m + m\\left\\lceil {\\frac{r}{m}} \\right\\rceil\n\\\\]\n如果$r=0$，那么有\n\n\\\\[\nS \\le qm - m < n\n\\\\]\n如果$r>0$，那么有\n\n\\\\[\nS \\le qm < n\n\\\\]\n这与$S=n$矛盾！所以至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$。\n\n假设所有的盒子物品数都大于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$，那么总物品数$S$满足\n\n\\\\[\nS \\ge m(\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + 1)\n\\\\]\n令$n = qm + r,0 \\le r < m$，那么有\n\n\\\\[\nS \\ge m(\\left\\lfloor {q + \\frac{r}{m}} \\right\\rfloor  + 1) = qm + m + m\\left\\lfloor {\\frac{r}{m}} \\right\\rfloor  = qm + m > qm + r = n\n\\\\]\n这与$S=n$矛盾！所以至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。","source":"_posts/concrete-math-hw3.md","raw":"---\ntitle: 具体数学-第三章作业解答\ndate: 2018-04-20 14:01:06\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29534449&auto=1&height=66\"></iframe></div>\n\n# 题3\n---\n**题目**\n求$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor $的充要条件。\n**解答**\n因为\n\n\\\\[\nx = \\left\\lfloor x \\right\\rfloor  + \\{ x\\}\n\\\\]\n所以\n\n\\\\[\n\\left\\lfloor {nx} \\right\\rfloor  = \\left\\lfloor {n(\\left\\lfloor x \\right\\rfloor  + \\{ x\\} )} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {n\\{ x\\} } \\right\\rfloor\n\\\\]\n要使得$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor$，就必须有\n\n\\\\[\n\\left\\lfloor {n\\{ x\\} } \\right\\rfloor  = 0\n\\\\]\n所以\n\n\\\\[\nn\\{ x\\}  < 1\n\\\\]\n即\n\n\\\\[\n\\{ x\\}  < \\frac{1}{n}\n\\\\]\n# 题7\n---\n**题目**\n求下列递推式\n\\\\[\\begin{array}{l}{X_n} = n,0 \\le n < m\\\\{X_n} = {X_{n - m}} + 1,n \\ge m\\end{array}\\\\]\n**解答**\n因为\n\n\\\\[\nn - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m = n\\bmod m < m\n\\\\]\n所以\n\n\\\\[\n\\begin{array}{l}{X_n} = {X_{n - m}} + 1 = {X_{n - 2m}} + 2 =  \\cdots \\\\ = {X_{n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m}} + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  = n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\\\ = n\\,\\bmod \\,m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\end{array}\n\\\\]\n# 题8\n---\n**题目**\n$n$个物品放到$m$个盒子中，求证至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。\n**解答**\n假设所有的盒子物品数都小于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，那么总物品数$S$满足\n\n\\\\[\nS \\le m(\\left\\lceil {\\frac{n}{m}} \\right\\rceil  - 1)\n\\\\]\n令$n = qm + r,0 \\le r < m$，那么有\n\n\\\\[\nS \\le m(\\left\\lceil {q + \\frac{r}{m}} \\right\\rceil  - 1) = qm - m + m\\left\\lceil {\\frac{r}{m}} \\right\\rceil\n\\\\]\n如果$r=0$，那么有\n\n\\\\[\nS \\le qm - m < n\n\\\\]\n如果$r>0$，那么有\n\n\\\\[\nS \\le qm < n\n\\\\]\n这与$S=n$矛盾！所以至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$。\n\n假设所有的盒子物品数都大于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$，那么总物品数$S$满足\n\n\\\\[\nS \\ge m(\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + 1)\n\\\\]\n令$n = qm + r,0 \\le r < m$，那么有\n\n\\\\[\nS \\ge m(\\left\\lfloor {q + \\frac{r}{m}} \\right\\rfloor  + 1) = qm + m + m\\left\\lfloor {\\frac{r}{m}} \\right\\rfloor  = qm + m > qm + r = n\n\\\\]\n这与$S=n$矛盾！所以至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。","slug":"concrete-math-hw3","published":1,"updated":"2019-07-20T04:06:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ga007d7swegfgrgdi7","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=29534449&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"题3\"><a href=\"#题3\" class=\"headerlink\" title=\"题3\"></a>题3</h1><hr>\n<p><strong>题目</strong><br>求$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor $的充要条件。<br><strong>解答</strong><br>因为</p>\n<p>\\[<br>x = \\left\\lfloor x \\right\\rfloor  + \\{ x\\}<br>\\]<br>所以</p>\n<p>\\[<br>\\left\\lfloor {nx} \\right\\rfloor  = \\left\\lfloor {n(\\left\\lfloor x \\right\\rfloor  + \\{ x\\} )} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {n\\{ x\\} } \\right\\rfloor<br>\\]<br>要使得$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor$，就必须有</p>\n<p>\\[<br>\\left\\lfloor {n\\{ x\\} } \\right\\rfloor  = 0<br>\\]<br>所以</p>\n<p>\\[<br>n\\{ x\\}  &lt; 1<br>\\]<br>即</p>\n<p>\\[<br>\\{ x\\}  &lt; \\frac{1}{n}<br>\\]</p>\n<h1 id=\"题7\"><a href=\"#题7\" class=\"headerlink\" title=\"题7\"></a>题7</h1><hr>\n<p><strong>题目</strong><br>求下列递推式<br>\\[\\begin{array}{l}{X_n} = n,0 \\le n &lt; m\\\\{X_n} = {X_{n - m}} + 1,n \\ge m\\end{array}\\]<br><strong>解答</strong><br>因为</p>\n<p>\\[<br>n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m = n\\bmod m &lt; m<br>\\]<br>所以</p>\n<p>\\[<br>\\begin{array}{l}{X_n} = {X_{n - m}} + 1 = {X_{n - 2m}} + 2 =  \\cdots \\\\ = {X_{n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m}} + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  = n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\\\ = n\\,\\bmod \\,m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\end{array}<br>\\]</p>\n<h1 id=\"题8\"><a href=\"#题8\" class=\"headerlink\" title=\"题8\"></a>题8</h1><hr>\n<p><strong>题目</strong><br>$n$个物品放到$m$个盒子中，求证至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。<br><strong>解答</strong><br>假设所有的盒子物品数都小于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，那么总物品数$S$满足</p>\n<p>\\[<br>S \\le m(\\left\\lceil {\\frac{n}{m}} \\right\\rceil  - 1)<br>\\]<br>令$n = qm + r,0 \\le r &lt; m$，那么有</p>\n<p>\\[<br>S \\le m(\\left\\lceil {q + \\frac{r}{m}} \\right\\rceil  - 1) = qm - m + m\\left\\lceil {\\frac{r}{m}} \\right\\rceil<br>\\]<br>如果$r=0$，那么有</p>\n<p>\\[<br>S \\le qm - m &lt; n<br>\\]<br>如果$r&gt;0$，那么有</p>\n<p>\\[<br>S \\le qm &lt; n<br>\\]<br>这与$S=n$矛盾！所以至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$。</p>\n<p>假设所有的盒子物品数都大于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$，那么总物品数$S$满足</p>\n<p>\\[<br>S \\ge m(\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + 1)<br>\\]<br>令$n = qm + r,0 \\le r &lt; m$，那么有</p>\n<p>\\[<br>S \\ge m(\\left\\lfloor {q + \\frac{r}{m}} \\right\\rfloor  + 1) = qm + m + m\\left\\lfloor {\\frac{r}{m}} \\right\\rfloor  = qm + m &gt; qm + r = n<br>\\]<br>这与$S=n$矛盾！所以至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=29534449&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"题3\"><a href=\"#题3\" class=\"headerlink\" title=\"题3\"></a>题3</h1><hr>\n<p><strong>题目</strong><br>求$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor $的充要条件。<br><strong>解答</strong><br>因为</p>\n<p>\\[<br>x = \\left\\lfloor x \\right\\rfloor  + \\{ x\\}<br>\\]<br>所以</p>\n<p>\\[<br>\\left\\lfloor {nx} \\right\\rfloor  = \\left\\lfloor {n(\\left\\lfloor x \\right\\rfloor  + \\{ x\\} )} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor  + \\left\\lfloor {n\\{ x\\} } \\right\\rfloor<br>\\]<br>要使得$\\left\\lfloor {nx} \\right\\rfloor  = n\\left\\lfloor x \\right\\rfloor$，就必须有</p>\n<p>\\[<br>\\left\\lfloor {n\\{ x\\} } \\right\\rfloor  = 0<br>\\]<br>所以</p>\n<p>\\[<br>n\\{ x\\}  &lt; 1<br>\\]<br>即</p>\n<p>\\[<br>\\{ x\\}  &lt; \\frac{1}{n}<br>\\]</p>\n<h1 id=\"题7\"><a href=\"#题7\" class=\"headerlink\" title=\"题7\"></a>题7</h1><hr>\n<p><strong>题目</strong><br>求下列递推式<br>\\[\\begin{array}{l}{X_n} = n,0 \\le n &lt; m\\\\{X_n} = {X_{n - m}} + 1,n \\ge m\\end{array}\\]<br><strong>解答</strong><br>因为</p>\n<p>\\[<br>n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m = n\\bmod m &lt; m<br>\\]<br>所以</p>\n<p>\\[<br>\\begin{array}{l}{X_n} = {X_{n - m}} + 1 = {X_{n - 2m}} + 2 =  \\cdots \\\\ = {X_{n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m}} + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  = n - \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\\\ = n\\,\\bmod \\,m + \\left\\lfloor {\\frac{n}{m}} \\right\\rfloor \\end{array}<br>\\]</p>\n<h1 id=\"题8\"><a href=\"#题8\" class=\"headerlink\" title=\"题8\"></a>题8</h1><hr>\n<p><strong>题目</strong><br>$n$个物品放到$m$个盒子中，求证至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。<br><strong>解答</strong><br>假设所有的盒子物品数都小于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$，那么总物品数$S$满足</p>\n<p>\\[<br>S \\le m(\\left\\lceil {\\frac{n}{m}} \\right\\rceil  - 1)<br>\\]<br>令$n = qm + r,0 \\le r &lt; m$，那么有</p>\n<p>\\[<br>S \\le m(\\left\\lceil {q + \\frac{r}{m}} \\right\\rceil  - 1) = qm - m + m\\left\\lceil {\\frac{r}{m}} \\right\\rceil<br>\\]<br>如果$r=0$，那么有</p>\n<p>\\[<br>S \\le qm - m &lt; n<br>\\]<br>如果$r&gt;0$，那么有</p>\n<p>\\[<br>S \\le qm &lt; n<br>\\]<br>这与$S=n$矛盾！所以至少有一个盒子物品数大于等于$\\left\\lceil {\\frac{n}{m}} \\right\\rceil$。</p>\n<p>假设所有的盒子物品数都大于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$，那么总物品数$S$满足</p>\n<p>\\[<br>S \\ge m(\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor  + 1)<br>\\]<br>令$n = qm + r,0 \\le r &lt; m$，那么有</p>\n<p>\\[<br>S \\ge m(\\left\\lfloor {q + \\frac{r}{m}} \\right\\rfloor  + 1) = qm + m + m\\left\\lfloor {\\frac{r}{m}} \\right\\rfloor  = qm + m &gt; qm + r = n<br>\\]<br>这与$S=n$矛盾！所以至少有一个盒子物品数小于等于$\\left\\lfloor {\\frac{n}{m}} \\right\\rfloor$。</p>\n"},{"title":"具体数学-第二章作业解答","date":"2018-03-19T12:13:05.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=30569513&auto=1&height=66\"></iframe></div>\n\n这章作业提前先做掉了，不是很难，有些算着麻烦了一点，就是倒数第二题不大解释的清楚。\n\n![](1.jpg)\n![](2.jpg)\n![](3.jpg)\n![](4.jpg)\n![](5.jpg)\n![](6.jpg)\n![](7.jpg)\n![](8.jpg)","source":"_posts/concrete-math-hw2.md","raw":"---\ntitle: 具体数学-第二章作业解答\ndate: 2018-03-19 20:13:05\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=30569513&auto=1&height=66\"></iframe></div>\n\n这章作业提前先做掉了，不是很难，有些算着麻烦了一点，就是倒数第二题不大解释的清楚。\n\n![](1.jpg)\n![](2.jpg)\n![](3.jpg)\n![](4.jpg)\n![](5.jpg)\n![](6.jpg)\n![](7.jpg)\n![](8.jpg)","slug":"concrete-math-hw2","published":1,"updated":"2019-07-20T04:06:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982ge007h7swezdj48v45","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=30569513&auto=1&height=66\"></iframe></div>\n\n<p>这章作业提前先做掉了，不是很难，有些算着麻烦了一点，就是倒数第二题不大解释的清楚。</p>\n<p><img src=\"1.jpg\" alt><br><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt><br><img src=\"5.jpg\" alt><br><img src=\"6.jpg\" alt><br><img src=\"7.jpg\" alt><br><img src=\"8.jpg\" alt></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=30569513&auto=1&height=66\"></iframe></div>\n\n<p>这章作业提前先做掉了，不是很难，有些算着麻烦了一点，就是倒数第二题不大解释的清楚。</p>\n<p><img src=\"1.jpg\" alt><br><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt><br><img src=\"5.jpg\" alt><br><img src=\"6.jpg\" alt><br><img src=\"7.jpg\" alt><br><img src=\"8.jpg\" alt></p>\n"},{"title":"成分句法分析综述","date":"2018-09-26T04:53:10.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n> 一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。\n\n**PPT地址：**[A Summary of Constituent Parsing](https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1)\n**代码地址：**[Constituent Parsing](https://github.com/godweiyang/ConstituentParsing)\n\n# 介绍\n---\n成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：\n![](syntactic_tree.png)\n成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。\n\n传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。\n\nSocher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。\n\n不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。\n\n# 基于转移系统的模型\n---\n基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。\n\n在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。\n\n基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。\n\n## 自底向上的转移系统\n自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。\n\n在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：\n![](binarized_syntactic_tree.png)\n\n自底向上转移系统的action形式化定义如下：\n![](bottom_up.jpg)\n其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。\n\n注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。\n\n对于上面的句法树，用自底向上系统分析的过程如下图所示：\n![](bottom_up_example.jpg)\n自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。\n\n但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。\n\n另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。\n\n## 自顶向下的转移系统\n自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。\n\n自顶向下转移系统的action形式化定义如下：\n![](top_down.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。\n\n对于上面的句法树，用自顶向下系统分析的过程如下图所示：\n![](top_down_example.jpg)\n\n自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。\n\n## In-order转移系统\nZhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。\n\nin-order转移系统的action形式化定义如下：\n![](in_order.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。\n\n对于上面的句法树，用in-order系统分析的过程如下图所示：\n![](in_order_example.jpg)\n\nin-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。\n\nin-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。\n\n**模型变体：**in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。\n\n## 模型框架\n上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。\n\n当前状态的表示通过下图所示的三个LSTM得到：\n![](transition_framework.png)\n其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。\n\n另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：\n![](composition.png)\n\n## 系统改进\n**基于span的自底向上的转移系统**\n黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：\n![](span_based_bottom_up.png)\n可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。\n\n论文里给出了一个具体的例子：\n![](span_based_bottom_up_tree.png)\n![](span_based_bottom_up_example.png)\n\n文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。\n\n例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。\n\n而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。\n\n**生成模型RNNG**\nRNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。\n\n正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。\n\n而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。\n\n令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\\\]\n然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：\n\\\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\\\]\n那么$p(x)$就可以近似表示为：\n\\\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\\\]\n\n**Dynamic Oracle**\n文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。\n\n解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。\n\n这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。\n\n首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：\n![](structural_oracle.png)\n也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。\n\n然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:\n![](label_oracle.png)\n而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：[深入理解成分句法分析中的Dynamic Oracle](https://godweiyang.com/2018/08/03/dynamic-oracles/)。\n\n但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。\n\n**Policy Gradient**\n序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。\n\nDynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。\n\n首先用风险函数（risk objective）代替原来的损失函数：\n\\\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\\\]\n其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。\n\n但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。\n\n但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：\n\\\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\\\]\n这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。\n至于$\\log$项是怎么来的，可以如下推导得来：\n\\\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\\\]\n\n\n# 编码解码模型\n---\n上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。\n\n模型的大致框架如下图所示：\n![](chart_based.png)\n首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。\n\n## 编码器（Encoder）\n编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。\n\n编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：\n![](bi_lstm.jpg)\n例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。\n\n另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。\n\n大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。\n\n下图就是self-attention的框架图：\n![](single_attention.jpg)\n形式化定义就是：\n\\\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\\\]\n其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。\n\n而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：\n\\\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\\\]\n注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。\n\n最终的编码器模型如下图所示：\n![](multi_headed_attention.jpg)\n也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。\n\n至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。\n\n## 解码器（Decoder）\n得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。\n**基于动态规划解码的模型**\n这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。\n\n定义一棵句法树的分数为所有子结点的label分数之和，即：\n\\\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\\\]\n其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。\n\n要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：\n\\\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]\\_l\\\\]\n而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：\n\\\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\\\]\n\n最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：\n\\\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\\\]\n\n**基于自顶向下贪心解码的模型**\n基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：\n\\\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\\\]\n而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。\n\n# Sequence to Sequence模型\n---\n上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。\n\n大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。\n\n## 树结构转化为括号序列\n这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。\n\n但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。\n\n## 句法距离（Syntactic Distance）\n这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。\n![](syntactic_distance_example.jpg)\n首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。\n\n拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。\n\n预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。\n\n而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。\n\n# 总结\n---\n## 实验结果\n下面列出了成分句法分析领域目前为止最好的一些结果：\n![](results.jpg)\n最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。\n\n## 心得体会\n虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。\n\n目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。\n\n前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！\n\n# 参考文献\n---\n[ACL15] Transition-based Neural Constituent Parsing\n[NAACL16] Recurrent Neural Network Grammars\n[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles\n[TACL17] In-Order Transition-based Constituent Parsing\n[EMNLP17] Effective Inference for Generative Neural Parsing\n[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing\n[ACL17] A Minimal Span-Based Neural Constituency Parser\n[ACL18] Constituency Parsing with a Self-Attentive Encoder\n[EMNLP16] Parsing as Language Modeling\n[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance\n","source":"_posts/constituent-parsing-summary.md","raw":"---\ntitle: 成分句法分析综述\ndate: 2018-09-26 12:53:10\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NLP\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n> 一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。\n\n**PPT地址：**[A Summary of Constituent Parsing](https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1)\n**代码地址：**[Constituent Parsing](https://github.com/godweiyang/ConstituentParsing)\n\n# 介绍\n---\n成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：\n![](syntactic_tree.png)\n成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。\n\n传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。\n\nSocher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。\n\n不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。\n\n# 基于转移系统的模型\n---\n基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。\n\n在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。\n\n基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。\n\n## 自底向上的转移系统\n自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。\n\n在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：\n![](binarized_syntactic_tree.png)\n\n自底向上转移系统的action形式化定义如下：\n![](bottom_up.jpg)\n其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。\n\n注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。\n\n对于上面的句法树，用自底向上系统分析的过程如下图所示：\n![](bottom_up_example.jpg)\n自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。\n\n但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。\n\n另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。\n\n## 自顶向下的转移系统\n自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。\n\n自顶向下转移系统的action形式化定义如下：\n![](top_down.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。\n\n对于上面的句法树，用自顶向下系统分析的过程如下图所示：\n![](top_down_example.jpg)\n\n自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。\n\n## In-order转移系统\nZhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。\n\nin-order转移系统的action形式化定义如下：\n![](in_order.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。\n\n对于上面的句法树，用in-order系统分析的过程如下图所示：\n![](in_order_example.jpg)\n\nin-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。\n\nin-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。\n\n**模型变体：**in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。\n\n## 模型框架\n上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。\n\n当前状态的表示通过下图所示的三个LSTM得到：\n![](transition_framework.png)\n其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。\n\n另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：\n![](composition.png)\n\n## 系统改进\n**基于span的自底向上的转移系统**\n黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：\n![](span_based_bottom_up.png)\n可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。\n\n论文里给出了一个具体的例子：\n![](span_based_bottom_up_tree.png)\n![](span_based_bottom_up_example.png)\n\n文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。\n\n例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。\n\n而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。\n\n**生成模型RNNG**\nRNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。\n\n正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。\n\n而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。\n\n令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\\\]\n然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：\n\\\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\\\]\n那么$p(x)$就可以近似表示为：\n\\\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\\\]\n\n**Dynamic Oracle**\n文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。\n\n解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。\n\n这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。\n\n首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：\n![](structural_oracle.png)\n也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。\n\n然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:\n![](label_oracle.png)\n而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：[深入理解成分句法分析中的Dynamic Oracle](https://godweiyang.com/2018/08/03/dynamic-oracles/)。\n\n但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。\n\n**Policy Gradient**\n序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。\n\nDynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。\n\n首先用风险函数（risk objective）代替原来的损失函数：\n\\\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\\\]\n其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。\n\n但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。\n\n但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：\n\\\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\\\]\n这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。\n至于$\\log$项是怎么来的，可以如下推导得来：\n\\\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\\\]\n\n\n# 编码解码模型\n---\n上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。\n\n模型的大致框架如下图所示：\n![](chart_based.png)\n首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。\n\n## 编码器（Encoder）\n编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。\n\n编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：\n![](bi_lstm.jpg)\n例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。\n\n另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。\n\n大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。\n\n下图就是self-attention的框架图：\n![](single_attention.jpg)\n形式化定义就是：\n\\\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\\\]\n其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。\n\n而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：\n\\\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\\\]\n注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。\n\n最终的编码器模型如下图所示：\n![](multi_headed_attention.jpg)\n也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。\n\n至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。\n\n## 解码器（Decoder）\n得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。\n**基于动态规划解码的模型**\n这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。\n\n定义一棵句法树的分数为所有子结点的label分数之和，即：\n\\\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\\\]\n其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。\n\n要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：\n\\\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]\\_l\\\\]\n而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：\n\\\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\\\]\n\n最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：\n\\\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\\\]\n\n**基于自顶向下贪心解码的模型**\n基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：\n\\\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\\\]\n而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。\n\n# Sequence to Sequence模型\n---\n上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。\n\n大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。\n\n## 树结构转化为括号序列\n这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。\n\n但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。\n\n## 句法距离（Syntactic Distance）\n这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。\n![](syntactic_distance_example.jpg)\n首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。\n\n拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。\n\n预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。\n\n而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。\n\n# 总结\n---\n## 实验结果\n下面列出了成分句法分析领域目前为止最好的一些结果：\n![](results.jpg)\n最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。\n\n## 心得体会\n虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。\n\n目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。\n\n前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！\n\n# 参考文献\n---\n[ACL15] Transition-based Neural Constituent Parsing\n[NAACL16] Recurrent Neural Network Grammars\n[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles\n[TACL17] In-Order Transition-based Constituent Parsing\n[EMNLP17] Effective Inference for Generative Neural Parsing\n[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing\n[ACL17] A Minimal Span-Based Neural Constituency Parser\n[ACL18] Constituency Parsing with a Self-Attentive Encoder\n[EMNLP16] Parsing as Language Modeling\n[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance\n","slug":"constituent-parsing-summary","published":1,"updated":"2019-07-20T04:07:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982gk007k7swe5o6uu6r4","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。</p>\n</blockquote>\n<p><strong>PPT地址：</strong><a href=\"https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1\" target=\"_blank\" rel=\"noopener\">A Summary of Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/godweiyang/ConstituentParsing\" target=\"_blank\" rel=\"noopener\">Constituent Parsing</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：<br><img src=\"syntactic_tree.png\" alt><br>成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。</p>\n<p>传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。</p>\n<p>Socher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。</p>\n<p>不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。</p>\n<h1 id=\"基于转移系统的模型\"><a href=\"#基于转移系统的模型\" class=\"headerlink\" title=\"基于转移系统的模型\"></a>基于转移系统的模型</h1><hr>\n<p>基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。</p>\n<p>在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。</p>\n<p>基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。</p>\n<h2 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h2><p>自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。</p>\n<p>在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：<br><img src=\"binarized_syntactic_tree.png\" alt></p>\n<p>自底向上转移系统的action形式化定义如下：<br><img src=\"bottom_up.jpg\" alt><br>其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。</p>\n<p>注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。</p>\n<p>对于上面的句法树，用自底向上系统分析的过程如下图所示：<br><img src=\"bottom_up_example.jpg\" alt><br>自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。</p>\n<p>但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。</p>\n<p>另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。</p>\n<h2 id=\"自顶向下的转移系统\"><a href=\"#自顶向下的转移系统\" class=\"headerlink\" title=\"自顶向下的转移系统\"></a>自顶向下的转移系统</h2><p>自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。</p>\n<p>自顶向下转移系统的action形式化定义如下：<br><img src=\"top_down.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。</p>\n<p>对于上面的句法树，用自顶向下系统分析的过程如下图所示：<br><img src=\"top_down_example.jpg\" alt></p>\n<p>自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。</p>\n<h2 id=\"In-order转移系统\"><a href=\"#In-order转移系统\" class=\"headerlink\" title=\"In-order转移系统\"></a>In-order转移系统</h2><p>Zhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。</p>\n<p>in-order转移系统的action形式化定义如下：<br><img src=\"in_order.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。</p>\n<p>对于上面的句法树，用in-order系统分析的过程如下图所示：<br><img src=\"in_order_example.jpg\" alt></p>\n<p>in-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。</p>\n<p>in-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。</p>\n<p><strong>模型变体：</strong>in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。</p>\n<h2 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h2><p>上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。</p>\n<p>当前状态的表示通过下图所示的三个LSTM得到：<br><img src=\"transition_framework.png\" alt><br>其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。</p>\n<p>另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：<br><img src=\"composition.png\" alt></p>\n<h2 id=\"系统改进\"><a href=\"#系统改进\" class=\"headerlink\" title=\"系统改进\"></a>系统改进</h2><p><strong>基于span的自底向上的转移系统</strong><br>黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：<br><img src=\"span_based_bottom_up.png\" alt><br>可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。</p>\n<p>论文里给出了一个具体的例子：<br><img src=\"span_based_bottom_up_tree.png\" alt><br><img src=\"span_based_bottom_up_example.png\" alt></p>\n<p>文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。</p>\n<p>例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。</p>\n<p>而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。</p>\n<p><strong>生成模型RNNG</strong><br>RNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。</p>\n<p>正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。</p>\n<p>而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。</p>\n<p>令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\]<br>然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：<br>\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\]<br>那么$p(x)$就可以近似表示为：<br>\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\]</p>\n<p><strong>Dynamic Oracle</strong><br>文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。</p>\n<p>解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。</p>\n<p>这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。</p>\n<p>首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：<br><img src=\"structural_oracle.png\" alt><br>也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。</p>\n<p>然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:<br><img src=\"label_oracle.png\" alt><br>而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\">深入理解成分句法分析中的Dynamic Oracle</a>。</p>\n<p>但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。</p>\n<p><strong>Policy Gradient</strong><br>序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。</p>\n<p>Dynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。</p>\n<p>首先用风险函数（risk objective）代替原来的损失函数：<br>\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\]<br>其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。</p>\n<p>但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。</p>\n<p>但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：<br>\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\]<br>这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。<br>至于$\\log$项是怎么来的，可以如下推导得来：<br>\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\]</p>\n<h1 id=\"编码解码模型\"><a href=\"#编码解码模型\" class=\"headerlink\" title=\"编码解码模型\"></a>编码解码模型</h1><hr>\n<p>上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。</p>\n<p>模型的大致框架如下图所示：<br><img src=\"chart_based.png\" alt><br>首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。</p>\n<h2 id=\"编码器（Encoder）\"><a href=\"#编码器（Encoder）\" class=\"headerlink\" title=\"编码器（Encoder）\"></a>编码器（Encoder）</h2><p>编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。</p>\n<p>编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：<br><img src=\"bi_lstm.jpg\" alt><br>例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。</p>\n<p>另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。</p>\n<p>大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。</p>\n<p>下图就是self-attention的框架图：<br><img src=\"single_attention.jpg\" alt><br>形式化定义就是：<br>\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\]<br>其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。</p>\n<p>而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：<br>\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\]<br>注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。</p>\n<p>最终的编码器模型如下图所示：<br><img src=\"multi_headed_attention.jpg\" alt><br>也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。</p>\n<p>至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。</p>\n<h2 id=\"解码器（Decoder）\"><a href=\"#解码器（Decoder）\" class=\"headerlink\" title=\"解码器（Decoder）\"></a>解码器（Decoder）</h2><p>得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。<br><strong>基于动态规划解码的模型</strong><br>这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。</p>\n<p>定义一棵句法树的分数为所有子结点的label分数之和，即：<br>\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\]<br>其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。</p>\n<p>要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：<br>\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]_l\\]<br>而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：<br>\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\]</p>\n<p>最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：<br>\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\]</p>\n<p><strong>基于自顶向下贪心解码的模型</strong><br>基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：<br>\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\]<br>而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。</p>\n<h1 id=\"Sequence-to-Sequence模型\"><a href=\"#Sequence-to-Sequence模型\" class=\"headerlink\" title=\"Sequence to Sequence模型\"></a>Sequence to Sequence模型</h1><hr>\n<p>上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。</p>\n<p>大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。</p>\n<h2 id=\"树结构转化为括号序列\"><a href=\"#树结构转化为括号序列\" class=\"headerlink\" title=\"树结构转化为括号序列\"></a>树结构转化为括号序列</h2><p>这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。</p>\n<p>但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。</p>\n<h2 id=\"句法距离（Syntactic-Distance）\"><a href=\"#句法距离（Syntactic-Distance）\" class=\"headerlink\" title=\"句法距离（Syntactic Distance）\"></a>句法距离（Syntactic Distance）</h2><p>这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。<br><img src=\"syntactic_distance_example.jpg\" alt><br>首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。</p>\n<p>拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。</p>\n<p>预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。</p>\n<p>而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>下面列出了成分句法分析领域目前为止最好的一些结果：<br><img src=\"results.jpg\" alt><br>最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。</p>\n<h2 id=\"心得体会\"><a href=\"#心得体会\" class=\"headerlink\" title=\"心得体会\"></a>心得体会</h2><p>虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。</p>\n<p>目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。</p>\n<p>前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><hr>\n<p>[ACL15] Transition-based Neural Constituent Parsing<br>[NAACL16] Recurrent Neural Network Grammars<br>[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles<br>[TACL17] In-Order Transition-based Constituent Parsing<br>[EMNLP17] Effective Inference for Generative Neural Parsing<br>[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing<br>[ACL17] A Minimal Span-Based Neural Constituency Parser<br>[ACL18] Constituency Parsing with a Self-Attentive Encoder<br>[EMNLP16] Parsing as Language Modeling<br>[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。</p>\n</blockquote>\n<p><strong>PPT地址：</strong><a href=\"https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1\" target=\"_blank\" rel=\"noopener\">A Summary of Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/godweiyang/ConstituentParsing\" target=\"_blank\" rel=\"noopener\">Constituent Parsing</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：<br><img src=\"syntactic_tree.png\" alt><br>成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。</p>\n<p>传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。</p>\n<p>Socher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。</p>\n<p>不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。</p>\n<h1 id=\"基于转移系统的模型\"><a href=\"#基于转移系统的模型\" class=\"headerlink\" title=\"基于转移系统的模型\"></a>基于转移系统的模型</h1><hr>\n<p>基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。</p>\n<p>在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。</p>\n<p>基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。</p>\n<h2 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h2><p>自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。</p>\n<p>在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：<br><img src=\"binarized_syntactic_tree.png\" alt></p>\n<p>自底向上转移系统的action形式化定义如下：<br><img src=\"bottom_up.jpg\" alt><br>其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。</p>\n<p>注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。</p>\n<p>对于上面的句法树，用自底向上系统分析的过程如下图所示：<br><img src=\"bottom_up_example.jpg\" alt><br>自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。</p>\n<p>但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。</p>\n<p>另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。</p>\n<h2 id=\"自顶向下的转移系统\"><a href=\"#自顶向下的转移系统\" class=\"headerlink\" title=\"自顶向下的转移系统\"></a>自顶向下的转移系统</h2><p>自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。</p>\n<p>自顶向下转移系统的action形式化定义如下：<br><img src=\"top_down.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。</p>\n<p>对于上面的句法树，用自顶向下系统分析的过程如下图所示：<br><img src=\"top_down_example.jpg\" alt></p>\n<p>自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。</p>\n<h2 id=\"In-order转移系统\"><a href=\"#In-order转移系统\" class=\"headerlink\" title=\"In-order转移系统\"></a>In-order转移系统</h2><p>Zhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。</p>\n<p>in-order转移系统的action形式化定义如下：<br><img src=\"in_order.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。</p>\n<p>对于上面的句法树，用in-order系统分析的过程如下图所示：<br><img src=\"in_order_example.jpg\" alt></p>\n<p>in-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。</p>\n<p>in-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。</p>\n<p><strong>模型变体：</strong>in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。</p>\n<h2 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h2><p>上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。</p>\n<p>当前状态的表示通过下图所示的三个LSTM得到：<br><img src=\"transition_framework.png\" alt><br>其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。</p>\n<p>另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：<br><img src=\"composition.png\" alt></p>\n<h2 id=\"系统改进\"><a href=\"#系统改进\" class=\"headerlink\" title=\"系统改进\"></a>系统改进</h2><p><strong>基于span的自底向上的转移系统</strong><br>黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：<br><img src=\"span_based_bottom_up.png\" alt><br>可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。</p>\n<p>论文里给出了一个具体的例子：<br><img src=\"span_based_bottom_up_tree.png\" alt><br><img src=\"span_based_bottom_up_example.png\" alt></p>\n<p>文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。</p>\n<p>例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。</p>\n<p>而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。</p>\n<p><strong>生成模型RNNG</strong><br>RNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。</p>\n<p>正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。</p>\n<p>而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。</p>\n<p>令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\]<br>然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：<br>\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\]<br>那么$p(x)$就可以近似表示为：<br>\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\]</p>\n<p><strong>Dynamic Oracle</strong><br>文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。</p>\n<p>解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。</p>\n<p>这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。</p>\n<p>首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：<br><img src=\"structural_oracle.png\" alt><br>也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。</p>\n<p>然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:<br><img src=\"label_oracle.png\" alt><br>而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\">深入理解成分句法分析中的Dynamic Oracle</a>。</p>\n<p>但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。</p>\n<p><strong>Policy Gradient</strong><br>序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。</p>\n<p>Dynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。</p>\n<p>首先用风险函数（risk objective）代替原来的损失函数：<br>\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\]<br>其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。</p>\n<p>但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。</p>\n<p>但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：<br>\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\]<br>这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。<br>至于$\\log$项是怎么来的，可以如下推导得来：<br>\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\]</p>\n<h1 id=\"编码解码模型\"><a href=\"#编码解码模型\" class=\"headerlink\" title=\"编码解码模型\"></a>编码解码模型</h1><hr>\n<p>上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。</p>\n<p>模型的大致框架如下图所示：<br><img src=\"chart_based.png\" alt><br>首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。</p>\n<h2 id=\"编码器（Encoder）\"><a href=\"#编码器（Encoder）\" class=\"headerlink\" title=\"编码器（Encoder）\"></a>编码器（Encoder）</h2><p>编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。</p>\n<p>编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：<br><img src=\"bi_lstm.jpg\" alt><br>例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。</p>\n<p>另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。</p>\n<p>大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。</p>\n<p>下图就是self-attention的框架图：<br><img src=\"single_attention.jpg\" alt><br>形式化定义就是：<br>\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\]<br>其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。</p>\n<p>而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：<br>\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\]<br>注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。</p>\n<p>最终的编码器模型如下图所示：<br><img src=\"multi_headed_attention.jpg\" alt><br>也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。</p>\n<p>至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。</p>\n<h2 id=\"解码器（Decoder）\"><a href=\"#解码器（Decoder）\" class=\"headerlink\" title=\"解码器（Decoder）\"></a>解码器（Decoder）</h2><p>得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。<br><strong>基于动态规划解码的模型</strong><br>这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。</p>\n<p>定义一棵句法树的分数为所有子结点的label分数之和，即：<br>\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\]<br>其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。</p>\n<p>要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：<br>\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]_l\\]<br>而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：<br>\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\]</p>\n<p>最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：<br>\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\]</p>\n<p><strong>基于自顶向下贪心解码的模型</strong><br>基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：<br>\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\]<br>而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。</p>\n<h1 id=\"Sequence-to-Sequence模型\"><a href=\"#Sequence-to-Sequence模型\" class=\"headerlink\" title=\"Sequence to Sequence模型\"></a>Sequence to Sequence模型</h1><hr>\n<p>上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。</p>\n<p>大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。</p>\n<h2 id=\"树结构转化为括号序列\"><a href=\"#树结构转化为括号序列\" class=\"headerlink\" title=\"树结构转化为括号序列\"></a>树结构转化为括号序列</h2><p>这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。</p>\n<p>但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。</p>\n<h2 id=\"句法距离（Syntactic-Distance）\"><a href=\"#句法距离（Syntactic-Distance）\" class=\"headerlink\" title=\"句法距离（Syntactic Distance）\"></a>句法距离（Syntactic Distance）</h2><p>这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。<br><img src=\"syntactic_distance_example.jpg\" alt><br>首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。</p>\n<p>拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。</p>\n<p>预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。</p>\n<p>而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>下面列出了成分句法分析领域目前为止最好的一些结果：<br><img src=\"results.jpg\" alt><br>最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。</p>\n<h2 id=\"心得体会\"><a href=\"#心得体会\" class=\"headerlink\" title=\"心得体会\"></a>心得体会</h2><p>虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。</p>\n<p>目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。</p>\n<p>前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><hr>\n<p>[ACL15] Transition-based Neural Constituent Parsing<br>[NAACL16] Recurrent Neural Network Grammars<br>[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles<br>[TACL17] In-Order Transition-based Constituent Parsing<br>[EMNLP17] Effective Inference for Generative Neural Parsing<br>[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing<br>[ACL17] A Minimal Span-Based Neural Constituency Parser<br>[ACL18] Constituency Parsing with a Self-Attentive Encoder<br>[EMNLP16] Parsing as Language Modeling<br>[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</p>\n"},{"title":"具体数学-第五章作业解答","date":"2018-06-01T08:20:51.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=460578140&auto=1&height=66\"></iframe></div>\n\n# 4.\n---\n**题目：**\n通过上指标翻转计算出$\\left( {\\begin{array}{\\*{20}{c}}{ - 1}\\\\k\\end{array}} \\right)$。\n**解答：**\n如果$k \\ge 0$，那么\n\\\\[\n\\left( {\\begin{array}{\\*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{\\*{20}{c}}{k - ( - 1) - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{\\*{20}{c}}k\\\\k\\end{array}} \\right) = {( - 1)^k}\n\\\\]\n如果$k<0$，那么\n\\\\[\n\\left( {\\begin{array}{\\*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = 0\n\\\\]\n\n# 46.\n---\n**题目：**\n求出下列和式的闭形式解，其中$n$是正整数。\n\\\\[\n\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}}\n\\\\]\n**解答：**\n由公式$(5.69)$可得\n\\\\[\n{\\mathcal B_{ - 1}}(z) = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - z)}^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}}{z^k}}\n\\\\]\n\\\\[\n{\\mathcal{B}_{ - 1}}( - z) = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { {z^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { - 1}}{ {2k - 1}}{z^k}}\n\\\\]\n两式相乘得到${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$，其中$z^{2n}$项的系数恰好就是\n\\\\[\n\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}} \\cdot \\left( {\\begin{array}{\\*{20}{c}}{2(2n - k) - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { - 1}}{ {2(2n - k) - 1}}} \\\\ =  - \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}} \\end{array}\n\\\\]\n所以题目所求的和式的闭形式解就是${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数。\n由公式$(5.69)$还可以得到\n\\\\[\n{\\mathcal{B}_{ - 1}}(z) = \\frac{ {1 + \\sqrt {1 + 4z} }}{2}\n\\\\]\n\\\\[\n{\\mathcal{B}_{ - 1}}( - z) = \\frac{ {1 + \\sqrt {1 - 4z} }}{2}\n\\\\]\n所以\n\\\\[\n(2{\\mathcal{B}_{ - 1}}(z) - 1)(2{\\mathcal{B}_{ - 1}}( - z) - 1) = \\sqrt {1 - 16{z^2}} \n\\\\]\n展开化简可以得到\n\\\\[\n{\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z) = \\frac{1}{4}\\sqrt {1 - 16{z^2}}  + \\frac{1}{2}{\\mathcal{B}_{ - 1}}(z) + \\frac{1}{2}{\\mathcal{B}_{ - 1}}( - z) - 1\n\\\\]\n而\n\\\\[\n\\begin{array}{l}{(1 - 16{z^2})^{1/2}} = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{\\*{20}{c}}{ - 1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\frac{ { { {( - 1)}^k}}}{ { {4^k}}}\\left( {\\begin{array}{\\*{20}{c}}{2k}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{\\*{20}{c}}{2k}\\\\k\\end{array}} \\right){4^k}{z^{2k}}} \\end{array}\n\\\\]\n所以题目答案即${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数为\n\\\\[\n\\left( {\\begin{array}{\\*{20}{c}}{2n}\\\\n\\end{array}} \\right)\\frac{ { {4^{n - 1}}}}{ {2n - 1}} + \\left( {\\begin{array}{\\*{20}{c}}{4n - 1}\\\\{2n}\\end{array}} \\right)\\frac{1}{ {4n - 1}}\n\\\\]\n\n# 64.\n---\n**题目：**\n计算\n\\\\[\n\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil } \n\\\\]\n**解答：**\n\\\\[\n\\begin{array}{l}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil } \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\left( {\\begin{array}{\\*{20}{c}}n\\\\{2k}\\end{array}} \\right) + \\left( {\\begin{array}{\\*{20}{c}}n\\\\{2k + 1}\\end{array}} \\right)} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}{n + 1}\\\\{2k + 1}\\end{array}} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\frac{2}{ {n + 2}}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}{n + 2}\\\\{2k + 2}\\end{array}} \\right)} \\\\ = \\frac{ { {2^{n + 2}} - 2}}{ {n + 2}}\\end{array}\n\\\\]\n\n# 65.\n---\n**题目：**\n证明\n\\\\[\n\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}  = n\n\\\\]\n**解答：**\n等号左边可以写为\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}\n\\\\]\n替换$k$为$n-1-k$，得到\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}  \n\\\\]\n即证\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}  = n\n\\\\]\n等式两边同时乘以$n^{n-1}$，即证\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!}  = {n^n}\n\\\\]\n等式左边等于\n\\\\[\n\\begin{array}{l}\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\frac{ { {n^k}(n - k)}}{ {k!}}} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\frac{ { {n^{k + 1}}}}{ {k!}} - \\frac{ { {n^k}}}{ {(k - 1)!}}} \\right)} \\\\ = (n - 1)!\\frac{ { {n^n}}}{ {(n - 1)!}}\\\\ = {n^n}\\end{array}\n\\\\]\n得证。","source":"_posts/concrete-math-hw5.md","raw":"---\ntitle: 具体数学-第五章作业解答\ndate: 2018-06-01 16:20:51\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 具体数学\ncategories:\n- 数学\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=460578140&auto=1&height=66\"></iframe></div>\n\n# 4.\n---\n**题目：**\n通过上指标翻转计算出$\\left( {\\begin{array}{\\*{20}{c}}{ - 1}\\\\k\\end{array}} \\right)$。\n**解答：**\n如果$k \\ge 0$，那么\n\\\\[\n\\left( {\\begin{array}{\\*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{\\*{20}{c}}{k - ( - 1) - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{\\*{20}{c}}k\\\\k\\end{array}} \\right) = {( - 1)^k}\n\\\\]\n如果$k<0$，那么\n\\\\[\n\\left( {\\begin{array}{\\*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = 0\n\\\\]\n\n# 46.\n---\n**题目：**\n求出下列和式的闭形式解，其中$n$是正整数。\n\\\\[\n\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}}\n\\\\]\n**解答：**\n由公式$(5.69)$可得\n\\\\[\n{\\mathcal B_{ - 1}}(z) = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - z)}^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}}{z^k}}\n\\\\]\n\\\\[\n{\\mathcal{B}_{ - 1}}( - z) = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { {z^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { - 1}}{ {2k - 1}}{z^k}}\n\\\\]\n两式相乘得到${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$，其中$z^{2n}$项的系数恰好就是\n\\\\[\n\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}} \\cdot \\left( {\\begin{array}{\\*{20}{c}}{2(2n - k) - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { - 1}}{ {2(2n - k) - 1}}} \\\\ =  - \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{\\*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}} \\end{array}\n\\\\]\n所以题目所求的和式的闭形式解就是${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数。\n由公式$(5.69)$还可以得到\n\\\\[\n{\\mathcal{B}_{ - 1}}(z) = \\frac{ {1 + \\sqrt {1 + 4z} }}{2}\n\\\\]\n\\\\[\n{\\mathcal{B}_{ - 1}}( - z) = \\frac{ {1 + \\sqrt {1 - 4z} }}{2}\n\\\\]\n所以\n\\\\[\n(2{\\mathcal{B}_{ - 1}}(z) - 1)(2{\\mathcal{B}_{ - 1}}( - z) - 1) = \\sqrt {1 - 16{z^2}} \n\\\\]\n展开化简可以得到\n\\\\[\n{\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z) = \\frac{1}{4}\\sqrt {1 - 16{z^2}}  + \\frac{1}{2}{\\mathcal{B}_{ - 1}}(z) + \\frac{1}{2}{\\mathcal{B}_{ - 1}}( - z) - 1\n\\\\]\n而\n\\\\[\n\\begin{array}{l}{(1 - 16{z^2})^{1/2}} = \\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{\\*{20}{c}}{ - 1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\frac{ { { {( - 1)}^k}}}{ { {4^k}}}\\left( {\\begin{array}{\\*{20}{c}}{2k}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{\\*{20}{c}}{2k}\\\\k\\end{array}} \\right){4^k}{z^{2k}}} \\end{array}\n\\\\]\n所以题目答案即${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数为\n\\\\[\n\\left( {\\begin{array}{\\*{20}{c}}{2n}\\\\n\\end{array}} \\right)\\frac{ { {4^{n - 1}}}}{ {2n - 1}} + \\left( {\\begin{array}{\\*{20}{c}}{4n - 1}\\\\{2n}\\end{array}} \\right)\\frac{1}{ {4n - 1}}\n\\\\]\n\n# 64.\n---\n**题目：**\n计算\n\\\\[\n\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil } \n\\\\]\n**解答：**\n\\\\[\n\\begin{array}{l}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil } \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\left( {\\begin{array}{\\*{20}{c}}n\\\\{2k}\\end{array}} \\right) + \\left( {\\begin{array}{\\*{20}{c}}n\\\\{2k + 1}\\end{array}} \\right)} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}{n + 1}\\\\{2k + 1}\\end{array}} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\frac{2}{ {n + 2}}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{\\*{20}{c}}{n + 2}\\\\{2k + 2}\\end{array}} \\right)} \\\\ = \\frac{ { {2^{n + 2}} - 2}}{ {n + 2}}\\end{array}\n\\\\]\n\n# 65.\n---\n**题目：**\n证明\n\\\\[\n\\sum\\limits_k {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}  = n\n\\\\]\n**解答：**\n等号左边可以写为\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}\n\\\\]\n替换$k$为$n-1-k$，得到\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}  \n\\\\]\n即证\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}  = n\n\\\\]\n等式两边同时乘以$n^{n-1}$，即证\n\\\\[\n\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!}  = {n^n}\n\\\\]\n等式左边等于\n\\\\[\n\\begin{array}{l}\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{\\*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\frac{ { {n^k}(n - k)}}{ {k!}}} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\frac{ { {n^{k + 1}}}}{ {k!}} - \\frac{ { {n^k}}}{ {(k - 1)!}}} \\right)} \\\\ = (n - 1)!\\frac{ { {n^n}}}{ {(n - 1)!}}\\\\ = {n^n}\\end{array}\n\\\\]\n得证。","slug":"concrete-math-hw5","published":1,"updated":"2019-07-20T04:07:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982go007o7sweczp85rz8","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=460578140&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h1><hr>\n<p><strong>题目：</strong><br>通过上指标翻转计算出$\\left( {\\begin{array}{*{20}{c}}{ - 1}\\\\k\\end{array}} \\right)$。<br><strong>解答：</strong><br>如果$k \\ge 0$，那么<br>\\[<br>\\left( {\\begin{array}{*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{*{20}{c}}{k - ( - 1) - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{*{20}{c}}k\\\\k\\end{array}} \\right) = {( - 1)^k}<br>\\]<br>如果$k&lt;0$，那么<br>\\[<br>\\left( {\\begin{array}{*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = 0<br>\\]</p>\n<h1 id=\"46\"><a href=\"#46\" class=\"headerlink\" title=\"46.\"></a>46.</h1><hr>\n<p><strong>题目：</strong><br>求出下列和式的闭形式解，其中$n$是正整数。<br>\\[<br>\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}}<br>\\]<br><strong>解答：</strong><br>由公式$(5.69)$可得<br>\\[<br>{\\mathcal B_{ - 1}}(z) = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - z)}^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}}{z^k}}<br>\\]<br>\\[<br>{\\mathcal{B}_{ - 1}}( - z) = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { {z^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { - 1}}{ {2k - 1}}{z^k}}<br>\\]<br>两式相乘得到${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$，其中$z^{2n}$项的系数恰好就是<br>\\[<br>\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}} \\cdot \\left( {\\begin{array}{*{20}{c}}{2(2n - k) - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { - 1}}{ {2(2n - k) - 1}}} \\\\ =  - \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}} \\end{array}<br>\\]<br>所以题目所求的和式的闭形式解就是${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数。<br>由公式$(5.69)$还可以得到<br>\\[<br>{\\mathcal{B}_{ - 1}}(z) = \\frac{ {1 + \\sqrt {1 + 4z} }}{2}<br>\\]<br>\\[<br>{\\mathcal{B}_{ - 1}}( - z) = \\frac{ {1 + \\sqrt {1 - 4z} }}{2}<br>\\]<br>所以<br>\\[<br>(2{\\mathcal{B}_{ - 1}}(z) - 1)(2{\\mathcal{B}_{ - 1}}( - z) - 1) = \\sqrt {1 - 16{z^2}}<br>\\]<br>展开化简可以得到<br>\\[<br>{\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z) = \\frac{1}{4}\\sqrt {1 - 16{z^2}}  + \\frac{1}{2}{\\mathcal{B}_{ - 1}}(z) + \\frac{1}{2}{\\mathcal{B}_{ - 1}}( - z) - 1<br>\\]<br>而<br>\\[<br>\\begin{array}{l}{(1 - 16{z^2})^{1/2}} = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{*{20}{c}}{ - 1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\frac{ { { {( - 1)}^k}}}{ { {4^k}}}\\left( {\\begin{array}{*{20}{c}}{2k}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{*{20}{c}}{2k}\\\\k\\end{array}} \\right){4^k}{z^{2k}}} \\end{array}<br>\\]<br>所以题目答案即${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数为<br>\\[<br>\\left( {\\begin{array}{*{20}{c}}{2n}\\\\n\\end{array}} \\right)\\frac{ { {4^{n - 1}}}}{ {2n - 1}} + \\left( {\\begin{array}{*{20}{c}}{4n - 1}\\\\{2n}\\end{array}} \\right)\\frac{1}{ {4n - 1}}<br>\\]</p>\n<h1 id=\"64\"><a href=\"#64\" class=\"headerlink\" title=\"64.\"></a>64.</h1><hr>\n<p><strong>题目：</strong><br>计算<br>\\[<br>\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil }<br>\\]<br><strong>解答：</strong><br>\\[<br>\\begin{array}{l}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil } \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\left( {\\begin{array}{*{20}{c}}n\\\\{2k}\\end{array}} \\right) + \\left( {\\begin{array}{*{20}{c}}n\\\\{2k + 1}\\end{array}} \\right)} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}{n + 1}\\\\{2k + 1}\\end{array}} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\frac{2}{ {n + 2}}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}{n + 2}\\\\{2k + 2}\\end{array}} \\right)} \\\\ = \\frac{ { {2^{n + 2}} - 2}}{ {n + 2}}\\end{array}<br>\\]</p>\n<h1 id=\"65\"><a href=\"#65\" class=\"headerlink\" title=\"65.\"></a>65.</h1><hr>\n<p><strong>题目：</strong><br>证明<br>\\[<br>\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}  = n<br>\\]<br><strong>解答：</strong><br>等号左边可以写为<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}<br>\\]<br>替换$k$为$n-1-k$，得到<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}<br>\\]<br>即证<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}  = n<br>\\]<br>等式两边同时乘以$n^{n-1}$，即证<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!}  = {n^n}<br>\\]<br>等式左边等于<br>\\[<br>\\begin{array}{l}\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\frac{ { {n^k}(n - k)}}{ {k!}}} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\frac{ { {n^{k + 1}}}}{ {k!}} - \\frac{ { {n^k}}}{ {(k - 1)!}}} \\right)} \\\\ = (n - 1)!\\frac{ { {n^n}}}{ {(n - 1)!}}\\\\ = {n^n}\\end{array}<br>\\]<br>得证。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=460578140&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h1><hr>\n<p><strong>题目：</strong><br>通过上指标翻转计算出$\\left( {\\begin{array}{*{20}{c}}{ - 1}\\\\k\\end{array}} \\right)$。<br><strong>解答：</strong><br>如果$k \\ge 0$，那么<br>\\[<br>\\left( {\\begin{array}{*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{*{20}{c}}{k - ( - 1) - 1}\\\\k\\end{array}} \\right) = {( - 1)^k}\\left( {\\begin{array}{*{20}{c}}k\\\\k\\end{array}} \\right) = {( - 1)^k}<br>\\]<br>如果$k&lt;0$，那么<br>\\[<br>\\left( {\\begin{array}{*{20}{c}}{ - 1}\\\\k\\end{array}} \\right) = 0<br>\\]</p>\n<h1 id=\"46\"><a href=\"#46\" class=\"headerlink\" title=\"46.\"></a>46.</h1><hr>\n<p><strong>题目：</strong><br>求出下列和式的闭形式解，其中$n$是正整数。<br>\\[<br>\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}}<br>\\]<br><strong>解答：</strong><br>由公式$(5.69)$可得<br>\\[<br>{\\mathcal B_{ - 1}}(z) = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - z)}^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}}{z^k}}<br>\\]<br>\\[<br>{\\mathcal{B}_{ - 1}}( - z) = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { {z^k}}}{ {1 - 2k}}}  = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { - 1}}{ {2k - 1}}{z^k}}<br>\\]<br>两式相乘得到${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$，其中$z^{2n}$项的系数恰好就是<br>\\[<br>\\begin{array}{l}\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {2k - 1}} \\cdot \\left( {\\begin{array}{*{20}{c}}{2(2n - k) - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { - 1}}{ {2(2n - k) - 1}}} \\\\ =  - \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{2k - 1}\\\\k\\end{array}} \\right)\\left( {\\begin{array}{*{20}{c}}{4n - 2k - 1}\\\\{2n - k}\\end{array}} \\right)\\frac{ { { {( - 1)}^{k - 1}}}}{ {(2k - 1)(4n - 2k - 1)}}} \\end{array}<br>\\]<br>所以题目所求的和式的闭形式解就是${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数。<br>由公式$(5.69)$还可以得到<br>\\[<br>{\\mathcal{B}_{ - 1}}(z) = \\frac{ {1 + \\sqrt {1 + 4z} }}{2}<br>\\]<br>\\[<br>{\\mathcal{B}_{ - 1}}( - z) = \\frac{ {1 + \\sqrt {1 - 4z} }}{2}<br>\\]<br>所以<br>\\[<br>(2{\\mathcal{B}_{ - 1}}(z) - 1)(2{\\mathcal{B}_{ - 1}}( - z) - 1) = \\sqrt {1 - 16{z^2}}<br>\\]<br>展开化简可以得到<br>\\[<br>{\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z) = \\frac{1}{4}\\sqrt {1 - 16{z^2}}  + \\frac{1}{2}{\\mathcal{B}_{ - 1}}(z) + \\frac{1}{2}{\\mathcal{B}_{ - 1}}( - z) - 1<br>\\]<br>而<br>\\[<br>\\begin{array}{l}{(1 - 16{z^2})^{1/2}} = \\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{*{20}{c}}{ - 1/2}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\frac{ { { {( - 1)}^k}}}{ { {4^k}}}\\left( {\\begin{array}{*{20}{c}}{2k}\\\\k\\end{array}} \\right){ {( - 16)}^k}{z^{2k}}} \\\\ = \\sum\\limits_k {\\frac{1}{ {1 - 2k}}\\left( {\\begin{array}{*{20}{c}}{2k}\\\\k\\end{array}} \\right){4^k}{z^{2k}}} \\end{array}<br>\\]<br>所以题目答案即${\\mathcal{B}_{ - 1}}(z){\\mathcal{B}_{ - 1}}( - z)$的$z^{2n}$项的系数的相反数为<br>\\[<br>\\left( {\\begin{array}{*{20}{c}}{2n}\\\\n\\end{array}} \\right)\\frac{ { {4^{n - 1}}}}{ {2n - 1}} + \\left( {\\begin{array}{*{20}{c}}{4n - 1}\\\\{2n}\\end{array}} \\right)\\frac{1}{ {4n - 1}}<br>\\]</p>\n<h1 id=\"64\"><a href=\"#64\" class=\"headerlink\" title=\"64.\"></a>64.</h1><hr>\n<p><strong>题目：</strong><br>计算<br>\\[<br>\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil }<br>\\]<br><strong>解答：</strong><br>\\[<br>\\begin{array}{l}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}n\\\\k\\end{array}} \\right)/\\left\\lceil {\\frac{ {k + 1}}{2}} \\right\\rceil } \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\left( {\\begin{array}{*{20}{c}}n\\\\{2k}\\end{array}} \\right) + \\left( {\\begin{array}{*{20}{c}}n\\\\{2k + 1}\\end{array}} \\right)} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}{n + 1}\\\\{2k + 1}\\end{array}} \\right)\\frac{1}{ {k + 1}}} \\\\ = \\frac{2}{ {n + 2}}\\sum\\limits_{k = 0}^n {\\left( {\\begin{array}{*{20}{c}}{n + 2}\\\\{2k + 2}\\end{array}} \\right)} \\\\ = \\frac{ { {2^{n + 2}} - 2}}{ {n + 2}}\\end{array}<br>\\]</p>\n<h1 id=\"65\"><a href=\"#65\" class=\"headerlink\" title=\"65.\"></a>65.</h1><hr>\n<p><strong>题目：</strong><br>证明<br>\\[<br>\\sum\\limits_k {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}  = n<br>\\]<br><strong>解答：</strong><br>等号左边可以写为<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{ - k}}(k + 1)!}<br>\\]<br>替换$k$为$n-1-k$，得到<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}<br>\\]<br>即证<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^{1 + k - n}}(n - k)!}  = n<br>\\]<br>等式两边同时乘以$n^{n-1}$，即证<br>\\[<br>\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!}  = {n^n}<br>\\]<br>等式左边等于<br>\\[<br>\\begin{array}{l}\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\begin{array}{*{20}{c}}{n - 1}\\\\k\\end{array}} \\right){n^k}(n - k)!} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\frac{ { {n^k}(n - k)}}{ {k!}}} \\\\ = (n - 1)!\\sum\\limits_{0 \\le k \\le n - 1} {\\left( {\\frac{ { {n^{k + 1}}}}{ {k!}} - \\frac{ { {n^k}}}{ {(k - 1)!}}} \\right)} \\\\ = (n - 1)!\\frac{ { {n^n}}}{ {(n - 1)!}}\\\\ = {n^n}\\end{array}<br>\\]<br>得证。</p>\n"},{"title":"吴恩达深度学习公开课第一周学习笔记","date":"2017-09-19T09:53:03.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"保了研暂时也没什么事干，从今天开始学一学吴恩达最近发布的深度学习课程。顺便在博客上做做笔记，梳理一下。\n\ncoursera上面的课程要钱，还贼贵。所以我就直接在网易公开课上面看免费版的了，免费版没有作业和练习，是一个很大的缺憾。因为这门课很大的一个亮点就是高质量的编程题。顺带附上这门课的地址：[吴恩达深度学习公开课](https://mooc.study.163.com/learn/deeplearning_ai-2001281002?tid=2001392029#/learn/content)\n\n# 1.2 什么是神经网络？\n---\n这节课是深度学习的入门课，首先给出了深度学习的定义：深度学习就是训练神经网络。那么问题来了，什么是神经网络？这节课就介绍了神经网络的概念。\n![](5.jpg)\n\n首先从一个房价预测的例子讲起，已知房子大小和对应的房价，用一条曲线拟合这些点。那么用一条直线就可以了，但是房价不能为负，所以左边恒为0，这个函数就是“线性修正单元”，即ReLU。\n\n![](6.jpg)\n\n这就是最基本的神经元，输入一个房子大小也就是$x$，经过一个神经单元运算之后，输出房价也就是$y$。\n\n![](7.jpg)\n\n更复杂的情况下，房价还取决于更多的因素，比如房子大小、房间数量、邮编、周边富裕程度。\n\n我们不会具体指明中间一层的神经单元代表什么，神经网络想怎么算就怎么算。所以上图从左到右三层分别叫做输入层、隐含层、输出层。\n\n值得注意的是，神经网络只要你喂给了它足够多的$(x,y)$训练数据，那么它就可以训练出一个从$x$到$y$的精准映射函数。\n\n这就是最基本的神经网络和监督学习的例子，也就是你任意输入一个$x$，神经网络都可以预测出一个对应的$y$。\n\n下一讲将会更加深入的讲解监督学习的相关算法。\n\n# 1.3 用神经网络进行监督学习\n---\n神经网络最近被媒体炒作的沸沸扬扬，其实绝大多数神经网络创造的价值都来自于一种机器学习算法：监督学习。\n\n![](8.jpg)\n\n可以看出，监督学习就是输入一个特征$x$，然后学习得到一个输出$y$。监督学习在很多不同领域有重要应用，比如之前提到的房价预测，还有在线广告、计算机视觉、语音识别、机器翻译和自动驾驶等等。\n\n他们所应用的神经网络结构也都是不同的。其中房价预测和在线广告用的是标准的神经网络。而计算机视觉处理的是空间上的图像，所以用到的是卷积神经网络(CNN)。语音识别和机器翻译因为都是处理的时间相关的序列，所以用到的是循环神经网络(RNN)。而自动驾驶就更加的复杂了，既要处理图像，又要处理雷达信息，所以要用混合神经网络。\n\n![](9.jpg)\n\n上图就是三种神经网络的基本结构，CNN擅长处理图像相关的数据，RNN擅长处理序列相关的数据。\n\n![](10.jpg)\n\n输入的数据也分为两大类：结构化数据和非结构化数据。结构化数据就是指数据的数据库，每一个数据都是有明确的含义的，比如房子的大小，房间的数量等等。非结构化数据就是指音频、图像、文本之类的数据。\n\n人类天生就更擅长理解非结构化数据，但是计算机就不行了。近几年来，神经网络的发展让计算机也能非常好的理解非结构化数据了。在实际应用中，最好要将结构化数据和非结构化数据结合起来，才能发挥出最好的性能。\n\n其实神经网络几十年前就已经提出来了，那为什么最近几年才流行起来呢？下一节吴恩达老师将会给我们带来答案。\n\n# 1.4 为什么深度学习会兴起?\n---\n上节课最后提到，神经网络几十年前就有了，那为什么最近几年才兴起呢？\n\n![](11.jpg)\n\n吴恩达通过一张图很好的解释了原因。如上图所示，$x$轴是数据量，$y$轴是机器学习算法的效率，具体来说就是图像识别的准确率等等。\n\n可以看出，随着数据量的增大，机器学习算法的效率也随之增大。但是传统的机器学习算法比如支持向量机(SVM)在数据量大到一个程度之后会进入“平台期”，不会再上升了。而不同规模的神经网络会一直上升，只要你数据足够多。\n\n所以在今天要想得到更好的效果，就要训练一个大规模的神经网络，这个大规模指的是两个方面：一个是神经网络的隐含层单元足够多，也就是参数足够多，一个就是数据规模要足够多。但是这最终也是有瓶颈的，因为神经网络太大了之后计算效率就会下降，训练时间会特别长。数据也会耗尽，没有无限的数据。\n\n从技术上面来说，上图$x$轴的数据代表的是“有标签的数据”，也就是每个输入$x$都有一个标签$y$与之对应，一组数据就是一对$(x,y)$。在以后的课程中，我们都使用$m$来表示数据的规模，也就是$x$轴的数值。</p>\n\n在上图中我们还可以看出，在数据量比较小的时候，传统机器学习算法甚至会优于神经网络。因为它的性能基于手工设计组件的优劣和一些算法细节上面的优化，比如特征的提取等等。但是训练数据规模大了以后，神经网络就稳定优于传统机器学习方法了。\n\n![](12.jpg)\n\n影响神经网络性能的因素主要有三点：数据规模、计算能力、算法。\n\n数据规模之前已经提到过了。计算能力的话因为最近几年CPU和GPU的发展，计算能力得到很大的提升，所以训练时间也大大缩短。算法优化也是为了缩短训练时间，课上举了一个算法优化的例子。</p>\n\n以前神经网络激活函数都是用的sigmoid函数，图像如上图所示。但是存在一个问题，就是一直训练下去会出现梯度消失的问题，反映在函数图象上就是当输入太小时斜率会趋于0。所以后来换成了ReLU函数，在大于0的时候斜率恒为1。</p>\n\n图的右半部分是神经网络训练的流程。首先你要想出一个算法，然后你要实现代码，最后运行结果进行训练。如果训练时间很短，比如10分钟或者一天以内，那么你就可以调整算法，继续优化训练。如果训练时间要一个月，那么你就只能实现很少的想法了。</p>\n\n可喜的是，现在数据和硬件还在继续发展着，我们要做的就是继续研究新的算法和进行算法的优化。所以我们坚信，深度学习还会继续发展进步下去。</p>","source":"_posts/dl1.md","raw":"---\ntitle: 吴恩达深度学习公开课第一周学习笔记\ndate: 2017-09-19 17:53:03\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 神经网络\n- 深度学习\ncategories:\n- 深度学习\n---\n保了研暂时也没什么事干，从今天开始学一学吴恩达最近发布的深度学习课程。顺便在博客上做做笔记，梳理一下。\n\ncoursera上面的课程要钱，还贼贵。所以我就直接在网易公开课上面看免费版的了，免费版没有作业和练习，是一个很大的缺憾。因为这门课很大的一个亮点就是高质量的编程题。顺带附上这门课的地址：[吴恩达深度学习公开课](https://mooc.study.163.com/learn/deeplearning_ai-2001281002?tid=2001392029#/learn/content)\n\n# 1.2 什么是神经网络？\n---\n这节课是深度学习的入门课，首先给出了深度学习的定义：深度学习就是训练神经网络。那么问题来了，什么是神经网络？这节课就介绍了神经网络的概念。\n![](5.jpg)\n\n首先从一个房价预测的例子讲起，已知房子大小和对应的房价，用一条曲线拟合这些点。那么用一条直线就可以了，但是房价不能为负，所以左边恒为0，这个函数就是“线性修正单元”，即ReLU。\n\n![](6.jpg)\n\n这就是最基本的神经元，输入一个房子大小也就是$x$，经过一个神经单元运算之后，输出房价也就是$y$。\n\n![](7.jpg)\n\n更复杂的情况下，房价还取决于更多的因素，比如房子大小、房间数量、邮编、周边富裕程度。\n\n我们不会具体指明中间一层的神经单元代表什么，神经网络想怎么算就怎么算。所以上图从左到右三层分别叫做输入层、隐含层、输出层。\n\n值得注意的是，神经网络只要你喂给了它足够多的$(x,y)$训练数据，那么它就可以训练出一个从$x$到$y$的精准映射函数。\n\n这就是最基本的神经网络和监督学习的例子，也就是你任意输入一个$x$，神经网络都可以预测出一个对应的$y$。\n\n下一讲将会更加深入的讲解监督学习的相关算法。\n\n# 1.3 用神经网络进行监督学习\n---\n神经网络最近被媒体炒作的沸沸扬扬，其实绝大多数神经网络创造的价值都来自于一种机器学习算法：监督学习。\n\n![](8.jpg)\n\n可以看出，监督学习就是输入一个特征$x$，然后学习得到一个输出$y$。监督学习在很多不同领域有重要应用，比如之前提到的房价预测，还有在线广告、计算机视觉、语音识别、机器翻译和自动驾驶等等。\n\n他们所应用的神经网络结构也都是不同的。其中房价预测和在线广告用的是标准的神经网络。而计算机视觉处理的是空间上的图像，所以用到的是卷积神经网络(CNN)。语音识别和机器翻译因为都是处理的时间相关的序列，所以用到的是循环神经网络(RNN)。而自动驾驶就更加的复杂了，既要处理图像，又要处理雷达信息，所以要用混合神经网络。\n\n![](9.jpg)\n\n上图就是三种神经网络的基本结构，CNN擅长处理图像相关的数据，RNN擅长处理序列相关的数据。\n\n![](10.jpg)\n\n输入的数据也分为两大类：结构化数据和非结构化数据。结构化数据就是指数据的数据库，每一个数据都是有明确的含义的，比如房子的大小，房间的数量等等。非结构化数据就是指音频、图像、文本之类的数据。\n\n人类天生就更擅长理解非结构化数据，但是计算机就不行了。近几年来，神经网络的发展让计算机也能非常好的理解非结构化数据了。在实际应用中，最好要将结构化数据和非结构化数据结合起来，才能发挥出最好的性能。\n\n其实神经网络几十年前就已经提出来了，那为什么最近几年才流行起来呢？下一节吴恩达老师将会给我们带来答案。\n\n# 1.4 为什么深度学习会兴起?\n---\n上节课最后提到，神经网络几十年前就有了，那为什么最近几年才兴起呢？\n\n![](11.jpg)\n\n吴恩达通过一张图很好的解释了原因。如上图所示，$x$轴是数据量，$y$轴是机器学习算法的效率，具体来说就是图像识别的准确率等等。\n\n可以看出，随着数据量的增大，机器学习算法的效率也随之增大。但是传统的机器学习算法比如支持向量机(SVM)在数据量大到一个程度之后会进入“平台期”，不会再上升了。而不同规模的神经网络会一直上升，只要你数据足够多。\n\n所以在今天要想得到更好的效果，就要训练一个大规模的神经网络，这个大规模指的是两个方面：一个是神经网络的隐含层单元足够多，也就是参数足够多，一个就是数据规模要足够多。但是这最终也是有瓶颈的，因为神经网络太大了之后计算效率就会下降，训练时间会特别长。数据也会耗尽，没有无限的数据。\n\n从技术上面来说，上图$x$轴的数据代表的是“有标签的数据”，也就是每个输入$x$都有一个标签$y$与之对应，一组数据就是一对$(x,y)$。在以后的课程中，我们都使用$m$来表示数据的规模，也就是$x$轴的数值。</p>\n\n在上图中我们还可以看出，在数据量比较小的时候，传统机器学习算法甚至会优于神经网络。因为它的性能基于手工设计组件的优劣和一些算法细节上面的优化，比如特征的提取等等。但是训练数据规模大了以后，神经网络就稳定优于传统机器学习方法了。\n\n![](12.jpg)\n\n影响神经网络性能的因素主要有三点：数据规模、计算能力、算法。\n\n数据规模之前已经提到过了。计算能力的话因为最近几年CPU和GPU的发展，计算能力得到很大的提升，所以训练时间也大大缩短。算法优化也是为了缩短训练时间，课上举了一个算法优化的例子。</p>\n\n以前神经网络激活函数都是用的sigmoid函数，图像如上图所示。但是存在一个问题，就是一直训练下去会出现梯度消失的问题，反映在函数图象上就是当输入太小时斜率会趋于0。所以后来换成了ReLU函数，在大于0的时候斜率恒为1。</p>\n\n图的右半部分是神经网络训练的流程。首先你要想出一个算法，然后你要实现代码，最后运行结果进行训练。如果训练时间很短，比如10分钟或者一天以内，那么你就可以调整算法，继续优化训练。如果训练时间要一个月，那么你就只能实现很少的想法了。</p>\n\n可喜的是，现在数据和硬件还在继续发展着，我们要做的就是继续研究新的算法和进行算法的优化。所以我们坚信，深度学习还会继续发展进步下去。</p>","slug":"dl1","published":1,"updated":"2019-07-19T17:12:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982gq007r7sweu1o54f9w","content":"<p>保了研暂时也没什么事干，从今天开始学一学吴恩达最近发布的深度学习课程。顺便在博客上做做笔记，梳理一下。</p>\n<p>coursera上面的课程要钱，还贼贵。所以我就直接在网易公开课上面看免费版的了，免费版没有作业和练习，是一个很大的缺憾。因为这门课很大的一个亮点就是高质量的编程题。顺带附上这门课的地址：<a href=\"https://mooc.study.163.com/learn/deeplearning_ai-2001281002?tid=2001392029#/learn/content\" target=\"_blank\" rel=\"noopener\">吴恩达深度学习公开课</a></p>\n<h1 id=\"1-2-什么是神经网络？\"><a href=\"#1-2-什么是神经网络？\" class=\"headerlink\" title=\"1.2 什么是神经网络？\"></a>1.2 什么是神经网络？</h1><hr>\n<p>这节课是深度学习的入门课，首先给出了深度学习的定义：深度学习就是训练神经网络。那么问题来了，什么是神经网络？这节课就介绍了神经网络的概念。<br><img src=\"5.jpg\" alt></p>\n<p>首先从一个房价预测的例子讲起，已知房子大小和对应的房价，用一条曲线拟合这些点。那么用一条直线就可以了，但是房价不能为负，所以左边恒为0，这个函数就是“线性修正单元”，即ReLU。</p>\n<p><img src=\"6.jpg\" alt></p>\n<p>这就是最基本的神经元，输入一个房子大小也就是$x$，经过一个神经单元运算之后，输出房价也就是$y$。</p>\n<p><img src=\"7.jpg\" alt></p>\n<p>更复杂的情况下，房价还取决于更多的因素，比如房子大小、房间数量、邮编、周边富裕程度。</p>\n<p>我们不会具体指明中间一层的神经单元代表什么，神经网络想怎么算就怎么算。所以上图从左到右三层分别叫做输入层、隐含层、输出层。</p>\n<p>值得注意的是，神经网络只要你喂给了它足够多的$(x,y)$训练数据，那么它就可以训练出一个从$x$到$y$的精准映射函数。</p>\n<p>这就是最基本的神经网络和监督学习的例子，也就是你任意输入一个$x$，神经网络都可以预测出一个对应的$y$。</p>\n<p>下一讲将会更加深入的讲解监督学习的相关算法。</p>\n<h1 id=\"1-3-用神经网络进行监督学习\"><a href=\"#1-3-用神经网络进行监督学习\" class=\"headerlink\" title=\"1.3 用神经网络进行监督学习\"></a>1.3 用神经网络进行监督学习</h1><hr>\n<p>神经网络最近被媒体炒作的沸沸扬扬，其实绝大多数神经网络创造的价值都来自于一种机器学习算法：监督学习。</p>\n<p><img src=\"8.jpg\" alt></p>\n<p>可以看出，监督学习就是输入一个特征$x$，然后学习得到一个输出$y$。监督学习在很多不同领域有重要应用，比如之前提到的房价预测，还有在线广告、计算机视觉、语音识别、机器翻译和自动驾驶等等。</p>\n<p>他们所应用的神经网络结构也都是不同的。其中房价预测和在线广告用的是标准的神经网络。而计算机视觉处理的是空间上的图像，所以用到的是卷积神经网络(CNN)。语音识别和机器翻译因为都是处理的时间相关的序列，所以用到的是循环神经网络(RNN)。而自动驾驶就更加的复杂了，既要处理图像，又要处理雷达信息，所以要用混合神经网络。</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>上图就是三种神经网络的基本结构，CNN擅长处理图像相关的数据，RNN擅长处理序列相关的数据。</p>\n<p><img src=\"10.jpg\" alt></p>\n<p>输入的数据也分为两大类：结构化数据和非结构化数据。结构化数据就是指数据的数据库，每一个数据都是有明确的含义的，比如房子的大小，房间的数量等等。非结构化数据就是指音频、图像、文本之类的数据。</p>\n<p>人类天生就更擅长理解非结构化数据，但是计算机就不行了。近几年来，神经网络的发展让计算机也能非常好的理解非结构化数据了。在实际应用中，最好要将结构化数据和非结构化数据结合起来，才能发挥出最好的性能。</p>\n<p>其实神经网络几十年前就已经提出来了，那为什么最近几年才流行起来呢？下一节吴恩达老师将会给我们带来答案。</p>\n<h1 id=\"1-4-为什么深度学习会兴起\"><a href=\"#1-4-为什么深度学习会兴起\" class=\"headerlink\" title=\"1.4 为什么深度学习会兴起?\"></a>1.4 为什么深度学习会兴起?</h1><hr>\n<p>上节课最后提到，神经网络几十年前就有了，那为什么最近几年才兴起呢？</p>\n<p><img src=\"11.jpg\" alt></p>\n<p>吴恩达通过一张图很好的解释了原因。如上图所示，$x$轴是数据量，$y$轴是机器学习算法的效率，具体来说就是图像识别的准确率等等。</p>\n<p>可以看出，随着数据量的增大，机器学习算法的效率也随之增大。但是传统的机器学习算法比如支持向量机(SVM)在数据量大到一个程度之后会进入“平台期”，不会再上升了。而不同规模的神经网络会一直上升，只要你数据足够多。</p>\n<p>所以在今天要想得到更好的效果，就要训练一个大规模的神经网络，这个大规模指的是两个方面：一个是神经网络的隐含层单元足够多，也就是参数足够多，一个就是数据规模要足够多。但是这最终也是有瓶颈的，因为神经网络太大了之后计算效率就会下降，训练时间会特别长。数据也会耗尽，没有无限的数据。</p>\n<p>从技术上面来说，上图$x$轴的数据代表的是“有标签的数据”，也就是每个输入$x$都有一个标签$y$与之对应，一组数据就是一对$(x,y)$。在以后的课程中，我们都使用$m$来表示数据的规模，也就是$x$轴的数值。</p><p></p>\n<p>在上图中我们还可以看出，在数据量比较小的时候，传统机器学习算法甚至会优于神经网络。因为它的性能基于手工设计组件的优劣和一些算法细节上面的优化，比如特征的提取等等。但是训练数据规模大了以后，神经网络就稳定优于传统机器学习方法了。</p>\n<p><img src=\"12.jpg\" alt></p>\n<p>影响神经网络性能的因素主要有三点：数据规模、计算能力、算法。</p>\n<p>数据规模之前已经提到过了。计算能力的话因为最近几年CPU和GPU的发展，计算能力得到很大的提升，所以训练时间也大大缩短。算法优化也是为了缩短训练时间，课上举了一个算法优化的例子。</p><p></p>\n<p>以前神经网络激活函数都是用的sigmoid函数，图像如上图所示。但是存在一个问题，就是一直训练下去会出现梯度消失的问题，反映在函数图象上就是当输入太小时斜率会趋于0。所以后来换成了ReLU函数，在大于0的时候斜率恒为1。</p><p></p>\n<p>图的右半部分是神经网络训练的流程。首先你要想出一个算法，然后你要实现代码，最后运行结果进行训练。如果训练时间很短，比如10分钟或者一天以内，那么你就可以调整算法，继续优化训练。如果训练时间要一个月，那么你就只能实现很少的想法了。</p><p></p>\n<p>可喜的是，现在数据和硬件还在继续发展着，我们要做的就是继续研究新的算法和进行算法的优化。所以我们坚信，深度学习还会继续发展进步下去。</p><p></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>保了研暂时也没什么事干，从今天开始学一学吴恩达最近发布的深度学习课程。顺便在博客上做做笔记，梳理一下。</p>\n<p>coursera上面的课程要钱，还贼贵。所以我就直接在网易公开课上面看免费版的了，免费版没有作业和练习，是一个很大的缺憾。因为这门课很大的一个亮点就是高质量的编程题。顺带附上这门课的地址：<a href=\"https://mooc.study.163.com/learn/deeplearning_ai-2001281002?tid=2001392029#/learn/content\" target=\"_blank\" rel=\"noopener\">吴恩达深度学习公开课</a></p>\n<h1 id=\"1-2-什么是神经网络？\"><a href=\"#1-2-什么是神经网络？\" class=\"headerlink\" title=\"1.2 什么是神经网络？\"></a>1.2 什么是神经网络？</h1><hr>\n<p>这节课是深度学习的入门课，首先给出了深度学习的定义：深度学习就是训练神经网络。那么问题来了，什么是神经网络？这节课就介绍了神经网络的概念。<br><img src=\"5.jpg\" alt></p>\n<p>首先从一个房价预测的例子讲起，已知房子大小和对应的房价，用一条曲线拟合这些点。那么用一条直线就可以了，但是房价不能为负，所以左边恒为0，这个函数就是“线性修正单元”，即ReLU。</p>\n<p><img src=\"6.jpg\" alt></p>\n<p>这就是最基本的神经元，输入一个房子大小也就是$x$，经过一个神经单元运算之后，输出房价也就是$y$。</p>\n<p><img src=\"7.jpg\" alt></p>\n<p>更复杂的情况下，房价还取决于更多的因素，比如房子大小、房间数量、邮编、周边富裕程度。</p>\n<p>我们不会具体指明中间一层的神经单元代表什么，神经网络想怎么算就怎么算。所以上图从左到右三层分别叫做输入层、隐含层、输出层。</p>\n<p>值得注意的是，神经网络只要你喂给了它足够多的$(x,y)$训练数据，那么它就可以训练出一个从$x$到$y$的精准映射函数。</p>\n<p>这就是最基本的神经网络和监督学习的例子，也就是你任意输入一个$x$，神经网络都可以预测出一个对应的$y$。</p>\n<p>下一讲将会更加深入的讲解监督学习的相关算法。</p>\n<h1 id=\"1-3-用神经网络进行监督学习\"><a href=\"#1-3-用神经网络进行监督学习\" class=\"headerlink\" title=\"1.3 用神经网络进行监督学习\"></a>1.3 用神经网络进行监督学习</h1><hr>\n<p>神经网络最近被媒体炒作的沸沸扬扬，其实绝大多数神经网络创造的价值都来自于一种机器学习算法：监督学习。</p>\n<p><img src=\"8.jpg\" alt></p>\n<p>可以看出，监督学习就是输入一个特征$x$，然后学习得到一个输出$y$。监督学习在很多不同领域有重要应用，比如之前提到的房价预测，还有在线广告、计算机视觉、语音识别、机器翻译和自动驾驶等等。</p>\n<p>他们所应用的神经网络结构也都是不同的。其中房价预测和在线广告用的是标准的神经网络。而计算机视觉处理的是空间上的图像，所以用到的是卷积神经网络(CNN)。语音识别和机器翻译因为都是处理的时间相关的序列，所以用到的是循环神经网络(RNN)。而自动驾驶就更加的复杂了，既要处理图像，又要处理雷达信息，所以要用混合神经网络。</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>上图就是三种神经网络的基本结构，CNN擅长处理图像相关的数据，RNN擅长处理序列相关的数据。</p>\n<p><img src=\"10.jpg\" alt></p>\n<p>输入的数据也分为两大类：结构化数据和非结构化数据。结构化数据就是指数据的数据库，每一个数据都是有明确的含义的，比如房子的大小，房间的数量等等。非结构化数据就是指音频、图像、文本之类的数据。</p>\n<p>人类天生就更擅长理解非结构化数据，但是计算机就不行了。近几年来，神经网络的发展让计算机也能非常好的理解非结构化数据了。在实际应用中，最好要将结构化数据和非结构化数据结合起来，才能发挥出最好的性能。</p>\n<p>其实神经网络几十年前就已经提出来了，那为什么最近几年才流行起来呢？下一节吴恩达老师将会给我们带来答案。</p>\n<h1 id=\"1-4-为什么深度学习会兴起\"><a href=\"#1-4-为什么深度学习会兴起\" class=\"headerlink\" title=\"1.4 为什么深度学习会兴起?\"></a>1.4 为什么深度学习会兴起?</h1><hr>\n<p>上节课最后提到，神经网络几十年前就有了，那为什么最近几年才兴起呢？</p>\n<p><img src=\"11.jpg\" alt></p>\n<p>吴恩达通过一张图很好的解释了原因。如上图所示，$x$轴是数据量，$y$轴是机器学习算法的效率，具体来说就是图像识别的准确率等等。</p>\n<p>可以看出，随着数据量的增大，机器学习算法的效率也随之增大。但是传统的机器学习算法比如支持向量机(SVM)在数据量大到一个程度之后会进入“平台期”，不会再上升了。而不同规模的神经网络会一直上升，只要你数据足够多。</p>\n<p>所以在今天要想得到更好的效果，就要训练一个大规模的神经网络，这个大规模指的是两个方面：一个是神经网络的隐含层单元足够多，也就是参数足够多，一个就是数据规模要足够多。但是这最终也是有瓶颈的，因为神经网络太大了之后计算效率就会下降，训练时间会特别长。数据也会耗尽，没有无限的数据。</p>\n<p>从技术上面来说，上图$x$轴的数据代表的是“有标签的数据”，也就是每个输入$x$都有一个标签$y$与之对应，一组数据就是一对$(x,y)$。在以后的课程中，我们都使用$m$来表示数据的规模，也就是$x$轴的数值。</p><p></p>\n<p>在上图中我们还可以看出，在数据量比较小的时候，传统机器学习算法甚至会优于神经网络。因为它的性能基于手工设计组件的优劣和一些算法细节上面的优化，比如特征的提取等等。但是训练数据规模大了以后，神经网络就稳定优于传统机器学习方法了。</p>\n<p><img src=\"12.jpg\" alt></p>\n<p>影响神经网络性能的因素主要有三点：数据规模、计算能力、算法。</p>\n<p>数据规模之前已经提到过了。计算能力的话因为最近几年CPU和GPU的发展，计算能力得到很大的提升，所以训练时间也大大缩短。算法优化也是为了缩短训练时间，课上举了一个算法优化的例子。</p><p></p>\n<p>以前神经网络激活函数都是用的sigmoid函数，图像如上图所示。但是存在一个问题，就是一直训练下去会出现梯度消失的问题，反映在函数图象上就是当输入太小时斜率会趋于0。所以后来换成了ReLU函数，在大于0的时候斜率恒为1。</p><p></p>\n<p>图的右半部分是神经网络训练的流程。首先你要想出一个算法，然后你要实现代码，最后运行结果进行训练。如果训练时间很短，比如10分钟或者一天以内，那么你就可以调整算法，继续优化训练。如果训练时间要一个月，那么你就只能实现很少的想法了。</p><p></p>\n<p>可喜的是，现在数据和硬件还在继续发展着，我们要做的就是继续研究新的算法和进行算法的优化。所以我们坚信，深度学习还会继续发展进步下去。</p><p></p>\n"},{"title":"How to Make Context More Useful? An Empirical Study on Context-Aware Neural Conversational Models","date":"2017-09-19T06:53:51.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"论文链接：[P17-2036](https://www.aclweb.org/anthology/P/P17/P17-2036.pdf)\n\n# 介绍\n---\n最近许多研究者都注意到了上下文在对话系统中的重要性，也做了很多的研究，但是没有系统的比较来分析怎么样才能有效地利用上下文。我们做了详细的研究来比较不同的模型，研究上下文在对话系统中的作用。同时，我们提出了度量上下文与查询之间相关性的方法，比其他方法性能都出色。\n\n# 模型\n---\n对话系统有两种典型的研究设置：单轮和多轮。单轮就是只输入查询$q$，输出答案$r$。但是大多数现实的对话都是要多轮的，就是要结合上下文来做出回答。\n很多研究者都意识到了上下文的重要性，也提出了很多方法。一种是直接将上下文和查询向量连接到一起，另一种是分层模型。有很多方法来结合上下文和查询，比如池化和连接。但是没有人对它们做过比较。\n这篇论文里，我们在Seq2Seq的对话系统上对上下文模型做研究。我们关注两个问题：\n* 我们怎么样才能更好的利用上下文？\n* 上下文对神经对话系统的影响是什么？\n\n未分层模型通常使用经典的encode-decoder框架，我们实验中用的是RNN+GRU，decode时beamsearch大小为5。分层模型有三种方法结合上下文和查询：池化、连接、连续整合。\n![](hierarchical_model.jpg)\n![](2.jpg)\n但是我们发现加权后的实验结果还不如直接使用最后一个隐含层的结果，我们猜测是因为这个RNN不是很长，所以对前面的结果保存的比较好，所以我们实验直接使用最后一个隐含层作为输出。\n衡量上下文和查询的相关程度：\n\\\\[{s_{ {c_i}}} = sim({c_i},q) = \\frac{ { {e_{c_i} } \\cdot {e_q}}}{ {\\left\\\\| {e_{c_i}} \\right\\\\| \\cdot \\left\\\\| { {e_q}} \\right\\\\|}}\\\\]\n其中：\\\\[{e_{c_i}} = \\sum\\limits_{w \\in {c_i}} {e_w} ,{e_q} = \\sum\\limits_{w' \\in {c_i}} {e_w'} \\\\]\n归一化：\n\\\\[\\alpha \\_{c_i} = \\frac{ {\\exp ({s\\_{ {c_i}}})}} { {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}\\\\]\n\\\\[{ {\\alpha \\_q} = \\frac{ {\\exp ({s\\_q})}}{ {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}}\\\\]\n两种连接方法：\n* WSeq(sum):\n\\\\[{v\\_{enc}} = \\sum\\limits\\_{i = 0}^n { {\\alpha \\_{ {c_i}}}{h\\_{ {c_i}}} + {\\alpha \\_q}{h_q}} \\\\]\n* WSeq(concat):\n\\\\[{v\\_{enc}} = \\left[ { {\\alpha \\_{ {c_0}}}{h\\_{ {c_0}}}; \\ldots ;{\\alpha \\_{ {c_n}}}{h\\_{ {c_n}}};{\\alpha \\_q}{h_q}} \\right]\\\\]\n\n# 实验结果\n---\n我们在百度贴吧问答数据集上做实验。\n![](1.jpg)\n\n# 实验结果分析\n---\n虽然BLEU不适合用来度量对话系统这种开放式的系统。但是我们没有足够的人力物力来对结果一一标注，所以还是采用BLEU。下面回到最开始提出的两个问题。\n* 我们怎么样才能更好的利用上下文？\n首先我们发现采用上下文实验结果的确比不采用的更好了。然后分层的模型结果比不分层的更好。我们猜测原因可能是对话系统不同于其他NLP任务，对话系统句子可能出自不同的人。让每个上下文保持独立很重要，而不是简单的池化结合到一起，所以直接连接起来效果更好。上下文和查询相关性对系统有帮助。\n* 上下文对神经对话系统的影响是什么？\n![](3.jpg)\n可以看出，采用上下文的模型能产生更长、更有意义、更多样性的回答。我们还发现了一个有趣的现象：一个encode-decoder模型如果想要生成有意义的回答，必须要足够多的有意义的信息提供给它。这解释了为什么seq2seq在其他NLP任务表现得很好，但是在对话系统表现得不好。\n","source":"_posts/context.md","raw":"---\ntitle: How to Make Context More Useful? An Empirical Study on Context-Aware Neural Conversational Models\ndate: 2017-09-19 14:53:51\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 问答系统\ncategories:\n- 问答系统\n---\n论文链接：[P17-2036](https://www.aclweb.org/anthology/P/P17/P17-2036.pdf)\n\n# 介绍\n---\n最近许多研究者都注意到了上下文在对话系统中的重要性，也做了很多的研究，但是没有系统的比较来分析怎么样才能有效地利用上下文。我们做了详细的研究来比较不同的模型，研究上下文在对话系统中的作用。同时，我们提出了度量上下文与查询之间相关性的方法，比其他方法性能都出色。\n\n# 模型\n---\n对话系统有两种典型的研究设置：单轮和多轮。单轮就是只输入查询$q$，输出答案$r$。但是大多数现实的对话都是要多轮的，就是要结合上下文来做出回答。\n很多研究者都意识到了上下文的重要性，也提出了很多方法。一种是直接将上下文和查询向量连接到一起，另一种是分层模型。有很多方法来结合上下文和查询，比如池化和连接。但是没有人对它们做过比较。\n这篇论文里，我们在Seq2Seq的对话系统上对上下文模型做研究。我们关注两个问题：\n* 我们怎么样才能更好的利用上下文？\n* 上下文对神经对话系统的影响是什么？\n\n未分层模型通常使用经典的encode-decoder框架，我们实验中用的是RNN+GRU，decode时beamsearch大小为5。分层模型有三种方法结合上下文和查询：池化、连接、连续整合。\n![](hierarchical_model.jpg)\n![](2.jpg)\n但是我们发现加权后的实验结果还不如直接使用最后一个隐含层的结果，我们猜测是因为这个RNN不是很长，所以对前面的结果保存的比较好，所以我们实验直接使用最后一个隐含层作为输出。\n衡量上下文和查询的相关程度：\n\\\\[{s_{ {c_i}}} = sim({c_i},q) = \\frac{ { {e_{c_i} } \\cdot {e_q}}}{ {\\left\\\\| {e_{c_i}} \\right\\\\| \\cdot \\left\\\\| { {e_q}} \\right\\\\|}}\\\\]\n其中：\\\\[{e_{c_i}} = \\sum\\limits_{w \\in {c_i}} {e_w} ,{e_q} = \\sum\\limits_{w' \\in {c_i}} {e_w'} \\\\]\n归一化：\n\\\\[\\alpha \\_{c_i} = \\frac{ {\\exp ({s\\_{ {c_i}}})}} { {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}\\\\]\n\\\\[{ {\\alpha \\_q} = \\frac{ {\\exp ({s\\_q})}}{ {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}}\\\\]\n两种连接方法：\n* WSeq(sum):\n\\\\[{v\\_{enc}} = \\sum\\limits\\_{i = 0}^n { {\\alpha \\_{ {c_i}}}{h\\_{ {c_i}}} + {\\alpha \\_q}{h_q}} \\\\]\n* WSeq(concat):\n\\\\[{v\\_{enc}} = \\left[ { {\\alpha \\_{ {c_0}}}{h\\_{ {c_0}}}; \\ldots ;{\\alpha \\_{ {c_n}}}{h\\_{ {c_n}}};{\\alpha \\_q}{h_q}} \\right]\\\\]\n\n# 实验结果\n---\n我们在百度贴吧问答数据集上做实验。\n![](1.jpg)\n\n# 实验结果分析\n---\n虽然BLEU不适合用来度量对话系统这种开放式的系统。但是我们没有足够的人力物力来对结果一一标注，所以还是采用BLEU。下面回到最开始提出的两个问题。\n* 我们怎么样才能更好的利用上下文？\n首先我们发现采用上下文实验结果的确比不采用的更好了。然后分层的模型结果比不分层的更好。我们猜测原因可能是对话系统不同于其他NLP任务，对话系统句子可能出自不同的人。让每个上下文保持独立很重要，而不是简单的池化结合到一起，所以直接连接起来效果更好。上下文和查询相关性对系统有帮助。\n* 上下文对神经对话系统的影响是什么？\n![](3.jpg)\n可以看出，采用上下文的模型能产生更长、更有意义、更多样性的回答。我们还发现了一个有趣的现象：一个encode-decoder模型如果想要生成有意义的回答，必须要足够多的有意义的信息提供给它。这解释了为什么seq2seq在其他NLP任务表现得很好，但是在对话系统表现得不好。\n","slug":"context","published":1,"updated":"2019-07-20T04:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982gs007v7swewic60ejc","content":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-2036.pdf\" target=\"_blank\" rel=\"noopener\">P17-2036</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>最近许多研究者都注意到了上下文在对话系统中的重要性，也做了很多的研究，但是没有系统的比较来分析怎么样才能有效地利用上下文。我们做了详细的研究来比较不同的模型，研究上下文在对话系统中的作用。同时，我们提出了度量上下文与查询之间相关性的方法，比其他方法性能都出色。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>对话系统有两种典型的研究设置：单轮和多轮。单轮就是只输入查询$q$，输出答案$r$。但是大多数现实的对话都是要多轮的，就是要结合上下文来做出回答。<br>很多研究者都意识到了上下文的重要性，也提出了很多方法。一种是直接将上下文和查询向量连接到一起，另一种是分层模型。有很多方法来结合上下文和查询，比如池化和连接。但是没有人对它们做过比较。<br>这篇论文里，我们在Seq2Seq的对话系统上对上下文模型做研究。我们关注两个问题：</p>\n<ul>\n<li>我们怎么样才能更好的利用上下文？</li>\n<li>上下文对神经对话系统的影响是什么？</li>\n</ul>\n<p>未分层模型通常使用经典的encode-decoder框架，我们实验中用的是RNN+GRU，decode时beamsearch大小为5。分层模型有三种方法结合上下文和查询：池化、连接、连续整合。<br><img src=\"hierarchical_model.jpg\" alt><br><img src=\"2.jpg\" alt><br>但是我们发现加权后的实验结果还不如直接使用最后一个隐含层的结果，我们猜测是因为这个RNN不是很长，所以对前面的结果保存的比较好，所以我们实验直接使用最后一个隐含层作为输出。<br>衡量上下文和查询的相关程度：<br>\\[{s_{ {c_i}}} = sim({c_i},q) = \\frac{ { {e_{c_i} } \\cdot {e_q}}}{ {\\left\\| {e_{c_i}} \\right\\| \\cdot \\left\\| { {e_q}} \\right\\|}}\\]<br>其中：\\[{e_{c_i}} = \\sum\\limits_{w \\in {c_i}} {e_w} ,{e_q} = \\sum\\limits_{w’ \\in {c_i}} {e_w’} \\]<br>归一化：<br>\\[\\alpha _{c_i} = \\frac{ {\\exp ({s_{ {c_i}}})}} { {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}\\]<br>\\[{ {\\alpha _q} = \\frac{ {\\exp ({s_q})}}{ {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}}\\]<br>两种连接方法：</p>\n<ul>\n<li>WSeq(sum):<br>\\[{v_{enc}} = \\sum\\limits_{i = 0}^n { {\\alpha _{ {c_i}}}{h_{ {c_i}}} + {\\alpha _q}{h_q}} \\]</li>\n<li>WSeq(concat):<br>\\[{v_{enc}} = \\left[ { {\\alpha _{ {c_0}}}{h_{ {c_0}}}; \\ldots ;{\\alpha _{ {c_n}}}{h_{ {c_n}}};{\\alpha _q}{h_q}} \\right]\\]</li>\n</ul>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>我们在百度贴吧问答数据集上做实验。<br><img src=\"1.jpg\" alt></p>\n<h1 id=\"实验结果分析\"><a href=\"#实验结果分析\" class=\"headerlink\" title=\"实验结果分析\"></a>实验结果分析</h1><hr>\n<p>虽然BLEU不适合用来度量对话系统这种开放式的系统。但是我们没有足够的人力物力来对结果一一标注，所以还是采用BLEU。下面回到最开始提出的两个问题。</p>\n<ul>\n<li>我们怎么样才能更好的利用上下文？<br>首先我们发现采用上下文实验结果的确比不采用的更好了。然后分层的模型结果比不分层的更好。我们猜测原因可能是对话系统不同于其他NLP任务，对话系统句子可能出自不同的人。让每个上下文保持独立很重要，而不是简单的池化结合到一起，所以直接连接起来效果更好。上下文和查询相关性对系统有帮助。</li>\n<li>上下文对神经对话系统的影响是什么？<br><img src=\"3.jpg\" alt><br>可以看出，采用上下文的模型能产生更长、更有意义、更多样性的回答。我们还发现了一个有趣的现象：一个encode-decoder模型如果想要生成有意义的回答，必须要足够多的有意义的信息提供给它。这解释了为什么seq2seq在其他NLP任务表现得很好，但是在对话系统表现得不好。</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>论文链接：<a href=\"https://www.aclweb.org/anthology/P/P17/P17-2036.pdf\" target=\"_blank\" rel=\"noopener\">P17-2036</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>最近许多研究者都注意到了上下文在对话系统中的重要性，也做了很多的研究，但是没有系统的比较来分析怎么样才能有效地利用上下文。我们做了详细的研究来比较不同的模型，研究上下文在对话系统中的作用。同时，我们提出了度量上下文与查询之间相关性的方法，比其他方法性能都出色。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p>对话系统有两种典型的研究设置：单轮和多轮。单轮就是只输入查询$q$，输出答案$r$。但是大多数现实的对话都是要多轮的，就是要结合上下文来做出回答。<br>很多研究者都意识到了上下文的重要性，也提出了很多方法。一种是直接将上下文和查询向量连接到一起，另一种是分层模型。有很多方法来结合上下文和查询，比如池化和连接。但是没有人对它们做过比较。<br>这篇论文里，我们在Seq2Seq的对话系统上对上下文模型做研究。我们关注两个问题：</p>\n<ul>\n<li>我们怎么样才能更好的利用上下文？</li>\n<li>上下文对神经对话系统的影响是什么？</li>\n</ul>\n<p>未分层模型通常使用经典的encode-decoder框架，我们实验中用的是RNN+GRU，decode时beamsearch大小为5。分层模型有三种方法结合上下文和查询：池化、连接、连续整合。<br><img src=\"hierarchical_model.jpg\" alt><br><img src=\"2.jpg\" alt><br>但是我们发现加权后的实验结果还不如直接使用最后一个隐含层的结果，我们猜测是因为这个RNN不是很长，所以对前面的结果保存的比较好，所以我们实验直接使用最后一个隐含层作为输出。<br>衡量上下文和查询的相关程度：<br>\\[{s_{ {c_i}}} = sim({c_i},q) = \\frac{ { {e_{c_i} } \\cdot {e_q}}}{ {\\left\\| {e_{c_i}} \\right\\| \\cdot \\left\\| { {e_q}} \\right\\|}}\\]<br>其中：\\[{e_{c_i}} = \\sum\\limits_{w \\in {c_i}} {e_w} ,{e_q} = \\sum\\limits_{w’ \\in {c_i}} {e_w’} \\]<br>归一化：<br>\\[\\alpha _{c_i} = \\frac{ {\\exp ({s_{ {c_i}}})}} { {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}\\]<br>\\[{ {\\alpha _q} = \\frac{ {\\exp ({s_q})}}{ {\\sum\\nolimits_{j = 0}^n {\\exp ({s_{ {c_i}}})}  + \\exp ({s_q})}}}\\]<br>两种连接方法：</p>\n<ul>\n<li>WSeq(sum):<br>\\[{v_{enc}} = \\sum\\limits_{i = 0}^n { {\\alpha _{ {c_i}}}{h_{ {c_i}}} + {\\alpha _q}{h_q}} \\]</li>\n<li>WSeq(concat):<br>\\[{v_{enc}} = \\left[ { {\\alpha _{ {c_0}}}{h_{ {c_0}}}; \\ldots ;{\\alpha _{ {c_n}}}{h_{ {c_n}}};{\\alpha _q}{h_q}} \\right]\\]</li>\n</ul>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><hr>\n<p>我们在百度贴吧问答数据集上做实验。<br><img src=\"1.jpg\" alt></p>\n<h1 id=\"实验结果分析\"><a href=\"#实验结果分析\" class=\"headerlink\" title=\"实验结果分析\"></a>实验结果分析</h1><hr>\n<p>虽然BLEU不适合用来度量对话系统这种开放式的系统。但是我们没有足够的人力物力来对结果一一标注，所以还是采用BLEU。下面回到最开始提出的两个问题。</p>\n<ul>\n<li>我们怎么样才能更好的利用上下文？<br>首先我们发现采用上下文实验结果的确比不采用的更好了。然后分层的模型结果比不分层的更好。我们猜测原因可能是对话系统不同于其他NLP任务，对话系统句子可能出自不同的人。让每个上下文保持独立很重要，而不是简单的池化结合到一起，所以直接连接起来效果更好。上下文和查询相关性对系统有帮助。</li>\n<li>上下文对神经对话系统的影响是什么？<br><img src=\"3.jpg\" alt><br>可以看出，采用上下文的模型能产生更长、更有意义、更多样性的回答。我们还发现了一个有趣的现象：一个encode-decoder模型如果想要生成有意义的回答，必须要足够多的有意义的信息提供给它。这解释了为什么seq2seq在其他NLP任务表现得很好，但是在对话系统表现得不好。</li>\n</ul>\n"},{"title":"Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-07-25T05:31:28.000Z","password":null,"summary":null,"_content":"\n**论文地址：**[Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders](http://arxiv.org/abs/1904.02142)\n**代码地址：**[github](https://github.com/iesl/diora)\n\n今天要分享的这篇论文来自NAACL2019，主要利用inside-outside算法推理出给定句子的句法树，不需要任何的监督，也不需要下游任务作为目标函数，只需要masked语言模型就行了。\n\n# 介绍\n","source":"_posts/diora.md","raw":"---\ntitle: Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-07-25 13:31:28\npassword:\nsummary:\ntags:\n- NAACL\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n**论文地址：**[Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders](http://arxiv.org/abs/1904.02142)\n**代码地址：**[github](https://github.com/iesl/diora)\n\n今天要分享的这篇论文来自NAACL2019，主要利用inside-outside算法推理出给定句子的句法树，不需要任何的监督，也不需要下游任务作为目标函数，只需要masked语言模型就行了。\n\n# 介绍\n","slug":"diora","published":1,"updated":"2019-07-26T13:21:57.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982gu007y7sweyegs8wyy","content":"<p><strong>论文地址：</strong><a href=\"http://arxiv.org/abs/1904.02142\" target=\"_blank\" rel=\"noopener\">Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders</a><br><strong>代码地址：</strong><a href=\"https://github.com/iesl/diora\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要分享的这篇论文来自NAACL2019，主要利用inside-outside算法推理出给定句子的句法树，不需要任何的监督，也不需要下游任务作为目标函数，只需要masked语言模型就行了。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1>","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p><strong>论文地址：</strong><a href=\"http://arxiv.org/abs/1904.02142\" target=\"_blank\" rel=\"noopener\">Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders</a><br><strong>代码地址：</strong><a href=\"https://github.com/iesl/diora\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>今天要分享的这篇论文来自NAACL2019，主要利用inside-outside算法推理出给定句子的句法树，不需要任何的监督，也不需要下游任务作为目标函数，只需要masked语言模型就行了。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1>"},{"title":"吴恩达深度学习公开课第二周学习笔记","date":"2017-09-19T10:34:39.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"<p>这周开始将会学到神经网络编程的基础知识。</p>\n\n# 2.1 二分分类\n---\n![](13.jpg)\n\n二分类问题就是给定一个输入$x$，预测它的标签$y$是0还是1。拿预测一张图片是不是猫来举例子，一张图片大小为${\\rm{64}} \\times {\\rm{64}}$，将它转化为三个矩阵分别代表RGB分量。再将三个矩阵合并成一个大小为${\\rm{(64}} \\times {\\rm{64}} \\times {\\rm{3,1)}}$的矩阵作为输入$x$。\n\n下面给出一些以后要用到的符号表示。\n\n一个样本用$(x,y)$表示，其中$x \\in {R^{ {n_x}}}$，$y \\in \\{ 0,1\\} $，那么$m$个训练样本就可以用集合$\\\\{ ({x^{(1)}},{y^{(1)}}),({x^{(2)}},{y^{(2)}}), \\ldots ,({x^{(m)}},{y^{(m)}})\\\\} $来表示。\n\n我们还可以将所有样本特征值用一个矩阵表示：\n\\\\[X = \\left[ {\\begin{array}{*{20}{l}} \\vdots & \\vdots & \\cdots & \\vdots \\\\\\\\{ {x^{(1)}}}&{ {x^{(2)}}}& \\cdots &{ {x^{(m)}}}\\\\\\\\ \\vdots & \\vdots & \\cdots & \\vdots \\end{array}} \\right]\\\\]\n\n其中$X \\in {R^{ {n_x} \\times m}}$。\n所有样本标签也可以用一个矩阵表示：\n\\\\[Y = \\left[ {\\begin{array}{*{20}{l}}{ {y^{(1)}}}&{ {y^{(2)}}}& \\cdots &{ {y^{(m)}}}\\end{array}} \\right]\\\\]\n\n其中$Y \\in {R^{1 \\times m}}$。\n\n# 2.2 logistic回归\n---\nlogistic回归就是用线性函数来拟合输出标签。具体定义为，输入特征$X \\in {R^{n_x}}$，参数$w \\in {R^{n_x}}$，$b \\in {R}$。那么令输出标签\n\\\\[{ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)\\\\]\n其中\\\\[\\sigma ({x^{^{(i)}}}) = \\frac{1}{ {1 + {e^{ - {x^{^{(i)}}}}}}}\\\\]\n\n# 2.3 logistic回归损失函数\n---\n损失函数衡量的是输出标签${\\hat y}$与真实标签$y$之间的差距，有很多种定义方法，下面是常用的两种：\n\\\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) = \\frac{1}{2}{({ {\\hat y}^{^{(i)}}} - {y^{^{(i)}}})^2}\\\\]和\n\\\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) =  - [{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]\\\\]\n一般我们使用下面一种损失函数，具体原因最后一节课会讲到，因为它是个凸函数，方便梯度下降。\n\n如果有$m$个样本，那么总的损失函数就定义为\n\\\\[J(w,b) = \\frac{1}{m}\\sum\\limits_{i - 1}^m {L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}})}  =  - \\frac{1}{m}\\sum\\limits_{i - 1}^m {[{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]} \\\\]\n\n# 2.4 梯度下降法\n---\n通过重复\n\\\\[w: = w - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial w}}\\\\]\n和\n\\\\[b: = b - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial b}}\\\\]\n来不断更新$w$和$b$，使得$w$和$b$接近最优值。\n\n# 2.7 计算图\n---\n![](14.jpg)\n\n如上图所示就是一个计算图，初始结点都是输入值，中间一个结点表示一个运算，最后一个结点就是输出值。\n\n# 2.8 计算图的导数计算\n---\n![](15.jpg)\n\n反向传播的时候只要沿着红色的箭头利用求导链式法则来对每个参数求导就行了。\n\n# 2.9 logistic回归中的梯度下降\n---\n![](16.jpg)\n\nlogistic回归的计算图如上图所示，导数如下：\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial a}} =  - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial z}} = \\frac{ {\\partial L(a,y)}}{ {\\partial a}} \\cdot \\frac{ {\\partial a}}{ {\\partial z}} = ( - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}) \\cdot a(1 - a) = a - y\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_1}}} = {x_1} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_1}(a - y)\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_2}}} = {x_2} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_2}(a - y)\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial b}} = \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = a - y\\\\]\n\n# 2.10 $m$个样本的梯度下降\n---\n![](17.jpg)\n\n$m$个样本的梯度其实就是每个样本的梯度求和，如图所示的伪代码中，用一层`for`循环来对梯度进行求和。在后面的课程中我们将会摒弃这种做法，用更快速的向量化方法来进行计算。\n\n# 2.11 向量化\n---\n向量化就是将例如${w^T}x$这样的矩阵点乘用python的`numpy`库函数`dot`代替普通的`for`循环。示例代码如下：\n```python\nimport numpy as np\n\na = np.random.rand(1000000)\nb = np.random.rand(1000000)\nc = np.dot(a, b)\nprint c\n```\n# 2.12 向量化的更多例子\n---\n经验法则是能不使用`for`循环就尽量不要使用，用向量来代替。更多的向量化例子有`np.exp()`，`np.sum()`等等。\n\n# 2.13 向量化logistic回归\n---\n之前提到的算法是用`for`循环来计算所有的${ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)$。现在可以使用向量化来加快计算速度，只要计算$Y = \\sigma ({w^T}X + b)$即可。\n\n# 2.14 向量化logistic回归的梯度输出\n---\nlogistic回归的梯度用向量可以表示为\n\\\\[dz = A - Y\\\\]\n\\\\[dw = \\frac{1}{m}Xd{z^T}\\\\]\n下面两节课都是讲的python的广播和向量的一些说明，在此就不细讲了，大家可以去查看python文档。其中讲到的一个写python程序的好习惯就是用到向量的时候如果不确定维数，那么你就`reshape()`一下，还有就是加一句`assert()`语句判断一下维数。\n","source":"_posts/dl2.md","raw":"---\ntitle: 吴恩达深度学习公开课第二周学习笔记\ndate: 2017-09-19 18:34:39\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 神经网络\n- 深度学习\ncategories:\n- 深度学习\n---\n<p>这周开始将会学到神经网络编程的基础知识。</p>\n\n# 2.1 二分分类\n---\n![](13.jpg)\n\n二分类问题就是给定一个输入$x$，预测它的标签$y$是0还是1。拿预测一张图片是不是猫来举例子，一张图片大小为${\\rm{64}} \\times {\\rm{64}}$，将它转化为三个矩阵分别代表RGB分量。再将三个矩阵合并成一个大小为${\\rm{(64}} \\times {\\rm{64}} \\times {\\rm{3,1)}}$的矩阵作为输入$x$。\n\n下面给出一些以后要用到的符号表示。\n\n一个样本用$(x,y)$表示，其中$x \\in {R^{ {n_x}}}$，$y \\in \\{ 0,1\\} $，那么$m$个训练样本就可以用集合$\\\\{ ({x^{(1)}},{y^{(1)}}),({x^{(2)}},{y^{(2)}}), \\ldots ,({x^{(m)}},{y^{(m)}})\\\\} $来表示。\n\n我们还可以将所有样本特征值用一个矩阵表示：\n\\\\[X = \\left[ {\\begin{array}{*{20}{l}} \\vdots & \\vdots & \\cdots & \\vdots \\\\\\\\{ {x^{(1)}}}&{ {x^{(2)}}}& \\cdots &{ {x^{(m)}}}\\\\\\\\ \\vdots & \\vdots & \\cdots & \\vdots \\end{array}} \\right]\\\\]\n\n其中$X \\in {R^{ {n_x} \\times m}}$。\n所有样本标签也可以用一个矩阵表示：\n\\\\[Y = \\left[ {\\begin{array}{*{20}{l}}{ {y^{(1)}}}&{ {y^{(2)}}}& \\cdots &{ {y^{(m)}}}\\end{array}} \\right]\\\\]\n\n其中$Y \\in {R^{1 \\times m}}$。\n\n# 2.2 logistic回归\n---\nlogistic回归就是用线性函数来拟合输出标签。具体定义为，输入特征$X \\in {R^{n_x}}$，参数$w \\in {R^{n_x}}$，$b \\in {R}$。那么令输出标签\n\\\\[{ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)\\\\]\n其中\\\\[\\sigma ({x^{^{(i)}}}) = \\frac{1}{ {1 + {e^{ - {x^{^{(i)}}}}}}}\\\\]\n\n# 2.3 logistic回归损失函数\n---\n损失函数衡量的是输出标签${\\hat y}$与真实标签$y$之间的差距，有很多种定义方法，下面是常用的两种：\n\\\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) = \\frac{1}{2}{({ {\\hat y}^{^{(i)}}} - {y^{^{(i)}}})^2}\\\\]和\n\\\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) =  - [{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]\\\\]\n一般我们使用下面一种损失函数，具体原因最后一节课会讲到，因为它是个凸函数，方便梯度下降。\n\n如果有$m$个样本，那么总的损失函数就定义为\n\\\\[J(w,b) = \\frac{1}{m}\\sum\\limits_{i - 1}^m {L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}})}  =  - \\frac{1}{m}\\sum\\limits_{i - 1}^m {[{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]} \\\\]\n\n# 2.4 梯度下降法\n---\n通过重复\n\\\\[w: = w - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial w}}\\\\]\n和\n\\\\[b: = b - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial b}}\\\\]\n来不断更新$w$和$b$，使得$w$和$b$接近最优值。\n\n# 2.7 计算图\n---\n![](14.jpg)\n\n如上图所示就是一个计算图，初始结点都是输入值，中间一个结点表示一个运算，最后一个结点就是输出值。\n\n# 2.8 计算图的导数计算\n---\n![](15.jpg)\n\n反向传播的时候只要沿着红色的箭头利用求导链式法则来对每个参数求导就行了。\n\n# 2.9 logistic回归中的梯度下降\n---\n![](16.jpg)\n\nlogistic回归的计算图如上图所示，导数如下：\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial a}} =  - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial z}} = \\frac{ {\\partial L(a,y)}}{ {\\partial a}} \\cdot \\frac{ {\\partial a}}{ {\\partial z}} = ( - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}) \\cdot a(1 - a) = a - y\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_1}}} = {x_1} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_1}(a - y)\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_2}}} = {x_2} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_2}(a - y)\\\\]\n\\\\[\\frac{ {\\partial L(a,y)}}{ {\\partial b}} = \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = a - y\\\\]\n\n# 2.10 $m$个样本的梯度下降\n---\n![](17.jpg)\n\n$m$个样本的梯度其实就是每个样本的梯度求和，如图所示的伪代码中，用一层`for`循环来对梯度进行求和。在后面的课程中我们将会摒弃这种做法，用更快速的向量化方法来进行计算。\n\n# 2.11 向量化\n---\n向量化就是将例如${w^T}x$这样的矩阵点乘用python的`numpy`库函数`dot`代替普通的`for`循环。示例代码如下：\n```python\nimport numpy as np\n\na = np.random.rand(1000000)\nb = np.random.rand(1000000)\nc = np.dot(a, b)\nprint c\n```\n# 2.12 向量化的更多例子\n---\n经验法则是能不使用`for`循环就尽量不要使用，用向量来代替。更多的向量化例子有`np.exp()`，`np.sum()`等等。\n\n# 2.13 向量化logistic回归\n---\n之前提到的算法是用`for`循环来计算所有的${ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)$。现在可以使用向量化来加快计算速度，只要计算$Y = \\sigma ({w^T}X + b)$即可。\n\n# 2.14 向量化logistic回归的梯度输出\n---\nlogistic回归的梯度用向量可以表示为\n\\\\[dz = A - Y\\\\]\n\\\\[dw = \\frac{1}{m}Xd{z^T}\\\\]\n下面两节课都是讲的python的广播和向量的一些说明，在此就不细讲了，大家可以去查看python文档。其中讲到的一个写python程序的好习惯就是用到向量的时候如果不确定维数，那么你就`reshape()`一下，还有就是加一句`assert()`语句判断一下维数。\n","slug":"dl2","published":1,"updated":"2019-07-19T17:12:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982gx00837swe276ql81u","content":"<p>这周开始将会学到神经网络编程的基础知识。</p>\n\n<h1 id=\"2-1-二分分类\"><a href=\"#2-1-二分分类\" class=\"headerlink\" title=\"2.1 二分分类\"></a>2.1 二分分类</h1><hr>\n<p><img src=\"13.jpg\" alt></p>\n<p>二分类问题就是给定一个输入$x$，预测它的标签$y$是0还是1。拿预测一张图片是不是猫来举例子，一张图片大小为${\\rm{64}} \\times {\\rm{64}}$，将它转化为三个矩阵分别代表RGB分量。再将三个矩阵合并成一个大小为${\\rm{(64}} \\times {\\rm{64}} \\times {\\rm{3,1)}}$的矩阵作为输入$x$。</p>\n<p>下面给出一些以后要用到的符号表示。</p>\n<p>一个样本用$(x,y)$表示，其中$x \\in {R^{ {n_x}}}$，$y \\in \\{ 0,1\\} $，那么$m$个训练样本就可以用集合$\\\\{ ({x^{(1)}},{y^{(1)}}),({x^{(2)}},{y^{(2)}}), \\ldots ,({x^{(m)}},{y^{(m)}})\\\\} $来表示。</p>\n<p>我们还可以将所有样本特征值用一个矩阵表示：<br>\\[X = \\left[ {\\begin{array}{*{20}{l}} \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\\\\\{ {x^{(1)}}}&amp;{ {x^{(2)}}}&amp; \\cdots &amp;{ {x^{(m)}}}\\\\\\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\end{array}} \\right]\\]</p>\n<p>其中$X \\in {R^{ {n_x} \\times m}}$。<br>所有样本标签也可以用一个矩阵表示：<br>\\[Y = \\left[ {\\begin{array}{*{20}{l}}{ {y^{(1)}}}&amp;{ {y^{(2)}}}&amp; \\cdots &amp;{ {y^{(m)}}}\\end{array}} \\right]\\]</p>\n<p>其中$Y \\in {R^{1 \\times m}}$。</p>\n<h1 id=\"2-2-logistic回归\"><a href=\"#2-2-logistic回归\" class=\"headerlink\" title=\"2.2 logistic回归\"></a>2.2 logistic回归</h1><hr>\n<p>logistic回归就是用线性函数来拟合输出标签。具体定义为，输入特征$X \\in {R^{n_x}}$，参数$w \\in {R^{n_x}}$，$b \\in {R}$。那么令输出标签<br>\\[{ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)\\]<br>其中\\[\\sigma ({x^{^{(i)}}}) = \\frac{1}{ {1 + {e^{ - {x^{^{(i)}}}}}}}\\]</p>\n<h1 id=\"2-3-logistic回归损失函数\"><a href=\"#2-3-logistic回归损失函数\" class=\"headerlink\" title=\"2.3 logistic回归损失函数\"></a>2.3 logistic回归损失函数</h1><hr>\n<p>损失函数衡量的是输出标签${\\hat y}$与真实标签$y$之间的差距，有很多种定义方法，下面是常用的两种：<br>\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) = \\frac{1}{2}{({ {\\hat y}^{^{(i)}}} - {y^{^{(i)}}})^2}\\]和<br>\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) =  - [{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]\\]<br>一般我们使用下面一种损失函数，具体原因最后一节课会讲到，因为它是个凸函数，方便梯度下降。</p>\n<p>如果有$m$个样本，那么总的损失函数就定义为<br>\\[J(w,b) = \\frac{1}{m}\\sum\\limits_{i - 1}^m {L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}})}  =  - \\frac{1}{m}\\sum\\limits_{i - 1}^m {[{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]} \\]</p>\n<h1 id=\"2-4-梯度下降法\"><a href=\"#2-4-梯度下降法\" class=\"headerlink\" title=\"2.4 梯度下降法\"></a>2.4 梯度下降法</h1><hr>\n<p>通过重复<br>\\[w: = w - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial w}}\\]<br>和<br>\\[b: = b - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial b}}\\]<br>来不断更新$w$和$b$，使得$w$和$b$接近最优值。</p>\n<h1 id=\"2-7-计算图\"><a href=\"#2-7-计算图\" class=\"headerlink\" title=\"2.7 计算图\"></a>2.7 计算图</h1><hr>\n<p><img src=\"14.jpg\" alt></p>\n<p>如上图所示就是一个计算图，初始结点都是输入值，中间一个结点表示一个运算，最后一个结点就是输出值。</p>\n<h1 id=\"2-8-计算图的导数计算\"><a href=\"#2-8-计算图的导数计算\" class=\"headerlink\" title=\"2.8 计算图的导数计算\"></a>2.8 计算图的导数计算</h1><hr>\n<p><img src=\"15.jpg\" alt></p>\n<p>反向传播的时候只要沿着红色的箭头利用求导链式法则来对每个参数求导就行了。</p>\n<h1 id=\"2-9-logistic回归中的梯度下降\"><a href=\"#2-9-logistic回归中的梯度下降\" class=\"headerlink\" title=\"2.9 logistic回归中的梯度下降\"></a>2.9 logistic回归中的梯度下降</h1><hr>\n<p><img src=\"16.jpg\" alt></p>\n<p>logistic回归的计算图如上图所示，导数如下：<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial a}} =  - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial z}} = \\frac{ {\\partial L(a,y)}}{ {\\partial a}} \\cdot \\frac{ {\\partial a}}{ {\\partial z}} = ( - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}) \\cdot a(1 - a) = a - y\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_1}}} = {x_1} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_1}(a - y)\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_2}}} = {x_2} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_2}(a - y)\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial b}} = \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = a - y\\]</p>\n<h1 id=\"2-10-m-个样本的梯度下降\"><a href=\"#2-10-m-个样本的梯度下降\" class=\"headerlink\" title=\"2.10 $m$个样本的梯度下降\"></a>2.10 $m$个样本的梯度下降</h1><hr>\n<p><img src=\"17.jpg\" alt></p>\n<p>$m$个样本的梯度其实就是每个样本的梯度求和，如图所示的伪代码中，用一层<code>for</code>循环来对梯度进行求和。在后面的课程中我们将会摒弃这种做法，用更快速的向量化方法来进行计算。</p>\n<h1 id=\"2-11-向量化\"><a href=\"#2-11-向量化\" class=\"headerlink\" title=\"2.11 向量化\"></a>2.11 向量化</h1><hr>\n<p>向量化就是将例如${w^T}x$这样的矩阵点乘用python的<code>numpy</code>库函数<code>dot</code>代替普通的<code>for</code>循环。示例代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> c</code></pre>\n<h1 id=\"2-12-向量化的更多例子\"><a href=\"#2-12-向量化的更多例子\" class=\"headerlink\" title=\"2.12 向量化的更多例子\"></a>2.12 向量化的更多例子</h1><hr>\n<p>经验法则是能不使用<code>for</code>循环就尽量不要使用，用向量来代替。更多的向量化例子有<code>np.exp()</code>，<code>np.sum()</code>等等。</p>\n<h1 id=\"2-13-向量化logistic回归\"><a href=\"#2-13-向量化logistic回归\" class=\"headerlink\" title=\"2.13 向量化logistic回归\"></a>2.13 向量化logistic回归</h1><hr>\n<p>之前提到的算法是用<code>for</code>循环来计算所有的${ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)$。现在可以使用向量化来加快计算速度，只要计算$Y = \\sigma ({w^T}X + b)$即可。</p>\n<h1 id=\"2-14-向量化logistic回归的梯度输出\"><a href=\"#2-14-向量化logistic回归的梯度输出\" class=\"headerlink\" title=\"2.14 向量化logistic回归的梯度输出\"></a>2.14 向量化logistic回归的梯度输出</h1><hr>\n<p>logistic回归的梯度用向量可以表示为<br>\\[dz = A - Y\\]<br>\\[dw = \\frac{1}{m}Xd{z^T}\\]<br>下面两节课都是讲的python的广播和向量的一些说明，在此就不细讲了，大家可以去查看python文档。其中讲到的一个写python程序的好习惯就是用到向量的时候如果不确定维数，那么你就<code>reshape()</code>一下，还有就是加一句<code>assert()</code>语句判断一下维数。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>这周开始将会学到神经网络编程的基础知识。</p>\n\n<h1 id=\"2-1-二分分类\"><a href=\"#2-1-二分分类\" class=\"headerlink\" title=\"2.1 二分分类\"></a>2.1 二分分类</h1><hr>\n<p><img src=\"13.jpg\" alt></p>\n<p>二分类问题就是给定一个输入$x$，预测它的标签$y$是0还是1。拿预测一张图片是不是猫来举例子，一张图片大小为${\\rm{64}} \\times {\\rm{64}}$，将它转化为三个矩阵分别代表RGB分量。再将三个矩阵合并成一个大小为${\\rm{(64}} \\times {\\rm{64}} \\times {\\rm{3,1)}}$的矩阵作为输入$x$。</p>\n<p>下面给出一些以后要用到的符号表示。</p>\n<p>一个样本用$(x,y)$表示，其中$x \\in {R^{ {n_x}}}$，$y \\in \\{ 0,1\\} $，那么$m$个训练样本就可以用集合$\\\\{ ({x^{(1)}},{y^{(1)}}),({x^{(2)}},{y^{(2)}}), \\ldots ,({x^{(m)}},{y^{(m)}})\\\\} $来表示。</p>\n<p>我们还可以将所有样本特征值用一个矩阵表示：<br>\\[X = \\left[ {\\begin{array}{*{20}{l}} \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\\\\\{ {x^{(1)}}}&amp;{ {x^{(2)}}}&amp; \\cdots &amp;{ {x^{(m)}}}\\\\\\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\end{array}} \\right]\\]</p>\n<p>其中$X \\in {R^{ {n_x} \\times m}}$。<br>所有样本标签也可以用一个矩阵表示：<br>\\[Y = \\left[ {\\begin{array}{*{20}{l}}{ {y^{(1)}}}&amp;{ {y^{(2)}}}&amp; \\cdots &amp;{ {y^{(m)}}}\\end{array}} \\right]\\]</p>\n<p>其中$Y \\in {R^{1 \\times m}}$。</p>\n<h1 id=\"2-2-logistic回归\"><a href=\"#2-2-logistic回归\" class=\"headerlink\" title=\"2.2 logistic回归\"></a>2.2 logistic回归</h1><hr>\n<p>logistic回归就是用线性函数来拟合输出标签。具体定义为，输入特征$X \\in {R^{n_x}}$，参数$w \\in {R^{n_x}}$，$b \\in {R}$。那么令输出标签<br>\\[{ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)\\]<br>其中\\[\\sigma ({x^{^{(i)}}}) = \\frac{1}{ {1 + {e^{ - {x^{^{(i)}}}}}}}\\]</p>\n<h1 id=\"2-3-logistic回归损失函数\"><a href=\"#2-3-logistic回归损失函数\" class=\"headerlink\" title=\"2.3 logistic回归损失函数\"></a>2.3 logistic回归损失函数</h1><hr>\n<p>损失函数衡量的是输出标签${\\hat y}$与真实标签$y$之间的差距，有很多种定义方法，下面是常用的两种：<br>\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) = \\frac{1}{2}{({ {\\hat y}^{^{(i)}}} - {y^{^{(i)}}})^2}\\]和<br>\\[L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}}) =  - [{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]\\]<br>一般我们使用下面一种损失函数，具体原因最后一节课会讲到，因为它是个凸函数，方便梯度下降。</p>\n<p>如果有$m$个样本，那么总的损失函数就定义为<br>\\[J(w,b) = \\frac{1}{m}\\sum\\limits_{i - 1}^m {L({ {\\hat y}^{^{(i)}}},{y^{^{(i)}}})}  =  - \\frac{1}{m}\\sum\\limits_{i - 1}^m {[{y^{(i)}}\\log ({ {\\hat y}^{(i)}}) + (1 - {y^{(i)}})\\log (1 - { {\\hat y}^{(i)}})]} \\]</p>\n<h1 id=\"2-4-梯度下降法\"><a href=\"#2-4-梯度下降法\" class=\"headerlink\" title=\"2.4 梯度下降法\"></a>2.4 梯度下降法</h1><hr>\n<p>通过重复<br>\\[w: = w - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial w}}\\]<br>和<br>\\[b: = b - \\alpha \\frac{ {\\partial J(w,b)}}{ {\\partial b}}\\]<br>来不断更新$w$和$b$，使得$w$和$b$接近最优值。</p>\n<h1 id=\"2-7-计算图\"><a href=\"#2-7-计算图\" class=\"headerlink\" title=\"2.7 计算图\"></a>2.7 计算图</h1><hr>\n<p><img src=\"14.jpg\" alt></p>\n<p>如上图所示就是一个计算图，初始结点都是输入值，中间一个结点表示一个运算，最后一个结点就是输出值。</p>\n<h1 id=\"2-8-计算图的导数计算\"><a href=\"#2-8-计算图的导数计算\" class=\"headerlink\" title=\"2.8 计算图的导数计算\"></a>2.8 计算图的导数计算</h1><hr>\n<p><img src=\"15.jpg\" alt></p>\n<p>反向传播的时候只要沿着红色的箭头利用求导链式法则来对每个参数求导就行了。</p>\n<h1 id=\"2-9-logistic回归中的梯度下降\"><a href=\"#2-9-logistic回归中的梯度下降\" class=\"headerlink\" title=\"2.9 logistic回归中的梯度下降\"></a>2.9 logistic回归中的梯度下降</h1><hr>\n<p><img src=\"16.jpg\" alt></p>\n<p>logistic回归的计算图如上图所示，导数如下：<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial a}} =  - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial z}} = \\frac{ {\\partial L(a,y)}}{ {\\partial a}} \\cdot \\frac{ {\\partial a}}{ {\\partial z}} = ( - \\frac{y}{a} + \\frac{ {1 - y}}{ {1 - a}}) \\cdot a(1 - a) = a - y\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_1}}} = {x_1} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_1}(a - y)\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial {w_2}}} = {x_2} \\cdot \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = {x_2}(a - y)\\]<br>\\[\\frac{ {\\partial L(a,y)}}{ {\\partial b}} = \\frac{ {\\partial L(a,y)}}{ {\\partial z}} = a - y\\]</p>\n<h1 id=\"2-10-m-个样本的梯度下降\"><a href=\"#2-10-m-个样本的梯度下降\" class=\"headerlink\" title=\"2.10 $m$个样本的梯度下降\"></a>2.10 $m$个样本的梯度下降</h1><hr>\n<p><img src=\"17.jpg\" alt></p>\n<p>$m$个样本的梯度其实就是每个样本的梯度求和，如图所示的伪代码中，用一层<code>for</code>循环来对梯度进行求和。在后面的课程中我们将会摒弃这种做法，用更快速的向量化方法来进行计算。</p>\n<h1 id=\"2-11-向量化\"><a href=\"#2-11-向量化\" class=\"headerlink\" title=\"2.11 向量化\"></a>2.11 向量化</h1><hr>\n<p>向量化就是将例如${w^T}x$这样的矩阵点乘用python的<code>numpy</code>库函数<code>dot</code>代替普通的<code>for</code>循环。示例代码如下：</p>\n<pre><code class=\"python\">import numpy as np\n\na = np.random.rand(1000000)\nb = np.random.rand(1000000)\nc = np.dot(a, b)\nprint c</code></pre>\n<h1 id=\"2-12-向量化的更多例子\"><a href=\"#2-12-向量化的更多例子\" class=\"headerlink\" title=\"2.12 向量化的更多例子\"></a>2.12 向量化的更多例子</h1><hr>\n<p>经验法则是能不使用<code>for</code>循环就尽量不要使用，用向量来代替。更多的向量化例子有<code>np.exp()</code>，<code>np.sum()</code>等等。</p>\n<h1 id=\"2-13-向量化logistic回归\"><a href=\"#2-13-向量化logistic回归\" class=\"headerlink\" title=\"2.13 向量化logistic回归\"></a>2.13 向量化logistic回归</h1><hr>\n<p>之前提到的算法是用<code>for</code>循环来计算所有的${ {\\hat y}^{(i)}} = \\sigma ({w^T}{x^{^{(i)}}} + b)$。现在可以使用向量化来加快计算速度，只要计算$Y = \\sigma ({w^T}X + b)$即可。</p>\n<h1 id=\"2-14-向量化logistic回归的梯度输出\"><a href=\"#2-14-向量化logistic回归的梯度输出\" class=\"headerlink\" title=\"2.14 向量化logistic回归的梯度输出\"></a>2.14 向量化logistic回归的梯度输出</h1><hr>\n<p>logistic回归的梯度用向量可以表示为<br>\\[dz = A - Y\\]<br>\\[dw = \\frac{1}{m}Xd{z^T}\\]<br>下面两节课都是讲的python的广播和向量的一些说明，在此就不细讲了，大家可以去查看python文档。其中讲到的一个写python程序的好习惯就是用到向量的时候如果不确定维数，那么你就<code>reshape()</code>一下，还有就是加一句<code>assert()</code>语句判断一下维数。</p>\n"},{"title":"吴恩达深度学习公开课第二周编程练习1","date":"2017-09-20T03:22:59.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n这次编程练习是吴恩达深度学习公开课第二周的配套练习，地址：[coursera](https://www.coursera.org/learn/neural-networks-deep-learning)。\n\n# 1 - Building basic functions with numpy\n---\n## 1.1 - sigmoid function, np.exp()\nExercise: Build a function that returns the sigmoid of a real number x. Use `math.exp(x)` for the exponential function.\n```python\n# GRADED FUNCTION: basic_sigmoid\n\nimport math\n\ndef basic_sigmoid(x):\n    \"\"\"\n    Compute sigmoid of x.\n\n    Arguments:\n    x -- A scalar\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    s = 1 / (1 + math.exp(-x))\n    ### END CODE HERE ###\n    \n    return s\n\nbasic_sigmoid(3)\n```\nExercise: Implement the sigmoid function using `numpy`.\n```python\n# GRADED FUNCTION: sigmoid\n\nimport numpy as np # this means you can access numpy functions by writing np.function() instead of numpy.function()\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    s = 1 / (1 + np.exp(-x))\n    ### END CODE HERE ###\n    \n    return s\n\nx = np.array([1, 2, 3])\nsigmoid(x)\n```\n\n## 1.2 - Sigmoid gradient\nExercise: Implement the function `sigmoid_grad()` to compute the gradient of the sigmoid function with respect to its input x. The formula is:\n\\\\[sigmoid\\\\_derivative(x) = \\sigma'(x) = \\sigma(x) (1 - \\sigma(x))\\\\]\n```python\n# GRADED FUNCTION: sigmoid_derivative\n\ndef sigmoid_derivative(x):\n    \"\"\"\n    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.\n    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.\n    \n    Arguments:\n    x -- A scalar or numpy array\n\n    Return:\n    ds -- Your computed gradient.\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 2 lines of code)\n    s = sigmoid(x)\n    ds = s * (1 - s)\n    ### END CODE HERE ###\n    \n    return ds\n\nx = np.array([1, 2, 3])\nprint (\"sigmoid_derivative(x) = \" + str(sigmoid_derivative(x)))\n```\n\n## 1.3 - Reshaping arrays\nExercise: Implement `image2vector()` that takes an input of shape (length, height, 3) and returns a vector of shape (length\\*height\\*3, 1). \n```python\n# GRADED FUNCTION: image2vector\ndef image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n    \n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    v = image.reshape(image.shape[0]*image.shape[1]*image.shape[2], 1)\n    ### END CODE HERE ###\n    \n    return v\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint (\"image2vector(image) = \" + str(image2vector(image)))\n```\n\n## 1.4 - Normalizing rows\nExercise: Implement `normalizeRows()` to normalize the rows of a matrix. After applying this function to an input matrix x, each row of x should be a vector of unit length (meaning length 1).\n```python\n# GRADED FUNCTION: normalizeRows\n\ndef normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n    \n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    \n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 2 lines of code)\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = True)\n    \n    # Divide x by its norm.\n    x = x / x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0, 3, 4],\n    [1, 6, 4]])\nprint(\"normalizeRows(x) = \" + str(normalizeRows(x)))\n```\n\n## 1.5 - Broadcasting and the softmax function\nExercise: Implement a `softmax` function using numpy. You can think of softmax as a normalizing function used when your algorithm needs to classify two or more classes. You will learn more about softmax in the second course of this specialization.\n```python\n# GRADED FUNCTION: softmax\n\ndef softmax(x):\n    \"\"\"Calculates the softmax for each row of the input x.\n\n    Your code should work for a row vector and also for matrices of shape (n, m).\n\n    Argument:\n    x -- A numpy matrix of shape (n,m)\n\n    Returns:\n    s -- A numpy matrix equal to the softmax of x, of shape (n,m)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 3 lines of code)\n    # Apply exp() element-wise to x. Use np.exp(...).\n    x_exp = np.exp(x)\n\n    # Create a vector x_sum that sums each row of x_exp. Use np.sum(..., axis = 1, keepdims = True).\n    x_sum = np.sum(x_exp, axis=1, keepdims=True)\n    \n    # Compute softmax(x) by dividing x_exp by x_sum. It should automatically use numpy broadcasting.\n    s = x_exp / x_sum\n\n    ### END CODE HERE ###\n    \n    return s\n\nx = np.array([\n    [9, 2, 5, 0, 0],\n    [7, 5, 0, 0 ,0]])\nprint(\"softmax(x) = \" + str(softmax(x)))\n```\n\n# 2 - Vectorization\n---\n## 2.1 - Implement the L1 and L2 loss functions\nExercise: Implement the numpy vectorized version of the `L1` loss. You may find the function `abs(x)` (absolute value of x) useful.\n```python\n# GRADED FUNCTION: L1\n\ndef L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n    \n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    loss = np.sum(abs(y - yhat))\n    ### END CODE HERE ###\n    \n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(\"L1 = \" + str(L1(yhat,y)))\n```\n\nExercise: Implement the numpy vectorized version of the `L2` loss. There are several way of implementing the `L2` loss but you may find the function `np.dot()` useful. As a reminder, if $x = [x_1, x_2, ..., x_n]$, then `np.dot(x,x)` = $\\sum_{j=0}^n x_j^{2}$\n```python\n# GRADED FUNCTION: L2\n\ndef L2(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n    \n    Returns:\n    loss -- the value of the L2 loss function defined above\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    loss = np.sum(np.dot(y - yhat, y - yhat))\n    ### END CODE HERE ###\n    \n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(\"L2 = \" + str(L2(yhat,y)))\n```\n","source":"_posts/dlhw1.md","raw":"---\ntitle: 吴恩达深度学习公开课第二周编程练习1\ndate: 2017-09-20 11:22:59\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 神经网络\n- 深度学习\ncategories:\n- 深度学习\n---\n\n这次编程练习是吴恩达深度学习公开课第二周的配套练习，地址：[coursera](https://www.coursera.org/learn/neural-networks-deep-learning)。\n\n# 1 - Building basic functions with numpy\n---\n## 1.1 - sigmoid function, np.exp()\nExercise: Build a function that returns the sigmoid of a real number x. Use `math.exp(x)` for the exponential function.\n```python\n# GRADED FUNCTION: basic_sigmoid\n\nimport math\n\ndef basic_sigmoid(x):\n    \"\"\"\n    Compute sigmoid of x.\n\n    Arguments:\n    x -- A scalar\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    s = 1 / (1 + math.exp(-x))\n    ### END CODE HERE ###\n    \n    return s\n\nbasic_sigmoid(3)\n```\nExercise: Implement the sigmoid function using `numpy`.\n```python\n# GRADED FUNCTION: sigmoid\n\nimport numpy as np # this means you can access numpy functions by writing np.function() instead of numpy.function()\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    s = 1 / (1 + np.exp(-x))\n    ### END CODE HERE ###\n    \n    return s\n\nx = np.array([1, 2, 3])\nsigmoid(x)\n```\n\n## 1.2 - Sigmoid gradient\nExercise: Implement the function `sigmoid_grad()` to compute the gradient of the sigmoid function with respect to its input x. The formula is:\n\\\\[sigmoid\\\\_derivative(x) = \\sigma'(x) = \\sigma(x) (1 - \\sigma(x))\\\\]\n```python\n# GRADED FUNCTION: sigmoid_derivative\n\ndef sigmoid_derivative(x):\n    \"\"\"\n    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.\n    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.\n    \n    Arguments:\n    x -- A scalar or numpy array\n\n    Return:\n    ds -- Your computed gradient.\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 2 lines of code)\n    s = sigmoid(x)\n    ds = s * (1 - s)\n    ### END CODE HERE ###\n    \n    return ds\n\nx = np.array([1, 2, 3])\nprint (\"sigmoid_derivative(x) = \" + str(sigmoid_derivative(x)))\n```\n\n## 1.3 - Reshaping arrays\nExercise: Implement `image2vector()` that takes an input of shape (length, height, 3) and returns a vector of shape (length\\*height\\*3, 1). \n```python\n# GRADED FUNCTION: image2vector\ndef image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n    \n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    v = image.reshape(image.shape[0]*image.shape[1]*image.shape[2], 1)\n    ### END CODE HERE ###\n    \n    return v\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint (\"image2vector(image) = \" + str(image2vector(image)))\n```\n\n## 1.4 - Normalizing rows\nExercise: Implement `normalizeRows()` to normalize the rows of a matrix. After applying this function to an input matrix x, each row of x should be a vector of unit length (meaning length 1).\n```python\n# GRADED FUNCTION: normalizeRows\n\ndef normalizeRows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n    \n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    \n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 2 lines of code)\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = True)\n    \n    # Divide x by its norm.\n    x = x / x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0, 3, 4],\n    [1, 6, 4]])\nprint(\"normalizeRows(x) = \" + str(normalizeRows(x)))\n```\n\n## 1.5 - Broadcasting and the softmax function\nExercise: Implement a `softmax` function using numpy. You can think of softmax as a normalizing function used when your algorithm needs to classify two or more classes. You will learn more about softmax in the second course of this specialization.\n```python\n# GRADED FUNCTION: softmax\n\ndef softmax(x):\n    \"\"\"Calculates the softmax for each row of the input x.\n\n    Your code should work for a row vector and also for matrices of shape (n, m).\n\n    Argument:\n    x -- A numpy matrix of shape (n,m)\n\n    Returns:\n    s -- A numpy matrix equal to the softmax of x, of shape (n,m)\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 3 lines of code)\n    # Apply exp() element-wise to x. Use np.exp(...).\n    x_exp = np.exp(x)\n\n    # Create a vector x_sum that sums each row of x_exp. Use np.sum(..., axis = 1, keepdims = True).\n    x_sum = np.sum(x_exp, axis=1, keepdims=True)\n    \n    # Compute softmax(x) by dividing x_exp by x_sum. It should automatically use numpy broadcasting.\n    s = x_exp / x_sum\n\n    ### END CODE HERE ###\n    \n    return s\n\nx = np.array([\n    [9, 2, 5, 0, 0],\n    [7, 5, 0, 0 ,0]])\nprint(\"softmax(x) = \" + str(softmax(x)))\n```\n\n# 2 - Vectorization\n---\n## 2.1 - Implement the L1 and L2 loss functions\nExercise: Implement the numpy vectorized version of the `L1` loss. You may find the function `abs(x)` (absolute value of x) useful.\n```python\n# GRADED FUNCTION: L1\n\ndef L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n    \n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    loss = np.sum(abs(y - yhat))\n    ### END CODE HERE ###\n    \n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(\"L1 = \" + str(L1(yhat,y)))\n```\n\nExercise: Implement the numpy vectorized version of the `L2` loss. There are several way of implementing the `L2` loss but you may find the function `np.dot()` useful. As a reminder, if $x = [x_1, x_2, ..., x_n]$, then `np.dot(x,x)` = $\\sum_{j=0}^n x_j^{2}$\n```python\n# GRADED FUNCTION: L2\n\ndef L2(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n    \n    Returns:\n    loss -- the value of the L2 loss function defined above\n    \"\"\"\n    \n    ### START CODE HERE ### (≈ 1 line of code)\n    loss = np.sum(np.dot(y - yhat, y - yhat))\n    ### END CODE HERE ###\n    \n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(\"L2 = \" + str(L2(yhat,y)))\n```\n","slug":"dlhw1","published":1,"updated":"2019-07-19T17:12:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982h000867swegwnzi4yr","content":"<p>这次编程练习是吴恩达深度学习公开课第二周的配套练习，地址：<a href=\"https://www.coursera.org/learn/neural-networks-deep-learning\" target=\"_blank\" rel=\"noopener\">coursera</a>。</p>\n<h1 id=\"1-Building-basic-functions-with-numpy\"><a href=\"#1-Building-basic-functions-with-numpy\" class=\"headerlink\" title=\"1 - Building basic functions with numpy\"></a>1 - Building basic functions with numpy</h1><hr>\n<h2 id=\"1-1-sigmoid-function-np-exp\"><a href=\"#1-1-sigmoid-function-np-exp\" class=\"headerlink\" title=\"1.1 - sigmoid function, np.exp()\"></a>1.1 - sigmoid function, np.exp()</h2><p>Exercise: Build a function that returns the sigmoid of a real number x. Use <code>math.exp(x)</code> for the exponential function.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: basic_sigmoid</span>\n\n<span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">basic_sigmoid</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Compute sigmoid of x.\n\n    Arguments:\n    x -- A scalar\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 1 line of code)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> s\n\nbasic_sigmoid<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Exercise: Implement the sigmoid function using <code>numpy</code>.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: sigmoid</span>\n\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np <span class=\"token comment\" spellcheck=\"true\"># this means you can access numpy functions by writing np.function() instead of numpy.function()</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sigmoid</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 1 line of code)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> s\n\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nsigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"1-2-Sigmoid-gradient\"><a href=\"#1-2-Sigmoid-gradient\" class=\"headerlink\" title=\"1.2 - Sigmoid gradient\"></a>1.2 - Sigmoid gradient</h2><p>Exercise: Implement the function <code>sigmoid_grad()</code> to compute the gradient of the sigmoid function with respect to its input x. The formula is:<br>\\[sigmoid\\_derivative(x) = \\sigma’(x) = \\sigma(x) (1 - \\sigma(x))\\]</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: sigmoid_derivative</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sigmoid_derivative</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.\n    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.\n\n    Arguments:\n    x -- A scalar or numpy array\n\n    Return:\n    ds -- Your computed gradient.\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 2 lines of code)</span>\n    s <span class=\"token operator\">=</span> sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    ds <span class=\"token operator\">=</span> s <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> s<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> ds\n\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"sigmoid_derivative(x) = \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>sigmoid_derivative<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"1-3-Reshaping-arrays\"><a href=\"#1-3-Reshaping-arrays\" class=\"headerlink\" title=\"1.3 - Reshaping arrays\"></a>1.3 - Reshaping arrays</h2><p>Exercise: Implement <code>image2vector()</code> that takes an input of shape (length, height, 3) and returns a vector of shape (length*height*3, 1). </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: image2vector</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">image2vector</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 1 line of code)</span>\n    v <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>image<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> v\n\n<span class=\"token comment\" spellcheck=\"true\"># This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values</span>\nimage <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.67826139</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.29380381</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token number\">0.90714982</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.52835647</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token number\">0.4215251</span> <span class=\"token punctuation\">,</span>  <span class=\"token number\">0.45017551</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n       <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.92814219</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.96677647</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token number\">0.85304703</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.52351845</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token number\">0.19981397</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.27417313</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n       <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.60659855</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.00533165</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token number\">0.10820313</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.49978937</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token number\">0.34144279</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.94630077</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"image2vector(image) = \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>image2vector<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"1-4-Normalizing-rows\"><a href=\"#1-4-Normalizing-rows\" class=\"headerlink\" title=\"1.4 - Normalizing rows\"></a>1.4 - Normalizing rows</h2><p>Exercise: Implement <code>normalizeRows()</code> to normalize the rows of a matrix. After applying this function to an input matrix x, each row of x should be a vector of unit length (meaning length 1).</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: normalizeRows</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">normalizeRows</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 2 lines of code)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)</span>\n    x_norm <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> keepdims <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Divide x by its norm.</span>\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> x_norm\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> x\n\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normalizeRows(x) = \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>normalizeRows<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"1-5-Broadcasting-and-the-softmax-function\"><a href=\"#1-5-Broadcasting-and-the-softmax-function\" class=\"headerlink\" title=\"1.5 - Broadcasting and the softmax function\"></a>1.5 - Broadcasting and the softmax function</h2><p>Exercise: Implement a <code>softmax</code> function using numpy. You can think of softmax as a normalizing function used when your algorithm needs to classify two or more classes. You will learn more about softmax in the second course of this specialization.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: softmax</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">softmax</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Calculates the softmax for each row of the input x.\n\n    Your code should work for a row vector and also for matrices of shape (n, m).\n\n    Argument:\n    x -- A numpy matrix of shape (n,m)\n\n    Returns:\n    s -- A numpy matrix equal to the softmax of x, of shape (n,m)\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 3 lines of code)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Apply exp() element-wise to x. Use np.exp(...).</span>\n    x_exp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Create a vector x_sum that sums each row of x_exp. Use np.sum(..., axis = 1, keepdims = True).</span>\n    x_sum <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>x_exp<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> keepdims<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Compute softmax(x) by dividing x_exp by x_sum. It should automatically use numpy broadcasting.</span>\n    s <span class=\"token operator\">=</span> x_exp <span class=\"token operator\">/</span> x_sum\n\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> s\n\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"softmax(x) = \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>softmax<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h1 id=\"2-Vectorization\"><a href=\"#2-Vectorization\" class=\"headerlink\" title=\"2 - Vectorization\"></a>2 - Vectorization</h1><hr>\n<h2 id=\"2-1-Implement-the-L1-and-L2-loss-functions\"><a href=\"#2-1-Implement-the-L1-and-L2-loss-functions\" class=\"headerlink\" title=\"2.1 - Implement the L1 and L2 loss functions\"></a>2.1 - Implement the L1 and L2 loss functions</h2><p>Exercise: Implement the numpy vectorized version of the <code>L1</code> loss. You may find the function <code>abs(x)</code> (absolute value of x) useful.</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: L1</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">L1</span><span class=\"token punctuation\">(</span>yhat<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 1 line of code)</span>\n    loss <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> yhat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> loss\n\nyhat <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L1 = \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">(</span>yhat<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Exercise: Implement the numpy vectorized version of the <code>L2</code> loss. There are several way of implementing the <code>L2</code> loss but you may find the function <code>np.dot()</code> useful. As a reminder, if $x = [x_1, x_2, …, x_n]$, then <code>np.dot(x,x)</code> = $\\sum_{j=0}^n x_j^{2}$</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># GRADED FUNCTION: L2</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">L2</span><span class=\"token punctuation\">(</span>yhat<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L2 loss function defined above\n    \"\"\"</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">### START CODE HERE ### (≈ 1 line of code)</span>\n    loss <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> yhat<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> yhat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">### END CODE HERE ###</span>\n\n    <span class=\"token keyword\">return</span> loss\n\nyhat <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"L2 = \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">(</span>yhat<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>这次编程练习是吴恩达深度学习公开课第二周的配套练习，地址：<a href=\"https://www.coursera.org/learn/neural-networks-deep-learning\" target=\"_blank\" rel=\"noopener\">coursera</a>。</p>\n<h1 id=\"1-Building-basic-functions-with-numpy\"><a href=\"#1-Building-basic-functions-with-numpy\" class=\"headerlink\" title=\"1 - Building basic functions with numpy\"></a>1 - Building basic functions with numpy</h1><hr>\n<h2 id=\"1-1-sigmoid-function-np-exp\"><a href=\"#1-1-sigmoid-function-np-exp\" class=\"headerlink\" title=\"1.1 - sigmoid function, np.exp()\"></a>1.1 - sigmoid function, np.exp()</h2><p>Exercise: Build a function that returns the sigmoid of a real number x. Use <code>math.exp(x)</code> for the exponential function.</p>\n<pre><code class=\"python\"># GRADED FUNCTION: basic_sigmoid\n\nimport math\n\ndef basic_sigmoid(x):\n    &quot;&quot;&quot;\n    Compute sigmoid of x.\n\n    Arguments:\n    x -- A scalar\n\n    Return:\n    s -- sigmoid(x)\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 1 line of code)\n    s = 1 / (1 + math.exp(-x))\n    ### END CODE HERE ###\n\n    return s\n\nbasic_sigmoid(3)</code></pre>\n<p>Exercise: Implement the sigmoid function using <code>numpy</code>.</p>\n<pre><code class=\"python\"># GRADED FUNCTION: sigmoid\n\nimport numpy as np # this means you can access numpy functions by writing np.function() instead of numpy.function()\n\ndef sigmoid(x):\n    &quot;&quot;&quot;\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 1 line of code)\n    s = 1 / (1 + np.exp(-x))\n    ### END CODE HERE ###\n\n    return s\n\nx = np.array([1, 2, 3])\nsigmoid(x)</code></pre>\n<h2 id=\"1-2-Sigmoid-gradient\"><a href=\"#1-2-Sigmoid-gradient\" class=\"headerlink\" title=\"1.2 - Sigmoid gradient\"></a>1.2 - Sigmoid gradient</h2><p>Exercise: Implement the function <code>sigmoid_grad()</code> to compute the gradient of the sigmoid function with respect to its input x. The formula is:<br>\\[sigmoid\\_derivative(x) = \\sigma’(x) = \\sigma(x) (1 - \\sigma(x))\\]</p>\n<pre><code class=\"python\"># GRADED FUNCTION: sigmoid_derivative\n\ndef sigmoid_derivative(x):\n    &quot;&quot;&quot;\n    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.\n    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.\n\n    Arguments:\n    x -- A scalar or numpy array\n\n    Return:\n    ds -- Your computed gradient.\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 2 lines of code)\n    s = sigmoid(x)\n    ds = s * (1 - s)\n    ### END CODE HERE ###\n\n    return ds\n\nx = np.array([1, 2, 3])\nprint (&quot;sigmoid_derivative(x) = &quot; + str(sigmoid_derivative(x)))</code></pre>\n<h2 id=\"1-3-Reshaping-arrays\"><a href=\"#1-3-Reshaping-arrays\" class=\"headerlink\" title=\"1.3 - Reshaping arrays\"></a>1.3 - Reshaping arrays</h2><p>Exercise: Implement <code>image2vector()</code> that takes an input of shape (length, height, 3) and returns a vector of shape (length*height*3, 1). </p>\n<pre><code class=\"python\"># GRADED FUNCTION: image2vector\ndef image2vector(image):\n    &quot;&quot;&quot;\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n\n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 1 line of code)\n    v = image.reshape(image.shape[0]*image.shape[1]*image.shape[2], 1)\n    ### END CODE HERE ###\n\n    return v\n\n# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nimage = np.array([[[ 0.67826139,  0.29380381],\n        [ 0.90714982,  0.52835647],\n        [ 0.4215251 ,  0.45017551]],\n\n       [[ 0.92814219,  0.96677647],\n        [ 0.85304703,  0.52351845],\n        [ 0.19981397,  0.27417313]],\n\n       [[ 0.60659855,  0.00533165],\n        [ 0.10820313,  0.49978937],\n        [ 0.34144279,  0.94630077]]])\n\nprint (&quot;image2vector(image) = &quot; + str(image2vector(image)))</code></pre>\n<h2 id=\"1-4-Normalizing-rows\"><a href=\"#1-4-Normalizing-rows\" class=\"headerlink\" title=\"1.4 - Normalizing rows\"></a>1.4 - Normalizing rows</h2><p>Exercise: Implement <code>normalizeRows()</code> to normalize the rows of a matrix. After applying this function to an input matrix x, each row of x should be a vector of unit length (meaning length 1).</p>\n<pre><code class=\"python\"># GRADED FUNCTION: normalizeRows\n\ndef normalizeRows(x):\n    &quot;&quot;&quot;\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n\n    Argument:\n    x -- A numpy matrix of shape (n, m)\n\n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 2 lines of code)\n    # Compute x_norm as the norm 2 of x. Use np.linalg.norm(..., ord = 2, axis = ..., keepdims = True)\n    x_norm = np.linalg.norm(x, axis = 1, keepdims = True)\n\n    # Divide x by its norm.\n    x = x / x_norm\n    ### END CODE HERE ###\n\n    return x\n\nx = np.array([\n    [0, 3, 4],\n    [1, 6, 4]])\nprint(&quot;normalizeRows(x) = &quot; + str(normalizeRows(x)))</code></pre>\n<h2 id=\"1-5-Broadcasting-and-the-softmax-function\"><a href=\"#1-5-Broadcasting-and-the-softmax-function\" class=\"headerlink\" title=\"1.5 - Broadcasting and the softmax function\"></a>1.5 - Broadcasting and the softmax function</h2><p>Exercise: Implement a <code>softmax</code> function using numpy. You can think of softmax as a normalizing function used when your algorithm needs to classify two or more classes. You will learn more about softmax in the second course of this specialization.</p>\n<pre><code class=\"python\"># GRADED FUNCTION: softmax\n\ndef softmax(x):\n    &quot;&quot;&quot;Calculates the softmax for each row of the input x.\n\n    Your code should work for a row vector and also for matrices of shape (n, m).\n\n    Argument:\n    x -- A numpy matrix of shape (n,m)\n\n    Returns:\n    s -- A numpy matrix equal to the softmax of x, of shape (n,m)\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 3 lines of code)\n    # Apply exp() element-wise to x. Use np.exp(...).\n    x_exp = np.exp(x)\n\n    # Create a vector x_sum that sums each row of x_exp. Use np.sum(..., axis = 1, keepdims = True).\n    x_sum = np.sum(x_exp, axis=1, keepdims=True)\n\n    # Compute softmax(x) by dividing x_exp by x_sum. It should automatically use numpy broadcasting.\n    s = x_exp / x_sum\n\n    ### END CODE HERE ###\n\n    return s\n\nx = np.array([\n    [9, 2, 5, 0, 0],\n    [7, 5, 0, 0 ,0]])\nprint(&quot;softmax(x) = &quot; + str(softmax(x)))</code></pre>\n<h1 id=\"2-Vectorization\"><a href=\"#2-Vectorization\" class=\"headerlink\" title=\"2 - Vectorization\"></a>2 - Vectorization</h1><hr>\n<h2 id=\"2-1-Implement-the-L1-and-L2-loss-functions\"><a href=\"#2-1-Implement-the-L1-and-L2-loss-functions\" class=\"headerlink\" title=\"2.1 - Implement the L1 and L2 loss functions\"></a>2.1 - Implement the L1 and L2 loss functions</h2><p>Exercise: Implement the numpy vectorized version of the <code>L1</code> loss. You may find the function <code>abs(x)</code> (absolute value of x) useful.</p>\n<pre><code class=\"python\"># GRADED FUNCTION: L1\n\ndef L1(yhat, y):\n    &quot;&quot;&quot;\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L1 loss function defined above\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 1 line of code)\n    loss = np.sum(abs(y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(&quot;L1 = &quot; + str(L1(yhat,y)))</code></pre>\n<p>Exercise: Implement the numpy vectorized version of the <code>L2</code> loss. There are several way of implementing the <code>L2</code> loss but you may find the function <code>np.dot()</code> useful. As a reminder, if $x = [x_1, x_2, …, x_n]$, then <code>np.dot(x,x)</code> = $\\sum_{j=0}^n x_j^{2}$</p>\n<pre><code class=\"python\"># GRADED FUNCTION: L2\n\ndef L2(yhat, y):\n    &quot;&quot;&quot;\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n\n    Returns:\n    loss -- the value of the L2 loss function defined above\n    &quot;&quot;&quot;\n\n    ### START CODE HERE ### (≈ 1 line of code)\n    loss = np.sum(np.dot(y - yhat, y - yhat))\n    ### END CODE HERE ###\n\n    return loss\n\nyhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(&quot;L2 = &quot; + str(L2(yhat,y)))</code></pre>\n"},{"title":"吴恩达深度学习公开课第二周编程练习2","date":"2017-09-20T04:09:07.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n这次练习是实现logistic回归模型的神经网络，来预测一张图片是不是一只猫。\n我把代码整合在了一起，如下：\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\nfrom lr_utils import load_dataset\n\ntrain_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()\n\nm_train = train_set_x_orig.shape[0]\nm_test = test_set_x_orig.shape[0]\nnum_px = train_set_x_orig.shape[1]\n\ntrain_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\ntest_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n\ntrain_set_x = train_set_x_flatten / 255.\ntest_set_x = test_set_x_flatten / 255.\n\ndef sigmoid(z):\n    s = 1 / (1 + np.exp(-z))\n    return s\n\ndef initialize_with_zeros(dim):\n    w = np.zeros((dim, 1))\n    b = 0\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    return w, b\n\ndim = 2\nw, b = initialize_with_zeros(dim)\n\ndef propagate(w, b, X, Y):\n    m = X.shape[1]\n    A = sigmoid(w.T.dot(X) + b)\n    cost = -np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A)) / m\n    dw = X.dot((A - Y).T) / m\n    db = np.sum(A - Y) / m\n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    grads = {\"dw\": dw,\n             \"db\": db}\n    return grads, cost\n\nw, b, X, Y = np.array([[1],[2]]), 2, np.array([[1,2],[3,4]]), np.array([[1,0]])\ngrads, cost = propagate(w, b, X, Y)\n\ndef optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    costs = []\n    for i in range(num_iterations):\n        grads, cost = propagate(w, b, X, Y)\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        w = w - learning_rate * dw\n        b = b - learning_rate * db\n        if i % 100 == 0:\n            costs.append(cost)\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs\n\nparams, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = False)\n\ndef predict(w, b, X):\n\n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    A = sigmoid(w.T.dot(X) + b)\n    for i in range(A.shape[1]):\n        if A[0][i] <= 0.5:\n            Y_prediction[0][i] = 0\n        else:\n            Y_prediction[0][i] = 1  \n    assert(Y_prediction.shape == (1, m))\n    return Y_prediction\n```\n\n但是这样看起来太乱太复杂了，于是最后一个练习将训练过程合并成了一个model，代码如下：\n\n```python\ndef model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n    w, b = np.zeros((X_train.shape[0], 1)), 0\n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)\n    w = parameters[\"w\"]\n    b = parameters[\"b\"]\n    Y_prediction_test = predict(w, b, X_test)\n    Y_prediction_train = predict(w, b, X_train)\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n    d = {\"costs\": costs,\n         \"Y_prediction_test\": Y_prediction_test, \n         \"Y_prediction_train\" : Y_prediction_train, \n         \"w\" : w, \n         \"b\" : b,\n         \"learning_rate\" : learning_rate,\n         \"num_iterations\": num_iterations}\n    return d\n\nd = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)\n```","source":"_posts/dlhw2.md","raw":"---\ntitle: 吴恩达深度学习公开课第二周编程练习2\ndate: 2017-09-20 12:09:07\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 神经网络\n- 深度学习\ncategories:\n- 深度学习\n---\n\n这次练习是实现logistic回归模型的神经网络，来预测一张图片是不是一只猫。\n我把代码整合在了一起，如下：\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\nfrom lr_utils import load_dataset\n\ntrain_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()\n\nm_train = train_set_x_orig.shape[0]\nm_test = test_set_x_orig.shape[0]\nnum_px = train_set_x_orig.shape[1]\n\ntrain_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\ntest_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n\ntrain_set_x = train_set_x_flatten / 255.\ntest_set_x = test_set_x_flatten / 255.\n\ndef sigmoid(z):\n    s = 1 / (1 + np.exp(-z))\n    return s\n\ndef initialize_with_zeros(dim):\n    w = np.zeros((dim, 1))\n    b = 0\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    return w, b\n\ndim = 2\nw, b = initialize_with_zeros(dim)\n\ndef propagate(w, b, X, Y):\n    m = X.shape[1]\n    A = sigmoid(w.T.dot(X) + b)\n    cost = -np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A)) / m\n    dw = X.dot((A - Y).T) / m\n    db = np.sum(A - Y) / m\n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    grads = {\"dw\": dw,\n             \"db\": db}\n    return grads, cost\n\nw, b, X, Y = np.array([[1],[2]]), 2, np.array([[1,2],[3,4]]), np.array([[1,0]])\ngrads, cost = propagate(w, b, X, Y)\n\ndef optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    costs = []\n    for i in range(num_iterations):\n        grads, cost = propagate(w, b, X, Y)\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        w = w - learning_rate * dw\n        b = b - learning_rate * db\n        if i % 100 == 0:\n            costs.append(cost)\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs\n\nparams, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = False)\n\ndef predict(w, b, X):\n\n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    A = sigmoid(w.T.dot(X) + b)\n    for i in range(A.shape[1]):\n        if A[0][i] <= 0.5:\n            Y_prediction[0][i] = 0\n        else:\n            Y_prediction[0][i] = 1  \n    assert(Y_prediction.shape == (1, m))\n    return Y_prediction\n```\n\n但是这样看起来太乱太复杂了，于是最后一个练习将训练过程合并成了一个model，代码如下：\n\n```python\ndef model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n    w, b = np.zeros((X_train.shape[0], 1)), 0\n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)\n    w = parameters[\"w\"]\n    b = parameters[\"b\"]\n    Y_prediction_test = predict(w, b, X_test)\n    Y_prediction_train = predict(w, b, X_train)\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n    d = {\"costs\": costs,\n         \"Y_prediction_test\": Y_prediction_test, \n         \"Y_prediction_train\" : Y_prediction_train, \n         \"w\" : w, \n         \"b\" : b,\n         \"learning_rate\" : learning_rate,\n         \"num_iterations\": num_iterations}\n    return d\n\nd = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)\n```","slug":"dlhw2","published":1,"updated":"2019-07-19T12:21:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982h2008a7sweyph05x1t","content":"<p>这次练习是实现logistic回归模型的神经网络，来预测一张图片是不是一只猫。<br>我把代码整合在了一起，如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> h5py\n<span class=\"token keyword\">import</span> scipy\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n<span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> ndimage\n<span class=\"token keyword\">from</span> lr_utils <span class=\"token keyword\">import</span> load_dataset\n\ntrain_set_x_orig<span class=\"token punctuation\">,</span> train_set_y<span class=\"token punctuation\">,</span> test_set_x_orig<span class=\"token punctuation\">,</span> test_set_y<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> load_dataset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nm_train <span class=\"token operator\">=</span> train_set_x_orig<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nm_test <span class=\"token operator\">=</span> test_set_x_orig<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nnum_px <span class=\"token operator\">=</span> train_set_x_orig<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ntrain_set_x_flatten <span class=\"token operator\">=</span> train_set_x_orig<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>train_set_x_orig<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T\ntest_set_x_flatten <span class=\"token operator\">=</span> test_set_x_orig<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>test_set_x_orig<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T\n\ntrain_set_x <span class=\"token operator\">=</span> train_set_x_flatten <span class=\"token operator\">/</span> <span class=\"token number\">255</span><span class=\"token punctuation\">.</span>\ntest_set_x <span class=\"token operator\">=</span> test_set_x_flatten <span class=\"token operator\">/</span> <span class=\"token number\">255</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sigmoid</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> s\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">initialize_with_zeros</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    w <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>isinstance<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> float<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> isinstance<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> w<span class=\"token punctuation\">,</span> b\n\ndim <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nw<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> initialize_with_zeros<span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">propagate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    m <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    A <span class=\"token operator\">=</span> sigmoid<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n    cost <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>Y <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> Y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> m\n    dw <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">-</span> Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> m\n    db <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>A <span class=\"token operator\">-</span> Y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> m\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>dw<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">==</span> w<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>dtype <span class=\"token operator\">==</span> float<span class=\"token punctuation\">)</span>\n    cost <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    grads <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"dw\"</span><span class=\"token punctuation\">:</span> dw<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">:</span> db<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> grads<span class=\"token punctuation\">,</span> cost\n\nw<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> Y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ngrads<span class=\"token punctuation\">,</span> cost <span class=\"token operator\">=</span> propagate<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> num_iterations<span class=\"token punctuation\">,</span> learning_rate<span class=\"token punctuation\">,</span> print_cost <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    costs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>num_iterations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        grads<span class=\"token punctuation\">,</span> cost <span class=\"token operator\">=</span> propagate<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">)</span>\n        dw <span class=\"token operator\">=</span> grads<span class=\"token punctuation\">[</span><span class=\"token string\">\"dw\"</span><span class=\"token punctuation\">]</span>\n        db <span class=\"token operator\">=</span> grads<span class=\"token punctuation\">[</span><span class=\"token string\">\"db\"</span><span class=\"token punctuation\">]</span>\n        w <span class=\"token operator\">=</span> w <span class=\"token operator\">-</span> learning_rate <span class=\"token operator\">*</span> dw\n        b <span class=\"token operator\">=</span> b <span class=\"token operator\">-</span> learning_rate <span class=\"token operator\">*</span> db\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            costs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> print_cost <span class=\"token operator\">and</span> i <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Cost after iteration %i: %f\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span>\n              <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">}</span>\n\n    grads <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"dw\"</span><span class=\"token punctuation\">:</span> dw<span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">:</span> db<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> params<span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">,</span> costs\n\nparams<span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">,</span> costs <span class=\"token operator\">=</span> optimize<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> num_iterations<span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> learning_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.009</span><span class=\"token punctuation\">,</span> print_cost <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">predict</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    m <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    Y_prediction <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    A <span class=\"token operator\">=</span> sigmoid<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span>\n            Y_prediction<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            Y_prediction<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  \n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>Y_prediction<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Y_prediction</code></pre>\n<p>但是这样看起来太乱太复杂了，于是最后一个练习将训练过程合并成了一个model，代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">model</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> Y_test<span class=\"token punctuation\">,</span> num_iterations <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> learning_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> print_cost <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    w<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n    parameters<span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">,</span> costs <span class=\"token operator\">=</span> optimize<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">,</span> Y_train<span class=\"token punctuation\">,</span> num_iterations<span class=\"token punctuation\">,</span> learning_rate<span class=\"token punctuation\">,</span> print_cost<span class=\"token punctuation\">)</span>\n    w <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">]</span>\n    b <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span>\n    Y_prediction_test <span class=\"token operator\">=</span> predict<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">)</span>\n    Y_prediction_train <span class=\"token operator\">=</span> predict<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train accuracy: {} %\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>Y_prediction_train <span class=\"token operator\">-</span> Y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test accuracy: {} %\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>Y_prediction_test <span class=\"token operator\">-</span> Y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"costs\"</span><span class=\"token punctuation\">:</span> costs<span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"Y_prediction_test\"</span><span class=\"token punctuation\">:</span> Y_prediction_test<span class=\"token punctuation\">,</span> \n         <span class=\"token string\">\"Y_prediction_train\"</span> <span class=\"token punctuation\">:</span> Y_prediction_train<span class=\"token punctuation\">,</span> \n         <span class=\"token string\">\"w\"</span> <span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span> \n         <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"learning_rate\"</span> <span class=\"token punctuation\">:</span> learning_rate<span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"num_iterations\"</span><span class=\"token punctuation\">:</span> num_iterations<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> d\n\nd <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>train_set_x<span class=\"token punctuation\">,</span> train_set_y<span class=\"token punctuation\">,</span> test_set_x<span class=\"token punctuation\">,</span> test_set_y<span class=\"token punctuation\">,</span> num_iterations <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> learning_rate <span class=\"token operator\">=</span> <span class=\"token number\">0.005</span><span class=\"token punctuation\">,</span> print_cost <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>这次练习是实现logistic回归模型的神经网络，来预测一张图片是不是一只猫。<br>我把代码整合在了一起，如下：</p>\n<pre><code class=\"python\">import numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\nfrom lr_utils import load_dataset\n\ntrain_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()\n\nm_train = train_set_x_orig.shape[0]\nm_test = test_set_x_orig.shape[0]\nnum_px = train_set_x_orig.shape[1]\n\ntrain_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\ntest_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n\ntrain_set_x = train_set_x_flatten / 255.\ntest_set_x = test_set_x_flatten / 255.\n\ndef sigmoid(z):\n    s = 1 / (1 + np.exp(-z))\n    return s\n\ndef initialize_with_zeros(dim):\n    w = np.zeros((dim, 1))\n    b = 0\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    return w, b\n\ndim = 2\nw, b = initialize_with_zeros(dim)\n\ndef propagate(w, b, X, Y):\n    m = X.shape[1]\n    A = sigmoid(w.T.dot(X) + b)\n    cost = -np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A)) / m\n    dw = X.dot((A - Y).T) / m\n    db = np.sum(A - Y) / m\n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    grads = {&quot;dw&quot;: dw,\n             &quot;db&quot;: db}\n    return grads, cost\n\nw, b, X, Y = np.array([[1],[2]]), 2, np.array([[1,2],[3,4]]), np.array([[1,0]])\ngrads, cost = propagate(w, b, X, Y)\n\ndef optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    costs = []\n    for i in range(num_iterations):\n        grads, cost = propagate(w, b, X, Y)\n        dw = grads[&quot;dw&quot;]\n        db = grads[&quot;db&quot;]\n        w = w - learning_rate * dw\n        b = b - learning_rate * db\n        if i % 100 == 0:\n            costs.append(cost)\n        if print_cost and i % 100 == 0:\n            print (&quot;Cost after iteration %i: %f&quot; %(i, cost))\n\n    params = {&quot;w&quot;: w,\n              &quot;b&quot;: b}\n\n    grads = {&quot;dw&quot;: dw,\n             &quot;db&quot;: db}\n\n    return params, grads, costs\n\nparams, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = False)\n\ndef predict(w, b, X):\n\n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    A = sigmoid(w.T.dot(X) + b)\n    for i in range(A.shape[1]):\n        if A[0][i] &lt;= 0.5:\n            Y_prediction[0][i] = 0\n        else:\n            Y_prediction[0][i] = 1  \n    assert(Y_prediction.shape == (1, m))\n    return Y_prediction</code></pre>\n<p>但是这样看起来太乱太复杂了，于是最后一个练习将训练过程合并成了一个model，代码如下：</p>\n<pre><code class=\"python\">def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n    w, b = np.zeros((X_train.shape[0], 1)), 0\n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)\n    w = parameters[&quot;w&quot;]\n    b = parameters[&quot;b&quot;]\n    Y_prediction_test = predict(w, b, X_test)\n    Y_prediction_train = predict(w, b, X_train)\n    print(&quot;train accuracy: {} %&quot;.format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(&quot;test accuracy: {} %&quot;.format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n    d = {&quot;costs&quot;: costs,\n         &quot;Y_prediction_test&quot;: Y_prediction_test, \n         &quot;Y_prediction_train&quot; : Y_prediction_train, \n         &quot;w&quot; : w, \n         &quot;b&quot; : b,\n         &quot;learning_rate&quot; : learning_rate,\n         &quot;num_iterations&quot;: num_iterations}\n    return d\n\nd = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)</code></pre>\n"},{"title":"Deep Understanding of Dynamic Oracle in Constituent Parsing","date":"2018-08-03T08:20:02.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=4875075&auto=1&height=66\"></iframe></div>\n\n本文将从定义到证明，一步步理清成分句法分析中用到的Dynamic Oracle函数。参考了James Cross在2016年发表在EMNLP上面的论文：[论文地址](https://www.aclweb.org/anthology/D/D16/D16-1001.pdf)，该论文还是当年的best paper。\n\n# 成分句法分析系统\n---\n首先本文用到的成分句法分析系统是基于span-based的转移系统，在这里只做简略介绍，详见[Parsing with Recurrent Neural Networks](http://ir.library.oregonstate.edu/downloads/0g354j52q)。\n![](1.png)\n上图展示了该转移系统的转移过程，其中结构化预测只用到了shift(sh)和combine(comb)两种动作，因为stack中存放的是span的左右边界下标，所以comb动作不需要区分左右，这与另一种转移系统的reduce动作不同。而对于label的预测，如果栈首的span不构成短语结点，那么就预测为nolabel，否则就预测为$\\_i{X_j}$。\n\n每个时刻的状态用三元组$\\left\\langle {z,\\sigma ,t} \\right\\rangle $表示，分别表示第几个动作、栈（span的split序列）、当前已生成的结点$\\_i{X_j}$集合。注意到对于长度为$n$的句子，只需要用$4n-2$个动作就可以分析出句法树了，并且第偶数个动作做结构预测（sh和comb），第奇数个动作做label预测。\n![](2.png)\n上图是一个转移的具体例子，下面将全部以这个句子为例进行介绍。注意到多叉树隐式的转化为了二叉树，临时结点预测为nolabel。\n\n# Dynamic Oracle\n---\nDynamic Oracle是Goldberg和Nivre在2013年总结出来的，发表在TACL上面：[Training Deterministic Parsers with Non-Deterministic Oracles](https://www.aclweb.org/anthology/Q/Q13/Q13-1033.pdf)。\n\n提出的动机就是为了解决测试阶段贪心预测错误导致误差越来越大的问题。在训练的时候，原来的静态Oracle方法就是每一步都严格按照标准树的动作来进行预测，最终拟合得和标准树动作序列相同，但是测试的时候没有标准树了，如果某一步预测错误，可能会到达一个训练中没有出现过的状态，那就会导致之后的预测越来越错。所以就提出了Dynamic Oracle的技巧，在训练过程中的每一步预测，不再局限于标准树中的一个动作，而扩展为一个动作集合，只要采取集合中的动作，那么最终得到的动作序列一定也是最优的。\n\n这种方法主要用于贪心的预测方法，例如本文的转移系统就是在每一步贪心的预测当前动作，再如之前介绍过的成分句法分析top-down模型[A Minimal Span-Based Neural Constituency Parser](https://www.aclweb.org/anthology/P/P17/P17-1076.pdf)中，自顶向下贪心的选择每一个span的最佳split，也要用到Dynamic Oracle来防止错误扩大。之前的博客有过专门介绍，可以去翻看一下：[Dynamic Oracle](https://godweiyang.com/2018/06/28/ACL17-ConParsing/#top-down解码模型)\n\n下面就将从定义、证明等方面来详细阐述Dynamic Oracle。\n\n# 定义\n---\n**定义1：** 定义$c{ \\vdash \\_\\tau }c'$为状态$c$经过动作$\\tau $之后转移到状态${c'}$，写成函数的形式就是$c' = \\tau ({c})$。另外定义$ \\vdash $为所有动作$\\tau $的并集，也就是状态$c$经过任意动作之后转移到状态${c'}$。定义${ \\vdash ^\\*}$为$ \\vdash $的自反和传递闭包。\n\n**定义2（派生树/可到达树）：** 定义$D({c})$为从状态$c$出发，最终可以产生的句法树的集合，即\n\\\\[D({c}) = \\left\\{ {t|c{ \\vdash ^\\*}\\left\\langle {z,\\sigma ,t} \\right\\rangle } \\right\\}\\\\]\n也可以称作“派生树”或者“可到达树”。\n\n**定义3（$F_1$值）：** 定义预测树$t$关于标准树$t_G$的$F_1$值为\n\\\\[{F_1}(t) = \\frac{ {rp}}{ {r + p}}\\\\]\n其中$r = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| { {t_G}} \\right|}},p = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| t \\right|}}$。\n\n**定义4：** 将$F_1$扩展为状态$c$的函数，定义${F_1}({c})$为从状态$c$出发可以产生的$F_1$值最高的句法树的$F_1$值，即\n\\\\[{F_1}(c) = {\\max \\_{t \\in D(c)}}{F_1}(t)\\\\]\n\n**定义5（oracle）：** 定义状态$c$的oracle为使状态$c$转移过后最优$F_1$值不变的动作集合，即\n\\\\[oracle(c) = \\left\\{ {\\tau |{F_1}(\\tau (c)) = {F_1}(c)} \\right\\}\\\\]\n至于这个集合该怎么求解，下面将会讲到。\n\n**定义6（span包含）：** span$(i,j)$被span$(p,q)$包含，当且仅当$p \\le i < j \\le q$，记为\n\\\\[(i,j) \\preceq (p,q)\\\\]\n\n**定义7（严格包含）：** span$(i,j)$被span$(p,q)$严格包含，当且仅当$(i,j) \\preceq (p,q)$，并且$(i,j) \\ne (p,q)$，记为\n\\\\[(i,j) \\prec (p,q)\\\\]\n同样可以将偏序关系从span扩展到类别，即$\\_i{X_j}{ \\prec \\_p}{Y_q}$，当且仅当$(i,j) \\prec (p,q)$。\n\n**定义8（可到达类别）：** 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，定义它的可到达类别集合为\n\\\\[reach(c) = left(c) \\cup right(c)\\\\]\n其中左右可到达类别集合又分别定义为\n\\\\[\\begin{array}{l}left(c) = \\left\\{ {\\_p{X_q} \\in {t_G}|(i,j) \\prec (p,q),p \\in \\sigma |i} \\right\\}\\\\right(c) = \\left\\{ {\\_p{X_q} \\in {t_G}|p \\ge j} \\right\\}\\end{array}\\\\]\n光看定义可能有点生涩，通俗理解就是，$left(c)$为标准树中包含span$(i,j)$的类别集合，并且类别的左端点与栈中的span没有交叉，也就是说类别的左端点就是栈中除了$j$以外的其余split中的某一个。而$right(c)$为标准树中还处于队列中没有进栈的类别集合。\n![](3.png)\n如上图所示，还以之前的句法树为例，现在的状态为$\\left\\langle {10,[0,1,2,4],\\left\\{ {\\_0N{P_1}} \\right\\}} \\right\\rangle $，此时的栈顶span$(i,j)=(2,4)$，也就是红色梯形部分，那么$left(c)$就是深蓝色类别，$right(c)$就是天蓝色类别。而灰色类别因为与红色类别交叉了，所以属于不可到达类别，而标准树中还有一个类别$\\_0N{P_1}$由于已经被识别出来了，所以也属于不可到达类别。\n\n上面定义是基于动作序号为偶数的情况，而对于动作序号为奇数的情况，也就是预测label的动作，只需要将偏序$\\prec$修改为$\\preceq$即可，因为转移过后span依然是本身，所以不是严格包含关系。\n\n特殊情况（初始值）：\n\\\\[reach(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = {t_G}\\\\]\n很显然，初始时$t_G$中所有类别都属于$right(c)$。\n\n最后需要注意的一点是，根据以上定义有\n\\\\[reach(c) \\cap t = \\emptyset ,reach(c) \\subseteq {t_G} - t\\\\]\n这一点也是很显然的，$left(c)$都是严格包含span$(i,j)$的，所以与$t$不存在交集，而$right(c)$在队列里，更不可能存在交集，观察上面的例子会更加好理解。\n\n**定义9（next类别）：** 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，上面已经定义了它的可到达类别集合，最后再定义它的下一个可到达类别为严格包含span$(i,j)$的可到达类别集合（即$left(c)$）中偏序关系最小的类别\n\\\\[next(c) = {\\min _ \\prec }left(c)\\\\]\n\n# 结构化和label Oracles\n---\n对于任意动作序号为偶数的状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，记$next(c){ = \\_p}{X_q}$，那么定义它的结构化Dynamic Oracle为\n![](4.png)\n也就是使当前状态向着标准树中最接近它的状态$next(c)$转移，如果$p = i,q > j$，那么应该在移进栈里一些单词；如果$p < i,q = j$，那么不能再移进了，而应该在栈里combine两个span；如果$p < i,q > j$，那么移进或者归约都可以，反正总能达到前两种状态。\n\n特殊情况（初始值）：\n\\\\[dyna(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = \\{ sh\\} \\\\]\n即使当前预测的span是错的，也可以经过Dynamic Oracle指导，几步之后预测到正确的$next(c)$。而如果没有Dynamic Oracle，可能就一直错下去了。\n![](5.png)\n上图是几种任意状态的Dynamic Oracle示例，除了第一种之外，其余三个都是预测错误的，如果没有Dynamic Oracle，甚至都不知道下一步转移的动作是什么。\n\n**引理1：** 对于任意状态$c$，任意动作$\\tau  \\in dyna(c)$，有\n\\\\[reach(\\tau (c)) = reach(c)\\\\]\n而对于任意动作$\\tau  \\notin dyna(c)$，有\n\\\\[reach(\\tau (c)) \\not\\subset reach(c)\\\\]\n\n最后是label Dynamic Oracle，这个就很简单了，如果span$(i,j)$出现在了标准树中，那么预测类别就行了，否则的话预测为nolabel：\n![](6.png)\n\n\n# 正确性证明\n---\n主要证明两点内容：\n* 首先定义一个特殊的树$t^\\*{(c)}$，下面会证明它是从状态$c$开始可以得到的得分最高的树。\n* 然后证明从状态$c$开始按照Dynamic Oracle策略，确实可以得到最优树$t^\\*{(c)}$。\n\n**定义10（$t^\\*{(c)}$）：** 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，定义最优树$t^\\*{(c)}$为$c$中的子树$t$并上当前状态可到达的类别集合，也就是\n\\\\[{t^\\*}(c) = t \\cup reach(c)\\\\]\n下面我们会证明，$t^\\*{(c)}$的确是当前状态可以得到的得分最高的树。\n![](7.png)\n上图形象的说明了几种树之间的关系。当前子树$t$与标准树$t_G$不一定完全重合，可能有预测错误的，所以是交叉的。那么接下来的预测如果全部预测为标准树中的$reach(c)$，那么得分一定是最高的。而剩余的白色部分就是与$t$的span产生交叉的类别，属于不可到达的。\n\n**引理2：** 对于任意状态$c$，最优树$t^\\*{(c)}$一定是$c$的派生树，也就是\n\\\\[{t^\\*}(c) \\in D(c)\\\\]\n\n**定理1：** 对于任意状态$c$，有\n\\\\[{F_1}({t^\\*}(c)) = {F_1}(c)\\\\]\n\n也就是说最优树$t^\\*{(c)}$的得分一定是当前状态可以得到的最高分数。\n\n证明也很简单，根据召回率和准确率公式，最优树$t^\\*{(c)}$是在$t$的基础上加入了所有的标准树中的可到达类别$reach(c)$，所以召回率分子不会降下来，召回率不可能更高了；同时并没有加入任何不在标准树中的类别，所以准确率的分母也不可能减小，准确率也不会更高了。因此$t^\\*{(c)}$就是当前状态可以得到的最优树。\n\n**推论1：** 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意$t' \\in D(c),t' \\ne {t^\\*}(c)$，都有\n\\\\[{F_1}(t') < {F_1}(c)\\\\]\n上面已经证明了$t^\\*{(c)}$是最优树，所以自然其余的树得分都比它低了。\n\n最后需要证明的一点就是，按照Dynamic Oracle策略进行转移，一定能到达这个最优树吗？\n\n**引理3：** 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意动作$\\tau  \\in dyna(c)$，都有\n\\\\[{t^\\*}(\\tau (c)) = {t^\\*}(c)\\\\]\n反之如果$\\tau  \\notin dyna(c)$，那么有\n\\\\[{t^\\*}(\\tau (c)) \\ne {t^\\*}(c)\\\\]\n原文并没有给出证明，粗略理解的话，按照Dynamic Oracle策略，下面应该向着$next(c)$这个类别靠近，而在这个过程中，包含在$next(c)$内的$right(c)$都会被sh动作识别，而其余不在标准树中的类别都会被识别为nolabel，$next(c)$又是第一个$left(c)$，所以所有的$reach(c)$都可以被识别，所以这是符合$t^\\*{(c)}$定义的。\n\n反之如果不按照Dynamic Oracle策略来转移，下一步产生的span一定会与$next(c)$产生交叉，因此$next(c)$再也无法被包括进最终的句法树中，所以第二点也成立。\n\n最终综合引理3、定理1和推论1，得到了本文中最关键的结论：\n\n**定理2：** $dyna()$函数符合定义5中的oracle定义，即对于任意状态$c$，有\n\\\\[dyna(c) = oracle(c)\\\\]\n\n# 总结\n---\n至此关于Dynamic Oracle已经全部介绍完了，在黄亮老师的个人主页上面，还有这篇论文的会议视频和ppt，还有github源码，大家可以去深入学习：[Liang Huang](http://web.engr.oregonstate.edu/~huanlian/)。\n\n当然，在具体实现中，由于在训练集上过早的拟合，单纯使用Dynamic Oracle并没有得到任何效果提升，所以要加入exploration机制，也就是人为的干预动作分类，使模型故意预测错误的动作，这样就能学习到更多的情况了，事实证明这样的确得到了略微提升。PTB上的结果如下：\n![](8.png)\n\n最后提一个小疑问，关于引理1，原文说之后定理的证明会用到它，但我没看出来哪里用到了。而且我对它的正确性也有所怀疑，按照Dynamic Oracle转移之后，$reach(c)$不可能一直不变啊，按理说会先不变，再变少，交替变化，最后生成句法树后变为空集。并且原文中引理1符号也出现了一个小错误，我在这里修改正确了。\n\n关于这一点疑问，我已经发邮件请教了原作者James Cross，他也已经回复我了，更深入的解答不久应该就会告诉我了，到时候我再更新一下。如果大家有想法的话，也可以提出来。","source":"_posts/dynamic-oracles.md","raw":"---\ntitle: Deep Understanding of Dynamic Oracle in Constituent Parsing\ndate: 2018-08-03 16:20:02\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=4875075&auto=1&height=66\"></iframe></div>\n\n本文将从定义到证明，一步步理清成分句法分析中用到的Dynamic Oracle函数。参考了James Cross在2016年发表在EMNLP上面的论文：[论文地址](https://www.aclweb.org/anthology/D/D16/D16-1001.pdf)，该论文还是当年的best paper。\n\n# 成分句法分析系统\n---\n首先本文用到的成分句法分析系统是基于span-based的转移系统，在这里只做简略介绍，详见[Parsing with Recurrent Neural Networks](http://ir.library.oregonstate.edu/downloads/0g354j52q)。\n![](1.png)\n上图展示了该转移系统的转移过程，其中结构化预测只用到了shift(sh)和combine(comb)两种动作，因为stack中存放的是span的左右边界下标，所以comb动作不需要区分左右，这与另一种转移系统的reduce动作不同。而对于label的预测，如果栈首的span不构成短语结点，那么就预测为nolabel，否则就预测为$\\_i{X_j}$。\n\n每个时刻的状态用三元组$\\left\\langle {z,\\sigma ,t} \\right\\rangle $表示，分别表示第几个动作、栈（span的split序列）、当前已生成的结点$\\_i{X_j}$集合。注意到对于长度为$n$的句子，只需要用$4n-2$个动作就可以分析出句法树了，并且第偶数个动作做结构预测（sh和comb），第奇数个动作做label预测。\n![](2.png)\n上图是一个转移的具体例子，下面将全部以这个句子为例进行介绍。注意到多叉树隐式的转化为了二叉树，临时结点预测为nolabel。\n\n# Dynamic Oracle\n---\nDynamic Oracle是Goldberg和Nivre在2013年总结出来的，发表在TACL上面：[Training Deterministic Parsers with Non-Deterministic Oracles](https://www.aclweb.org/anthology/Q/Q13/Q13-1033.pdf)。\n\n提出的动机就是为了解决测试阶段贪心预测错误导致误差越来越大的问题。在训练的时候，原来的静态Oracle方法就是每一步都严格按照标准树的动作来进行预测，最终拟合得和标准树动作序列相同，但是测试的时候没有标准树了，如果某一步预测错误，可能会到达一个训练中没有出现过的状态，那就会导致之后的预测越来越错。所以就提出了Dynamic Oracle的技巧，在训练过程中的每一步预测，不再局限于标准树中的一个动作，而扩展为一个动作集合，只要采取集合中的动作，那么最终得到的动作序列一定也是最优的。\n\n这种方法主要用于贪心的预测方法，例如本文的转移系统就是在每一步贪心的预测当前动作，再如之前介绍过的成分句法分析top-down模型[A Minimal Span-Based Neural Constituency Parser](https://www.aclweb.org/anthology/P/P17/P17-1076.pdf)中，自顶向下贪心的选择每一个span的最佳split，也要用到Dynamic Oracle来防止错误扩大。之前的博客有过专门介绍，可以去翻看一下：[Dynamic Oracle](https://godweiyang.com/2018/06/28/ACL17-ConParsing/#top-down解码模型)\n\n下面就将从定义、证明等方面来详细阐述Dynamic Oracle。\n\n# 定义\n---\n**定义1：** 定义$c{ \\vdash \\_\\tau }c'$为状态$c$经过动作$\\tau $之后转移到状态${c'}$，写成函数的形式就是$c' = \\tau ({c})$。另外定义$ \\vdash $为所有动作$\\tau $的并集，也就是状态$c$经过任意动作之后转移到状态${c'}$。定义${ \\vdash ^\\*}$为$ \\vdash $的自反和传递闭包。\n\n**定义2（派生树/可到达树）：** 定义$D({c})$为从状态$c$出发，最终可以产生的句法树的集合，即\n\\\\[D({c}) = \\left\\{ {t|c{ \\vdash ^\\*}\\left\\langle {z,\\sigma ,t} \\right\\rangle } \\right\\}\\\\]\n也可以称作“派生树”或者“可到达树”。\n\n**定义3（$F_1$值）：** 定义预测树$t$关于标准树$t_G$的$F_1$值为\n\\\\[{F_1}(t) = \\frac{ {rp}}{ {r + p}}\\\\]\n其中$r = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| { {t_G}} \\right|}},p = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| t \\right|}}$。\n\n**定义4：** 将$F_1$扩展为状态$c$的函数，定义${F_1}({c})$为从状态$c$出发可以产生的$F_1$值最高的句法树的$F_1$值，即\n\\\\[{F_1}(c) = {\\max \\_{t \\in D(c)}}{F_1}(t)\\\\]\n\n**定义5（oracle）：** 定义状态$c$的oracle为使状态$c$转移过后最优$F_1$值不变的动作集合，即\n\\\\[oracle(c) = \\left\\{ {\\tau |{F_1}(\\tau (c)) = {F_1}(c)} \\right\\}\\\\]\n至于这个集合该怎么求解，下面将会讲到。\n\n**定义6（span包含）：** span$(i,j)$被span$(p,q)$包含，当且仅当$p \\le i < j \\le q$，记为\n\\\\[(i,j) \\preceq (p,q)\\\\]\n\n**定义7（严格包含）：** span$(i,j)$被span$(p,q)$严格包含，当且仅当$(i,j) \\preceq (p,q)$，并且$(i,j) \\ne (p,q)$，记为\n\\\\[(i,j) \\prec (p,q)\\\\]\n同样可以将偏序关系从span扩展到类别，即$\\_i{X_j}{ \\prec \\_p}{Y_q}$，当且仅当$(i,j) \\prec (p,q)$。\n\n**定义8（可到达类别）：** 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，定义它的可到达类别集合为\n\\\\[reach(c) = left(c) \\cup right(c)\\\\]\n其中左右可到达类别集合又分别定义为\n\\\\[\\begin{array}{l}left(c) = \\left\\{ {\\_p{X_q} \\in {t_G}|(i,j) \\prec (p,q),p \\in \\sigma |i} \\right\\}\\\\right(c) = \\left\\{ {\\_p{X_q} \\in {t_G}|p \\ge j} \\right\\}\\end{array}\\\\]\n光看定义可能有点生涩，通俗理解就是，$left(c)$为标准树中包含span$(i,j)$的类别集合，并且类别的左端点与栈中的span没有交叉，也就是说类别的左端点就是栈中除了$j$以外的其余split中的某一个。而$right(c)$为标准树中还处于队列中没有进栈的类别集合。\n![](3.png)\n如上图所示，还以之前的句法树为例，现在的状态为$\\left\\langle {10,[0,1,2,4],\\left\\{ {\\_0N{P_1}} \\right\\}} \\right\\rangle $，此时的栈顶span$(i,j)=(2,4)$，也就是红色梯形部分，那么$left(c)$就是深蓝色类别，$right(c)$就是天蓝色类别。而灰色类别因为与红色类别交叉了，所以属于不可到达类别，而标准树中还有一个类别$\\_0N{P_1}$由于已经被识别出来了，所以也属于不可到达类别。\n\n上面定义是基于动作序号为偶数的情况，而对于动作序号为奇数的情况，也就是预测label的动作，只需要将偏序$\\prec$修改为$\\preceq$即可，因为转移过后span依然是本身，所以不是严格包含关系。\n\n特殊情况（初始值）：\n\\\\[reach(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = {t_G}\\\\]\n很显然，初始时$t_G$中所有类别都属于$right(c)$。\n\n最后需要注意的一点是，根据以上定义有\n\\\\[reach(c) \\cap t = \\emptyset ,reach(c) \\subseteq {t_G} - t\\\\]\n这一点也是很显然的，$left(c)$都是严格包含span$(i,j)$的，所以与$t$不存在交集，而$right(c)$在队列里，更不可能存在交集，观察上面的例子会更加好理解。\n\n**定义9（next类别）：** 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，上面已经定义了它的可到达类别集合，最后再定义它的下一个可到达类别为严格包含span$(i,j)$的可到达类别集合（即$left(c)$）中偏序关系最小的类别\n\\\\[next(c) = {\\min _ \\prec }left(c)\\\\]\n\n# 结构化和label Oracles\n---\n对于任意动作序号为偶数的状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，记$next(c){ = \\_p}{X_q}$，那么定义它的结构化Dynamic Oracle为\n![](4.png)\n也就是使当前状态向着标准树中最接近它的状态$next(c)$转移，如果$p = i,q > j$，那么应该在移进栈里一些单词；如果$p < i,q = j$，那么不能再移进了，而应该在栈里combine两个span；如果$p < i,q > j$，那么移进或者归约都可以，反正总能达到前两种状态。\n\n特殊情况（初始值）：\n\\\\[dyna(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = \\{ sh\\} \\\\]\n即使当前预测的span是错的，也可以经过Dynamic Oracle指导，几步之后预测到正确的$next(c)$。而如果没有Dynamic Oracle，可能就一直错下去了。\n![](5.png)\n上图是几种任意状态的Dynamic Oracle示例，除了第一种之外，其余三个都是预测错误的，如果没有Dynamic Oracle，甚至都不知道下一步转移的动作是什么。\n\n**引理1：** 对于任意状态$c$，任意动作$\\tau  \\in dyna(c)$，有\n\\\\[reach(\\tau (c)) = reach(c)\\\\]\n而对于任意动作$\\tau  \\notin dyna(c)$，有\n\\\\[reach(\\tau (c)) \\not\\subset reach(c)\\\\]\n\n最后是label Dynamic Oracle，这个就很简单了，如果span$(i,j)$出现在了标准树中，那么预测类别就行了，否则的话预测为nolabel：\n![](6.png)\n\n\n# 正确性证明\n---\n主要证明两点内容：\n* 首先定义一个特殊的树$t^\\*{(c)}$，下面会证明它是从状态$c$开始可以得到的得分最高的树。\n* 然后证明从状态$c$开始按照Dynamic Oracle策略，确实可以得到最优树$t^\\*{(c)}$。\n\n**定义10（$t^\\*{(c)}$）：** 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，定义最优树$t^\\*{(c)}$为$c$中的子树$t$并上当前状态可到达的类别集合，也就是\n\\\\[{t^\\*}(c) = t \\cup reach(c)\\\\]\n下面我们会证明，$t^\\*{(c)}$的确是当前状态可以得到的得分最高的树。\n![](7.png)\n上图形象的说明了几种树之间的关系。当前子树$t$与标准树$t_G$不一定完全重合，可能有预测错误的，所以是交叉的。那么接下来的预测如果全部预测为标准树中的$reach(c)$，那么得分一定是最高的。而剩余的白色部分就是与$t$的span产生交叉的类别，属于不可到达的。\n\n**引理2：** 对于任意状态$c$，最优树$t^\\*{(c)}$一定是$c$的派生树，也就是\n\\\\[{t^\\*}(c) \\in D(c)\\\\]\n\n**定理1：** 对于任意状态$c$，有\n\\\\[{F_1}({t^\\*}(c)) = {F_1}(c)\\\\]\n\n也就是说最优树$t^\\*{(c)}$的得分一定是当前状态可以得到的最高分数。\n\n证明也很简单，根据召回率和准确率公式，最优树$t^\\*{(c)}$是在$t$的基础上加入了所有的标准树中的可到达类别$reach(c)$，所以召回率分子不会降下来，召回率不可能更高了；同时并没有加入任何不在标准树中的类别，所以准确率的分母也不可能减小，准确率也不会更高了。因此$t^\\*{(c)}$就是当前状态可以得到的最优树。\n\n**推论1：** 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意$t' \\in D(c),t' \\ne {t^\\*}(c)$，都有\n\\\\[{F_1}(t') < {F_1}(c)\\\\]\n上面已经证明了$t^\\*{(c)}$是最优树，所以自然其余的树得分都比它低了。\n\n最后需要证明的一点就是，按照Dynamic Oracle策略进行转移，一定能到达这个最优树吗？\n\n**引理3：** 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意动作$\\tau  \\in dyna(c)$，都有\n\\\\[{t^\\*}(\\tau (c)) = {t^\\*}(c)\\\\]\n反之如果$\\tau  \\notin dyna(c)$，那么有\n\\\\[{t^\\*}(\\tau (c)) \\ne {t^\\*}(c)\\\\]\n原文并没有给出证明，粗略理解的话，按照Dynamic Oracle策略，下面应该向着$next(c)$这个类别靠近，而在这个过程中，包含在$next(c)$内的$right(c)$都会被sh动作识别，而其余不在标准树中的类别都会被识别为nolabel，$next(c)$又是第一个$left(c)$，所以所有的$reach(c)$都可以被识别，所以这是符合$t^\\*{(c)}$定义的。\n\n反之如果不按照Dynamic Oracle策略来转移，下一步产生的span一定会与$next(c)$产生交叉，因此$next(c)$再也无法被包括进最终的句法树中，所以第二点也成立。\n\n最终综合引理3、定理1和推论1，得到了本文中最关键的结论：\n\n**定理2：** $dyna()$函数符合定义5中的oracle定义，即对于任意状态$c$，有\n\\\\[dyna(c) = oracle(c)\\\\]\n\n# 总结\n---\n至此关于Dynamic Oracle已经全部介绍完了，在黄亮老师的个人主页上面，还有这篇论文的会议视频和ppt，还有github源码，大家可以去深入学习：[Liang Huang](http://web.engr.oregonstate.edu/~huanlian/)。\n\n当然，在具体实现中，由于在训练集上过早的拟合，单纯使用Dynamic Oracle并没有得到任何效果提升，所以要加入exploration机制，也就是人为的干预动作分类，使模型故意预测错误的动作，这样就能学习到更多的情况了，事实证明这样的确得到了略微提升。PTB上的结果如下：\n![](8.png)\n\n最后提一个小疑问，关于引理1，原文说之后定理的证明会用到它，但我没看出来哪里用到了。而且我对它的正确性也有所怀疑，按照Dynamic Oracle转移之后，$reach(c)$不可能一直不变啊，按理说会先不变，再变少，交替变化，最后生成句法树后变为空集。并且原文中引理1符号也出现了一个小错误，我在这里修改正确了。\n\n关于这一点疑问，我已经发邮件请教了原作者James Cross，他也已经回复我了，更深入的解答不久应该就会告诉我了，到时候我再更新一下。如果大家有想法的话，也可以提出来。","slug":"dynamic-oracles","published":1,"updated":"2019-07-20T04:13:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982h6008d7sweikaanzpf","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=4875075&auto=1&height=66\"></iframe></div>\n\n<p>本文将从定义到证明，一步步理清成分句法分析中用到的Dynamic Oracle函数。参考了James Cross在2016年发表在EMNLP上面的论文：<a href=\"https://www.aclweb.org/anthology/D/D16/D16-1001.pdf\" target=\"_blank\" rel=\"noopener\">论文地址</a>，该论文还是当年的best paper。</p>\n<h1 id=\"成分句法分析系统\"><a href=\"#成分句法分析系统\" class=\"headerlink\" title=\"成分句法分析系统\"></a>成分句法分析系统</h1><hr>\n<p>首先本文用到的成分句法分析系统是基于span-based的转移系统，在这里只做简略介绍，详见<a href=\"http://ir.library.oregonstate.edu/downloads/0g354j52q\" target=\"_blank\" rel=\"noopener\">Parsing with Recurrent Neural Networks</a>。<br><img src=\"1.png\" alt><br>上图展示了该转移系统的转移过程，其中结构化预测只用到了shift(sh)和combine(comb)两种动作，因为stack中存放的是span的左右边界下标，所以comb动作不需要区分左右，这与另一种转移系统的reduce动作不同。而对于label的预测，如果栈首的span不构成短语结点，那么就预测为nolabel，否则就预测为$_i{X_j}$。</p>\n<p>每个时刻的状态用三元组$\\left\\langle {z,\\sigma ,t} \\right\\rangle $表示，分别表示第几个动作、栈（span的split序列）、当前已生成的结点$_i{X_j}$集合。注意到对于长度为$n$的句子，只需要用$4n-2$个动作就可以分析出句法树了，并且第偶数个动作做结构预测（sh和comb），第奇数个动作做label预测。<br><img src=\"2.png\" alt><br>上图是一个转移的具体例子，下面将全部以这个句子为例进行介绍。注意到多叉树隐式的转化为了二叉树，临时结点预测为nolabel。</p>\n<h1 id=\"Dynamic-Oracle\"><a href=\"#Dynamic-Oracle\" class=\"headerlink\" title=\"Dynamic Oracle\"></a>Dynamic Oracle</h1><hr>\n<p>Dynamic Oracle是Goldberg和Nivre在2013年总结出来的，发表在TACL上面：<a href=\"https://www.aclweb.org/anthology/Q/Q13/Q13-1033.pdf\" target=\"_blank\" rel=\"noopener\">Training Deterministic Parsers with Non-Deterministic Oracles</a>。</p>\n<p>提出的动机就是为了解决测试阶段贪心预测错误导致误差越来越大的问题。在训练的时候，原来的静态Oracle方法就是每一步都严格按照标准树的动作来进行预测，最终拟合得和标准树动作序列相同，但是测试的时候没有标准树了，如果某一步预测错误，可能会到达一个训练中没有出现过的状态，那就会导致之后的预测越来越错。所以就提出了Dynamic Oracle的技巧，在训练过程中的每一步预测，不再局限于标准树中的一个动作，而扩展为一个动作集合，只要采取集合中的动作，那么最终得到的动作序列一定也是最优的。</p>\n<p>这种方法主要用于贪心的预测方法，例如本文的转移系统就是在每一步贪心的预测当前动作，再如之前介绍过的成分句法分析top-down模型<a href=\"https://www.aclweb.org/anthology/P/P17/P17-1076.pdf\" target=\"_blank\" rel=\"noopener\">A Minimal Span-Based Neural Constituency Parser</a>中，自顶向下贪心的选择每一个span的最佳split，也要用到Dynamic Oracle来防止错误扩大。之前的博客有过专门介绍，可以去翻看一下：<a href=\"https://godweiyang.com/2018/06/28/ACL17-ConParsing/#top-down解码模型\">Dynamic Oracle</a></p>\n<p>下面就将从定义、证明等方面来详细阐述Dynamic Oracle。</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><hr>\n<p><strong>定义1：</strong> 定义$c{ \\vdash _\\tau }c’$为状态$c$经过动作$\\tau $之后转移到状态${c’}$，写成函数的形式就是$c’ = \\tau ({c})$。另外定义$ \\vdash $为所有动作$\\tau $的并集，也就是状态$c$经过任意动作之后转移到状态${c’}$。定义${ \\vdash ^*}$为$ \\vdash $的自反和传递闭包。</p>\n<p><strong>定义2（派生树/可到达树）：</strong> 定义$D({c})$为从状态$c$出发，最终可以产生的句法树的集合，即<br>\\[D({c}) = \\left\\{ {t|c{ \\vdash ^*}\\left\\langle {z,\\sigma ,t} \\right\\rangle } \\right\\}\\]<br>也可以称作“派生树”或者“可到达树”。</p>\n<p><strong>定义3（$F_1$值）：</strong> 定义预测树$t$关于标准树$t_G$的$F_1$值为<br>\\[{F_1}(t) = \\frac{ {rp}}{ {r + p}}\\]<br>其中$r = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| { {t_G}} \\right|}},p = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| t \\right|}}$。</p>\n<p><strong>定义4：</strong> 将$F_1$扩展为状态$c$的函数，定义${F_1}({c})$为从状态$c$出发可以产生的$F_1$值最高的句法树的$F_1$值，即<br>\\[{F_1}(c) = {\\max _{t \\in D(c)}}{F_1}(t)\\]</p>\n<p><strong>定义5（oracle）：</strong> 定义状态$c$的oracle为使状态$c$转移过后最优$F_1$值不变的动作集合，即<br>\\[oracle(c) = \\left\\{ {\\tau |{F_1}(\\tau (c)) = {F_1}(c)} \\right\\}\\]<br>至于这个集合该怎么求解，下面将会讲到。</p>\n<p><strong>定义6（span包含）：</strong> span$(i,j)$被span$(p,q)$包含，当且仅当$p \\le i &lt; j \\le q$，记为<br>\\[(i,j) \\preceq (p,q)\\]</p>\n<p><strong>定义7（严格包含）：</strong> span$(i,j)$被span$(p,q)$严格包含，当且仅当$(i,j) \\preceq (p,q)$，并且$(i,j) \\ne (p,q)$，记为<br>\\[(i,j) \\prec (p,q)\\]<br>同样可以将偏序关系从span扩展到类别，即$_i{X_j}{ \\prec _p}{Y_q}$，当且仅当$(i,j) \\prec (p,q)$。</p>\n<p><strong>定义8（可到达类别）：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，定义它的可到达类别集合为<br>\\[reach(c) = left(c) \\cup right(c)\\]<br>其中左右可到达类别集合又分别定义为<br>\\[\\begin{array}{l}left(c) = \\left\\{ {_p{X_q} \\in {t_G}|(i,j) \\prec (p,q),p \\in \\sigma |i} \\right\\}\\\\right(c) = \\left\\{ {_p{X_q} \\in {t_G}|p \\ge j} \\right\\}\\end{array}\\]<br>光看定义可能有点生涩，通俗理解就是，$left(c)$为标准树中包含span$(i,j)$的类别集合，并且类别的左端点与栈中的span没有交叉，也就是说类别的左端点就是栈中除了$j$以外的其余split中的某一个。而$right(c)$为标准树中还处于队列中没有进栈的类别集合。<br><img src=\"3.png\" alt><br>如上图所示，还以之前的句法树为例，现在的状态为$\\left\\langle {10,[0,1,2,4],\\left\\{ {_0N{P_1}} \\right\\}} \\right\\rangle $，此时的栈顶span$(i,j)=(2,4)$，也就是红色梯形部分，那么$left(c)$就是深蓝色类别，$right(c)$就是天蓝色类别。而灰色类别因为与红色类别交叉了，所以属于不可到达类别，而标准树中还有一个类别$_0N{P_1}$由于已经被识别出来了，所以也属于不可到达类别。</p>\n<p>上面定义是基于动作序号为偶数的情况，而对于动作序号为奇数的情况，也就是预测label的动作，只需要将偏序$\\prec$修改为$\\preceq$即可，因为转移过后span依然是本身，所以不是严格包含关系。</p>\n<p>特殊情况（初始值）：<br>\\[reach(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = {t_G}\\]<br>很显然，初始时$t_G$中所有类别都属于$right(c)$。</p>\n<p>最后需要注意的一点是，根据以上定义有<br>\\[reach(c) \\cap t = \\emptyset ,reach(c) \\subseteq {t_G} - t\\]<br>这一点也是很显然的，$left(c)$都是严格包含span$(i,j)$的，所以与$t$不存在交集，而$right(c)$在队列里，更不可能存在交集，观察上面的例子会更加好理解。</p>\n<p><strong>定义9（next类别）：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，上面已经定义了它的可到达类别集合，最后再定义它的下一个可到达类别为严格包含span$(i,j)$的可到达类别集合（即$left(c)$）中偏序关系最小的类别<br>\\[next(c) = {\\min _ \\prec }left(c)\\]</p>\n<h1 id=\"结构化和label-Oracles\"><a href=\"#结构化和label-Oracles\" class=\"headerlink\" title=\"结构化和label Oracles\"></a>结构化和label Oracles</h1><hr>\n<p>对于任意动作序号为偶数的状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，记$next(c){ = _p}{X_q}$，那么定义它的结构化Dynamic Oracle为<br><img src=\"4.png\" alt><br>也就是使当前状态向着标准树中最接近它的状态$next(c)$转移，如果$p = i,q &gt; j$，那么应该在移进栈里一些单词；如果$p &lt; i,q = j$，那么不能再移进了，而应该在栈里combine两个span；如果$p &lt; i,q &gt; j$，那么移进或者归约都可以，反正总能达到前两种状态。</p>\n<p>特殊情况（初始值）：<br>\\[dyna(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = \\{ sh\\} \\]<br>即使当前预测的span是错的，也可以经过Dynamic Oracle指导，几步之后预测到正确的$next(c)$。而如果没有Dynamic Oracle，可能就一直错下去了。<br><img src=\"5.png\" alt><br>上图是几种任意状态的Dynamic Oracle示例，除了第一种之外，其余三个都是预测错误的，如果没有Dynamic Oracle，甚至都不知道下一步转移的动作是什么。</p>\n<p><strong>引理1：</strong> 对于任意状态$c$，任意动作$\\tau  \\in dyna(c)$，有<br>\\[reach(\\tau (c)) = reach(c)\\]<br>而对于任意动作$\\tau  \\notin dyna(c)$，有<br>\\[reach(\\tau (c)) \\not\\subset reach(c)\\]</p>\n<p>最后是label Dynamic Oracle，这个就很简单了，如果span$(i,j)$出现在了标准树中，那么预测类别就行了，否则的话预测为nolabel：<br><img src=\"6.png\" alt></p>\n<h1 id=\"正确性证明\"><a href=\"#正确性证明\" class=\"headerlink\" title=\"正确性证明\"></a>正确性证明</h1><hr>\n<p>主要证明两点内容：</p>\n<ul>\n<li>首先定义一个特殊的树$t^*{(c)}$，下面会证明它是从状态$c$开始可以得到的得分最高的树。</li>\n<li>然后证明从状态$c$开始按照Dynamic Oracle策略，确实可以得到最优树$t^*{(c)}$。</li>\n</ul>\n<p><strong>定义10（$t^*{(c)}$）：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，定义最优树$t^*{(c)}$为$c$中的子树$t$并上当前状态可到达的类别集合，也就是<br>\\[{t^*}(c) = t \\cup reach(c)\\]<br>下面我们会证明，$t^*{(c)}$的确是当前状态可以得到的得分最高的树。<br><img src=\"7.png\" alt><br>上图形象的说明了几种树之间的关系。当前子树$t$与标准树$t_G$不一定完全重合，可能有预测错误的，所以是交叉的。那么接下来的预测如果全部预测为标准树中的$reach(c)$，那么得分一定是最高的。而剩余的白色部分就是与$t$的span产生交叉的类别，属于不可到达的。</p>\n<p><strong>引理2：</strong> 对于任意状态$c$，最优树$t^*{(c)}$一定是$c$的派生树，也就是<br>\\[{t^*}(c) \\in D(c)\\]</p>\n<p><strong>定理1：</strong> 对于任意状态$c$，有<br>\\[{F_1}({t^*}(c)) = {F_1}(c)\\]</p>\n<p>也就是说最优树$t^*{(c)}$的得分一定是当前状态可以得到的最高分数。</p>\n<p>证明也很简单，根据召回率和准确率公式，最优树$t^*{(c)}$是在$t$的基础上加入了所有的标准树中的可到达类别$reach(c)$，所以召回率分子不会降下来，召回率不可能更高了；同时并没有加入任何不在标准树中的类别，所以准确率的分母也不可能减小，准确率也不会更高了。因此$t^*{(c)}$就是当前状态可以得到的最优树。</p>\n<p><strong>推论1：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意$t’ \\in D(c),t’ \\ne {t^*}(c)$，都有<br>\\[{F_1}(t’) &lt; {F_1}(c)\\]<br>上面已经证明了$t^*{(c)}$是最优树，所以自然其余的树得分都比它低了。</p>\n<p>最后需要证明的一点就是，按照Dynamic Oracle策略进行转移，一定能到达这个最优树吗？</p>\n<p><strong>引理3：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意动作$\\tau  \\in dyna(c)$，都有<br>\\[{t^*}(\\tau (c)) = {t^*}(c)\\]<br>反之如果$\\tau  \\notin dyna(c)$，那么有<br>\\[{t^*}(\\tau (c)) \\ne {t^*}(c)\\]<br>原文并没有给出证明，粗略理解的话，按照Dynamic Oracle策略，下面应该向着$next(c)$这个类别靠近，而在这个过程中，包含在$next(c)$内的$right(c)$都会被sh动作识别，而其余不在标准树中的类别都会被识别为nolabel，$next(c)$又是第一个$left(c)$，所以所有的$reach(c)$都可以被识别，所以这是符合$t^*{(c)}$定义的。</p>\n<p>反之如果不按照Dynamic Oracle策略来转移，下一步产生的span一定会与$next(c)$产生交叉，因此$next(c)$再也无法被包括进最终的句法树中，所以第二点也成立。</p>\n<p>最终综合引理3、定理1和推论1，得到了本文中最关键的结论：</p>\n<p><strong>定理2：</strong> $dyna()$函数符合定义5中的oracle定义，即对于任意状态$c$，有<br>\\[dyna(c) = oracle(c)\\]</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>至此关于Dynamic Oracle已经全部介绍完了，在黄亮老师的个人主页上面，还有这篇论文的会议视频和ppt，还有github源码，大家可以去深入学习：<a href=\"http://web.engr.oregonstate.edu/~huanlian/\" target=\"_blank\" rel=\"noopener\">Liang Huang</a>。</p>\n<p>当然，在具体实现中，由于在训练集上过早的拟合，单纯使用Dynamic Oracle并没有得到任何效果提升，所以要加入exploration机制，也就是人为的干预动作分类，使模型故意预测错误的动作，这样就能学习到更多的情况了，事实证明这样的确得到了略微提升。PTB上的结果如下：<br><img src=\"8.png\" alt></p>\n<p>最后提一个小疑问，关于引理1，原文说之后定理的证明会用到它，但我没看出来哪里用到了。而且我对它的正确性也有所怀疑，按照Dynamic Oracle转移之后，$reach(c)$不可能一直不变啊，按理说会先不变，再变少，交替变化，最后生成句法树后变为空集。并且原文中引理1符号也出现了一个小错误，我在这里修改正确了。</p>\n<p>关于这一点疑问，我已经发邮件请教了原作者James Cross，他也已经回复我了，更深入的解答不久应该就会告诉我了，到时候我再更新一下。如果大家有想法的话，也可以提出来。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=4875075&auto=1&height=66\"></iframe></div>\n\n<p>本文将从定义到证明，一步步理清成分句法分析中用到的Dynamic Oracle函数。参考了James Cross在2016年发表在EMNLP上面的论文：<a href=\"https://www.aclweb.org/anthology/D/D16/D16-1001.pdf\" target=\"_blank\" rel=\"noopener\">论文地址</a>，该论文还是当年的best paper。</p>\n<h1 id=\"成分句法分析系统\"><a href=\"#成分句法分析系统\" class=\"headerlink\" title=\"成分句法分析系统\"></a>成分句法分析系统</h1><hr>\n<p>首先本文用到的成分句法分析系统是基于span-based的转移系统，在这里只做简略介绍，详见<a href=\"http://ir.library.oregonstate.edu/downloads/0g354j52q\" target=\"_blank\" rel=\"noopener\">Parsing with Recurrent Neural Networks</a>。<br><img src=\"1.png\" alt><br>上图展示了该转移系统的转移过程，其中结构化预测只用到了shift(sh)和combine(comb)两种动作，因为stack中存放的是span的左右边界下标，所以comb动作不需要区分左右，这与另一种转移系统的reduce动作不同。而对于label的预测，如果栈首的span不构成短语结点，那么就预测为nolabel，否则就预测为$_i{X_j}$。</p>\n<p>每个时刻的状态用三元组$\\left\\langle {z,\\sigma ,t} \\right\\rangle $表示，分别表示第几个动作、栈（span的split序列）、当前已生成的结点$_i{X_j}$集合。注意到对于长度为$n$的句子，只需要用$4n-2$个动作就可以分析出句法树了，并且第偶数个动作做结构预测（sh和comb），第奇数个动作做label预测。<br><img src=\"2.png\" alt><br>上图是一个转移的具体例子，下面将全部以这个句子为例进行介绍。注意到多叉树隐式的转化为了二叉树，临时结点预测为nolabel。</p>\n<h1 id=\"Dynamic-Oracle\"><a href=\"#Dynamic-Oracle\" class=\"headerlink\" title=\"Dynamic Oracle\"></a>Dynamic Oracle</h1><hr>\n<p>Dynamic Oracle是Goldberg和Nivre在2013年总结出来的，发表在TACL上面：<a href=\"https://www.aclweb.org/anthology/Q/Q13/Q13-1033.pdf\" target=\"_blank\" rel=\"noopener\">Training Deterministic Parsers with Non-Deterministic Oracles</a>。</p>\n<p>提出的动机就是为了解决测试阶段贪心预测错误导致误差越来越大的问题。在训练的时候，原来的静态Oracle方法就是每一步都严格按照标准树的动作来进行预测，最终拟合得和标准树动作序列相同，但是测试的时候没有标准树了，如果某一步预测错误，可能会到达一个训练中没有出现过的状态，那就会导致之后的预测越来越错。所以就提出了Dynamic Oracle的技巧，在训练过程中的每一步预测，不再局限于标准树中的一个动作，而扩展为一个动作集合，只要采取集合中的动作，那么最终得到的动作序列一定也是最优的。</p>\n<p>这种方法主要用于贪心的预测方法，例如本文的转移系统就是在每一步贪心的预测当前动作，再如之前介绍过的成分句法分析top-down模型<a href=\"https://www.aclweb.org/anthology/P/P17/P17-1076.pdf\" target=\"_blank\" rel=\"noopener\">A Minimal Span-Based Neural Constituency Parser</a>中，自顶向下贪心的选择每一个span的最佳split，也要用到Dynamic Oracle来防止错误扩大。之前的博客有过专门介绍，可以去翻看一下：<a href=\"https://godweiyang.com/2018/06/28/ACL17-ConParsing/#top-down解码模型\">Dynamic Oracle</a></p>\n<p>下面就将从定义、证明等方面来详细阐述Dynamic Oracle。</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><hr>\n<p><strong>定义1：</strong> 定义$c{ \\vdash _\\tau }c’$为状态$c$经过动作$\\tau $之后转移到状态${c’}$，写成函数的形式就是$c’ = \\tau ({c})$。另外定义$ \\vdash $为所有动作$\\tau $的并集，也就是状态$c$经过任意动作之后转移到状态${c’}$。定义${ \\vdash ^*}$为$ \\vdash $的自反和传递闭包。</p>\n<p><strong>定义2（派生树/可到达树）：</strong> 定义$D({c})$为从状态$c$出发，最终可以产生的句法树的集合，即<br>\\[D({c}) = \\left\\{ {t|c{ \\vdash ^*}\\left\\langle {z,\\sigma ,t} \\right\\rangle } \\right\\}\\]<br>也可以称作“派生树”或者“可到达树”。</p>\n<p><strong>定义3（$F_1$值）：</strong> 定义预测树$t$关于标准树$t_G$的$F_1$值为<br>\\[{F_1}(t) = \\frac{ {rp}}{ {r + p}}\\]<br>其中$r = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| { {t_G}} \\right|}},p = \\frac{ {\\left| {t \\cap {t_G}} \\right|}}{ {\\left| t \\right|}}$。</p>\n<p><strong>定义4：</strong> 将$F_1$扩展为状态$c$的函数，定义${F_1}({c})$为从状态$c$出发可以产生的$F_1$值最高的句法树的$F_1$值，即<br>\\[{F_1}(c) = {\\max _{t \\in D(c)}}{F_1}(t)\\]</p>\n<p><strong>定义5（oracle）：</strong> 定义状态$c$的oracle为使状态$c$转移过后最优$F_1$值不变的动作集合，即<br>\\[oracle(c) = \\left\\{ {\\tau |{F_1}(\\tau (c)) = {F_1}(c)} \\right\\}\\]<br>至于这个集合该怎么求解，下面将会讲到。</p>\n<p><strong>定义6（span包含）：</strong> span$(i,j)$被span$(p,q)$包含，当且仅当$p \\le i &lt; j \\le q$，记为<br>\\[(i,j) \\preceq (p,q)\\]</p>\n<p><strong>定义7（严格包含）：</strong> span$(i,j)$被span$(p,q)$严格包含，当且仅当$(i,j) \\preceq (p,q)$，并且$(i,j) \\ne (p,q)$，记为<br>\\[(i,j) \\prec (p,q)\\]<br>同样可以将偏序关系从span扩展到类别，即$_i{X_j}{ \\prec _p}{Y_q}$，当且仅当$(i,j) \\prec (p,q)$。</p>\n<p><strong>定义8（可到达类别）：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，定义它的可到达类别集合为<br>\\[reach(c) = left(c) \\cup right(c)\\]<br>其中左右可到达类别集合又分别定义为<br>\\[\\begin{array}{l}left(c) = \\left\\{ {_p{X_q} \\in {t_G}|(i,j) \\prec (p,q),p \\in \\sigma |i} \\right\\}\\\\right(c) = \\left\\{ {_p{X_q} \\in {t_G}|p \\ge j} \\right\\}\\end{array}\\]<br>光看定义可能有点生涩，通俗理解就是，$left(c)$为标准树中包含span$(i,j)$的类别集合，并且类别的左端点与栈中的span没有交叉，也就是说类别的左端点就是栈中除了$j$以外的其余split中的某一个。而$right(c)$为标准树中还处于队列中没有进栈的类别集合。<br><img src=\"3.png\" alt><br>如上图所示，还以之前的句法树为例，现在的状态为$\\left\\langle {10,[0,1,2,4],\\left\\{ {_0N{P_1}} \\right\\}} \\right\\rangle $，此时的栈顶span$(i,j)=(2,4)$，也就是红色梯形部分，那么$left(c)$就是深蓝色类别，$right(c)$就是天蓝色类别。而灰色类别因为与红色类别交叉了，所以属于不可到达类别，而标准树中还有一个类别$_0N{P_1}$由于已经被识别出来了，所以也属于不可到达类别。</p>\n<p>上面定义是基于动作序号为偶数的情况，而对于动作序号为奇数的情况，也就是预测label的动作，只需要将偏序$\\prec$修改为$\\preceq$即可，因为转移过后span依然是本身，所以不是严格包含关系。</p>\n<p>特殊情况（初始值）：<br>\\[reach(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = {t_G}\\]<br>很显然，初始时$t_G$中所有类别都属于$right(c)$。</p>\n<p>最后需要注意的一点是，根据以上定义有<br>\\[reach(c) \\cap t = \\emptyset ,reach(c) \\subseteq {t_G} - t\\]<br>这一点也是很显然的，$left(c)$都是严格包含span$(i,j)$的，所以与$t$不存在交集，而$right(c)$在队列里，更不可能存在交集，观察上面的例子会更加好理解。</p>\n<p><strong>定义9（next类别）：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，上面已经定义了它的可到达类别集合，最后再定义它的下一个可到达类别为严格包含span$(i,j)$的可到达类别集合（即$left(c)$）中偏序关系最小的类别<br>\\[next(c) = {\\min _ \\prec }left(c)\\]</p>\n<h1 id=\"结构化和label-Oracles\"><a href=\"#结构化和label-Oracles\" class=\"headerlink\" title=\"结构化和label Oracles\"></a>结构化和label Oracles</h1><hr>\n<p>对于任意动作序号为偶数的状态$c = \\left\\langle {z,\\sigma |i|j,t} \\right\\rangle $，记$next(c){ = _p}{X_q}$，那么定义它的结构化Dynamic Oracle为<br><img src=\"4.png\" alt><br>也就是使当前状态向着标准树中最接近它的状态$next(c)$转移，如果$p = i,q &gt; j$，那么应该在移进栈里一些单词；如果$p &lt; i,q = j$，那么不能再移进了，而应该在栈里combine两个span；如果$p &lt; i,q &gt; j$，那么移进或者归约都可以，反正总能达到前两种状态。</p>\n<p>特殊情况（初始值）：<br>\\[dyna(\\left\\langle {0,[0],\\emptyset } \\right\\rangle ) = \\{ sh\\} \\]<br>即使当前预测的span是错的，也可以经过Dynamic Oracle指导，几步之后预测到正确的$next(c)$。而如果没有Dynamic Oracle，可能就一直错下去了。<br><img src=\"5.png\" alt><br>上图是几种任意状态的Dynamic Oracle示例，除了第一种之外，其余三个都是预测错误的，如果没有Dynamic Oracle，甚至都不知道下一步转移的动作是什么。</p>\n<p><strong>引理1：</strong> 对于任意状态$c$，任意动作$\\tau  \\in dyna(c)$，有<br>\\[reach(\\tau (c)) = reach(c)\\]<br>而对于任意动作$\\tau  \\notin dyna(c)$，有<br>\\[reach(\\tau (c)) \\not\\subset reach(c)\\]</p>\n<p>最后是label Dynamic Oracle，这个就很简单了，如果span$(i,j)$出现在了标准树中，那么预测类别就行了，否则的话预测为nolabel：<br><img src=\"6.png\" alt></p>\n<h1 id=\"正确性证明\"><a href=\"#正确性证明\" class=\"headerlink\" title=\"正确性证明\"></a>正确性证明</h1><hr>\n<p>主要证明两点内容：</p>\n<ul>\n<li>首先定义一个特殊的树$t^*{(c)}$，下面会证明它是从状态$c$开始可以得到的得分最高的树。</li>\n<li>然后证明从状态$c$开始按照Dynamic Oracle策略，确实可以得到最优树$t^*{(c)}$。</li>\n</ul>\n<p><strong>定义10（$t^*{(c)}$）：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，定义最优树$t^*{(c)}$为$c$中的子树$t$并上当前状态可到达的类别集合，也就是<br>\\[{t^*}(c) = t \\cup reach(c)\\]<br>下面我们会证明，$t^*{(c)}$的确是当前状态可以得到的得分最高的树。<br><img src=\"7.png\" alt><br>上图形象的说明了几种树之间的关系。当前子树$t$与标准树$t_G$不一定完全重合，可能有预测错误的，所以是交叉的。那么接下来的预测如果全部预测为标准树中的$reach(c)$，那么得分一定是最高的。而剩余的白色部分就是与$t$的span产生交叉的类别，属于不可到达的。</p>\n<p><strong>引理2：</strong> 对于任意状态$c$，最优树$t^*{(c)}$一定是$c$的派生树，也就是<br>\\[{t^*}(c) \\in D(c)\\]</p>\n<p><strong>定理1：</strong> 对于任意状态$c$，有<br>\\[{F_1}({t^*}(c)) = {F_1}(c)\\]</p>\n<p>也就是说最优树$t^*{(c)}$的得分一定是当前状态可以得到的最高分数。</p>\n<p>证明也很简单，根据召回率和准确率公式，最优树$t^*{(c)}$是在$t$的基础上加入了所有的标准树中的可到达类别$reach(c)$，所以召回率分子不会降下来，召回率不可能更高了；同时并没有加入任何不在标准树中的类别，所以准确率的分母也不可能减小，准确率也不会更高了。因此$t^*{(c)}$就是当前状态可以得到的最优树。</p>\n<p><strong>推论1：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意$t’ \\in D(c),t’ \\ne {t^*}(c)$，都有<br>\\[{F_1}(t’) &lt; {F_1}(c)\\]<br>上面已经证明了$t^*{(c)}$是最优树，所以自然其余的树得分都比它低了。</p>\n<p>最后需要证明的一点就是，按照Dynamic Oracle策略进行转移，一定能到达这个最优树吗？</p>\n<p><strong>引理3：</strong> 对于任意状态$c = \\left\\langle {z,\\sigma,t} \\right\\rangle $，对任意动作$\\tau  \\in dyna(c)$，都有<br>\\[{t^*}(\\tau (c)) = {t^*}(c)\\]<br>反之如果$\\tau  \\notin dyna(c)$，那么有<br>\\[{t^*}(\\tau (c)) \\ne {t^*}(c)\\]<br>原文并没有给出证明，粗略理解的话，按照Dynamic Oracle策略，下面应该向着$next(c)$这个类别靠近，而在这个过程中，包含在$next(c)$内的$right(c)$都会被sh动作识别，而其余不在标准树中的类别都会被识别为nolabel，$next(c)$又是第一个$left(c)$，所以所有的$reach(c)$都可以被识别，所以这是符合$t^*{(c)}$定义的。</p>\n<p>反之如果不按照Dynamic Oracle策略来转移，下一步产生的span一定会与$next(c)$产生交叉，因此$next(c)$再也无法被包括进最终的句法树中，所以第二点也成立。</p>\n<p>最终综合引理3、定理1和推论1，得到了本文中最关键的结论：</p>\n<p><strong>定理2：</strong> $dyna()$函数符合定义5中的oracle定义，即对于任意状态$c$，有<br>\\[dyna(c) = oracle(c)\\]</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>至此关于Dynamic Oracle已经全部介绍完了，在黄亮老师的个人主页上面，还有这篇论文的会议视频和ppt，还有github源码，大家可以去深入学习：<a href=\"http://web.engr.oregonstate.edu/~huanlian/\" target=\"_blank\" rel=\"noopener\">Liang Huang</a>。</p>\n<p>当然，在具体实现中，由于在训练集上过早的拟合，单纯使用Dynamic Oracle并没有得到任何效果提升，所以要加入exploration机制，也就是人为的干预动作分类，使模型故意预测错误的动作，这样就能学习到更多的情况了，事实证明这样的确得到了略微提升。PTB上的结果如下：<br><img src=\"8.png\" alt></p>\n<p>最后提一个小疑问，关于引理1，原文说之后定理的证明会用到它，但我没看出来哪里用到了。而且我对它的正确性也有所怀疑，按照Dynamic Oracle转移之后，$reach(c)$不可能一直不变啊，按理说会先不变，再变少，交替变化，最后生成句法树后变为空集。并且原文中引理1符号也出现了一个小错误，我在这里修改正确了。</p>\n<p>关于这一点疑问，我已经发邮件请教了原作者James Cross，他也已经回复我了，更深入的解答不久应该就会告诉我了，到时候我再更新一下。如果大家有想法的话，也可以提出来。</p>\n"},{"title":"华东师范大学LaTeX幻灯片模板","date":"2017-12-29T10:56:48.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n分享一套自用ppt模板，使用 ```XeLaTeX``` 编译\n链接地址：[传送门](https://github.com/godweiyang/ECNU_BeamerTemplate)\n\n# 界面示例\n![](1.png)\n觉得还可以的下载了用哦，欢迎修改的更美观！","source":"_posts/ecnu-ppt.md","raw":"---\ntitle: 华东师范大学LaTeX幻灯片模板\ndate: 2017-12-29 18:56:48\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- LaTeX\n- Beamer\n- ppt\ncategories:\n- 模板\n---\n\n分享一套自用ppt模板，使用 ```XeLaTeX``` 编译\n链接地址：[传送门](https://github.com/godweiyang/ECNU_BeamerTemplate)\n\n# 界面示例\n![](1.png)\n觉得还可以的下载了用哦，欢迎修改的更美观！","slug":"ecnu-ppt","published":1,"updated":"2019-07-20T04:13:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982h8008h7swezrg84a69","content":"<p>分享一套自用ppt模板，使用 <code>XeLaTeX</code> 编译<br>链接地址：<a href=\"https://github.com/godweiyang/ECNU_BeamerTemplate\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h1 id=\"界面示例\"><a href=\"#界面示例\" class=\"headerlink\" title=\"界面示例\"></a>界面示例</h1><p><img src=\"1.png\" alt><br>觉得还可以的下载了用哦，欢迎修改的更美观！</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>分享一套自用ppt模板，使用 <code>XeLaTeX</code> 编译<br>链接地址：<a href=\"https://github.com/godweiyang/ECNU_BeamerTemplate\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h1 id=\"界面示例\"><a href=\"#界面示例\" class=\"headerlink\" title=\"界面示例\"></a>界面示例</h1><p><img src=\"1.png\" alt><br>觉得还可以的下载了用哦，欢迎修改的更美观！</p>\n"},{"title":"EOJ2854. 统计特定字串模式的个数","date":"2018-06-05T03:25:51.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=461525011&auto=1&height=66\"></iframe></div>\n\n**题目链接：[EOJ2854](https://acm.ecnu.edu.cn/problem/2854/)**\n\n# 题意\n---\n在0和1组成的长度为$n(1 \\le n \\le 31)$的字符串中，统计包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。\n\n# 题解\n---\n这题要用到的算法思想是动态规划。\n\n首先令$f(n, m)$表示长度为$n(1 \\le n \\le 31)$的字符串中，包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。考虑最后一位，也就是第$n$位的取值，可以分为两种情况：\n* 如果第$n$位为0，那么只能在前面的$n-1$位里取长度为$m$的连续1子串，那么答案就是\n\\\\[f(n-1,m)\\\\]\n* 如果第$n$位为1，那么考虑两种情况。\n一种是最后$m$位全为1，那么前面$n-m$位就可以任意取值，答案为\n\\\\[2^{n-m}\\\\]\n另一种情况是最后$m$位不全为1，也就是存在某一位为0，枚举最后一位0出现的位置，可能出现在第$n-1$位、第$n-2$位，一直到第$n-m+1$位，不管最后一个0出现在哪里，都要在之前的字符串中重新出现长度为$m$的连续1子串，所以答案是\n\\\\[\\sum\\limits_{n - m \\le i \\le n - 2} {f(i,m)} \\\\]\n\n所以最终的答案就是\n\\\\[f(n,m) = {2^{n - m}} + \\sum\\limits_{n - m \\le i \\le n - 1} {f(i,m)} \\\\]\n进一步化简这个式子，用$n-1$替换$n$可以得到\n\\\\[f(n - 1,m) = {2^{n - m - 1}} + \\sum\\limits_{n - m - 1 \\le i \\le n - 2} {f(i,m)} \\\\]\n两式相减可以得到\n\\\\[f(n,m) = {2^{n - m - 1}} + 2f(n - 1,m) - f(n - m - 1,m)\\\\]\n边界条件为：\n* 当$n < m$时，$f(n,m)=0$。\n* 当$n = m$时，$f(n,m)=1$。\n\n# 代码\n---\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint f(int n, int m) {\n\tif (n < m) return 0;\n\tif (n == m) return 1;\n\tint res = 2 * f(n - 1, m) - f(n - m - 1, m) + (1 << (n - m - 1));\n\treturn res;\n}\n\nint main() {\n    int n, m;\n    while (scanf(\"%d%d\", &n, &m) && (n != -1 || m != -1)) {\n    \tint res = f(n, m);\n    \tprintf(\"%d\\n\", res);\n    }\n    return 0;\n}\n```\n","source":"_posts/eoj2854.md","raw":"---\ntitle: EOJ2854. 统计特定字串模式的个数\ndate: 2018-06-05 11:25:51\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EOJ\n- 算法\ncategories:\n- 程序设计\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=461525011&auto=1&height=66\"></iframe></div>\n\n**题目链接：[EOJ2854](https://acm.ecnu.edu.cn/problem/2854/)**\n\n# 题意\n---\n在0和1组成的长度为$n(1 \\le n \\le 31)$的字符串中，统计包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。\n\n# 题解\n---\n这题要用到的算法思想是动态规划。\n\n首先令$f(n, m)$表示长度为$n(1 \\le n \\le 31)$的字符串中，包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。考虑最后一位，也就是第$n$位的取值，可以分为两种情况：\n* 如果第$n$位为0，那么只能在前面的$n-1$位里取长度为$m$的连续1子串，那么答案就是\n\\\\[f(n-1,m)\\\\]\n* 如果第$n$位为1，那么考虑两种情况。\n一种是最后$m$位全为1，那么前面$n-m$位就可以任意取值，答案为\n\\\\[2^{n-m}\\\\]\n另一种情况是最后$m$位不全为1，也就是存在某一位为0，枚举最后一位0出现的位置，可能出现在第$n-1$位、第$n-2$位，一直到第$n-m+1$位，不管最后一个0出现在哪里，都要在之前的字符串中重新出现长度为$m$的连续1子串，所以答案是\n\\\\[\\sum\\limits_{n - m \\le i \\le n - 2} {f(i,m)} \\\\]\n\n所以最终的答案就是\n\\\\[f(n,m) = {2^{n - m}} + \\sum\\limits_{n - m \\le i \\le n - 1} {f(i,m)} \\\\]\n进一步化简这个式子，用$n-1$替换$n$可以得到\n\\\\[f(n - 1,m) = {2^{n - m - 1}} + \\sum\\limits_{n - m - 1 \\le i \\le n - 2} {f(i,m)} \\\\]\n两式相减可以得到\n\\\\[f(n,m) = {2^{n - m - 1}} + 2f(n - 1,m) - f(n - m - 1,m)\\\\]\n边界条件为：\n* 当$n < m$时，$f(n,m)=0$。\n* 当$n = m$时，$f(n,m)=1$。\n\n# 代码\n---\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint f(int n, int m) {\n\tif (n < m) return 0;\n\tif (n == m) return 1;\n\tint res = 2 * f(n - 1, m) - f(n - m - 1, m) + (1 << (n - m - 1));\n\treturn res;\n}\n\nint main() {\n    int n, m;\n    while (scanf(\"%d%d\", &n, &m) && (n != -1 || m != -1)) {\n    \tint res = f(n, m);\n    \tprintf(\"%d\\n\", res);\n    }\n    return 0;\n}\n```\n","slug":"eoj2854","published":1,"updated":"2019-07-20T04:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hb008k7swebxzrr39k","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=461525011&auto=1&height=66\"></iframe></div>\n\n<p><strong>题目链接：<a href=\"https://acm.ecnu.edu.cn/problem/2854/\" target=\"_blank\" rel=\"noopener\">EOJ2854</a></strong></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><hr>\n<p>在0和1组成的长度为$n(1 \\le n \\le 31)$的字符串中，统计包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><hr>\n<p>这题要用到的算法思想是动态规划。</p>\n<p>首先令$f(n, m)$表示长度为$n(1 \\le n \\le 31)$的字符串中，包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。考虑最后一位，也就是第$n$位的取值，可以分为两种情况：</p>\n<ul>\n<li>如果第$n$位为0，那么只能在前面的$n-1$位里取长度为$m$的连续1子串，那么答案就是<br>\\[f(n-1,m)\\]</li>\n<li>如果第$n$位为1，那么考虑两种情况。<br>一种是最后$m$位全为1，那么前面$n-m$位就可以任意取值，答案为<br>\\[2^{n-m}\\]<br>另一种情况是最后$m$位不全为1，也就是存在某一位为0，枚举最后一位0出现的位置，可能出现在第$n-1$位、第$n-2$位，一直到第$n-m+1$位，不管最后一个0出现在哪里，都要在之前的字符串中重新出现长度为$m$的连续1子串，所以答案是<br>\\[\\sum\\limits_{n - m \\le i \\le n - 2} {f(i,m)} \\]</li>\n</ul>\n<p>所以最终的答案就是<br>\\[f(n,m) = {2^{n - m}} + \\sum\\limits_{n - m \\le i \\le n - 1} {f(i,m)} \\]<br>进一步化简这个式子，用$n-1$替换$n$可以得到<br>\\[f(n - 1,m) = {2^{n - m - 1}} + \\sum\\limits_{n - m - 1 \\le i \\le n - 2} {f(i,m)} \\]<br>两式相减可以得到<br>\\[f(n,m) = {2^{n - m - 1}} + 2f(n - 1,m) - f(n - m - 1,m)\\]<br>边界条件为：</p>\n<ul>\n<li>当$n &lt; m$时，$f(n,m)=0$。</li>\n<li>当$n = m$时，$f(n,m)=1$。</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><hr>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> m <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=461525011&auto=1&height=66\"></iframe></div>\n\n<p><strong>题目链接：<a href=\"https://acm.ecnu.edu.cn/problem/2854/\" target=\"_blank\" rel=\"noopener\">EOJ2854</a></strong></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><hr>\n<p>在0和1组成的长度为$n(1 \\le n \\le 31)$的字符串中，统计包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><hr>\n<p>这题要用到的算法思想是动态规划。</p>\n<p>首先令$f(n, m)$表示长度为$n(1 \\le n \\le 31)$的字符串中，包含$m(1 \\le m \\le n)$个连续1子串的字符串的个数。考虑最后一位，也就是第$n$位的取值，可以分为两种情况：</p>\n<ul>\n<li>如果第$n$位为0，那么只能在前面的$n-1$位里取长度为$m$的连续1子串，那么答案就是<br>\\[f(n-1,m)\\]</li>\n<li>如果第$n$位为1，那么考虑两种情况。<br>一种是最后$m$位全为1，那么前面$n-m$位就可以任意取值，答案为<br>\\[2^{n-m}\\]<br>另一种情况是最后$m$位不全为1，也就是存在某一位为0，枚举最后一位0出现的位置，可能出现在第$n-1$位、第$n-2$位，一直到第$n-m+1$位，不管最后一个0出现在哪里，都要在之前的字符串中重新出现长度为$m$的连续1子串，所以答案是<br>\\[\\sum\\limits_{n - m \\le i \\le n - 2} {f(i,m)} \\]</li>\n</ul>\n<p>所以最终的答案就是<br>\\[f(n,m) = {2^{n - m}} + \\sum\\limits_{n - m \\le i \\le n - 1} {f(i,m)} \\]<br>进一步化简这个式子，用$n-1$替换$n$可以得到<br>\\[f(n - 1,m) = {2^{n - m - 1}} + \\sum\\limits_{n - m - 1 \\le i \\le n - 2} {f(i,m)} \\]<br>两式相减可以得到<br>\\[f(n,m) = {2^{n - m - 1}} + 2f(n - 1,m) - f(n - m - 1,m)\\]<br>边界条件为：</p>\n<ul>\n<li>当$n &lt; m$时，$f(n,m)=0$。</li>\n<li>当$n = m$时，$f(n,m)=1$。</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><hr>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint f(int n, int m) {\n    if (n &lt; m) return 0;\n    if (n == m) return 1;\n    int res = 2 * f(n - 1, m) - f(n - m - 1, m) + (1 &lt;&lt; (n - m - 1));\n    return res;\n}\n\nint main() {\n    int n, m;\n    while (scanf(&quot;%d%d&quot;, &amp;n, &amp;m) &amp;&amp; (n != -1 || m != -1)) {\n        int res = f(n, m);\n        printf(&quot;%d\\n&quot;, res);\n    }\n    return 0;\n}</code></pre>\n"},{"title":"EOJ3006. 计算多项式的系数II","date":"2018-06-05T03:53:20.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=109174&auto=1&height=66\"></iframe></div>\n\n**题目链接：[EOJ3006](https://acm.ecnu.edu.cn/problem/3006/)**\n\n# 题意\n---\n给定一个多项式${(ax + by)^k}$，计算多项式展开后${x^n}{y^m}$项的系数，结果对1000000007取模。\n\n# 题解\n---\n由二项式定理可以得知，${x^n}{y^m}$项的系数就是\n\\\\[{a^n}{b^m}C_k^n\\\\]\n然后再对1000000007取模，其中${a^n}{b^m}$取模很方便，用快速幂就行了，剩下的问题就是如何求解\n\\\\[C_k^n\\bmod p\\\\]\n这里由于$n,k$都不是很大，所以直接采用组合数计算公式求出答案，再进行取模就行了。\n\n拓展一下，如果$n,k$都是小于$10^9$的，那么就不能直接计算了。\n\n这时候要用到一个大组合数取模的定理，叫做lucas定理：\n> **定理：**\n对于组合数取模\n\\\\[C_n^m\\bmod p\\\\]\n其中$p$是质数。\n如果令$n=sp+q,m=tp+r. (q,r<p)$\n那么有\n\\\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\\\]\n**证明:**\n\\\\[\\begin{array}{l}{(1 + x)^n} \\equiv {(1 + x)^{sp + q}} \\equiv {(1 + x)^{sp}}{(1 + x)^q}\\\\ \\equiv {({(1 + x)^p})^s}{(1 + x)^q} \\equiv {(1 + {x^p})^s}{(1 + x)^q}\\\\ \\equiv \\sum\\limits_{i = 0}^s {C_s^i{x^{ip}}} \\sum\\limits_{j = 0}^q {C_q^j{x^j}} \\bmod p\\end{array}\\\\]\n其中$(1 + x)^n$中$x^{tp+r}$项的系数为$C_{sp + q}^{tp + r}$，而在同余号右边$x^{tp+r}$项的系数只能为$C_s^tC_q^r$。\n因为假设\n\\\\[tp + r = ip + j\\\\]\n所以\n\\\\[(t - i)p = j - r\\\\]\n而\n\\\\[ - p <  - r \\le j - r \\le q - r < p - r \\le p\\\\]\n所以只能是\n\\\\[t - i = 0,j - r = 0\\\\]\n所以\n\\\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\\\]\n\n在代码实现中，应用lucas定理之后，将$C_n^m$替换为$C_s^t$继续调用lucas定理即可。递归终止条件是$t=0$。\n\n最后计算$C_q^r\\bmod p$时直接应用组合数定义即可：\n\\\\[C_q^r \\equiv \\frac{ {q!}}{ {r!(q - r)!}} \\equiv q!{(r!(q - r)!)^{p - 2}} \\equiv q!{(r!(q - r)!\\bmod p)^{p - 2}}\\bmod p\\\\]\n这里还用到了逆元：\n\\\\[{a^{ - 1}} \\equiv {a^{p - 2}}\\bmod p\\\\]\n证明详见我的另一篇博客：[具体数学-第12课](http://godweiyang.com/2018/05/14/concrete-math-12/)中的费马小定理和欧拉定理。\n\n# 代码\n---\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\nconst int MAXN = 1000000 + 10;\nconst LL MOD = 1e9 + 7;\n\nLL f[MAXN];\n\nLL QuickPow(LL a, LL n, LL p) {\n    LL res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n\nLL C(LL n, LL m, LL p) {\n    LL res = f[n] * QuickPow((f[m] * f[n-m]) % p, p - 2, p) % p;\n    return res;\n}\n\nvoid init() {\n    f[0] = 1;\n    for (int i = 1; i < MAXN; ++i) {\n        f[i] = (f[i - 1] * i) % MOD;\n    }\n}\n\nint main() {\n    init();\n    int T;\n    scanf(\"%d\", &T);\n    for (int t = 0; t < T; ++t) {\n        LL a, b, k, n, m;\n        scanf(\"%lld%lld%lld%lld%lld\", &a, &b, &k, &n, &m);\n        LL res = (((QuickPow(a, n, MOD) * QuickPow(b, m, MOD)) % MOD) * C(k, n, MOD)) % MOD;\n        printf(\"case #%d:\\n%lld\\n\", t, res);\n    }\n    return 0;\n}\n```\n","source":"_posts/eoj3006.md","raw":"---\ntitle: EOJ3006. 计算多项式的系数II\ndate: 2018-06-05 11:53:20\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EOJ\n- 算法\ncategories:\n- 程序设计\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=109174&auto=1&height=66\"></iframe></div>\n\n**题目链接：[EOJ3006](https://acm.ecnu.edu.cn/problem/3006/)**\n\n# 题意\n---\n给定一个多项式${(ax + by)^k}$，计算多项式展开后${x^n}{y^m}$项的系数，结果对1000000007取模。\n\n# 题解\n---\n由二项式定理可以得知，${x^n}{y^m}$项的系数就是\n\\\\[{a^n}{b^m}C_k^n\\\\]\n然后再对1000000007取模，其中${a^n}{b^m}$取模很方便，用快速幂就行了，剩下的问题就是如何求解\n\\\\[C_k^n\\bmod p\\\\]\n这里由于$n,k$都不是很大，所以直接采用组合数计算公式求出答案，再进行取模就行了。\n\n拓展一下，如果$n,k$都是小于$10^9$的，那么就不能直接计算了。\n\n这时候要用到一个大组合数取模的定理，叫做lucas定理：\n> **定理：**\n对于组合数取模\n\\\\[C_n^m\\bmod p\\\\]\n其中$p$是质数。\n如果令$n=sp+q,m=tp+r. (q,r<p)$\n那么有\n\\\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\\\]\n**证明:**\n\\\\[\\begin{array}{l}{(1 + x)^n} \\equiv {(1 + x)^{sp + q}} \\equiv {(1 + x)^{sp}}{(1 + x)^q}\\\\ \\equiv {({(1 + x)^p})^s}{(1 + x)^q} \\equiv {(1 + {x^p})^s}{(1 + x)^q}\\\\ \\equiv \\sum\\limits_{i = 0}^s {C_s^i{x^{ip}}} \\sum\\limits_{j = 0}^q {C_q^j{x^j}} \\bmod p\\end{array}\\\\]\n其中$(1 + x)^n$中$x^{tp+r}$项的系数为$C_{sp + q}^{tp + r}$，而在同余号右边$x^{tp+r}$项的系数只能为$C_s^tC_q^r$。\n因为假设\n\\\\[tp + r = ip + j\\\\]\n所以\n\\\\[(t - i)p = j - r\\\\]\n而\n\\\\[ - p <  - r \\le j - r \\le q - r < p - r \\le p\\\\]\n所以只能是\n\\\\[t - i = 0,j - r = 0\\\\]\n所以\n\\\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\\\]\n\n在代码实现中，应用lucas定理之后，将$C_n^m$替换为$C_s^t$继续调用lucas定理即可。递归终止条件是$t=0$。\n\n最后计算$C_q^r\\bmod p$时直接应用组合数定义即可：\n\\\\[C_q^r \\equiv \\frac{ {q!}}{ {r!(q - r)!}} \\equiv q!{(r!(q - r)!)^{p - 2}} \\equiv q!{(r!(q - r)!\\bmod p)^{p - 2}}\\bmod p\\\\]\n这里还用到了逆元：\n\\\\[{a^{ - 1}} \\equiv {a^{p - 2}}\\bmod p\\\\]\n证明详见我的另一篇博客：[具体数学-第12课](http://godweiyang.com/2018/05/14/concrete-math-12/)中的费马小定理和欧拉定理。\n\n# 代码\n---\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\nconst int MAXN = 1000000 + 10;\nconst LL MOD = 1e9 + 7;\n\nLL f[MAXN];\n\nLL QuickPow(LL a, LL n, LL p) {\n    LL res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n\nLL C(LL n, LL m, LL p) {\n    LL res = f[n] * QuickPow((f[m] * f[n-m]) % p, p - 2, p) % p;\n    return res;\n}\n\nvoid init() {\n    f[0] = 1;\n    for (int i = 1; i < MAXN; ++i) {\n        f[i] = (f[i - 1] * i) % MOD;\n    }\n}\n\nint main() {\n    init();\n    int T;\n    scanf(\"%d\", &T);\n    for (int t = 0; t < T; ++t) {\n        LL a, b, k, n, m;\n        scanf(\"%lld%lld%lld%lld%lld\", &a, &b, &k, &n, &m);\n        LL res = (((QuickPow(a, n, MOD) * QuickPow(b, m, MOD)) % MOD) * C(k, n, MOD)) % MOD;\n        printf(\"case #%d:\\n%lld\\n\", t, res);\n    }\n    return 0;\n}\n```\n","slug":"eoj3006","published":1,"updated":"2019-07-20T04:15:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982he008p7swesqz4f6vs","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=109174&auto=1&height=66\"></iframe></div>\n\n<p><strong>题目链接：<a href=\"https://acm.ecnu.edu.cn/problem/3006/\" target=\"_blank\" rel=\"noopener\">EOJ3006</a></strong></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><hr>\n<p>给定一个多项式${(ax + by)^k}$，计算多项式展开后${x^n}{y^m}$项的系数，结果对1000000007取模。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><hr>\n<p>由二项式定理可以得知，${x^n}{y^m}$项的系数就是<br>\\[{a^n}{b^m}C_k^n\\]<br>然后再对1000000007取模，其中${a^n}{b^m}$取模很方便，用快速幂就行了，剩下的问题就是如何求解<br>\\[C_k^n\\bmod p\\]<br>这里由于$n,k$都不是很大，所以直接采用组合数计算公式求出答案，再进行取模就行了。</p>\n<p>拓展一下，如果$n,k$都是小于$10^9$的，那么就不能直接计算了。</p>\n<p>这时候要用到一个大组合数取模的定理，叫做lucas定理：</p>\n<blockquote>\n<p><strong>定理：</strong><br>对于组合数取模<br>\\[C_n^m\\bmod p\\]<br>其中$p$是质数。<br>如果令$n=sp+q,m=tp+r. (q,r&lt;p)$<br>那么有<br>\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\]<br><strong>证明:</strong><br>\\[\\begin{array}{l}{(1 + x)^n} \\equiv {(1 + x)^{sp + q}} \\equiv {(1 + x)^{sp}}{(1 + x)^q}\\\\ \\equiv {({(1 + x)^p})^s}{(1 + x)^q} \\equiv {(1 + {x^p})^s}{(1 + x)^q}\\\\ \\equiv \\sum\\limits_{i = 0}^s {C_s^i{x^{ip}}} \\sum\\limits_{j = 0}^q {C_q^j{x^j}} \\bmod p\\end{array}\\]<br>其中$(1 + x)^n$中$x^{tp+r}$项的系数为$C_{sp + q}^{tp + r}$，而在同余号右边$x^{tp+r}$项的系数只能为$C_s^tC_q^r$。<br>因为假设<br>\\[tp + r = ip + j\\]<br>所以<br>\\[(t - i)p = j - r\\]<br>而<br>\\[ - p &lt;  - r \\le j - r \\le q - r &lt; p - r \\le p\\]<br>所以只能是<br>\\[t - i = 0,j - r = 0\\]<br>所以<br>\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\]</p>\n</blockquote>\n<p>在代码实现中，应用lucas定理之后，将$C_n^m$替换为$C_s^t$继续调用lucas定理即可。递归终止条件是$t=0$。</p>\n<p>最后计算$C_q^r\\bmod p$时直接应用组合数定义即可：<br>\\[C_q^r \\equiv \\frac{ {q!}}{ {r!(q - r)!}} \\equiv q!{(r!(q - r)!)^{p - 2}} \\equiv q!{(r!(q - r)!\\bmod p)^{p - 2}}\\bmod p\\]<br>这里还用到了逆元：<br>\\[{a^{ - 1}} \\equiv {a^{p - 2}}\\bmod p\\]<br>证明详见我的另一篇博客：<a href=\"http://godweiyang.com/2018/05/14/concrete-math-12/\">具体数学-第12课</a>中的费马小定理和欧拉定理。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><hr>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> LL MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\nLL f<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nLL <span class=\"token function\">QuickPow</span><span class=\"token punctuation\">(</span>LL a<span class=\"token punctuation\">,</span> LL n<span class=\"token punctuation\">,</span> LL p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LL res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nLL <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">,</span> LL m<span class=\"token punctuation\">,</span> LL p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LL res <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">QuickPow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> f<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">,</span> p <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld%lld%lld%lld%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LL res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">QuickPow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">QuickPow</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case #%d:\\n%lld\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=109174&auto=1&height=66\"></iframe></div>\n\n<p><strong>题目链接：<a href=\"https://acm.ecnu.edu.cn/problem/3006/\" target=\"_blank\" rel=\"noopener\">EOJ3006</a></strong></p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><hr>\n<p>给定一个多项式${(ax + by)^k}$，计算多项式展开后${x^n}{y^m}$项的系数，结果对1000000007取模。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><hr>\n<p>由二项式定理可以得知，${x^n}{y^m}$项的系数就是<br>\\[{a^n}{b^m}C_k^n\\]<br>然后再对1000000007取模，其中${a^n}{b^m}$取模很方便，用快速幂就行了，剩下的问题就是如何求解<br>\\[C_k^n\\bmod p\\]<br>这里由于$n,k$都不是很大，所以直接采用组合数计算公式求出答案，再进行取模就行了。</p>\n<p>拓展一下，如果$n,k$都是小于$10^9$的，那么就不能直接计算了。</p>\n<p>这时候要用到一个大组合数取模的定理，叫做lucas定理：</p>\n<blockquote>\n<p><strong>定理：</strong><br>对于组合数取模<br>\\[C_n^m\\bmod p\\]<br>其中$p$是质数。<br>如果令$n=sp+q,m=tp+r. (q,r&lt;p)$<br>那么有<br>\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\]<br><strong>证明:</strong><br>\\[\\begin{array}{l}{(1 + x)^n} \\equiv {(1 + x)^{sp + q}} \\equiv {(1 + x)^{sp}}{(1 + x)^q}\\\\ \\equiv {({(1 + x)^p})^s}{(1 + x)^q} \\equiv {(1 + {x^p})^s}{(1 + x)^q}\\\\ \\equiv \\sum\\limits_{i = 0}^s {C_s^i{x^{ip}}} \\sum\\limits_{j = 0}^q {C_q^j{x^j}} \\bmod p\\end{array}\\]<br>其中$(1 + x)^n$中$x^{tp+r}$项的系数为$C_{sp + q}^{tp + r}$，而在同余号右边$x^{tp+r}$项的系数只能为$C_s^tC_q^r$。<br>因为假设<br>\\[tp + r = ip + j\\]<br>所以<br>\\[(t - i)p = j - r\\]<br>而<br>\\[ - p &lt;  - r \\le j - r \\le q - r &lt; p - r \\le p\\]<br>所以只能是<br>\\[t - i = 0,j - r = 0\\]<br>所以<br>\\[C_{sp + q}^{tp + r} \\equiv C_s^tC_q^r\\bmod p\\]</p>\n</blockquote>\n<p>在代码实现中，应用lucas定理之后，将$C_n^m$替换为$C_s^t$继续调用lucas定理即可。递归终止条件是$t=0$。</p>\n<p>最后计算$C_q^r\\bmod p$时直接应用组合数定义即可：<br>\\[C_q^r \\equiv \\frac{ {q!}}{ {r!(q - r)!}} \\equiv q!{(r!(q - r)!)^{p - 2}} \\equiv q!{(r!(q - r)!\\bmod p)^{p - 2}}\\bmod p\\]<br>这里还用到了逆元：<br>\\[{a^{ - 1}} \\equiv {a^{p - 2}}\\bmod p\\]<br>证明详见我的另一篇博客：<a href=\"http://godweiyang.com/2018/05/14/concrete-math-12/\">具体数学-第12课</a>中的费马小定理和欧拉定理。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><hr>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\nconst int MAXN = 1000000 + 10;\nconst LL MOD = 1e9 + 7;\n\nLL f[MAXN];\n\nLL QuickPow(LL a, LL n, LL p) {\n    LL res = 1;\n    while (n &gt; 0) {\n        if (n &amp; 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n &gt;&gt;= 1;\n    }\n    return res;\n}\n\nLL C(LL n, LL m, LL p) {\n    LL res = f[n] * QuickPow((f[m] * f[n-m]) % p, p - 2, p) % p;\n    return res;\n}\n\nvoid init() {\n    f[0] = 1;\n    for (int i = 1; i &lt; MAXN; ++i) {\n        f[i] = (f[i - 1] * i) % MOD;\n    }\n}\n\nint main() {\n    init();\n    int T;\n    scanf(&quot;%d&quot;, &amp;T);\n    for (int t = 0; t &lt; T; ++t) {\n        LL a, b, k, n, m;\n        scanf(&quot;%lld%lld%lld%lld%lld&quot;, &amp;a, &amp;b, &amp;k, &amp;n, &amp;m);\n        LL res = (((QuickPow(a, n, MOD) * QuickPow(b, m, MOD)) % MOD) * C(k, n, MOD)) % MOD;\n        printf(&quot;case #%d:\\n%lld\\n&quot;, t, res);\n    }\n    return 0;\n}</code></pre>\n"},{"title":"EOJ3328. 时空交织的代价","date":"2017-09-19T05:19:38.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# 题意\n---\n给定$n$个点和每个点在$x$轴上面的位置和每个点的权值，求出点对之间的费用总和。其中某两个点$i$，$j$之间的费用定义为$ | p_i - p_j | \\times max\\{v_i, v_j\\} $。\n\n# 题解\n---\n对于每个点，计算它左边权值小于它的点与它点对费用之和：\\\\[{v_i}\\sum\\limits_j {({p_i} - {p_j})}  = k{v_i}{p_i} - {v_i}\\sum\\limits_j {p_j} \\\\]其中$k$是左边权值小于它的点的数量，$\\sum\\limits_j {p_j}$是它们的权值之和，可以用两个树状数组统计。右边同理。\n首先按照$p$从小到大排序。对于每个点用树状数组分别统计出左右两边$v$比它小的$v$之和与数量，然后直接计算结果即可。\n\n# 代码\n---\n```cpp\n#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <sstream>\n#include <fstream>\n#include <numeric>\n#include <iomanip>\n#include <climits>\n#include <utility>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <string>\n#include <vector>\n#include <cctype>\n#include <bitset>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <list>\n#include <new>\n#include <map>\n#include <set>\nusing namespace std;\n//#pragma comment(linker, \"/STACK:102400000,102400000\")\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef pair<PII, int> PIII;\ntypedef vector<int> vec;\ntypedef vector<vec> mat;\n#define PB push_back\n#define MP(a, b) make_pair(a, b)\n#define FI first\n#define SE second\n#define gcd(x, y) __gcd(x, y)\n#define gcd3(x, y, z) __gcd(__gcd(x, y), z)\n\nconst double EPS = 1e-15;\nconst double PI = acos(-1.0);\nconst int INF = 0x3f3f3f3f;\nconst LL INFL = 0x3f3f3f3f3f3f3f3fLL;\nconst int MAXN = 200000 + 10;\nconst int MOD = 1000000007;\n\nLL bit[MAXN], bit1[MAXN], n;\n\nLL sum(int i) {\n    LL s = 0;\n    while (i > 0) {\n        (s += bit[i]) %= MOD;\n        i -= i & -i;\n    }\n    return s;\n}\n\nvoid add(int i, LL x) {\n    while (i <= 10000) {\n        (bit[i] += x) %= MOD;\n        i += i & -i;\n    }\n}\n\nLL sum1(int i) {\n    LL s = 0;\n    while (i > 0) {\n        (s += bit1[i]) %= MOD;\n        i -= i & -i;\n    }\n    return s;\n}\n\nvoid add1(int i, LL x) {\n    while (i <= 10000) {\n        (bit1[i] += x) %= MOD;\n        i += i & -i;\n    }\n}\n\nstruct node {\n    LL p, v;\n    bool operator < (const node& rhs) const {\n        return p < rhs.p;\n    }\n};\n\nnode a[MAXN];\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%lld\", &a[i].p);\n    }\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%lld\", &a[i].v);\n    }\n    sort(a, a + n);\n    LL ans = 0;\n    for (int i = 0; i < n; ++i) {\n        LL cnt = sum(a[i].v);\n        LL s = sum1(a[i].v);\n        (ans += (((cnt * a[i].p - s) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    memset(bit, 0, sizeof bit);\n    memset(bit1, 0, sizeof bit1);\n    for (int i = n - 1; i >= 0; --i) {\n        LL cnt = sum(a[i].v);\n        LL s = sum1(a[i].v);\n        (ans += (((s - cnt * a[i].p) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    memset(bit, 0, sizeof bit);\n    memset(bit1, 0, sizeof bit1);\n    for (int i = n - 1; i >= 0; --i) {\n        LL cnt = sum(a[i].v) - sum(a[i].v - 1);\n        LL s = ((sum1(a[i].v) - sum1(a[i].v - 1)) % MOD + MOD) % MOD;\n        (ans -= (((s - cnt * a[i].p) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    printf(\"%lld\\n\", (ans % MOD + MOD) % MOD);\n    return 0;\n}\n```","source":"_posts/eoj3328.md","raw":"---\ntitle: EOJ3328. 时空交织的代价\ndate: 2017-09-19 13:19:38\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- EOJ\n- 算法\ncategories:\n- 程序设计\n---\n\n# 题意\n---\n给定$n$个点和每个点在$x$轴上面的位置和每个点的权值，求出点对之间的费用总和。其中某两个点$i$，$j$之间的费用定义为$ | p_i - p_j | \\times max\\{v_i, v_j\\} $。\n\n# 题解\n---\n对于每个点，计算它左边权值小于它的点与它点对费用之和：\\\\[{v_i}\\sum\\limits_j {({p_i} - {p_j})}  = k{v_i}{p_i} - {v_i}\\sum\\limits_j {p_j} \\\\]其中$k$是左边权值小于它的点的数量，$\\sum\\limits_j {p_j}$是它们的权值之和，可以用两个树状数组统计。右边同理。\n首先按照$p$从小到大排序。对于每个点用树状数组分别统计出左右两边$v$比它小的$v$之和与数量，然后直接计算结果即可。\n\n# 代码\n---\n```cpp\n#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <sstream>\n#include <fstream>\n#include <numeric>\n#include <iomanip>\n#include <climits>\n#include <utility>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <string>\n#include <vector>\n#include <cctype>\n#include <bitset>\n#include <cstdio>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <list>\n#include <new>\n#include <map>\n#include <set>\nusing namespace std;\n//#pragma comment(linker, \"/STACK:102400000,102400000\")\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\ntypedef pair<PII, int> PIII;\ntypedef vector<int> vec;\ntypedef vector<vec> mat;\n#define PB push_back\n#define MP(a, b) make_pair(a, b)\n#define FI first\n#define SE second\n#define gcd(x, y) __gcd(x, y)\n#define gcd3(x, y, z) __gcd(__gcd(x, y), z)\n\nconst double EPS = 1e-15;\nconst double PI = acos(-1.0);\nconst int INF = 0x3f3f3f3f;\nconst LL INFL = 0x3f3f3f3f3f3f3f3fLL;\nconst int MAXN = 200000 + 10;\nconst int MOD = 1000000007;\n\nLL bit[MAXN], bit1[MAXN], n;\n\nLL sum(int i) {\n    LL s = 0;\n    while (i > 0) {\n        (s += bit[i]) %= MOD;\n        i -= i & -i;\n    }\n    return s;\n}\n\nvoid add(int i, LL x) {\n    while (i <= 10000) {\n        (bit[i] += x) %= MOD;\n        i += i & -i;\n    }\n}\n\nLL sum1(int i) {\n    LL s = 0;\n    while (i > 0) {\n        (s += bit1[i]) %= MOD;\n        i -= i & -i;\n    }\n    return s;\n}\n\nvoid add1(int i, LL x) {\n    while (i <= 10000) {\n        (bit1[i] += x) %= MOD;\n        i += i & -i;\n    }\n}\n\nstruct node {\n    LL p, v;\n    bool operator < (const node& rhs) const {\n        return p < rhs.p;\n    }\n};\n\nnode a[MAXN];\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%lld\", &a[i].p);\n    }\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%lld\", &a[i].v);\n    }\n    sort(a, a + n);\n    LL ans = 0;\n    for (int i = 0; i < n; ++i) {\n        LL cnt = sum(a[i].v);\n        LL s = sum1(a[i].v);\n        (ans += (((cnt * a[i].p - s) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    memset(bit, 0, sizeof bit);\n    memset(bit1, 0, sizeof bit1);\n    for (int i = n - 1; i >= 0; --i) {\n        LL cnt = sum(a[i].v);\n        LL s = sum1(a[i].v);\n        (ans += (((s - cnt * a[i].p) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    memset(bit, 0, sizeof bit);\n    memset(bit1, 0, sizeof bit1);\n    for (int i = n - 1; i >= 0; --i) {\n        LL cnt = sum(a[i].v) - sum(a[i].v - 1);\n        LL s = ((sum1(a[i].v) - sum1(a[i].v - 1)) % MOD + MOD) % MOD;\n        (ans -= (((s - cnt * a[i].p) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    printf(\"%lld\\n\", (ans % MOD + MOD) % MOD);\n    return 0;\n}\n```","slug":"eoj3328","published":1,"updated":"2019-07-20T04:15:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hf008s7swex0no3xdg","content":"<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><hr>\n<p>给定$n$个点和每个点在$x$轴上面的位置和每个点的权值，求出点对之间的费用总和。其中某两个点$i$，$j$之间的费用定义为$ | p_i - p_j | \\times max\\{v_i, v_j\\} $。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><hr>\n<p>对于每个点，计算它左边权值小于它的点与它点对费用之和：\\[{v_i}\\sum\\limits_j {({p_i} - {p_j})}  = k{v_i}{p_i} - {v_i}\\sum\\limits_j {p_j} \\]其中$k$是左边权值小于它的点的数量，$\\sum\\limits_j {p_j}$是它们的权值之和，可以用两个树状数组统计。右边同理。<br>首先按照$p$从小到大排序。对于每个点用树状数组分别统计出左右两边$v$比它小的$v$之和与数量，然后直接计算结果即可。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><hr>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iterator></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;climits></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;complex></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cctype></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bitset></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;new></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//#pragma comment(linker, \"/STACK:102400000,102400000\")</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> PII<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span>PII<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> PIII<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>vec<span class=\"token operator\">></span> mat<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PB push_back</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MP(a, b) make_pair(a, b)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FI first</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SE second</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> gcd(x, y) __gcd(x, y)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> gcd3(x, y, z) __gcd(__gcd(x, y), z)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> EPS <span class=\"token operator\">=</span> <span class=\"token number\">1e-15</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> LL INFL <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f3f3f3f3fLL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">200000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n\nLL bit<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bit1<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n\nLL <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LL s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">-</span><span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> LL x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nLL <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LL s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> bit1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">-</span><span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> LL x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>bit1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> node <span class=\"token punctuation\">{</span>\n    LL p<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> p <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnode a<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    LL ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL cnt <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LL s <span class=\"token operator\">=</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">-</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD <span class=\"token operator\">+</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>bit1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> bit1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL cnt <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LL s <span class=\"token operator\">=</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> cnt <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD <span class=\"token operator\">+</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>bit1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> bit1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL cnt <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LL s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD <span class=\"token operator\">+</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> cnt <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD <span class=\"token operator\">+</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">%</span> MOD <span class=\"token operator\">+</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><hr>\n<p>给定$n$个点和每个点在$x$轴上面的位置和每个点的权值，求出点对之间的费用总和。其中某两个点$i$，$j$之间的费用定义为$ | p_i - p_j | \\times max\\{v_i, v_j\\} $。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><hr>\n<p>对于每个点，计算它左边权值小于它的点与它点对费用之和：\\[{v_i}\\sum\\limits_j {({p_i} - {p_j})}  = k{v_i}{p_i} - {v_i}\\sum\\limits_j {p_j} \\]其中$k$是左边权值小于它的点的数量，$\\sum\\limits_j {p_j}$是它们的权值之和，可以用两个树状数组统计。右边同理。<br>首先按照$p$从小到大排序。对于每个点用树状数组分别统计出左右两边$v$比它小的$v$之和与数量，然后直接计算结果即可。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><hr>\n<pre><code class=\"cpp\">#include &lt;functional&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;iterator&gt;\n#include &lt;sstream&gt;\n#include &lt;fstream&gt;\n#include &lt;numeric&gt;\n#include &lt;iomanip&gt;\n#include &lt;climits&gt;\n#include &lt;utility&gt;\n#include &lt;complex&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;cassert&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;cctype&gt;\n#include &lt;bitset&gt;\n#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\n#include &lt;ctime&gt;\n#include &lt;deque&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\n#include &lt;deque&gt;\n#include &lt;list&gt;\n#include &lt;new&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\nusing namespace std;\n//#pragma comment(linker, &quot;/STACK:102400000,102400000&quot;)\n\ntypedef long long LL;\ntypedef pair&lt;int, int&gt; PII;\ntypedef pair&lt;PII, int&gt; PIII;\ntypedef vector&lt;int&gt; vec;\ntypedef vector&lt;vec&gt; mat;\n#define PB push_back\n#define MP(a, b) make_pair(a, b)\n#define FI first\n#define SE second\n#define gcd(x, y) __gcd(x, y)\n#define gcd3(x, y, z) __gcd(__gcd(x, y), z)\n\nconst double EPS = 1e-15;\nconst double PI = acos(-1.0);\nconst int INF = 0x3f3f3f3f;\nconst LL INFL = 0x3f3f3f3f3f3f3f3fLL;\nconst int MAXN = 200000 + 10;\nconst int MOD = 1000000007;\n\nLL bit[MAXN], bit1[MAXN], n;\n\nLL sum(int i) {\n    LL s = 0;\n    while (i &gt; 0) {\n        (s += bit[i]) %= MOD;\n        i -= i &amp; -i;\n    }\n    return s;\n}\n\nvoid add(int i, LL x) {\n    while (i &lt;= 10000) {\n        (bit[i] += x) %= MOD;\n        i += i &amp; -i;\n    }\n}\n\nLL sum1(int i) {\n    LL s = 0;\n    while (i &gt; 0) {\n        (s += bit1[i]) %= MOD;\n        i -= i &amp; -i;\n    }\n    return s;\n}\n\nvoid add1(int i, LL x) {\n    while (i &lt;= 10000) {\n        (bit1[i] += x) %= MOD;\n        i += i &amp; -i;\n    }\n}\n\nstruct node {\n    LL p, v;\n    bool operator &lt; (const node&amp; rhs) const {\n        return p &lt; rhs.p;\n    }\n};\n\nnode a[MAXN];\n\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; ++i) {\n        scanf(&quot;%lld&quot;, &amp;a[i].p);\n    }\n    for (int i = 0; i &lt; n; ++i) {\n        scanf(&quot;%lld&quot;, &amp;a[i].v);\n    }\n    sort(a, a + n);\n    LL ans = 0;\n    for (int i = 0; i &lt; n; ++i) {\n        LL cnt = sum(a[i].v);\n        LL s = sum1(a[i].v);\n        (ans += (((cnt * a[i].p - s) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    memset(bit, 0, sizeof bit);\n    memset(bit1, 0, sizeof bit1);\n    for (int i = n - 1; i &gt;= 0; --i) {\n        LL cnt = sum(a[i].v);\n        LL s = sum1(a[i].v);\n        (ans += (((s - cnt * a[i].p) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    memset(bit, 0, sizeof bit);\n    memset(bit1, 0, sizeof bit1);\n    for (int i = n - 1; i &gt;= 0; --i) {\n        LL cnt = sum(a[i].v) - sum(a[i].v - 1);\n        LL s = ((sum1(a[i].v) - sum1(a[i].v - 1)) % MOD + MOD) % MOD;\n        (ans -= (((s - cnt * a[i].p) % MOD + MOD) % MOD) * a[i].v) %= MOD;\n        add(a[i].v, 1);\n        add1(a[i].v, a[i].p);\n    }\n    printf(&quot;%lld\\n&quot;, (ans % MOD + MOD) % MOD);\n    return 0;\n}</code></pre>\n"},{"title":"毕业论文相关细节记录","date":"2018-03-18T04:46:37.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><audio src=\"http://mp3.qqmusic.cc/yq/3583938.mp3\" controls autoplay>\nYour browser does not support the element.\n</audio></div>\n\n\n# 随机数种子\n---\n这是玄学，姑且就设为我的QQ号792321264，看起来效果不错。\n\n# 神经网络维数\n---\n不断测试发现，64维效果最好，但最后可能改成512维的。\n而且64维的话CPU跑的比GPU还要快6倍，但是512维的话GPU就比CPU快6倍左右了。\n所以维度低还是用CPU比较好。\n\n# 结点分数\n---\n\\\\[\\begin{array}{l}Score(A \\to BC) = \\lambda d \\cdot (W \\cdot e + b) + Spcfg(A)\\\\Spcfg(A) = \\log (Spcfg(B) \\cdot Spcfg(C) \\cdot p(A \\to BC))\\end{array}\\\\]\n其中$d,W,b$是权值矩阵，$\\lambda$是超参数，测试发现设为100左右效果最好。\n\n# 结点表示\n---\n\\\\[e = LST{M^{left}}({e_{right}})\\\\]\n至于用左儿子还是右儿子作为LSTM，还是加一层动态规划记录两者最优值，小数据上暂时没有太大差别。\n\n# 损失函数\n---\n\\\\[L(\\theta ) = Scor{e_{predict}}(ROOT) - Scor{e_{gold}}(ROOT) + k \\cdot \\Delta (predict,gold) + \\frac{1}{2}{\\left\\| \\theta  \\right\\|^2}\\\\]\n其中正则项加了可以使loss下降更稳定，但是效果貌似不如不加，可能是因为数据集太小吧。\n$k$一般取0.1。\n\n# batch\n---\nbatch取50左右效果最好，不过我用的是dynet自带的自动batch，手动batch还不是很会写，所以效率提升不是很大。\n\n# 动态规划\n---\n原来是4层循环，用时特别久，改进了一下变成6层循环效率大大提高。\n原算法：\n```python\nfor i from 0 to n\n    for j from 0 to n\n        for k from i to j\n            for A->BC in grammar\n                balabala...\n```\n改进算法：\n```python\nfor i from 0 to n\n    for j from 0 to n\n        for k from i to j\n            for B in nodetype[left]\n                for C in nodetype[right]\n                    for A in panode[BC]\n                        balabala...\n```\n\n# 未来改进\n---\n* 如果测试集中的句法规则在训练集中没有出现的话，会直接产生None的结果，是否可以考虑产生新的规则，这样就可以对所有句子进行句法分析了？\n* 效率虽然有了很大提升，但是大数据依然跑的很慢，可以考虑加上手动batch、减少规则数量、动态规划算法优化等等。\n\n\n最后附上我的主要代码（丑是丑了点，不喜勿喷，封装什么的以后再说）：\n```python\nimport random\nimport numpy as np\nfrom collections import defaultdict as dd, defaultdict\nfrom itertools import count\nimport re\nimport time\nimport math\nimport _dynet as dy\n\ndyparams = dy.DynetParams()\ndyparams.from_args()\ndyparams.set_requested_gpus(1)\ndyparams.set_mem(2048)\ndyparams.set_random_seed(792321264)\ndyparams.init()\n\n# ==============================================================\n# read train file\nDEBUG = True\n\ntrain_string_file = \"data/train.strings\"\ntrain_tree_file = \"data/train.trees.pre.unk\"\ndev_string_file = \"data/dev.strings\"\ndev_tree_file = \"data/dev.trees\"\ndev_parse_file = \"data/dev.parses\"\nif DEBUG:\n    train_string_file = \"data/train_small.strings\"\n    train_tree_file = \"data/train_small.trees.pre.unk\"\n    dev_string_file = \"data/dev_small.strings\"\n    dev_tree_file = \"data/dev_small.trees\"\n    dev_parse_file = \"data/dev_small.parses\"\n\ntrain_string = []\ntrain_tree = []\nwords = []\nwith open(train_string_file, \"r\") as fh:\n    for line in fh:\n        train_string.append(line)\n        for word in line.split():\n            words.append(word)\nwords.append(\"<unk>\")\n\nwith open(train_tree_file, \"r\") as fh:\n    for line in fh:\n        train_tree.append(line)\n\nw2i = defaultdict(count(0).next)\nfor word in words:\n    w2i[word]\ni2w = {i:w for w, i in w2i.iteritems()}\nnwords = len(w2i)\n\n# ==============================================================\n# read grammar file\nnonTerms = set()\nrules_set1 = set()\nrules_set2 = set()\nrules = {}\nlexicons = []\norigText = list()\nprobs = defaultdict(float)\nnode_pa = {}\n\ndef read_grammar(f):\n    grammar = {}\n    file = open(f, 'r')\n    for rule in file:\n        # AAA -> # BBB @ prob\n        tokens = re.split(r\"\\-\\>|\\@\", rule.strip())\n        lhs = tokens[0].strip()\n        rhs = tokens[1].strip().strip(r'\\'')\n        rhs = rhs.strip(r'\\\"')\n        prob = tokens[2].strip()\n        probs[(lhs, rhs)] = float(prob)\n        nonTerms.add(lhs)\n        if len(rhs.split()) == 1:\n            rules_set1.add((lhs, rhs))\n        else:\n            rules_set2.add((lhs, rhs))\n            if rhs in node_pa:\n                node_pa[rhs].add(lhs)\n            else:\n                node_pa[rhs] = set()\n                node_pa[rhs].add(lhs)\n        rules[lhs] = rhs\n        if len(rhs.split()) == 1 and rhs != '<unk>':\n            lexicons.append(rhs)\n\nif DEBUG:\n    grammar = read_grammar('data/pcfg_small')\nelse:\n    grammar = read_grammar('data/pcfg')\nprint rules_set1.__len__(), rules_set2.__len__()\n\n# ==============================================================\n# LSTM and parameters initialization\nEPOCH = 40\nEMBDDING_SIZE = 512\nlamda = 100\nk = 0.1\nmodel = dy.ParameterCollection()\nbuilder = dy.FastLSTMBuilder(2, EMBDDING_SIZE, EMBDDING_SIZE, model)\ntrainer = dy.AdamTrainer(model)\nWORDS_LOOKUP = model.add_lookup_parameters((nwords, EMBDDING_SIZE))\npd = model.add_parameters((1, EMBDDING_SIZE))\npW = model.add_parameters((EMBDDING_SIZE, EMBDDING_SIZE))\npb = model.add_parameters((EMBDDING_SIZE,))\n\n# ==============================================================\n# construct trees\nclass MTree(object):\n    def __init__(self, lhs, wrd=None, subs=None):\n        self.label = lhs\n        self.word = wrd\n        self.subs = subs\n        self.str = None\n\n    def is_lexicon(self):\n        return self.word is not None\n\n    def dostr(self):\n        return \"(%s %s)\" % (self.label, self.word) if self.is_lexicon() \\\n                else \"(%s %s)\" % (self.label, \" \".join(map(str, self.subs)))\n\n    def __str__(self):\n        if True or self.str is None:\n            self.str = self.dostr()\n        return self.str\n\ndef helper(next, text, backPointers, terminals, score):\n    begin = next[0]\n    end = next[1]\n    A = next[2]\n    if next not in backPointers:\n        if next in terminals:   #base condition\n            word = origText[next[0]]\n            node = MTree(lhs=A, subs=None, wrd=word)\n        return (node, score[(begin, end, A)])\n    (split, B, C) = backPointers[next]\n    next1 = (begin, split, B)\n    next2 = (split, end, C)\n    t1, s1 = helper(next1, text, backPointers, terminals, score)\n    t2, s2 = helper(next2, text, backPointers, terminals, score)\n    return (MTree(lhs=A, subs=[t1, t2], wrd=None), score[(begin, end, A)])\n\ndef backtrack(text, backPointers, terminals, score):\n    n = len(text)\n    if (0, n, 'S') not in backPointers:\n        return (None, 0)\n    t, s = helper((0, n, 'S'), text, backPointers, terminals, score)\n    return (t, s)\n\ndef math_log(x):\n    if x <= 0:\n        return -100\n    else:\n        return math.log(x)\n\ndef score_calc(d, W, p, b, lamda, s_pcfg):\n    return d * (W * p + b) * lamda + s_pcfg\n\ndef cal_loss(result, gold):\n    if result == None:\n        return dy.inputTensor(list([len(gold)]))\n    result = result.split()\n    gold = gold.split()\n    cnt = dy.inputTensor(list([0]))\n    for i in range(0, len(result)):\n        if result[i] != gold[i]:\n            cnt += 1\n    return cnt\n\ndef cal_gold(gold, d, W, b):\n    words = gold.split()\n    n = len(words)\n    if n == 2:\n        A = words[0][1:]\n        word = words[1][:-1]\n        # print gold, word, w2i[word]\n        LSTM = builder.initial_state()\n        TMP = LSTM.add_input(WORDS_LOOKUP[w2i[word]])\n        e = TMP.output()\n        s_pcfg = math_log(probs[(A, word)])\n        s = score_calc(d, W, e, b, lamda, probs[(A, word)])\n        return (e, s, s_pcfg, TMP, A)\n    else:\n        sz = len(gold)\n        p = 0\n        for i in xrange(0, sz):\n            if gold[i] == ' ':\n                p = i\n                break\n        m = 0\n        cnt = 0\n        for i in xrange(p+1, sz):\n            if gold[i] == '(':\n                cnt += 1\n            elif gold[i] == ')':\n                cnt -= 1\n            if cnt == 0:\n                m = i\n                break\n        x1, s1, s1_pcfg, LSTM1, B = cal_gold(gold[p+1 : m+1], d, W, b)\n        x2, s2, s2_pcfg, LSTM2, C = cal_gold(gold[m+2 : sz-1], d, W, b)\n        A = gold[1:p]\n        TMP = LSTM2.add_input(x1)\n        e = TMP.output()\n        s_pcfg = math_log(probs[(A, B+\" \"+C)]) + s1_pcfg + s2_pcfg\n        ss1 = score_calc(d, W, e, b, lamda, s_pcfg)\n        return (e, ss1, s_pcfg, TMP, A)\n\ntotal_time = 0.0\n# print nonTerms.__len__()\nff = open(\"loss.txt\", \"w\")\nfor epoch in xrange(0, EPOCH):\n    print \"epoch %d\" % epoch\n    sumloss = 0\n    num = len(train_string)\n    batch = []\n    start = time.time()\n    for idx, line in enumerate(train_string):\n        sstart = time.time()\n        gold = train_tree[idx].strip()\n        sent = line.split()\n        origText = list(sent)\n        n = len(sent)\n        d = pd.expr()\n        W = pW.expr()\n        b = pb.expr()\n        terminals = {}\n        embdding = {}\n        score = defaultdict(float)\n        score_pcfg = defaultdict(float)\n        backPointers = {}\n        LSTM = {}\n        node_rules = {}\n        for i in range(0, n):\n            begin = i\n            end = i + 1\n            node_rules[(begin, end)] = set()\n            word = sent[i]\n            for A in nonTerms:\n                if (A, word) in rules_set1:\n                    LSTM[(begin, end, A)] = builder.initial_state()\n                    LSTM[(begin, end, A)] = LSTM[(begin, end, A)].add_input(WORDS_LOOKUP[w2i[sent[i]]])\n                    embdding[(begin, end, A)] = LSTM[(begin, end, A)].output()\n                    score_pcfg[(begin, end, A)] = math_log(probs[(A, word)])\n                    score[(begin, end, A)] = score_calc(d, W, embdding[(begin, end, A)], b, lamda, probs[(A, word)])\n                    terminals[(begin, end, A)] = word\n                    node_rules[(begin, end)].add(A)\n        for span in range(2, n + 1):\n            for begin in range(0, n - span + 1):\n                end = begin + span\n                node_rules[(begin, end)] = set()\n                for split in range(begin + 1, end):\n                    for B in node_rules[(begin, split)]:\n                        for C in node_rules[(split, end)]:\n                            X = B+\" \"+C\n                            if X in node_pa:\n                                for A in node_pa[X]:\n                                    node_rules[(begin, end)].add(A)\n                                    TMP = LSTM[(split, end, C)].add_input(embdding[(begin, split, B)])\n                                    p = TMP.output()\n                                    s_pcfg = math_log(probs[(A, X)]) + score_pcfg[(begin, split, B)] + score_pcfg[(split, end, C)]\n                                    s = score_calc(d, W, p, b, lamda, s_pcfg)\n                                    # print (d * (W * p + b) * 100).value(), s_pcfg\n                                    if (begin, end, A) not in score or s.value() > score[(begin, end, A)].value():\n                                        LSTM[(begin, end, A)] = TMP\n                                        score[(begin, end, A)] = s\n                                        score_pcfg[(begin, end, A)] = s_pcfg\n                                        embdding[(begin, end, A)] = p\n                                        backPointers[(begin, end, A)] = (split, B, C)\n\n        t, s = backtrack(sent, backPointers, terminals, score)\n        result = None\n        if t != None:\n            result = t.dostr()\n        golds_e, golds, golds_pcfg, lstm, S = cal_gold(gold, d, W, b)\n        cnt = cal_loss(result, gold)\n        # loss = dy.abs(s - golds) + cnt * k\n        loss = dy.abs(s - golds) + cnt * k + 0.5 * (dy.l2_norm(W) + dy.l2_norm(b) + dy.l2_norm(d))\n        sumloss += loss.value()\n        batch.append(loss)\n        if len(batch) == 50:\n            loss = dy.esum(batch)\n            loss.backward()\n            trainer.update()\n            dy.renew_cg()\n            batch = []\n        eend = time.time()\n        # print \"time of sent \", idx, \": \", eend - sstart\n        if idx > 0 and idx % 500 == 0:\n            print \"time of 500 sent: \", (eend - start) / (idx / 500)\n            # print idx, \" -------------\"\n            # print \"result: \" + result\n            # print \"gold:   \" + gold\n            # print \"loss: \", loss.value()\n    end = time.time()\n    total_time += end - start\n    print \"epoch time: \", end - start\n    print \"epoch loss: \", sumloss / num\n    ff.write('%f\\n'%(sumloss / num))\n\nprint \"total time: \", total_time\n\nfh = open(dev_string_file, \"r\")\noutfile = open(dev_parse_file, \"w\")\nfor line in fh:\n    sent = line.split()\n    origText = list(sent)\n    for i, word in enumerate(sent):\n        if word not in lexicons:\n            sent[i] = '<unk>'\n    n = len(sent)\n    dy.renew_cg()\n    d = pd.expr()\n    W = pW.expr()\n    b = pb.expr()\n    terminals = {}\n    embdding = {}\n    score = defaultdict(float)\n    score_pcfg = defaultdict(float)\n    backPointers = {}\n    LSTM = {}\n    node_rules = {}\n    for i in range(0, n):\n        begin = i\n        end = i + 1\n        node_rules[(begin, end)] = set()\n        word = sent[i]\n        for A in nonTerms:\n            if (A, word) in rules_set1:\n                LSTM[(begin, end, A)] = builder.initial_state()\n                LSTM[(begin, end, A)] = LSTM[(begin, end, A)].add_input(WORDS_LOOKUP[w2i[sent[i]]])\n                embdding[(begin, end, A)] = LSTM[(begin, end, A)].output()\n                score_pcfg[(begin, end, A)] = math_log(probs[(A, word)])\n                score[(begin, end, A)] = score_calc(d, W, embdding[(begin, end, A)], b, lamda, probs[(A, word)])\n                terminals[(begin, end, A)] = word\n                node_rules[(begin, end)].add(A)\n    for span in range(2, n + 1):\n        for begin in range(0, n - span + 1):\n            end = begin + span\n            node_rules[(begin, end)] = set()\n            for split in range(begin + 1, end):\n                for B in node_rules[(begin, split)]:\n                    for C in node_rules[(split, end)]:\n                        X = B+\" \"+C\n                        if X in node_pa:\n                            for A in node_pa[X]:\n                                node_rules[(begin, end)].add(A)\n                                TMP = LSTM[(split, end, C)].add_input(embdding[(begin, split, B)])\n                                p = TMP.output()\n                                s_pcfg = math_log(probs[(A, X)]) + score_pcfg[(begin, split, B)] + score_pcfg[(split, end, C)]\n                                s = score_calc(d, W, p, b, lamda, s_pcfg)\n                                if (begin, end, A) not in score or s.value() > score[(begin, end, A)].value():\n                                    LSTM[(begin, end, A)] = TMP\n                                    score[(begin, end, A)] = s\n                                    score_pcfg[(begin, end, A)] = s_pcfg\n                                    embdding[(begin, end, A)] = p\n                                    backPointers[(begin, end, A)] = (split, B, C)\n                        \n    t, s = backtrack(sent, backPointers, terminals, score)\n    if t == None:\n        outfile.write(\"None\\n\")\n    else:\n        result = t.dostr()\n        outfile.write(result+\"\\n\")\n```","source":"_posts/graduate-technique.md","raw":"---\ntitle: 毕业论文相关细节记录\ndate: 2018-03-18 12:46:37\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><audio src=\"http://mp3.qqmusic.cc/yq/3583938.mp3\" controls autoplay>\nYour browser does not support the element.\n</audio></div>\n\n\n# 随机数种子\n---\n这是玄学，姑且就设为我的QQ号792321264，看起来效果不错。\n\n# 神经网络维数\n---\n不断测试发现，64维效果最好，但最后可能改成512维的。\n而且64维的话CPU跑的比GPU还要快6倍，但是512维的话GPU就比CPU快6倍左右了。\n所以维度低还是用CPU比较好。\n\n# 结点分数\n---\n\\\\[\\begin{array}{l}Score(A \\to BC) = \\lambda d \\cdot (W \\cdot e + b) + Spcfg(A)\\\\Spcfg(A) = \\log (Spcfg(B) \\cdot Spcfg(C) \\cdot p(A \\to BC))\\end{array}\\\\]\n其中$d,W,b$是权值矩阵，$\\lambda$是超参数，测试发现设为100左右效果最好。\n\n# 结点表示\n---\n\\\\[e = LST{M^{left}}({e_{right}})\\\\]\n至于用左儿子还是右儿子作为LSTM，还是加一层动态规划记录两者最优值，小数据上暂时没有太大差别。\n\n# 损失函数\n---\n\\\\[L(\\theta ) = Scor{e_{predict}}(ROOT) - Scor{e_{gold}}(ROOT) + k \\cdot \\Delta (predict,gold) + \\frac{1}{2}{\\left\\| \\theta  \\right\\|^2}\\\\]\n其中正则项加了可以使loss下降更稳定，但是效果貌似不如不加，可能是因为数据集太小吧。\n$k$一般取0.1。\n\n# batch\n---\nbatch取50左右效果最好，不过我用的是dynet自带的自动batch，手动batch还不是很会写，所以效率提升不是很大。\n\n# 动态规划\n---\n原来是4层循环，用时特别久，改进了一下变成6层循环效率大大提高。\n原算法：\n```python\nfor i from 0 to n\n    for j from 0 to n\n        for k from i to j\n            for A->BC in grammar\n                balabala...\n```\n改进算法：\n```python\nfor i from 0 to n\n    for j from 0 to n\n        for k from i to j\n            for B in nodetype[left]\n                for C in nodetype[right]\n                    for A in panode[BC]\n                        balabala...\n```\n\n# 未来改进\n---\n* 如果测试集中的句法规则在训练集中没有出现的话，会直接产生None的结果，是否可以考虑产生新的规则，这样就可以对所有句子进行句法分析了？\n* 效率虽然有了很大提升，但是大数据依然跑的很慢，可以考虑加上手动batch、减少规则数量、动态规划算法优化等等。\n\n\n最后附上我的主要代码（丑是丑了点，不喜勿喷，封装什么的以后再说）：\n```python\nimport random\nimport numpy as np\nfrom collections import defaultdict as dd, defaultdict\nfrom itertools import count\nimport re\nimport time\nimport math\nimport _dynet as dy\n\ndyparams = dy.DynetParams()\ndyparams.from_args()\ndyparams.set_requested_gpus(1)\ndyparams.set_mem(2048)\ndyparams.set_random_seed(792321264)\ndyparams.init()\n\n# ==============================================================\n# read train file\nDEBUG = True\n\ntrain_string_file = \"data/train.strings\"\ntrain_tree_file = \"data/train.trees.pre.unk\"\ndev_string_file = \"data/dev.strings\"\ndev_tree_file = \"data/dev.trees\"\ndev_parse_file = \"data/dev.parses\"\nif DEBUG:\n    train_string_file = \"data/train_small.strings\"\n    train_tree_file = \"data/train_small.trees.pre.unk\"\n    dev_string_file = \"data/dev_small.strings\"\n    dev_tree_file = \"data/dev_small.trees\"\n    dev_parse_file = \"data/dev_small.parses\"\n\ntrain_string = []\ntrain_tree = []\nwords = []\nwith open(train_string_file, \"r\") as fh:\n    for line in fh:\n        train_string.append(line)\n        for word in line.split():\n            words.append(word)\nwords.append(\"<unk>\")\n\nwith open(train_tree_file, \"r\") as fh:\n    for line in fh:\n        train_tree.append(line)\n\nw2i = defaultdict(count(0).next)\nfor word in words:\n    w2i[word]\ni2w = {i:w for w, i in w2i.iteritems()}\nnwords = len(w2i)\n\n# ==============================================================\n# read grammar file\nnonTerms = set()\nrules_set1 = set()\nrules_set2 = set()\nrules = {}\nlexicons = []\norigText = list()\nprobs = defaultdict(float)\nnode_pa = {}\n\ndef read_grammar(f):\n    grammar = {}\n    file = open(f, 'r')\n    for rule in file:\n        # AAA -> # BBB @ prob\n        tokens = re.split(r\"\\-\\>|\\@\", rule.strip())\n        lhs = tokens[0].strip()\n        rhs = tokens[1].strip().strip(r'\\'')\n        rhs = rhs.strip(r'\\\"')\n        prob = tokens[2].strip()\n        probs[(lhs, rhs)] = float(prob)\n        nonTerms.add(lhs)\n        if len(rhs.split()) == 1:\n            rules_set1.add((lhs, rhs))\n        else:\n            rules_set2.add((lhs, rhs))\n            if rhs in node_pa:\n                node_pa[rhs].add(lhs)\n            else:\n                node_pa[rhs] = set()\n                node_pa[rhs].add(lhs)\n        rules[lhs] = rhs\n        if len(rhs.split()) == 1 and rhs != '<unk>':\n            lexicons.append(rhs)\n\nif DEBUG:\n    grammar = read_grammar('data/pcfg_small')\nelse:\n    grammar = read_grammar('data/pcfg')\nprint rules_set1.__len__(), rules_set2.__len__()\n\n# ==============================================================\n# LSTM and parameters initialization\nEPOCH = 40\nEMBDDING_SIZE = 512\nlamda = 100\nk = 0.1\nmodel = dy.ParameterCollection()\nbuilder = dy.FastLSTMBuilder(2, EMBDDING_SIZE, EMBDDING_SIZE, model)\ntrainer = dy.AdamTrainer(model)\nWORDS_LOOKUP = model.add_lookup_parameters((nwords, EMBDDING_SIZE))\npd = model.add_parameters((1, EMBDDING_SIZE))\npW = model.add_parameters((EMBDDING_SIZE, EMBDDING_SIZE))\npb = model.add_parameters((EMBDDING_SIZE,))\n\n# ==============================================================\n# construct trees\nclass MTree(object):\n    def __init__(self, lhs, wrd=None, subs=None):\n        self.label = lhs\n        self.word = wrd\n        self.subs = subs\n        self.str = None\n\n    def is_lexicon(self):\n        return self.word is not None\n\n    def dostr(self):\n        return \"(%s %s)\" % (self.label, self.word) if self.is_lexicon() \\\n                else \"(%s %s)\" % (self.label, \" \".join(map(str, self.subs)))\n\n    def __str__(self):\n        if True or self.str is None:\n            self.str = self.dostr()\n        return self.str\n\ndef helper(next, text, backPointers, terminals, score):\n    begin = next[0]\n    end = next[1]\n    A = next[2]\n    if next not in backPointers:\n        if next in terminals:   #base condition\n            word = origText[next[0]]\n            node = MTree(lhs=A, subs=None, wrd=word)\n        return (node, score[(begin, end, A)])\n    (split, B, C) = backPointers[next]\n    next1 = (begin, split, B)\n    next2 = (split, end, C)\n    t1, s1 = helper(next1, text, backPointers, terminals, score)\n    t2, s2 = helper(next2, text, backPointers, terminals, score)\n    return (MTree(lhs=A, subs=[t1, t2], wrd=None), score[(begin, end, A)])\n\ndef backtrack(text, backPointers, terminals, score):\n    n = len(text)\n    if (0, n, 'S') not in backPointers:\n        return (None, 0)\n    t, s = helper((0, n, 'S'), text, backPointers, terminals, score)\n    return (t, s)\n\ndef math_log(x):\n    if x <= 0:\n        return -100\n    else:\n        return math.log(x)\n\ndef score_calc(d, W, p, b, lamda, s_pcfg):\n    return d * (W * p + b) * lamda + s_pcfg\n\ndef cal_loss(result, gold):\n    if result == None:\n        return dy.inputTensor(list([len(gold)]))\n    result = result.split()\n    gold = gold.split()\n    cnt = dy.inputTensor(list([0]))\n    for i in range(0, len(result)):\n        if result[i] != gold[i]:\n            cnt += 1\n    return cnt\n\ndef cal_gold(gold, d, W, b):\n    words = gold.split()\n    n = len(words)\n    if n == 2:\n        A = words[0][1:]\n        word = words[1][:-1]\n        # print gold, word, w2i[word]\n        LSTM = builder.initial_state()\n        TMP = LSTM.add_input(WORDS_LOOKUP[w2i[word]])\n        e = TMP.output()\n        s_pcfg = math_log(probs[(A, word)])\n        s = score_calc(d, W, e, b, lamda, probs[(A, word)])\n        return (e, s, s_pcfg, TMP, A)\n    else:\n        sz = len(gold)\n        p = 0\n        for i in xrange(0, sz):\n            if gold[i] == ' ':\n                p = i\n                break\n        m = 0\n        cnt = 0\n        for i in xrange(p+1, sz):\n            if gold[i] == '(':\n                cnt += 1\n            elif gold[i] == ')':\n                cnt -= 1\n            if cnt == 0:\n                m = i\n                break\n        x1, s1, s1_pcfg, LSTM1, B = cal_gold(gold[p+1 : m+1], d, W, b)\n        x2, s2, s2_pcfg, LSTM2, C = cal_gold(gold[m+2 : sz-1], d, W, b)\n        A = gold[1:p]\n        TMP = LSTM2.add_input(x1)\n        e = TMP.output()\n        s_pcfg = math_log(probs[(A, B+\" \"+C)]) + s1_pcfg + s2_pcfg\n        ss1 = score_calc(d, W, e, b, lamda, s_pcfg)\n        return (e, ss1, s_pcfg, TMP, A)\n\ntotal_time = 0.0\n# print nonTerms.__len__()\nff = open(\"loss.txt\", \"w\")\nfor epoch in xrange(0, EPOCH):\n    print \"epoch %d\" % epoch\n    sumloss = 0\n    num = len(train_string)\n    batch = []\n    start = time.time()\n    for idx, line in enumerate(train_string):\n        sstart = time.time()\n        gold = train_tree[idx].strip()\n        sent = line.split()\n        origText = list(sent)\n        n = len(sent)\n        d = pd.expr()\n        W = pW.expr()\n        b = pb.expr()\n        terminals = {}\n        embdding = {}\n        score = defaultdict(float)\n        score_pcfg = defaultdict(float)\n        backPointers = {}\n        LSTM = {}\n        node_rules = {}\n        for i in range(0, n):\n            begin = i\n            end = i + 1\n            node_rules[(begin, end)] = set()\n            word = sent[i]\n            for A in nonTerms:\n                if (A, word) in rules_set1:\n                    LSTM[(begin, end, A)] = builder.initial_state()\n                    LSTM[(begin, end, A)] = LSTM[(begin, end, A)].add_input(WORDS_LOOKUP[w2i[sent[i]]])\n                    embdding[(begin, end, A)] = LSTM[(begin, end, A)].output()\n                    score_pcfg[(begin, end, A)] = math_log(probs[(A, word)])\n                    score[(begin, end, A)] = score_calc(d, W, embdding[(begin, end, A)], b, lamda, probs[(A, word)])\n                    terminals[(begin, end, A)] = word\n                    node_rules[(begin, end)].add(A)\n        for span in range(2, n + 1):\n            for begin in range(0, n - span + 1):\n                end = begin + span\n                node_rules[(begin, end)] = set()\n                for split in range(begin + 1, end):\n                    for B in node_rules[(begin, split)]:\n                        for C in node_rules[(split, end)]:\n                            X = B+\" \"+C\n                            if X in node_pa:\n                                for A in node_pa[X]:\n                                    node_rules[(begin, end)].add(A)\n                                    TMP = LSTM[(split, end, C)].add_input(embdding[(begin, split, B)])\n                                    p = TMP.output()\n                                    s_pcfg = math_log(probs[(A, X)]) + score_pcfg[(begin, split, B)] + score_pcfg[(split, end, C)]\n                                    s = score_calc(d, W, p, b, lamda, s_pcfg)\n                                    # print (d * (W * p + b) * 100).value(), s_pcfg\n                                    if (begin, end, A) not in score or s.value() > score[(begin, end, A)].value():\n                                        LSTM[(begin, end, A)] = TMP\n                                        score[(begin, end, A)] = s\n                                        score_pcfg[(begin, end, A)] = s_pcfg\n                                        embdding[(begin, end, A)] = p\n                                        backPointers[(begin, end, A)] = (split, B, C)\n\n        t, s = backtrack(sent, backPointers, terminals, score)\n        result = None\n        if t != None:\n            result = t.dostr()\n        golds_e, golds, golds_pcfg, lstm, S = cal_gold(gold, d, W, b)\n        cnt = cal_loss(result, gold)\n        # loss = dy.abs(s - golds) + cnt * k\n        loss = dy.abs(s - golds) + cnt * k + 0.5 * (dy.l2_norm(W) + dy.l2_norm(b) + dy.l2_norm(d))\n        sumloss += loss.value()\n        batch.append(loss)\n        if len(batch) == 50:\n            loss = dy.esum(batch)\n            loss.backward()\n            trainer.update()\n            dy.renew_cg()\n            batch = []\n        eend = time.time()\n        # print \"time of sent \", idx, \": \", eend - sstart\n        if idx > 0 and idx % 500 == 0:\n            print \"time of 500 sent: \", (eend - start) / (idx / 500)\n            # print idx, \" -------------\"\n            # print \"result: \" + result\n            # print \"gold:   \" + gold\n            # print \"loss: \", loss.value()\n    end = time.time()\n    total_time += end - start\n    print \"epoch time: \", end - start\n    print \"epoch loss: \", sumloss / num\n    ff.write('%f\\n'%(sumloss / num))\n\nprint \"total time: \", total_time\n\nfh = open(dev_string_file, \"r\")\noutfile = open(dev_parse_file, \"w\")\nfor line in fh:\n    sent = line.split()\n    origText = list(sent)\n    for i, word in enumerate(sent):\n        if word not in lexicons:\n            sent[i] = '<unk>'\n    n = len(sent)\n    dy.renew_cg()\n    d = pd.expr()\n    W = pW.expr()\n    b = pb.expr()\n    terminals = {}\n    embdding = {}\n    score = defaultdict(float)\n    score_pcfg = defaultdict(float)\n    backPointers = {}\n    LSTM = {}\n    node_rules = {}\n    for i in range(0, n):\n        begin = i\n        end = i + 1\n        node_rules[(begin, end)] = set()\n        word = sent[i]\n        for A in nonTerms:\n            if (A, word) in rules_set1:\n                LSTM[(begin, end, A)] = builder.initial_state()\n                LSTM[(begin, end, A)] = LSTM[(begin, end, A)].add_input(WORDS_LOOKUP[w2i[sent[i]]])\n                embdding[(begin, end, A)] = LSTM[(begin, end, A)].output()\n                score_pcfg[(begin, end, A)] = math_log(probs[(A, word)])\n                score[(begin, end, A)] = score_calc(d, W, embdding[(begin, end, A)], b, lamda, probs[(A, word)])\n                terminals[(begin, end, A)] = word\n                node_rules[(begin, end)].add(A)\n    for span in range(2, n + 1):\n        for begin in range(0, n - span + 1):\n            end = begin + span\n            node_rules[(begin, end)] = set()\n            for split in range(begin + 1, end):\n                for B in node_rules[(begin, split)]:\n                    for C in node_rules[(split, end)]:\n                        X = B+\" \"+C\n                        if X in node_pa:\n                            for A in node_pa[X]:\n                                node_rules[(begin, end)].add(A)\n                                TMP = LSTM[(split, end, C)].add_input(embdding[(begin, split, B)])\n                                p = TMP.output()\n                                s_pcfg = math_log(probs[(A, X)]) + score_pcfg[(begin, split, B)] + score_pcfg[(split, end, C)]\n                                s = score_calc(d, W, p, b, lamda, s_pcfg)\n                                if (begin, end, A) not in score or s.value() > score[(begin, end, A)].value():\n                                    LSTM[(begin, end, A)] = TMP\n                                    score[(begin, end, A)] = s\n                                    score_pcfg[(begin, end, A)] = s_pcfg\n                                    embdding[(begin, end, A)] = p\n                                    backPointers[(begin, end, A)] = (split, B, C)\n                        \n    t, s = backtrack(sent, backPointers, terminals, score)\n    if t == None:\n        outfile.write(\"None\\n\")\n    else:\n        result = t.dostr()\n        outfile.write(result+\"\\n\")\n```","slug":"graduate-technique","published":1,"updated":"2019-07-20T04:31:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hh008w7swe0nqrv3bk","content":"<div align=\"middle\"><audio src=\"http://mp3.qqmusic.cc/yq/3583938.mp3\" controls autoplay>\nYour browser does not support the element.\n</audio></div>\n\n\n<h1 id=\"随机数种子\"><a href=\"#随机数种子\" class=\"headerlink\" title=\"随机数种子\"></a>随机数种子</h1><hr>\n<p>这是玄学，姑且就设为我的QQ号792321264，看起来效果不错。</p>\n<h1 id=\"神经网络维数\"><a href=\"#神经网络维数\" class=\"headerlink\" title=\"神经网络维数\"></a>神经网络维数</h1><hr>\n<p>不断测试发现，64维效果最好，但最后可能改成512维的。<br>而且64维的话CPU跑的比GPU还要快6倍，但是512维的话GPU就比CPU快6倍左右了。<br>所以维度低还是用CPU比较好。</p>\n<h1 id=\"结点分数\"><a href=\"#结点分数\" class=\"headerlink\" title=\"结点分数\"></a>结点分数</h1><hr>\n<p>\\[\\begin{array}{l}Score(A \\to BC) = \\lambda d \\cdot (W \\cdot e + b) + Spcfg(A)\\\\Spcfg(A) = \\log (Spcfg(B) \\cdot Spcfg(C) \\cdot p(A \\to BC))\\end{array}\\]<br>其中$d,W,b$是权值矩阵，$\\lambda$是超参数，测试发现设为100左右效果最好。</p>\n<h1 id=\"结点表示\"><a href=\"#结点表示\" class=\"headerlink\" title=\"结点表示\"></a>结点表示</h1><hr>\n<p>\\[e = LST{M^{left}}({e_{right}})\\]<br>至于用左儿子还是右儿子作为LSTM，还是加一层动态规划记录两者最优值，小数据上暂时没有太大差别。</p>\n<h1 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h1><hr>\n<p>\\[L(\\theta ) = Scor{e_{predict}}(ROOT) - Scor{e_{gold}}(ROOT) + k \\cdot \\Delta (predict,gold) + \\frac{1}{2}{\\left| \\theta  \\right|^2}\\]<br>其中正则项加了可以使loss下降更稳定，但是效果貌似不如不加，可能是因为数据集太小吧。<br>$k$一般取0.1。</p>\n<h1 id=\"batch\"><a href=\"#batch\" class=\"headerlink\" title=\"batch\"></a>batch</h1><hr>\n<p>batch取50左右效果最好，不过我用的是dynet自带的自动batch，手动batch还不是很会写，所以效率提升不是很大。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><hr>\n<p>原来是4层循环，用时特别久，改进了一下变成6层循环效率大大提高。<br>原算法：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">from</span> <span class=\"token number\">0</span> to n\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">from</span> <span class=\"token number\">0</span> to n\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">from</span> i to j\n            <span class=\"token keyword\">for</span> A<span class=\"token operator\">-</span><span class=\"token operator\">></span>BC <span class=\"token keyword\">in</span> grammar\n                balabala<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<p>改进算法：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">from</span> <span class=\"token number\">0</span> to n\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">from</span> <span class=\"token number\">0</span> to n\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">from</span> i to j\n            <span class=\"token keyword\">for</span> B <span class=\"token keyword\">in</span> nodetype<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> C <span class=\"token keyword\">in</span> nodetype<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">for</span> A <span class=\"token keyword\">in</span> panode<span class=\"token punctuation\">[</span>BC<span class=\"token punctuation\">]</span>\n                        balabala<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<h1 id=\"未来改进\"><a href=\"#未来改进\" class=\"headerlink\" title=\"未来改进\"></a>未来改进</h1><hr>\n<ul>\n<li>如果测试集中的句法规则在训练集中没有出现的话，会直接产生None的结果，是否可以考虑产生新的规则，这样就可以对所有句子进行句法分析了？</li>\n<li>效率虽然有了很大提升，但是大数据依然跑的很慢，可以考虑加上手动batch、减少规则数量、动态规划算法优化等等。</li>\n</ul>\n<p>最后附上我的主要代码（丑是丑了点，不喜勿喷，封装什么的以后再说）：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict <span class=\"token keyword\">as</span> dd<span class=\"token punctuation\">,</span> defaultdict\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> count\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> _dynet <span class=\"token keyword\">as</span> dy\n\ndyparams <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>DynetParams<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndyparams<span class=\"token punctuation\">.</span>from_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndyparams<span class=\"token punctuation\">.</span>set_requested_gpus<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndyparams<span class=\"token punctuation\">.</span>set_mem<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span>\ndyparams<span class=\"token punctuation\">.</span>set_random_seed<span class=\"token punctuation\">(</span><span class=\"token number\">792321264</span><span class=\"token punctuation\">)</span>\ndyparams<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># ==============================================================</span>\n<span class=\"token comment\" spellcheck=\"true\"># read train file</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\ntrain_string_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/train.strings\"</span>\ntrain_tree_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/train.trees.pre.unk\"</span>\ndev_string_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/dev.strings\"</span>\ndev_tree_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/dev.trees\"</span>\ndev_parse_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/dev.parses\"</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    train_string_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/train_small.strings\"</span>\n    train_tree_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/train_small.trees.pre.unk\"</span>\n    dev_string_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/dev_small.strings\"</span>\n    dev_tree_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/dev_small.trees\"</span>\n    dev_parse_file <span class=\"token operator\">=</span> <span class=\"token string\">\"data/dev_small.parses\"</span>\n\ntrain_string <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntrain_tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nwords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>train_string_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fh<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fh<span class=\"token punctuation\">:</span>\n        train_string<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\nwords<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;unk>\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>train_tree_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fh<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fh<span class=\"token punctuation\">:</span>\n        train_tree<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n\nw2i <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n    w2i<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span>\ni2w <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">:</span>w <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">,</span> i <span class=\"token keyword\">in</span> w2i<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\nnwords <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>w2i<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># ==============================================================</span>\n<span class=\"token comment\" spellcheck=\"true\"># read grammar file</span>\nnonTerms <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrules_set1 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrules_set2 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nlexicons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\norigText <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nprobs <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>float<span class=\"token punctuation\">)</span>\nnode_pa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_grammar</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    file <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> rule <span class=\"token keyword\">in</span> file<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># AAA -> # BBB @ prob</span>\n        tokens <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>r<span class=\"token string\">\"\\-\\>|\\@\"</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        lhs <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        rhs <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span>r<span class=\"token string\">'\\''</span><span class=\"token punctuation\">)</span>\n        rhs <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span>r<span class=\"token string\">'\\\"'</span><span class=\"token punctuation\">)</span>\n        prob <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> float<span class=\"token punctuation\">(</span>prob<span class=\"token punctuation\">)</span>\n        nonTerms<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            rules_set1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rules_set2<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">,</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> rhs <span class=\"token keyword\">in</span> node_pa<span class=\"token punctuation\">:</span>\n                node_pa<span class=\"token punctuation\">[</span>rhs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                node_pa<span class=\"token punctuation\">[</span>rhs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                node_pa<span class=\"token punctuation\">[</span>rhs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span>\n        rules<span class=\"token punctuation\">[</span>lhs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rhs\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> rhs <span class=\"token operator\">!=</span> <span class=\"token string\">'&lt;unk>'</span><span class=\"token punctuation\">:</span>\n            lexicons<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    grammar <span class=\"token operator\">=</span> read_grammar<span class=\"token punctuation\">(</span><span class=\"token string\">'data/pcfg_small'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    grammar <span class=\"token operator\">=</span> read_grammar<span class=\"token punctuation\">(</span><span class=\"token string\">'data/pcfg'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> rules_set1<span class=\"token punctuation\">.</span>__len__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rules_set2<span class=\"token punctuation\">.</span>__len__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># ==============================================================</span>\n<span class=\"token comment\" spellcheck=\"true\"># LSTM and parameters initialization</span>\nEPOCH <span class=\"token operator\">=</span> <span class=\"token number\">40</span>\nEMBDDING_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">512</span>\nlamda <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nk <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\nmodel <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>ParameterCollection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbuilder <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>FastLSTMBuilder<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> EMBDDING_SIZE<span class=\"token punctuation\">,</span> EMBDDING_SIZE<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\ntrainer <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>AdamTrainer<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\nWORDS_LOOKUP <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_lookup_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwords<span class=\"token punctuation\">,</span> EMBDDING_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npd <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> EMBDDING_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npW <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>EMBDDING_SIZE<span class=\"token punctuation\">,</span> EMBDDING_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npb <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>add_parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>EMBDDING_SIZE<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># ==============================================================</span>\n<span class=\"token comment\" spellcheck=\"true\"># construct trees</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MTree</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lhs<span class=\"token punctuation\">,</span> wrd<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> subs<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> lhs\n        self<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> wrd\n        self<span class=\"token punctuation\">.</span>subs <span class=\"token operator\">=</span> subs\n        self<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_lexicon</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>word <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dostr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"(%s %s)\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_lexicon<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \\\n                <span class=\"token keyword\">else</span> <span class=\"token string\">\"(%s %s)\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token boolean\">True</span> <span class=\"token operator\">or</span> self<span class=\"token punctuation\">.</span>str <span class=\"token keyword\">is</span> None<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dostr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>str\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    begin <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    end <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    A <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> next <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> backPointers<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> next <span class=\"token keyword\">in</span> terminals<span class=\"token punctuation\">:</span>   <span class=\"token comment\" spellcheck=\"true\">#base condition</span>\n            word <span class=\"token operator\">=</span> origText<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n            node <span class=\"token operator\">=</span> MTree<span class=\"token punctuation\">(</span>lhs<span class=\"token operator\">=</span>A<span class=\"token punctuation\">,</span> subs<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> wrd<span class=\"token operator\">=</span>word<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> backPointers<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span>\n    next1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span>\n    next2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span>\n    t1<span class=\"token punctuation\">,</span> s1 <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">(</span>next1<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    t2<span class=\"token punctuation\">,</span> s2 <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">(</span>next2<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>MTree<span class=\"token punctuation\">(</span>lhs<span class=\"token operator\">=</span>A<span class=\"token punctuation\">,</span> subs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>t1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> wrd<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> backPointers<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>None<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    t<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">math_log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">score_calc</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> s_pcfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> d <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>W <span class=\"token operator\">*</span> p <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> lamda <span class=\"token operator\">+</span> s_pcfg\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cal_loss</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> None<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> dy<span class=\"token punctuation\">.</span>inputTensor<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    gold <span class=\"token operator\">=</span> gold<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>inputTensor<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> gold<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> cnt\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cal_gold</span><span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    words <span class=\"token operator\">=</span> gold<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        A <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        word <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># print gold, word, w2i[word]</span>\n        LSTM <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        TMP <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>WORDS_LOOKUP<span class=\"token punctuation\">[</span>w2i<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        e <span class=\"token operator\">=</span> TMP<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        s_pcfg <span class=\"token operator\">=</span> math_log<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        s <span class=\"token operator\">=</span> score_calc<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s_pcfg<span class=\"token punctuation\">,</span> TMP<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        sz <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> xrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> gold<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">break</span>\n        m <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> xrange<span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> gold<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n                cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> gold<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">:</span>\n                cnt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                m <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">break</span>\n        x1<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s1_pcfg<span class=\"token punctuation\">,</span> LSTM1<span class=\"token punctuation\">,</span> B <span class=\"token operator\">=</span> cal_gold<span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">[</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n        x2<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> s2_pcfg<span class=\"token punctuation\">,</span> LSTM2<span class=\"token punctuation\">,</span> C <span class=\"token operator\">=</span> cal_gold<span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">[</span>m<span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> sz<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n        A <span class=\"token operator\">=</span> gold<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">]</span>\n        TMP <span class=\"token operator\">=</span> LSTM2<span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span>\n        e <span class=\"token operator\">=</span> TMP<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        s_pcfg <span class=\"token operator\">=</span> math_log<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s1_pcfg <span class=\"token operator\">+</span> s2_pcfg\n        ss1 <span class=\"token operator\">=</span> score_calc<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> s_pcfg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ss1<span class=\"token punctuation\">,</span> s_pcfg<span class=\"token punctuation\">,</span> TMP<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span>\n\ntotal_time <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n<span class=\"token comment\" spellcheck=\"true\"># print nonTerms.__len__()</span>\nff <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">\"loss.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> xrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> EPOCH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"epoch %d\"</span> <span class=\"token operator\">%</span> epoch\n    sumloss <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    num <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>train_string<span class=\"token punctuation\">)</span>\n    batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> line <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>train_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        gold <span class=\"token operator\">=</span> train_tree<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sent <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        origText <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span>\n        d <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        W <span class=\"token operator\">=</span> pW<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        b <span class=\"token operator\">=</span> pb<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        terminals <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        embdding <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        score <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>float<span class=\"token punctuation\">)</span>\n        score_pcfg <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>float<span class=\"token punctuation\">)</span>\n        backPointers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        LSTM <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        node_rules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            begin <span class=\"token operator\">=</span> i\n            end <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            word <span class=\"token operator\">=</span> sent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> A <span class=\"token keyword\">in</span> nonTerms<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules_set1<span class=\"token punctuation\">:</span>\n                    LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>WORDS_LOOKUP<span class=\"token punctuation\">[</span>w2i<span class=\"token punctuation\">[</span>sent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> math_log<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> score_calc<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    terminals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> word\n                    node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> span <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> begin <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> span <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                end <span class=\"token operator\">=</span> begin <span class=\"token operator\">+</span> span\n                node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> split <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">for</span> B <span class=\"token keyword\">in</span> node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">for</span> C <span class=\"token keyword\">in</span> node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            X <span class=\"token operator\">=</span> B<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>C\n                            <span class=\"token keyword\">if</span> X <span class=\"token keyword\">in</span> node_pa<span class=\"token punctuation\">:</span>\n                                <span class=\"token keyword\">for</span> A <span class=\"token keyword\">in</span> node_pa<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                                    node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n                                    TMP <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                                    p <span class=\"token operator\">=</span> TMP<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                    s_pcfg <span class=\"token operator\">=</span> math_log<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                                    s <span class=\"token operator\">=</span> score_calc<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> s_pcfg<span class=\"token punctuation\">)</span>\n                                    <span class=\"token comment\" spellcheck=\"true\"># print (d * (W * p + b) * 100).value(), s_pcfg</span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> score <span class=\"token operator\">or</span> s<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                                        LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TMP\n                                        score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s\n                                        score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s_pcfg\n                                        embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p\n                                        backPointers<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span>\n\n        t<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> backtrack<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> None\n        <span class=\"token keyword\">if</span> t <span class=\"token operator\">!=</span> None<span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>dostr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        golds_e<span class=\"token punctuation\">,</span> golds<span class=\"token punctuation\">,</span> golds_pcfg<span class=\"token punctuation\">,</span> lstm<span class=\"token punctuation\">,</span> S <span class=\"token operator\">=</span> cal_gold<span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n        cnt <span class=\"token operator\">=</span> cal_loss<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># loss = dy.abs(s - golds) + cnt * k</span>\n        loss <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span> golds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cnt <span class=\"token operator\">*</span> k <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">.</span>l2_norm<span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">.</span>l2_norm<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">.</span>l2_norm<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sumloss <span class=\"token operator\">+=</span> loss<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        batch<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">50</span><span class=\"token punctuation\">:</span>\n            loss <span class=\"token operator\">=</span> dy<span class=\"token punctuation\">.</span>esum<span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span>\n            loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            trainer<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            dy<span class=\"token punctuation\">.</span>renew_cg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        eend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># print \"time of sent \", idx, \": \", eend - sstart</span>\n        <span class=\"token keyword\">if</span> idx <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> idx <span class=\"token operator\">%</span> <span class=\"token number\">500</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span> <span class=\"token string\">\"time of 500 sent: \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>eend <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">/</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\"># print idx, \" -------------\"</span>\n            <span class=\"token comment\" spellcheck=\"true\"># print \"result: \" + result</span>\n            <span class=\"token comment\" spellcheck=\"true\"># print \"gold:   \" + gold</span>\n            <span class=\"token comment\" spellcheck=\"true\"># print \"loss: \", loss.value()</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    total_time <span class=\"token operator\">+=</span> end <span class=\"token operator\">-</span> start\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"epoch time: \"</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"epoch loss: \"</span><span class=\"token punctuation\">,</span> sumloss <span class=\"token operator\">/</span> num\n    ff<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'%f\\n'</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>sumloss <span class=\"token operator\">/</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"total time: \"</span><span class=\"token punctuation\">,</span> total_time\n\nfh <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>dev_string_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span>\noutfile <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>dev_parse_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fh<span class=\"token punctuation\">:</span>\n    sent <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    origText <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> word <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> word <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> lexicons<span class=\"token punctuation\">:</span>\n            sent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;unk>'</span>\n    n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span>\n    dy<span class=\"token punctuation\">.</span>renew_cg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    W <span class=\"token operator\">=</span> pW<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> pb<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    terminals <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    embdding <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    score <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>float<span class=\"token punctuation\">)</span>\n    score_pcfg <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span>float<span class=\"token punctuation\">)</span>\n    backPointers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    LSTM <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    node_rules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        begin <span class=\"token operator\">=</span> i\n        end <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        word <span class=\"token operator\">=</span> sent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> A <span class=\"token keyword\">in</span> nonTerms<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> rules_set1<span class=\"token punctuation\">:</span>\n                LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>initial_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>WORDS_LOOKUP<span class=\"token punctuation\">[</span>w2i<span class=\"token punctuation\">[</span>sent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> math_log<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> score_calc<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                terminals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> word\n                node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> span <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> begin <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> span <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            end <span class=\"token operator\">=</span> begin <span class=\"token operator\">+</span> span\n            node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> split <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> B <span class=\"token keyword\">in</span> node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">for</span> C <span class=\"token keyword\">in</span> node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        X <span class=\"token operator\">=</span> B<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>C\n                        <span class=\"token keyword\">if</span> X <span class=\"token keyword\">in</span> node_pa<span class=\"token punctuation\">:</span>\n                            <span class=\"token keyword\">for</span> A <span class=\"token keyword\">in</span> node_pa<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                                node_rules<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n                                TMP <span class=\"token operator\">=</span> LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add_input<span class=\"token punctuation\">(</span>embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                                p <span class=\"token operator\">=</span> TMP<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                s_pcfg <span class=\"token operator\">=</span> math_log<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                                s <span class=\"token operator\">=</span> score_calc<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> lamda<span class=\"token punctuation\">,</span> s_pcfg<span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> score <span class=\"token operator\">or</span> s<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                                    LSTM<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TMP\n                                    score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s\n                                    score_pcfg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s_pcfg\n                                    embdding<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p\n                                    backPointers<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span>\n\n    t<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> backtrack<span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">,</span> backPointers<span class=\"token punctuation\">,</span> terminals<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> None<span class=\"token punctuation\">:</span>\n        outfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"None\\n\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>dostr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        outfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>result<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><audio src=\"http://mp3.qqmusic.cc/yq/3583938.mp3\" controls autoplay>\nYour browser does not support the element.\n</audio></div>\n\n\n<h1 id=\"随机数种子\"><a href=\"#随机数种子\" class=\"headerlink\" title=\"随机数种子\"></a>随机数种子</h1><hr>\n<p>这是玄学，姑且就设为我的QQ号792321264，看起来效果不错。</p>\n<h1 id=\"神经网络维数\"><a href=\"#神经网络维数\" class=\"headerlink\" title=\"神经网络维数\"></a>神经网络维数</h1><hr>\n<p>不断测试发现，64维效果最好，但最后可能改成512维的。<br>而且64维的话CPU跑的比GPU还要快6倍，但是512维的话GPU就比CPU快6倍左右了。<br>所以维度低还是用CPU比较好。</p>\n<h1 id=\"结点分数\"><a href=\"#结点分数\" class=\"headerlink\" title=\"结点分数\"></a>结点分数</h1><hr>\n<p>\\[\\begin{array}{l}Score(A \\to BC) = \\lambda d \\cdot (W \\cdot e + b) + Spcfg(A)\\\\Spcfg(A) = \\log (Spcfg(B) \\cdot Spcfg(C) \\cdot p(A \\to BC))\\end{array}\\]<br>其中$d,W,b$是权值矩阵，$\\lambda$是超参数，测试发现设为100左右效果最好。</p>\n<h1 id=\"结点表示\"><a href=\"#结点表示\" class=\"headerlink\" title=\"结点表示\"></a>结点表示</h1><hr>\n<p>\\[e = LST{M^{left}}({e_{right}})\\]<br>至于用左儿子还是右儿子作为LSTM，还是加一层动态规划记录两者最优值，小数据上暂时没有太大差别。</p>\n<h1 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h1><hr>\n<p>\\[L(\\theta ) = Scor{e_{predict}}(ROOT) - Scor{e_{gold}}(ROOT) + k \\cdot \\Delta (predict,gold) + \\frac{1}{2}{\\left| \\theta  \\right|^2}\\]<br>其中正则项加了可以使loss下降更稳定，但是效果貌似不如不加，可能是因为数据集太小吧。<br>$k$一般取0.1。</p>\n<h1 id=\"batch\"><a href=\"#batch\" class=\"headerlink\" title=\"batch\"></a>batch</h1><hr>\n<p>batch取50左右效果最好，不过我用的是dynet自带的自动batch，手动batch还不是很会写，所以效率提升不是很大。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><hr>\n<p>原来是4层循环，用时特别久，改进了一下变成6层循环效率大大提高。<br>原算法：</p>\n<pre><code class=\"python\">for i from 0 to n\n    for j from 0 to n\n        for k from i to j\n            for A-&gt;BC in grammar\n                balabala...</code></pre>\n<p>改进算法：</p>\n<pre><code class=\"python\">for i from 0 to n\n    for j from 0 to n\n        for k from i to j\n            for B in nodetype[left]\n                for C in nodetype[right]\n                    for A in panode[BC]\n                        balabala...</code></pre>\n<h1 id=\"未来改进\"><a href=\"#未来改进\" class=\"headerlink\" title=\"未来改进\"></a>未来改进</h1><hr>\n<ul>\n<li>如果测试集中的句法规则在训练集中没有出现的话，会直接产生None的结果，是否可以考虑产生新的规则，这样就可以对所有句子进行句法分析了？</li>\n<li>效率虽然有了很大提升，但是大数据依然跑的很慢，可以考虑加上手动batch、减少规则数量、动态规划算法优化等等。</li>\n</ul>\n<p>最后附上我的主要代码（丑是丑了点，不喜勿喷，封装什么的以后再说）：</p>\n<pre><code class=\"python\">import random\nimport numpy as np\nfrom collections import defaultdict as dd, defaultdict\nfrom itertools import count\nimport re\nimport time\nimport math\nimport _dynet as dy\n\ndyparams = dy.DynetParams()\ndyparams.from_args()\ndyparams.set_requested_gpus(1)\ndyparams.set_mem(2048)\ndyparams.set_random_seed(792321264)\ndyparams.init()\n\n# ==============================================================\n# read train file\nDEBUG = True\n\ntrain_string_file = &quot;data/train.strings&quot;\ntrain_tree_file = &quot;data/train.trees.pre.unk&quot;\ndev_string_file = &quot;data/dev.strings&quot;\ndev_tree_file = &quot;data/dev.trees&quot;\ndev_parse_file = &quot;data/dev.parses&quot;\nif DEBUG:\n    train_string_file = &quot;data/train_small.strings&quot;\n    train_tree_file = &quot;data/train_small.trees.pre.unk&quot;\n    dev_string_file = &quot;data/dev_small.strings&quot;\n    dev_tree_file = &quot;data/dev_small.trees&quot;\n    dev_parse_file = &quot;data/dev_small.parses&quot;\n\ntrain_string = []\ntrain_tree = []\nwords = []\nwith open(train_string_file, &quot;r&quot;) as fh:\n    for line in fh:\n        train_string.append(line)\n        for word in line.split():\n            words.append(word)\nwords.append(&quot;&lt;unk&gt;&quot;)\n\nwith open(train_tree_file, &quot;r&quot;) as fh:\n    for line in fh:\n        train_tree.append(line)\n\nw2i = defaultdict(count(0).next)\nfor word in words:\n    w2i[word]\ni2w = {i:w for w, i in w2i.iteritems()}\nnwords = len(w2i)\n\n# ==============================================================\n# read grammar file\nnonTerms = set()\nrules_set1 = set()\nrules_set2 = set()\nrules = {}\nlexicons = []\norigText = list()\nprobs = defaultdict(float)\nnode_pa = {}\n\ndef read_grammar(f):\n    grammar = {}\n    file = open(f, &#39;r&#39;)\n    for rule in file:\n        # AAA -&gt; # BBB @ prob\n        tokens = re.split(r&quot;\\-\\&gt;|\\@&quot;, rule.strip())\n        lhs = tokens[0].strip()\n        rhs = tokens[1].strip().strip(r&#39;\\&#39;&#39;)\n        rhs = rhs.strip(r&#39;\\&quot;&#39;)\n        prob = tokens[2].strip()\n        probs[(lhs, rhs)] = float(prob)\n        nonTerms.add(lhs)\n        if len(rhs.split()) == 1:\n            rules_set1.add((lhs, rhs))\n        else:\n            rules_set2.add((lhs, rhs))\n            if rhs in node_pa:\n                node_pa[rhs].add(lhs)\n            else:\n                node_pa[rhs] = set()\n                node_pa[rhs].add(lhs)\n        rules[lhs] = rhs\n        if len(rhs.split()) == 1 and rhs != &#39;&lt;unk&gt;&#39;:\n            lexicons.append(rhs)\n\nif DEBUG:\n    grammar = read_grammar(&#39;data/pcfg_small&#39;)\nelse:\n    grammar = read_grammar(&#39;data/pcfg&#39;)\nprint rules_set1.__len__(), rules_set2.__len__()\n\n# ==============================================================\n# LSTM and parameters initialization\nEPOCH = 40\nEMBDDING_SIZE = 512\nlamda = 100\nk = 0.1\nmodel = dy.ParameterCollection()\nbuilder = dy.FastLSTMBuilder(2, EMBDDING_SIZE, EMBDDING_SIZE, model)\ntrainer = dy.AdamTrainer(model)\nWORDS_LOOKUP = model.add_lookup_parameters((nwords, EMBDDING_SIZE))\npd = model.add_parameters((1, EMBDDING_SIZE))\npW = model.add_parameters((EMBDDING_SIZE, EMBDDING_SIZE))\npb = model.add_parameters((EMBDDING_SIZE,))\n\n# ==============================================================\n# construct trees\nclass MTree(object):\n    def __init__(self, lhs, wrd=None, subs=None):\n        self.label = lhs\n        self.word = wrd\n        self.subs = subs\n        self.str = None\n\n    def is_lexicon(self):\n        return self.word is not None\n\n    def dostr(self):\n        return &quot;(%s %s)&quot; % (self.label, self.word) if self.is_lexicon() \\\n                else &quot;(%s %s)&quot; % (self.label, &quot; &quot;.join(map(str, self.subs)))\n\n    def __str__(self):\n        if True or self.str is None:\n            self.str = self.dostr()\n        return self.str\n\ndef helper(next, text, backPointers, terminals, score):\n    begin = next[0]\n    end = next[1]\n    A = next[2]\n    if next not in backPointers:\n        if next in terminals:   #base condition\n            word = origText[next[0]]\n            node = MTree(lhs=A, subs=None, wrd=word)\n        return (node, score[(begin, end, A)])\n    (split, B, C) = backPointers[next]\n    next1 = (begin, split, B)\n    next2 = (split, end, C)\n    t1, s1 = helper(next1, text, backPointers, terminals, score)\n    t2, s2 = helper(next2, text, backPointers, terminals, score)\n    return (MTree(lhs=A, subs=[t1, t2], wrd=None), score[(begin, end, A)])\n\ndef backtrack(text, backPointers, terminals, score):\n    n = len(text)\n    if (0, n, &#39;S&#39;) not in backPointers:\n        return (None, 0)\n    t, s = helper((0, n, &#39;S&#39;), text, backPointers, terminals, score)\n    return (t, s)\n\ndef math_log(x):\n    if x &lt;= 0:\n        return -100\n    else:\n        return math.log(x)\n\ndef score_calc(d, W, p, b, lamda, s_pcfg):\n    return d * (W * p + b) * lamda + s_pcfg\n\ndef cal_loss(result, gold):\n    if result == None:\n        return dy.inputTensor(list([len(gold)]))\n    result = result.split()\n    gold = gold.split()\n    cnt = dy.inputTensor(list([0]))\n    for i in range(0, len(result)):\n        if result[i] != gold[i]:\n            cnt += 1\n    return cnt\n\ndef cal_gold(gold, d, W, b):\n    words = gold.split()\n    n = len(words)\n    if n == 2:\n        A = words[0][1:]\n        word = words[1][:-1]\n        # print gold, word, w2i[word]\n        LSTM = builder.initial_state()\n        TMP = LSTM.add_input(WORDS_LOOKUP[w2i[word]])\n        e = TMP.output()\n        s_pcfg = math_log(probs[(A, word)])\n        s = score_calc(d, W, e, b, lamda, probs[(A, word)])\n        return (e, s, s_pcfg, TMP, A)\n    else:\n        sz = len(gold)\n        p = 0\n        for i in xrange(0, sz):\n            if gold[i] == &#39; &#39;:\n                p = i\n                break\n        m = 0\n        cnt = 0\n        for i in xrange(p+1, sz):\n            if gold[i] == &#39;(&#39;:\n                cnt += 1\n            elif gold[i] == &#39;)&#39;:\n                cnt -= 1\n            if cnt == 0:\n                m = i\n                break\n        x1, s1, s1_pcfg, LSTM1, B = cal_gold(gold[p+1 : m+1], d, W, b)\n        x2, s2, s2_pcfg, LSTM2, C = cal_gold(gold[m+2 : sz-1], d, W, b)\n        A = gold[1:p]\n        TMP = LSTM2.add_input(x1)\n        e = TMP.output()\n        s_pcfg = math_log(probs[(A, B+&quot; &quot;+C)]) + s1_pcfg + s2_pcfg\n        ss1 = score_calc(d, W, e, b, lamda, s_pcfg)\n        return (e, ss1, s_pcfg, TMP, A)\n\ntotal_time = 0.0\n# print nonTerms.__len__()\nff = open(&quot;loss.txt&quot;, &quot;w&quot;)\nfor epoch in xrange(0, EPOCH):\n    print &quot;epoch %d&quot; % epoch\n    sumloss = 0\n    num = len(train_string)\n    batch = []\n    start = time.time()\n    for idx, line in enumerate(train_string):\n        sstart = time.time()\n        gold = train_tree[idx].strip()\n        sent = line.split()\n        origText = list(sent)\n        n = len(sent)\n        d = pd.expr()\n        W = pW.expr()\n        b = pb.expr()\n        terminals = {}\n        embdding = {}\n        score = defaultdict(float)\n        score_pcfg = defaultdict(float)\n        backPointers = {}\n        LSTM = {}\n        node_rules = {}\n        for i in range(0, n):\n            begin = i\n            end = i + 1\n            node_rules[(begin, end)] = set()\n            word = sent[i]\n            for A in nonTerms:\n                if (A, word) in rules_set1:\n                    LSTM[(begin, end, A)] = builder.initial_state()\n                    LSTM[(begin, end, A)] = LSTM[(begin, end, A)].add_input(WORDS_LOOKUP[w2i[sent[i]]])\n                    embdding[(begin, end, A)] = LSTM[(begin, end, A)].output()\n                    score_pcfg[(begin, end, A)] = math_log(probs[(A, word)])\n                    score[(begin, end, A)] = score_calc(d, W, embdding[(begin, end, A)], b, lamda, probs[(A, word)])\n                    terminals[(begin, end, A)] = word\n                    node_rules[(begin, end)].add(A)\n        for span in range(2, n + 1):\n            for begin in range(0, n - span + 1):\n                end = begin + span\n                node_rules[(begin, end)] = set()\n                for split in range(begin + 1, end):\n                    for B in node_rules[(begin, split)]:\n                        for C in node_rules[(split, end)]:\n                            X = B+&quot; &quot;+C\n                            if X in node_pa:\n                                for A in node_pa[X]:\n                                    node_rules[(begin, end)].add(A)\n                                    TMP = LSTM[(split, end, C)].add_input(embdding[(begin, split, B)])\n                                    p = TMP.output()\n                                    s_pcfg = math_log(probs[(A, X)]) + score_pcfg[(begin, split, B)] + score_pcfg[(split, end, C)]\n                                    s = score_calc(d, W, p, b, lamda, s_pcfg)\n                                    # print (d * (W * p + b) * 100).value(), s_pcfg\n                                    if (begin, end, A) not in score or s.value() &gt; score[(begin, end, A)].value():\n                                        LSTM[(begin, end, A)] = TMP\n                                        score[(begin, end, A)] = s\n                                        score_pcfg[(begin, end, A)] = s_pcfg\n                                        embdding[(begin, end, A)] = p\n                                        backPointers[(begin, end, A)] = (split, B, C)\n\n        t, s = backtrack(sent, backPointers, terminals, score)\n        result = None\n        if t != None:\n            result = t.dostr()\n        golds_e, golds, golds_pcfg, lstm, S = cal_gold(gold, d, W, b)\n        cnt = cal_loss(result, gold)\n        # loss = dy.abs(s - golds) + cnt * k\n        loss = dy.abs(s - golds) + cnt * k + 0.5 * (dy.l2_norm(W) + dy.l2_norm(b) + dy.l2_norm(d))\n        sumloss += loss.value()\n        batch.append(loss)\n        if len(batch) == 50:\n            loss = dy.esum(batch)\n            loss.backward()\n            trainer.update()\n            dy.renew_cg()\n            batch = []\n        eend = time.time()\n        # print &quot;time of sent &quot;, idx, &quot;: &quot;, eend - sstart\n        if idx &gt; 0 and idx % 500 == 0:\n            print &quot;time of 500 sent: &quot;, (eend - start) / (idx / 500)\n            # print idx, &quot; -------------&quot;\n            # print &quot;result: &quot; + result\n            # print &quot;gold:   &quot; + gold\n            # print &quot;loss: &quot;, loss.value()\n    end = time.time()\n    total_time += end - start\n    print &quot;epoch time: &quot;, end - start\n    print &quot;epoch loss: &quot;, sumloss / num\n    ff.write(&#39;%f\\n&#39;%(sumloss / num))\n\nprint &quot;total time: &quot;, total_time\n\nfh = open(dev_string_file, &quot;r&quot;)\noutfile = open(dev_parse_file, &quot;w&quot;)\nfor line in fh:\n    sent = line.split()\n    origText = list(sent)\n    for i, word in enumerate(sent):\n        if word not in lexicons:\n            sent[i] = &#39;&lt;unk&gt;&#39;\n    n = len(sent)\n    dy.renew_cg()\n    d = pd.expr()\n    W = pW.expr()\n    b = pb.expr()\n    terminals = {}\n    embdding = {}\n    score = defaultdict(float)\n    score_pcfg = defaultdict(float)\n    backPointers = {}\n    LSTM = {}\n    node_rules = {}\n    for i in range(0, n):\n        begin = i\n        end = i + 1\n        node_rules[(begin, end)] = set()\n        word = sent[i]\n        for A in nonTerms:\n            if (A, word) in rules_set1:\n                LSTM[(begin, end, A)] = builder.initial_state()\n                LSTM[(begin, end, A)] = LSTM[(begin, end, A)].add_input(WORDS_LOOKUP[w2i[sent[i]]])\n                embdding[(begin, end, A)] = LSTM[(begin, end, A)].output()\n                score_pcfg[(begin, end, A)] = math_log(probs[(A, word)])\n                score[(begin, end, A)] = score_calc(d, W, embdding[(begin, end, A)], b, lamda, probs[(A, word)])\n                terminals[(begin, end, A)] = word\n                node_rules[(begin, end)].add(A)\n    for span in range(2, n + 1):\n        for begin in range(0, n - span + 1):\n            end = begin + span\n            node_rules[(begin, end)] = set()\n            for split in range(begin + 1, end):\n                for B in node_rules[(begin, split)]:\n                    for C in node_rules[(split, end)]:\n                        X = B+&quot; &quot;+C\n                        if X in node_pa:\n                            for A in node_pa[X]:\n                                node_rules[(begin, end)].add(A)\n                                TMP = LSTM[(split, end, C)].add_input(embdding[(begin, split, B)])\n                                p = TMP.output()\n                                s_pcfg = math_log(probs[(A, X)]) + score_pcfg[(begin, split, B)] + score_pcfg[(split, end, C)]\n                                s = score_calc(d, W, p, b, lamda, s_pcfg)\n                                if (begin, end, A) not in score or s.value() &gt; score[(begin, end, A)].value():\n                                    LSTM[(begin, end, A)] = TMP\n                                    score[(begin, end, A)] = s\n                                    score_pcfg[(begin, end, A)] = s_pcfg\n                                    embdding[(begin, end, A)] = p\n                                    backPointers[(begin, end, A)] = (split, B, C)\n\n    t, s = backtrack(sent, backPointers, terminals, score)\n    if t == None:\n        outfile.write(&quot;None\\n&quot;)\n    else:\n        result = t.dostr()\n        outfile.write(result+&quot;\\n&quot;)</code></pre>\n"},{"title":"超详细Hexo+Github博客搭建小白教程","date":"2018-04-12T16:20:08.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n> 特别鸣谢[番茄瓜皮](https://blog.fun4go.top)小学弟做出的改进和优化。\n\n# 更新（2019.07.20）\n---\n这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：\n![](21.jpg)\n\n但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。\n\n首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。\n\n## 新建文章\n首先为了新建文章方便，建议将`/scaffolds/post.md`修改为如下代码：\n```json\n---\ntitle: {{ title }}\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories:\n---\n```\n这样新建文章后不用你自己补充了，修改信息就行。\n\n## 添加404页面\n原来的主题没有404页面，加一个也不是什么难事。首先在`/source/`目录下新建一个`404.md`，内容如下：\n```json\n---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n```\n然后在`/themes/matery/layout/`目录下新建一个`404.ejs`文件，内容如下：\n```html\n<style type=\"text/css\">\n    /* don't remove. */\n    .about-cover {\n        height: 75vh;\n    }\n</style>\n\n<div class=\"bg-cover pd-header about-cover\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col s10 offset-s1 m8 offset-m2 l8 offset-l2\">\n                <div class=\"brand\">\n                    <div class=\"title center-align\">\n                        404\n                    </div>\n                    <div class=\"description center-align\">\n                        <%= page.description %>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    // 每天切换 banner 图.  Switch banner image every day.\n    $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n</script>\n```\n## “关于”页面增加简历（可选）\n修改`/themes/matery/layout/about.ejs`，找到`<div class=\"card\">`标签，然后找到它对应的`</div>`标签，接在后面新增一个card，语句如下：\n```html\n<div class=\"card\">\n    <div class=\"card-content\">\n        <div class=\"card-content article-card-content\">\n                <div class=\"title center-align\" data-aos=\"zoom-in-up\">\n                    <i class=\"fa fa-address-book\"></i>&nbsp;&nbsp;<%- __('myCV') %>\n                </div>\n                <div id=\"articleContent\" data-aos=\"fade-up\">\n                    <%- page.content %>\n                </div>\n        </div>\n    </div>\n</div>\n```\n这样就会多出一张card，然后可以在`/source/about/index.md`下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。\n\n## 解决mathjax与代码高亮的冲突\n如果你按照教程安装了代码高亮插件`hexo-prism-plugin`，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装`kramed`插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用`kramed`插件了，还用原来自带的`marked`插件，直接改它的正则表达式就行了，改法还和网上一样。\n\n## 增加建站时间\n修改`/themes/matery/layout/_partial/footer.ejs`文件，在最后加上\n```js\n<script language=javascript>\n    function siteTime() {\n        window.setTimeout(\"siteTime()\", 1000);\n        var seconds = 1000;\n        var minutes = seconds * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        var years = days * 365;\n        var today = new Date();\n        var todayYear = today.getFullYear();\n        var todayMonth = today.getMonth() + 1;\n        var todayDate = today.getDate();\n        var todayHour = today.getHours();\n        var todayMinute = today.getMinutes();\n        var todaySecond = today.getSeconds();\n        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */\n        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00\n        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);\n        var diff = t2 - t1;\n        var diffYears = Math.floor(diff / years);\n        var diffDays = Math.floor((diff / days) - diffYears * 365);\n        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);\n        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);\n        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);\n        document.getElementById(\"sitetime\").innerHTML = \"本站已运行 \" +diffYears+\" 年 \"+diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分钟 \" + diffSeconds + \" 秒\";\n    }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/\n    siteTime();\n</script>\n```\n然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：\n```html\n<span id=\"sitetime\"></span>\n```\n\n## 修改不蒜子初始化计数\n因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在`/themes/matery/layout/_partial/footer.ejs`文件最后加上：\n```js\n<script>\n    $(document).ready(function () {\n\n        var int = setInterval(fixCount, 50);  // 50ms周期检测函数\n        var pvcountOffset = 80000;  // 初始化首次数据\n        var uvcountOffset = 20000;\n\n        function fixCount() {\n            if (document.getElementById(\"busuanzi_container_site_pv\").style.display != \"none\") {\n                $(\"#busuanzi_value_site_pv\").html(parseInt($(\"#busuanzi_value_site_pv\").html()) + pvcountOffset);\n                clearInterval(int);\n            }\n            if ($(\"#busuanzi_container_site_pv\").css(\"display\") != \"none\") {\n                $(\"#busuanzi_value_site_uv\").html(parseInt($(\"#busuanzi_value_site_uv\").html()) + uvcountOffset); // 加上初始数据 \n                clearInterval(int); // 停止检测\n            }\n        }\n    });\n</script>\n```\n\n然后把上面几行有段代码：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\">\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\">\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n修改为：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\" style='display:none'>\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\" style='display:none'>\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n其实就是增加了两个`style='display:none'`而已。\n\n## 添加动漫人物\n其实三步就行了，不用像网上有些教程那么复杂。\n\n**第一步：**\n```\nnpm install --save hexo-helper-live2d\n```\n\n**第二步：**\n```\nnpm install live2d-widget-model-shizuku\n```\n\n**第三步：**\n在根目录配置文件中添加如下代码：\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7\n```\n\n然后`hexo g`再`hexo s`就能预览出效果了，但是有个注意的地方，我发现**这个动漫人物最好不要和不蒜子同时使用**，不然不蒜子会显示不出来。\n\n# 前言\n---\n去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。\n\n具体效果可以参观我的博客：[godweiyang.com](http://godweiyang.com)，欢迎大家支持。\n\n我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。\n\n首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。\n\n# 安装Node.js\n---\n首先下载稳定版[Node.js](https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi)，我这里给的是64位的。\n\n安装选项全部默认，一路点击`Next`。\n\n最后安装好之后，按`Win+R`打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n# 安装Git\n---\n为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[[下载地址]](https://git-scm.com/download/win)。\n\n安装选项还是全部默认，只不过最后一步添加路径时选择`Use Git from the Windows Command Prompt`，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入`git --version`验证是否安装成功。\n\n# 注册Github账号\n---\n接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n\n打开[https://github.com/](https://github.com/)，新建一个项目，如下所示：\n![](1.jpg)\n然后如下图所示，输入自己的项目名字，后面一定要加`.github.io`后缀，README初始化也要勾上。\n![](2.jpg)\n然后项目就建成了，点击`Settings`，向下拉到最后有个`GitHub Pages`，点击`Choose a theme`选择一个主题。然后等一会儿，再回到`GitHub Pages`，会变成下面这样：\n![](3.jpg)\n点击那个链接，就会出现自己的网页啦，效果如下：\n![](4.jpg)\n\n# 安装Hexo\n---\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:\\study\\program\\blog`目录下。\n\n在该目录下右键点击`Git Bash Here`，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。\n\n定位到该目录下，输入`npm i hexo-cli -g`安装Hexo。会有几个报错，无视它就行。\n\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n然后就要初始化我们的网站，输入`hexo init`初始化文件夹，接着输入`npm install`安装必备的组件。\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开[http://localhost:4000/](http://localhost:4000/)，就可以看到我们的博客啦，效果如下：\n![](5.jpg)\n\n按`ctrl+c`关闭本地服务器。\n\n# 连接Github与本地\n---\n首先右键打开git bash，然后输入下面命令：\n```\ngit config --global user.name \"godweiyang\"\ngit config --global user.email \"792321264@qq.com\"\n```\n用户名和邮箱根据你注册github的信息自行修改。\n\n然后生成密钥SSH key：\n```\nssh-keygen -t rsa -C \"792321264@qq.com\"\n```\n\n打开[github](http://github.com)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash中输入\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，如果如下图所示，出现你的用户名，那就成功了。\n![](6.jpg)\n\n打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n\n修改最后一行的配置：\n```\ndeploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master\n```\nrepository修改为你自己的github项目地址。**不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！**\n\n# 写文章、发布文章\n---\n首先在博客根目录下右键打开git bash，安装一个扩展`npm i hexo-deployer-git`。\n\n然后输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`D:\\study\\program\\blog\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n# 绑定域名\n---\n现在默认的域名还是`xxx.github.io`，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。\n\n以我的百度云为例，如下图所示，添加两条解析记录：\n![](7.jpg)\n\n然后打开你的github博客项目，点击`settings`，拉到下面`Custom domain`处，填上你自己的域名，保存：\n![](8.jpg)\n\n这时候你的项目根目录应该会出现一个名为`CNAME`的文件了。如果没有的话，打开你本地博客`/source`目录，我的是`D:\\study\\program\\blog\\source`，新建`CNAME`文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行`hexo g`、`hexo d`上传到github。\n\n# 更换主题\n---\n网上大多数主题都是github排名第一的`Next`主题，但是我个人不是很喜欢，我更喜欢`beantech`主题，地址在[传送门](https://github.com/YenYuHsuan/hexo-theme-beantech)。\n\n首先要注意的是，**这个github项目不仅包含了主题文件，还包含了hexo的各种文件**。\n\n所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：\n![](9.jpg)\n\n当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到`theme`下就行了。\n\n然后运行`hexo clean`清空所有生成的网页缓存，`hexo g`、`hexo d`。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：\n![](10.jpg)\n\n# 博客目录构成介绍\n---\n从上图可以看出，博客的目录结构如下：\n```\n- node_modules\n- public\n- scaffolds\n- source\n\t- _posts\n\t- about\n\t- archive\n\t- img\n\t- tags\n- themes\n```\n`node_modules`是node.js各种库的目录，`public`是生成的网页文件目录，`scaffolds`里面就三个文件，存储着新文章和新页面的初始设置，`source`是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，`themes`存放着主题文件，一般也用不到。\n\n我们平时写文章只需要关注`source/_posts`这个文件夹就行了。\n\n# 个性化设置及bug处理\n---\n**首先打开`_config.yml`，根据自己需求配置，具体不说了，有注释。**\n\n## 修复文档分类bug\n这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。\n\n打开`D:\\study\\program\\blog\\scaffolds\\post.md`，单词`catagories`改为`categories`。\n\n## 添加畅言评论插件\n主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。\n\n首先你得注册一个畅言账号，[地址](http://changyan.kuaizhan.com/)。\n然后打开如下页面，复制该段代码：\n![](11.jpg)\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，将代码粘贴到如下位置：\n![](12.jpg)\n然后重新生成一下网页，可以看到效果图如下：\n![](13.jpg)\n更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。\n\n## 添加图片放大功能\n首先下载`zooming.js`文件[地址](https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js)，保存在`D:\\study\\program\\blog\\themes\\beantech\\source\\js`目录下。\n\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"/js/zooming.js\"></script>\n```\n然后文章里的图片就可以单击全屏啦。\n\n## 添加数学公式显示\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n```\n由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。\n\n打开`D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js`\n`escape: `处替换成：\n```\nescape: /^$[`*\\[\\]()#$+\\-.!_>])/\n```\n`em: `处替换成：\n```\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/\n```\n\n这时在文章里写数学公式基本没有问题了，但是要注意：\n**数学公式中如果出现了连续两个{，中间一定要加空格！**\n\n举个例子:\n行内公式：$y = f(x)$\n代码：\n```\n$y = f(x)$\n```\n行间公式：\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n代码：\n```\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n```\n**注意上面花括号之间有空格！**\n\n## 添加留言板\n在`D:\\study\\program\\blog\\themes\\beantech\\layout`中新建`bbs.ejs`，文件内容如下：\n```\n---\nlayout: page\n---\n<style type=\"text/css\">\n    header.intro-header{\n        background-position: right; \n    }\n</style>\n<!-- Chinese Version -->\n<div class=\"zh post-container\">\n    <%- page.content %>\n</div>\n```\n然后在`D:\\study\\program\\blog\\source`中新建`\\bbs`文件夹，里面在新建`index.md`文件，内容如下：\n```\n---\nlayout: \"bbs\"\ntitle: \"BBS\"\ndate: 2017-09-19 12:48:33\ndescription: \"欢迎交换友链，一起交流学习！\"\nheader-img: \"img/header_img/home-bg-2-dark.png\"\ncomments: true\n---\n此处替换为你的畅言评论代码~~~\n```\n\n## 添加置顶功能\n运行如下两条命令安装置顶插件：\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs`，在如下位置添加代码：\n![](14.jpg)\n```\n<% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=7D26CD>置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%>\n```\n然后在你想置顶的文章md文件里，添加如下配置选项：\n```\ntop: true\n```\n## 添加网易云音乐BGM\n写文章的时候，想插入一段BGM怎么办？\n\n首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：\n![](15.jpg)\n复制如下代码：\n![](16.jpg)\n\n粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：\n```\n<div align=\"middle\">这里粘贴刚刚复制的代码</div>\n```\n\n## 添加访客人数统计和字数统计\n我们使用一个国外的流量统计网站：[gostats.com](gostats.com)，首先注册一下。\n\n然后自己添加网站地址，过程就不详细说了，然后点击`Get counter code`，选择一个自己喜欢的风格。\n如下图所示，选择一个样式，选择`HTML`，生成代码：\n![](17.jpg)\n\n复制这段代码到`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，具体位置如下：\n![](18.jpg)\n默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。\n\n字数统计首先安装插件\n```\nnpm i --save hexo-wordcount\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，添加如下代码：\n```\n<span class=\"post-count\"><%= totalcount(site) %> words altogether</span>\n```\n具体位置见上图。\n# 一些注意事项\n---\n首先解释一下文章开头的配置，如下图所示：\n![](19.jpg)\n```\ntitle: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类\n```\n\n网站图片都保存在`D:\\study\\program\\blog\\source\\img`目录下，可以修改成自己的图片。\n\n如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。\n\n\n**其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。**","source":"_posts/hexo-blog.md","raw":"---\ntitle: 超详细Hexo+Github博客搭建小白教程\ndate: 2018-04-13 00:20:08\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- Hexo\n- Github\n- 博客\ncategories:\n- 软件安装与配置\n---\n\n> 特别鸣谢[番茄瓜皮](https://blog.fun4go.top)小学弟做出的改进和优化。\n\n# 更新（2019.07.20）\n---\n这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：\n![](21.jpg)\n\n但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。\n\n首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。\n\n## 新建文章\n首先为了新建文章方便，建议将`/scaffolds/post.md`修改为如下代码：\n```json\n---\ntitle: {{ title }}\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories:\n---\n```\n这样新建文章后不用你自己补充了，修改信息就行。\n\n## 添加404页面\n原来的主题没有404页面，加一个也不是什么难事。首先在`/source/`目录下新建一个`404.md`，内容如下：\n```json\n---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n```\n然后在`/themes/matery/layout/`目录下新建一个`404.ejs`文件，内容如下：\n```html\n<style type=\"text/css\">\n    /* don't remove. */\n    .about-cover {\n        height: 75vh;\n    }\n</style>\n\n<div class=\"bg-cover pd-header about-cover\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col s10 offset-s1 m8 offset-m2 l8 offset-l2\">\n                <div class=\"brand\">\n                    <div class=\"title center-align\">\n                        404\n                    </div>\n                    <div class=\"description center-align\">\n                        <%= page.description %>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    // 每天切换 banner 图.  Switch banner image every day.\n    $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n</script>\n```\n## “关于”页面增加简历（可选）\n修改`/themes/matery/layout/about.ejs`，找到`<div class=\"card\">`标签，然后找到它对应的`</div>`标签，接在后面新增一个card，语句如下：\n```html\n<div class=\"card\">\n    <div class=\"card-content\">\n        <div class=\"card-content article-card-content\">\n                <div class=\"title center-align\" data-aos=\"zoom-in-up\">\n                    <i class=\"fa fa-address-book\"></i>&nbsp;&nbsp;<%- __('myCV') %>\n                </div>\n                <div id=\"articleContent\" data-aos=\"fade-up\">\n                    <%- page.content %>\n                </div>\n        </div>\n    </div>\n</div>\n```\n这样就会多出一张card，然后可以在`/source/about/index.md`下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。\n\n## 解决mathjax与代码高亮的冲突\n如果你按照教程安装了代码高亮插件`hexo-prism-plugin`，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装`kramed`插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用`kramed`插件了，还用原来自带的`marked`插件，直接改它的正则表达式就行了，改法还和网上一样。\n\n## 增加建站时间\n修改`/themes/matery/layout/_partial/footer.ejs`文件，在最后加上\n```js\n<script language=javascript>\n    function siteTime() {\n        window.setTimeout(\"siteTime()\", 1000);\n        var seconds = 1000;\n        var minutes = seconds * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        var years = days * 365;\n        var today = new Date();\n        var todayYear = today.getFullYear();\n        var todayMonth = today.getMonth() + 1;\n        var todayDate = today.getDate();\n        var todayHour = today.getHours();\n        var todayMinute = today.getMinutes();\n        var todaySecond = today.getSeconds();\n        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */\n        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00\n        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);\n        var diff = t2 - t1;\n        var diffYears = Math.floor(diff / years);\n        var diffDays = Math.floor((diff / days) - diffYears * 365);\n        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);\n        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);\n        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);\n        document.getElementById(\"sitetime\").innerHTML = \"本站已运行 \" +diffYears+\" 年 \"+diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分钟 \" + diffSeconds + \" 秒\";\n    }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/\n    siteTime();\n</script>\n```\n然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：\n```html\n<span id=\"sitetime\"></span>\n```\n\n## 修改不蒜子初始化计数\n因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在`/themes/matery/layout/_partial/footer.ejs`文件最后加上：\n```js\n<script>\n    $(document).ready(function () {\n\n        var int = setInterval(fixCount, 50);  // 50ms周期检测函数\n        var pvcountOffset = 80000;  // 初始化首次数据\n        var uvcountOffset = 20000;\n\n        function fixCount() {\n            if (document.getElementById(\"busuanzi_container_site_pv\").style.display != \"none\") {\n                $(\"#busuanzi_value_site_pv\").html(parseInt($(\"#busuanzi_value_site_pv\").html()) + pvcountOffset);\n                clearInterval(int);\n            }\n            if ($(\"#busuanzi_container_site_pv\").css(\"display\") != \"none\") {\n                $(\"#busuanzi_value_site_uv\").html(parseInt($(\"#busuanzi_value_site_uv\").html()) + uvcountOffset); // 加上初始数据 \n                clearInterval(int); // 停止检测\n            }\n        }\n    });\n</script>\n```\n\n然后把上面几行有段代码：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\">\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\">\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n修改为：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\" style='display:none'>\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\" style='display:none'>\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n其实就是增加了两个`style='display:none'`而已。\n\n## 添加动漫人物\n其实三步就行了，不用像网上有些教程那么复杂。\n\n**第一步：**\n```\nnpm install --save hexo-helper-live2d\n```\n\n**第二步：**\n```\nnpm install live2d-widget-model-shizuku\n```\n\n**第三步：**\n在根目录配置文件中添加如下代码：\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7\n```\n\n然后`hexo g`再`hexo s`就能预览出效果了，但是有个注意的地方，我发现**这个动漫人物最好不要和不蒜子同时使用**，不然不蒜子会显示不出来。\n\n# 前言\n---\n去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。\n\n具体效果可以参观我的博客：[godweiyang.com](http://godweiyang.com)，欢迎大家支持。\n\n我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。\n\n首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。\n\n# 安装Node.js\n---\n首先下载稳定版[Node.js](https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi)，我这里给的是64位的。\n\n安装选项全部默认，一路点击`Next`。\n\n最后安装好之后，按`Win+R`打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n# 安装Git\n---\n为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[[下载地址]](https://git-scm.com/download/win)。\n\n安装选项还是全部默认，只不过最后一步添加路径时选择`Use Git from the Windows Command Prompt`，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入`git --version`验证是否安装成功。\n\n# 注册Github账号\n---\n接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n\n打开[https://github.com/](https://github.com/)，新建一个项目，如下所示：\n![](1.jpg)\n然后如下图所示，输入自己的项目名字，后面一定要加`.github.io`后缀，README初始化也要勾上。\n![](2.jpg)\n然后项目就建成了，点击`Settings`，向下拉到最后有个`GitHub Pages`，点击`Choose a theme`选择一个主题。然后等一会儿，再回到`GitHub Pages`，会变成下面这样：\n![](3.jpg)\n点击那个链接，就会出现自己的网页啦，效果如下：\n![](4.jpg)\n\n# 安装Hexo\n---\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:\\study\\program\\blog`目录下。\n\n在该目录下右键点击`Git Bash Here`，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。\n\n定位到该目录下，输入`npm i hexo-cli -g`安装Hexo。会有几个报错，无视它就行。\n\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n然后就要初始化我们的网站，输入`hexo init`初始化文件夹，接着输入`npm install`安装必备的组件。\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开[http://localhost:4000/](http://localhost:4000/)，就可以看到我们的博客啦，效果如下：\n![](5.jpg)\n\n按`ctrl+c`关闭本地服务器。\n\n# 连接Github与本地\n---\n首先右键打开git bash，然后输入下面命令：\n```\ngit config --global user.name \"godweiyang\"\ngit config --global user.email \"792321264@qq.com\"\n```\n用户名和邮箱根据你注册github的信息自行修改。\n\n然后生成密钥SSH key：\n```\nssh-keygen -t rsa -C \"792321264@qq.com\"\n```\n\n打开[github](http://github.com)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash中输入\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，如果如下图所示，出现你的用户名，那就成功了。\n![](6.jpg)\n\n打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n\n修改最后一行的配置：\n```\ndeploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master\n```\nrepository修改为你自己的github项目地址。**不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！**\n\n# 写文章、发布文章\n---\n首先在博客根目录下右键打开git bash，安装一个扩展`npm i hexo-deployer-git`。\n\n然后输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`D:\\study\\program\\blog\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n# 绑定域名\n---\n现在默认的域名还是`xxx.github.io`，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。\n\n以我的百度云为例，如下图所示，添加两条解析记录：\n![](7.jpg)\n\n然后打开你的github博客项目，点击`settings`，拉到下面`Custom domain`处，填上你自己的域名，保存：\n![](8.jpg)\n\n这时候你的项目根目录应该会出现一个名为`CNAME`的文件了。如果没有的话，打开你本地博客`/source`目录，我的是`D:\\study\\program\\blog\\source`，新建`CNAME`文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行`hexo g`、`hexo d`上传到github。\n\n# 更换主题\n---\n网上大多数主题都是github排名第一的`Next`主题，但是我个人不是很喜欢，我更喜欢`beantech`主题，地址在[传送门](https://github.com/YenYuHsuan/hexo-theme-beantech)。\n\n首先要注意的是，**这个github项目不仅包含了主题文件，还包含了hexo的各种文件**。\n\n所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：\n![](9.jpg)\n\n当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到`theme`下就行了。\n\n然后运行`hexo clean`清空所有生成的网页缓存，`hexo g`、`hexo d`。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：\n![](10.jpg)\n\n# 博客目录构成介绍\n---\n从上图可以看出，博客的目录结构如下：\n```\n- node_modules\n- public\n- scaffolds\n- source\n\t- _posts\n\t- about\n\t- archive\n\t- img\n\t- tags\n- themes\n```\n`node_modules`是node.js各种库的目录，`public`是生成的网页文件目录，`scaffolds`里面就三个文件，存储着新文章和新页面的初始设置，`source`是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，`themes`存放着主题文件，一般也用不到。\n\n我们平时写文章只需要关注`source/_posts`这个文件夹就行了。\n\n# 个性化设置及bug处理\n---\n**首先打开`_config.yml`，根据自己需求配置，具体不说了，有注释。**\n\n## 修复文档分类bug\n这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。\n\n打开`D:\\study\\program\\blog\\scaffolds\\post.md`，单词`catagories`改为`categories`。\n\n## 添加畅言评论插件\n主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。\n\n首先你得注册一个畅言账号，[地址](http://changyan.kuaizhan.com/)。\n然后打开如下页面，复制该段代码：\n![](11.jpg)\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，将代码粘贴到如下位置：\n![](12.jpg)\n然后重新生成一下网页，可以看到效果图如下：\n![](13.jpg)\n更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。\n\n## 添加图片放大功能\n首先下载`zooming.js`文件[地址](https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js)，保存在`D:\\study\\program\\blog\\themes\\beantech\\source\\js`目录下。\n\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"/js/zooming.js\"></script>\n```\n然后文章里的图片就可以单击全屏啦。\n\n## 添加数学公式显示\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n```\n由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。\n\n打开`D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js`\n`escape: `处替换成：\n```\nescape: /^$[`*\\[\\]()#$+\\-.!_>])/\n```\n`em: `处替换成：\n```\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/\n```\n\n这时在文章里写数学公式基本没有问题了，但是要注意：\n**数学公式中如果出现了连续两个{，中间一定要加空格！**\n\n举个例子:\n行内公式：$y = f(x)$\n代码：\n```\n$y = f(x)$\n```\n行间公式：\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n代码：\n```\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n```\n**注意上面花括号之间有空格！**\n\n## 添加留言板\n在`D:\\study\\program\\blog\\themes\\beantech\\layout`中新建`bbs.ejs`，文件内容如下：\n```\n---\nlayout: page\n---\n<style type=\"text/css\">\n    header.intro-header{\n        background-position: right; \n    }\n</style>\n<!-- Chinese Version -->\n<div class=\"zh post-container\">\n    <%- page.content %>\n</div>\n```\n然后在`D:\\study\\program\\blog\\source`中新建`\\bbs`文件夹，里面在新建`index.md`文件，内容如下：\n```\n---\nlayout: \"bbs\"\ntitle: \"BBS\"\ndate: 2017-09-19 12:48:33\ndescription: \"欢迎交换友链，一起交流学习！\"\nheader-img: \"img/header_img/home-bg-2-dark.png\"\ncomments: true\n---\n此处替换为你的畅言评论代码~~~\n```\n\n## 添加置顶功能\n运行如下两条命令安装置顶插件：\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs`，在如下位置添加代码：\n![](14.jpg)\n```\n<% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=7D26CD>置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%>\n```\n然后在你想置顶的文章md文件里，添加如下配置选项：\n```\ntop: true\n```\n## 添加网易云音乐BGM\n写文章的时候，想插入一段BGM怎么办？\n\n首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：\n![](15.jpg)\n复制如下代码：\n![](16.jpg)\n\n粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：\n```\n<div align=\"middle\">这里粘贴刚刚复制的代码</div>\n```\n\n## 添加访客人数统计和字数统计\n我们使用一个国外的流量统计网站：[gostats.com](gostats.com)，首先注册一下。\n\n然后自己添加网站地址，过程就不详细说了，然后点击`Get counter code`，选择一个自己喜欢的风格。\n如下图所示，选择一个样式，选择`HTML`，生成代码：\n![](17.jpg)\n\n复制这段代码到`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，具体位置如下：\n![](18.jpg)\n默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。\n\n字数统计首先安装插件\n```\nnpm i --save hexo-wordcount\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，添加如下代码：\n```\n<span class=\"post-count\"><%= totalcount(site) %> words altogether</span>\n```\n具体位置见上图。\n# 一些注意事项\n---\n首先解释一下文章开头的配置，如下图所示：\n![](19.jpg)\n```\ntitle: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类\n```\n\n网站图片都保存在`D:\\study\\program\\blog\\source\\img`目录下，可以修改成自己的图片。\n\n如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。\n\n\n**其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。**","slug":"hexo-blog","published":1,"updated":"2019-07-25T05:25:20.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hj008z7swe0k8w8m98","content":"<blockquote>\n<p>特别鸣谢<a href=\"https://blog.fun4go.top\" target=\"_blank\" rel=\"noopener\">番茄瓜皮</a>小学弟做出的改进和优化。</p>\n</blockquote>\n<h1 id=\"更新（2019-07-20）\"><a href=\"#更新（2019-07-20）\" class=\"headerlink\" title=\"更新（2019.07.20）\"></a>更新（2019.07.20）</h1><hr>\n<p>这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：<br><img src=\"21.jpg\" alt></p>\n<p>但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。</p>\n<p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。</p>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>\n<pre class=\" language-json\"><code class=\"language-json\">---\ntitle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ndate<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> date <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ntop<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\ncover<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\npassword<span class=\"token operator\">:</span>\ntoc<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\nmathjax<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\nsummary<span class=\"token operator\">:</span>\ntags<span class=\"token operator\">:</span>\ncategories<span class=\"token operator\">:</span>\n---</code></pre>\n<p>这样新建文章后不用你自己补充了，修改信息就行。</p>\n<h2 id=\"添加404页面\"><a href=\"#添加404页面\" class=\"headerlink\" title=\"添加404页面\"></a>添加404页面</h2><p>原来的主题没有404页面，加一个也不是什么难事。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p>\n<pre class=\" language-json\"><code class=\"language-json\">---\ntitle<span class=\"token operator\">:</span> <span class=\"token number\">404</span>\ndate<span class=\"token operator\">:</span> <span class=\"token number\">2019</span>-<span class=\"token number\">07</span>-<span class=\"token number\">19</span> <span class=\"token number\">16</span><span class=\"token operator\">:</span><span class=\"token number\">41</span><span class=\"token operator\">:</span><span class=\"token number\">10</span>\ntype<span class=\"token operator\">:</span> <span class=\"token string\">\"404\"</span>\nlayout<span class=\"token operator\">:</span> <span class=\"token string\">\"404\"</span>\ndescription<span class=\"token operator\">:</span> <span class=\"token string\">\"你来到了没有知识的荒原 :(\"</span>\n---</code></pre>\n<p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token comment\" spellcheck=\"true\">/* don't remove. */</span>\n    <span class=\"token selector\"><span class=\"token class\">.about-cover</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">75</span>vh<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bg-cover pd-header about-cover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>brand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title center-align<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        404\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description center-align<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        &lt;%= page.description %>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token comment\" spellcheck=\"true\">// 每天切换 banner 图.  Switch banner image every day.</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.bg-cover'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(/medias/banner/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"“关于”页面增加简历（可选）\"><a href=\"#“关于”页面增加简历（可选）\" class=\"headerlink\" title=\"“关于”页面增加简历（可选）\"></a>“关于”页面增加简历（可选）</h2><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card-content article-card-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title center-align<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-aos</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zoom-in-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-address-book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%-</span> <span class=\"token attr-name\">__('myCV')</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>articleContent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-aos</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fade-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%-</span> <span class=\"token attr-name\">page.content</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p>\n<h2 id=\"解决mathjax与代码高亮的冲突\"><a href=\"#解决mathjax与代码高亮的冲突\" class=\"headerlink\" title=\"解决mathjax与代码高亮的冲突\"></a>解决mathjax与代码高亮的冲突</h2><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了，改法还和网上一样。</p>\n<h2 id=\"增加建站时间\"><a href=\"#增加建站时间\" class=\"headerlink\" title=\"增加建站时间\"></a>增加建站时间</h2><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script language<span class=\"token operator\">=</span>javascript<span class=\"token operator\">></span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">siteTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"siteTime()\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> seconds <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> minutes <span class=\"token operator\">=</span> seconds <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> hours <span class=\"token operator\">=</span> minutes <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> days <span class=\"token operator\">=</span> hours <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> years <span class=\"token operator\">=</span> days <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayYear <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayMonth <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayDate <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayHour <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayMinute <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todaySecond <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>\n        <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">,</span> <span class=\"token number\">09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//北京时间2018-2-13 00:00:00</span>\n        <span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span>todayYear<span class=\"token punctuation\">,</span> todayMonth<span class=\"token punctuation\">,</span> todayDate<span class=\"token punctuation\">,</span> todayHour<span class=\"token punctuation\">,</span> todayMinute<span class=\"token punctuation\">,</span> todaySecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diff <span class=\"token operator\">=</span> t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffYears <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> years<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffDays <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> days<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffHours <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> diffDays<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> days<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> hours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffMinutes <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> diffDays<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> days <span class=\"token operator\">-</span> diffHours <span class=\"token operator\">*</span> hours<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffSeconds <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> diffDays<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> days <span class=\"token operator\">-</span> diffHours <span class=\"token operator\">*</span> hours <span class=\"token operator\">-</span> diffMinutes <span class=\"token operator\">*</span> minutes<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sitetime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"本站已运行 \"</span> <span class=\"token operator\">+</span>diffYears<span class=\"token operator\">+</span><span class=\"token string\">\" 年 \"</span><span class=\"token operator\">+</span>diffDays <span class=\"token operator\">+</span> <span class=\"token string\">\" 天 \"</span> <span class=\"token operator\">+</span> diffHours <span class=\"token operator\">+</span> <span class=\"token string\">\" 小时 \"</span> <span class=\"token operator\">+</span> diffMinutes <span class=\"token operator\">+</span> <span class=\"token string\">\" 分钟 \"</span> <span class=\"token operator\">+</span> diffSeconds <span class=\"token operator\">+</span> <span class=\"token string\">\" 秒\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\" spellcheck=\"true\">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>\n    <span class=\"token function\">siteTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sitetime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"修改不蒜子初始化计数\"><a href=\"#修改不蒜子初始化计数\" class=\"headerlink\" title=\"修改不蒜子初始化计数\"></a>修改不蒜子初始化计数</h2><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">var</span> int <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>fixCount<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 50ms周期检测函数</span>\n        <span class=\"token keyword\">var</span> pvcountOffset <span class=\"token operator\">=</span> <span class=\"token number\">80000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 初始化首次数据</span>\n        <span class=\"token keyword\">var</span> uvcountOffset <span class=\"token operator\">=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fixCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"busuanzi_container_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">!=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pvcountOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_container_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"display\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_uv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_uv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> uvcountOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 加上初始数据 </span>\n                <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 停止检测</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<p>然后把上面几行有段代码：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalTraffic)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-heart-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n        本站总访问量 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        人次,<span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span>访客数 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> 人.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>修改为：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalTraffic)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-heart-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n        本站总访问量 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n        人次,<span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span>访客数 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> 人.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p>\n<h2 id=\"添加动漫人物\"><a href=\"#添加动漫人物\" class=\"headerlink\" title=\"添加动漫人物\"></a>添加动漫人物</h2><p>其实三步就行了，不用像网上有些教程那么复杂。</p>\n<p><strong>第一步：</strong></p>\n<pre><code>npm install --save hexo-helper-live2d</code></pre><p><strong>第二步：</strong></p>\n<pre><code>npm install live2d-widget-model-shizuku</code></pre><p><strong>第三步：</strong><br>在根目录配置文件中添加如下代码：</p>\n<pre><code>live2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7</code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，我发现<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。</p>\n<p>具体效果可以参观我的博客：<a href=\"http://godweiyang.com\">godweiyang.com</a>，欢迎大家支持。</p>\n<p>我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。</p>\n<p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><hr>\n<p>首先下载稳定版<a href=\"https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi\" target=\"_blank\" rel=\"noopener\">Node.js</a>，我这里给的是64位的。</p>\n<p>安装选项全部默认，一路点击<code>Next</code>。</p>\n<p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry https://registry.npm.taobao.org</code></pre>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><hr>\n<p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">[下载地址]</a>。</p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>\n<h1 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h1><hr>\n<p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p>\n<p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>，新建一个项目，如下所示：<br><img src=\"1.jpg\" alt><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。<br><img src=\"2.jpg\" alt><br>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：<br><img src=\"3.jpg\" alt><br>点击那个链接，就会出现自己的网页啦，效果如下：<br><img src=\"4.jpg\" alt></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><hr>\n<p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\\study\\program\\blog</code>目录下。</p>\n<p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p>\n<p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p>\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：<br><img src=\"5.jpg\" alt></p>\n<p>按<code>ctrl+c</code>关闭本地服务器。</p>\n<h1 id=\"连接Github与本地\"><a href=\"#连接Github与本地\" class=\"headerlink\" title=\"连接Github与本地\"></a>连接Github与本地</h1><hr>\n<p>首先右键打开git bash，然后输入下面命令：</p>\n<pre><code>git config --global user.name &quot;godweiyang&quot;\ngit config --global user.email &quot;792321264@qq.com&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p>\n<p>然后生成密钥SSH key：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;792321264@qq.com&quot;</code></pre><p>打开<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash中输入</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</code></pre>\n<p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src=\"6.jpg\" alt></p>\n<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>\n<p>修改最后一行的配置：</p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！</strong></p>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><hr>\n<p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>\n<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>D:\\study\\program\\blog\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><hr>\n<p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p>\n<p>以我的百度云为例，如下图所示，添加两条解析记录：<br><img src=\"7.jpg\" alt></p>\n<p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src=\"8.jpg\" alt></p>\n<p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\\study\\program\\blog\\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><hr>\n<p>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我更喜欢<code>beantech</code>主题，地址在<a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>首先要注意的是，<strong>这个github项目不仅包含了主题文件，还包含了hexo的各种文件</strong>。</p>\n<p>所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：<br><img src=\"9.jpg\" alt></p>\n<p>当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到<code>theme</code>下就行了。</p>\n<p>然后运行<code>hexo clean</code>清空所有生成的网页缓存，<code>hexo g</code>、<code>hexo d</code>。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：<br><img src=\"10.jpg\" alt></p>\n<h1 id=\"博客目录构成介绍\"><a href=\"#博客目录构成介绍\" class=\"headerlink\" title=\"博客目录构成介绍\"></a>博客目录构成介绍</h1><hr>\n<p>从上图可以看出，博客的目录结构如下：</p>\n<pre><code>- node_modules\n- public\n- scaffolds\n- source\n    - _posts\n    - about\n    - archive\n    - img\n    - tags\n- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p>\n<p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p>\n<h1 id=\"个性化设置及bug处理\"><a href=\"#个性化设置及bug处理\" class=\"headerlink\" title=\"个性化设置及bug处理\"></a>个性化设置及bug处理</h1><hr>\n<p><strong>首先打开<code>_config.yml</code>，根据自己需求配置，具体不说了，有注释。</strong></p>\n<h2 id=\"修复文档分类bug\"><a href=\"#修复文档分类bug\" class=\"headerlink\" title=\"修复文档分类bug\"></a>修复文档分类bug</h2><p>这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。</p>\n<p>打开<code>D:\\study\\program\\blog\\scaffolds\\post.md</code>，单词<code>catagories</code>改为<code>categories</code>。</p>\n<h2 id=\"添加畅言评论插件\"><a href=\"#添加畅言评论插件\" class=\"headerlink\" title=\"添加畅言评论插件\"></a>添加畅言评论插件</h2><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p>\n<p>首先你得注册一个畅言账号，<a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">地址</a>。<br>然后打开如下页面，复制该段代码：<br><img src=\"11.jpg\" alt><br>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，将代码粘贴到如下位置：<br><img src=\"12.jpg\" alt><br>然后重新生成一下网页，可以看到效果图如下：<br><img src=\"13.jpg\" alt><br>更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。</p>\n<h2 id=\"添加图片放大功能\"><a href=\"#添加图片放大功能\" class=\"headerlink\" title=\"添加图片放大功能\"></a>添加图片放大功能</h2><p>首先下载<code>zooming.js</code>文件<a href=\"https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js\" target=\"_blank\" rel=\"noopener\">地址</a>，保存在<code>D:\\study\\program\\blog\\themes\\beantech\\source\\js</code>目录下。</p>\n<p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/zooming.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后文章里的图片就可以单击全屏啦。</p>\n<h2 id=\"添加数学公式显示\"><a href=\"#添加数学公式显示\" class=\"headerlink\" title=\"添加数学公式显示\"></a>添加数学公式显示</h2><p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。</p>\n<p>打开<code>D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js</code><br><code>escape:</code>处替换成：</p>\n<pre><code>escape: /^$[`*\\[\\]()#$+\\-.!_&gt;])/</code></pre><p><code>em:</code>处替换成：</p>\n<pre><code>em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p>\n<p>举个例子:<br>行内公式：$y = f(x)$<br>代码：</p>\n<pre><code>$y = f(x)$</code></pre><p>行间公式：<br>\\[y = {f_{ {g_1}}}(x)\\]<br>代码：</p>\n<pre><code>\\\\[y = {f_{ {g_1}}}(x)\\\\]</code></pre><p><strong>注意上面花括号之间有空格！</strong></p>\n<h2 id=\"添加留言板\"><a href=\"#添加留言板\" class=\"headerlink\" title=\"添加留言板\"></a>添加留言板</h2><p>在<code>D:\\study\\program\\blog\\themes\\beantech\\layout</code>中新建<code>bbs.ejs</code>，文件内容如下：</p>\n<pre><code>---\nlayout: page\n---\n&lt;style type=&quot;text/css&quot;&gt;\n    header.intro-header{\n        background-position: right; \n    }\n&lt;/style&gt;\n&lt;!-- Chinese Version --&gt;\n&lt;div class=&quot;zh post-container&quot;&gt;\n    &lt;%- page.content %&gt;\n&lt;/div&gt;</code></pre><p>然后在<code>D:\\study\\program\\blog\\source</code>中新建<code>\\bbs</code>文件夹，里面在新建<code>index.md</code>文件，内容如下：</p>\n<pre><code>---\nlayout: &quot;bbs&quot;\ntitle: &quot;BBS&quot;\ndate: 2017-09-19 12:48:33\ndescription: &quot;欢迎交换友链，一起交流学习！&quot;\nheader-img: &quot;img/header_img/home-bg-2-dark.png&quot;\ncomments: true\n---\n此处替换为你的畅言评论代码~~~</code></pre><h2 id=\"添加置顶功能\"><a href=\"#添加置顶功能\" class=\"headerlink\" title=\"添加置顶功能\"></a>添加置顶功能</h2><p>运行如下两条命令安装置顶插件：</p>\n<pre><code>npm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs</code>，在如下位置添加代码：<br><img src=\"14.jpg\" alt></p>\n<pre><code>&lt;% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=\"7D26CD\">置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%&gt;< code></%}%&gt;<></code></pre><p>然后在你想置顶的文章md文件里，添加如下配置选项：</p>\n<pre><code>top: true</code></pre><h2 id=\"添加网易云音乐BGM\"><a href=\"#添加网易云音乐BGM\" class=\"headerlink\" title=\"添加网易云音乐BGM\"></a>添加网易云音乐BGM</h2><p>写文章的时候，想插入一段BGM怎么办？</p>\n<p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：<br><img src=\"15.jpg\" alt><br>复制如下代码：<br><img src=\"16.jpg\" alt></p>\n<p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p>\n<pre><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></pre><h2 id=\"添加访客人数统计和字数统计\"><a href=\"#添加访客人数统计和字数统计\" class=\"headerlink\" title=\"添加访客人数统计和字数统计\"></a>添加访客人数统计和字数统计</h2><p>我们使用一个国外的流量统计网站：<a href=\"gostats.com\">gostats.com</a>，首先注册一下。</p>\n<p>然后自己添加网站地址，过程就不详细说了，然后点击<code>Get counter code</code>，选择一个自己喜欢的风格。<br>如下图所示，选择一个样式，选择<code>HTML</code>，生成代码：<br><img src=\"17.jpg\" alt></p>\n<p>复制这段代码到<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，具体位置如下：<br><img src=\"18.jpg\" alt><br>默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。</p>\n<p>字数统计首先安装插件</p>\n<pre><code>npm i --save hexo-wordcount</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，添加如下代码：</p>\n<pre><code>&lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site) %&gt; words altogether&lt;/span&gt;</code></pre><p>具体位置见上图。</p>\n<h1 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h1><hr>\n<p>首先解释一下文章开头的配置，如下图所示：<br><img src=\"19.jpg\" alt></p>\n<pre><code>title: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类</code></pre><p>网站图片都保存在<code>D:\\study\\program\\blog\\source\\img</code>目录下，可以修改成自己的图片。</p>\n<p>如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。</p>\n<p><strong>其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。</strong></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>特别鸣谢<a href=\"https://blog.fun4go.top\" target=\"_blank\" rel=\"noopener\">番茄瓜皮</a>小学弟做出的改进和优化。</p>\n</blockquote>\n<h1 id=\"更新（2019-07-20）\"><a href=\"#更新（2019-07-20）\" class=\"headerlink\" title=\"更新（2019.07.20）\"></a>更新（2019.07.20）</h1><hr>\n<p>这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：<br><img src=\"21.jpg\" alt></p>\n<p>但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。</p>\n<p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。</p>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>\n<pre><code class=\"json\">---\ntitle: {{ title }}\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories:\n---</code></pre>\n<p>这样新建文章后不用你自己补充了，修改信息就行。</p>\n<h2 id=\"添加404页面\"><a href=\"#添加404页面\" class=\"headerlink\" title=\"添加404页面\"></a>添加404页面</h2><p>原来的主题没有404页面，加一个也不是什么难事。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p>\n<pre><code class=\"json\">---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: &quot;404&quot;\nlayout: &quot;404&quot;\ndescription: &quot;你来到了没有知识的荒原 :(&quot;\n---</code></pre>\n<p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p>\n<pre><code class=\"html\">&lt;style type=&quot;text/css&quot;&gt;\n    /* don&#39;t remove. */\n    .about-cover {\n        height: 75vh;\n    }\n&lt;/style&gt;\n\n&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;row&quot;&gt;\n            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;\n                &lt;div class=&quot;brand&quot;&gt;\n                    &lt;div class=&quot;title center-align&quot;&gt;\n                        404\n                    &lt;/div&gt;\n                    &lt;div class=&quot;description center-align&quot;&gt;\n                        &lt;%= page.description %&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    // 每天切换 banner 图.  Switch banner image every day.\n    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);\n&lt;/script&gt;</code></pre>\n<h2 id=\"“关于”页面增加简历（可选）\"><a href=\"#“关于”页面增加简历（可选）\" class=\"headerlink\" title=\"“关于”页面增加简历（可选）\"></a>“关于”页面增加简历（可选）</h2><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p>\n<pre><code class=\"html\">&lt;div class=&quot;card&quot;&gt;\n    &lt;div class=&quot;card-content&quot;&gt;\n        &lt;div class=&quot;card-content article-card-content&quot;&gt;\n                &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt;\n                    &lt;i class=&quot;fa fa-address-book&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;myCV&#39;) %&gt;\n                &lt;/div&gt;\n                &lt;div id=&quot;articleContent&quot; data-aos=&quot;fade-up&quot;&gt;\n                    &lt;%- page.content %&gt;\n                &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p>\n<h2 id=\"解决mathjax与代码高亮的冲突\"><a href=\"#解决mathjax与代码高亮的冲突\" class=\"headerlink\" title=\"解决mathjax与代码高亮的冲突\"></a>解决mathjax与代码高亮的冲突</h2><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了，改法还和网上一样。</p>\n<h2 id=\"增加建站时间\"><a href=\"#增加建站时间\" class=\"headerlink\" title=\"增加建站时间\"></a>增加建站时间</h2><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p>\n<pre><code class=\"js\">&lt;script language=javascript&gt;\n    function siteTime() {\n        window.setTimeout(&quot;siteTime()&quot;, 1000);\n        var seconds = 1000;\n        var minutes = seconds * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        var years = days * 365;\n        var today = new Date();\n        var todayYear = today.getFullYear();\n        var todayMonth = today.getMonth() + 1;\n        var todayDate = today.getDate();\n        var todayHour = today.getHours();\n        var todayMinute = today.getMinutes();\n        var todaySecond = today.getSeconds();\n        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */\n        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00\n        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);\n        var diff = t2 - t1;\n        var diffYears = Math.floor(diff / years);\n        var diffDays = Math.floor((diff / days) - diffYears * 365);\n        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);\n        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);\n        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);\n        document.getElementById(&quot;sitetime&quot;).innerHTML = &quot;本站已运行 &quot; +diffYears+&quot; 年 &quot;+diffDays + &quot; 天 &quot; + diffHours + &quot; 小时 &quot; + diffMinutes + &quot; 分钟 &quot; + diffSeconds + &quot; 秒&quot;;\n    }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/\n    siteTime();\n&lt;/script&gt;</code></pre>\n<p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p>\n<pre><code class=\"html\">&lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt;</code></pre>\n<h2 id=\"修改不蒜子初始化计数\"><a href=\"#修改不蒜子初始化计数\" class=\"headerlink\" title=\"修改不蒜子初始化计数\"></a>修改不蒜子初始化计数</h2><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p>\n<pre><code class=\"js\">&lt;script&gt;\n    $(document).ready(function () {\n\n        var int = setInterval(fixCount, 50);  // 50ms周期检测函数\n        var pvcountOffset = 80000;  // 初始化首次数据\n        var uvcountOffset = 20000;\n\n        function fixCount() {\n            if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;) {\n                $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + pvcountOffset);\n                clearInterval(int);\n            }\n            if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;) {\n                $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + uvcountOffset); // 加上初始数据 \n                clearInterval(int); // 停止检测\n            }\n        }\n    });\n&lt;/script&gt;</code></pre>\n<p>然后把上面几行有段代码：</p>\n<pre><code class=\"html\">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;\n        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;\n        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;\n    &lt;/span&gt;\n&lt;% } %&gt;\n&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;\n        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.\n    &lt;/span&gt;\n&lt;% } %&gt;</code></pre>\n<p>修改为：</p>\n<pre><code class=\"html\">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;\n        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;\n        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;\n    &lt;/span&gt;\n&lt;% } %&gt;\n&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;\n        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.\n    &lt;/span&gt;\n&lt;% } %&gt;</code></pre>\n<p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p>\n<h2 id=\"添加动漫人物\"><a href=\"#添加动漫人物\" class=\"headerlink\" title=\"添加动漫人物\"></a>添加动漫人物</h2><p>其实三步就行了，不用像网上有些教程那么复杂。</p>\n<p><strong>第一步：</strong></p>\n<pre><code>npm install --save hexo-helper-live2d</code></pre><p><strong>第二步：</strong></p>\n<pre><code>npm install live2d-widget-model-shizuku</code></pre><p><strong>第三步：</strong><br>在根目录配置文件中添加如下代码：</p>\n<pre><code>live2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7</code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，我发现<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。</p>\n<p>具体效果可以参观我的博客：<a href=\"http://godweiyang.com\">godweiyang.com</a>，欢迎大家支持。</p>\n<p>我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。</p>\n<p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><hr>\n<p>首先下载稳定版<a href=\"https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi\" target=\"_blank\" rel=\"noopener\">Node.js</a>，我这里给的是64位的。</p>\n<p>安装选项全部默认，一路点击<code>Next</code>。</p>\n<p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>\n<pre><code class=\"bash\">npm config set registry https://registry.npm.taobao.org</code></pre>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><hr>\n<p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">[下载地址]</a>。</p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>\n<h1 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h1><hr>\n<p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p>\n<p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>，新建一个项目，如下所示：<br><img src=\"1.jpg\" alt><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。<br><img src=\"2.jpg\" alt><br>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：<br><img src=\"3.jpg\" alt><br>点击那个链接，就会出现自己的网页啦，效果如下：<br><img src=\"4.jpg\" alt></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><hr>\n<p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\\study\\program\\blog</code>目录下。</p>\n<p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p>\n<p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p>\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：<br><img src=\"5.jpg\" alt></p>\n<p>按<code>ctrl+c</code>关闭本地服务器。</p>\n<h1 id=\"连接Github与本地\"><a href=\"#连接Github与本地\" class=\"headerlink\" title=\"连接Github与本地\"></a>连接Github与本地</h1><hr>\n<p>首先右键打开git bash，然后输入下面命令：</p>\n<pre><code>git config --global user.name &quot;godweiyang&quot;\ngit config --global user.email &quot;792321264@qq.com&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p>\n<p>然后生成密钥SSH key：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;792321264@qq.com&quot;</code></pre><p>打开<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash中输入</p>\n<pre><code class=\"bash\">cat ~/.ssh/id_rsa.pub</code></pre>\n<p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src=\"6.jpg\" alt></p>\n<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>\n<p>修改最后一行的配置：</p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！</strong></p>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><hr>\n<p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>\n<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>D:\\study\\program\\blog\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><hr>\n<p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p>\n<p>以我的百度云为例，如下图所示，添加两条解析记录：<br><img src=\"7.jpg\" alt></p>\n<p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src=\"8.jpg\" alt></p>\n<p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\\study\\program\\blog\\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><hr>\n<p>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我更喜欢<code>beantech</code>主题，地址在<a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>首先要注意的是，<strong>这个github项目不仅包含了主题文件，还包含了hexo的各种文件</strong>。</p>\n<p>所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：<br><img src=\"9.jpg\" alt></p>\n<p>当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到<code>theme</code>下就行了。</p>\n<p>然后运行<code>hexo clean</code>清空所有生成的网页缓存，<code>hexo g</code>、<code>hexo d</code>。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：<br><img src=\"10.jpg\" alt></p>\n<h1 id=\"博客目录构成介绍\"><a href=\"#博客目录构成介绍\" class=\"headerlink\" title=\"博客目录构成介绍\"></a>博客目录构成介绍</h1><hr>\n<p>从上图可以看出，博客的目录结构如下：</p>\n<pre><code>- node_modules\n- public\n- scaffolds\n- source\n    - _posts\n    - about\n    - archive\n    - img\n    - tags\n- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p>\n<p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p>\n<h1 id=\"个性化设置及bug处理\"><a href=\"#个性化设置及bug处理\" class=\"headerlink\" title=\"个性化设置及bug处理\"></a>个性化设置及bug处理</h1><hr>\n<p><strong>首先打开<code>_config.yml</code>，根据自己需求配置，具体不说了，有注释。</strong></p>\n<h2 id=\"修复文档分类bug\"><a href=\"#修复文档分类bug\" class=\"headerlink\" title=\"修复文档分类bug\"></a>修复文档分类bug</h2><p>这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。</p>\n<p>打开<code>D:\\study\\program\\blog\\scaffolds\\post.md</code>，单词<code>catagories</code>改为<code>categories</code>。</p>\n<h2 id=\"添加畅言评论插件\"><a href=\"#添加畅言评论插件\" class=\"headerlink\" title=\"添加畅言评论插件\"></a>添加畅言评论插件</h2><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p>\n<p>首先你得注册一个畅言账号，<a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">地址</a>。<br>然后打开如下页面，复制该段代码：<br><img src=\"11.jpg\" alt><br>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，将代码粘贴到如下位置：<br><img src=\"12.jpg\" alt><br>然后重新生成一下网页，可以看到效果图如下：<br><img src=\"13.jpg\" alt><br>更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。</p>\n<h2 id=\"添加图片放大功能\"><a href=\"#添加图片放大功能\" class=\"headerlink\" title=\"添加图片放大功能\"></a>添加图片放大功能</h2><p>首先下载<code>zooming.js</code>文件<a href=\"https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js\" target=\"_blank\" rel=\"noopener\">地址</a>，保存在<code>D:\\study\\program\\blog\\themes\\beantech\\source\\js</code>目录下。</p>\n<p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/zooming.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后文章里的图片就可以单击全屏啦。</p>\n<h2 id=\"添加数学公式显示\"><a href=\"#添加数学公式显示\" class=\"headerlink\" title=\"添加数学公式显示\"></a>添加数学公式显示</h2><p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。</p>\n<p>打开<code>D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js</code><br><code>escape:</code>处替换成：</p>\n<pre><code>escape: /^$[`*\\[\\]()#$+\\-.!_&gt;])/</code></pre><p><code>em:</code>处替换成：</p>\n<pre><code>em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p>\n<p>举个例子:<br>行内公式：$y = f(x)$<br>代码：</p>\n<pre><code>$y = f(x)$</code></pre><p>行间公式：<br>\\[y = {f_{ {g_1}}}(x)\\]<br>代码：</p>\n<pre><code>\\\\[y = {f_{ {g_1}}}(x)\\\\]</code></pre><p><strong>注意上面花括号之间有空格！</strong></p>\n<h2 id=\"添加留言板\"><a href=\"#添加留言板\" class=\"headerlink\" title=\"添加留言板\"></a>添加留言板</h2><p>在<code>D:\\study\\program\\blog\\themes\\beantech\\layout</code>中新建<code>bbs.ejs</code>，文件内容如下：</p>\n<pre><code>---\nlayout: page\n---\n&lt;style type=&quot;text/css&quot;&gt;\n    header.intro-header{\n        background-position: right; \n    }\n&lt;/style&gt;\n&lt;!-- Chinese Version --&gt;\n&lt;div class=&quot;zh post-container&quot;&gt;\n    &lt;%- page.content %&gt;\n&lt;/div&gt;</code></pre><p>然后在<code>D:\\study\\program\\blog\\source</code>中新建<code>\\bbs</code>文件夹，里面在新建<code>index.md</code>文件，内容如下：</p>\n<pre><code>---\nlayout: &quot;bbs&quot;\ntitle: &quot;BBS&quot;\ndate: 2017-09-19 12:48:33\ndescription: &quot;欢迎交换友链，一起交流学习！&quot;\nheader-img: &quot;img/header_img/home-bg-2-dark.png&quot;\ncomments: true\n---\n此处替换为你的畅言评论代码~~~</code></pre><h2 id=\"添加置顶功能\"><a href=\"#添加置顶功能\" class=\"headerlink\" title=\"添加置顶功能\"></a>添加置顶功能</h2><p>运行如下两条命令安装置顶插件：</p>\n<pre><code>npm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs</code>，在如下位置添加代码：<br><img src=\"14.jpg\" alt></p>\n<pre><code>&lt;% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=\"7D26CD\">置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%&gt;< code></%}%&gt;<></code></pre><p>然后在你想置顶的文章md文件里，添加如下配置选项：</p>\n<pre><code>top: true</code></pre><h2 id=\"添加网易云音乐BGM\"><a href=\"#添加网易云音乐BGM\" class=\"headerlink\" title=\"添加网易云音乐BGM\"></a>添加网易云音乐BGM</h2><p>写文章的时候，想插入一段BGM怎么办？</p>\n<p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：<br><img src=\"15.jpg\" alt><br>复制如下代码：<br><img src=\"16.jpg\" alt></p>\n<p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p>\n<pre><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></pre><h2 id=\"添加访客人数统计和字数统计\"><a href=\"#添加访客人数统计和字数统计\" class=\"headerlink\" title=\"添加访客人数统计和字数统计\"></a>添加访客人数统计和字数统计</h2><p>我们使用一个国外的流量统计网站：<a href=\"gostats.com\">gostats.com</a>，首先注册一下。</p>\n<p>然后自己添加网站地址，过程就不详细说了，然后点击<code>Get counter code</code>，选择一个自己喜欢的风格。<br>如下图所示，选择一个样式，选择<code>HTML</code>，生成代码：<br><img src=\"17.jpg\" alt></p>\n<p>复制这段代码到<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，具体位置如下：<br><img src=\"18.jpg\" alt><br>默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。</p>\n<p>字数统计首先安装插件</p>\n<pre><code>npm i --save hexo-wordcount</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，添加如下代码：</p>\n<pre><code>&lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site) %&gt; words altogether&lt;/span&gt;</code></pre><p>具体位置见上图。</p>\n<h1 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h1><hr>\n<p>首先解释一下文章开头的配置，如下图所示：<br><img src=\"19.jpg\" alt></p>\n<pre><code>title: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类</code></pre><p>网站图片都保存在<code>D:\\study\\program\\blog\\source\\img</code>目录下，可以修改成自己的图片。</p>\n<p>如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。</p>\n<p><strong>其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。</strong></p>\n"},{"title":"Neural Language Modeling by Jointly Learning Syntax and Lexicon","date":"2019-03-31T08:08:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Neural Language Modeling by Jointly Learning Syntax and Lexicon](https://arxiv.org/abs/1711.02013)\n**代码地址：**[github](https://github.com/yikangshen/PRPN)\n\n> 最近开始转向去看看一些无监督的成分句法分析论文，看看能否有一些启发QAQ。这篇博客摸鱼划水写了整整四天才写完，好累啊啊啊。\n\n# 介绍\n---\n一般来说，自然语言是由词汇和句法组成的，但是标准的语言模型一般都只用RNN对词汇进行建模，句法信息都是隐式的学习到的，没有办法显式地拿出来使用。所以本文提出的语言模型的变体可以结合结构上的attention，在中间过程中学习到结构信息，然后这层结构信息可以拿来生成句法树，用来做无监督的句法分析。\n\n那么为什么要做无监督的句法分析呢？主要原因还是一些小语种标注语料太少了甚至没有，不能用监督句法分析来做。而且无监督句法分析学到的信息还可以用来增强语言模型或者更为下游的任务的性能，使它们能更好的融合句法结构信息。\n\n本文提出的模型（PRPN）主要有如下三个组成部分：\n* **可微分的Parsing Network**。主要用来学习句子的句法距离（syntactic distance，这个在之前的博客中有讲到，是同一个组做的工作，链接：[Straight to the Tree: Constituency Parsing with Neural Syntactic Distance](https://godweiyang.com/2018/07/19/ConParsing-Syntactic-Distance/)），然后产生出门函数（gate function），也就是句子中每个词的权重，这样跑RNN的时候就没有必要考虑之前的所有信息了，只需要考虑句法距离最近的，也就是同一个短语中的信息。这里可微分后面会详细讲到，也就是不能直接预测离散的序列，不然梯度没办法反向传播，所以预测的是一个分布。\n* **Reading Network**。这个部分就和普通的RNN差不多，区别就是利用了上面的attention，然后每个时刻的输入不仅仅是上一个时刻的隐含层状态，还包括了历史所有相关的隐含层状态。\n* **Predict Network**。最后预测下一个词也不是直接采用当前时刻的隐含层输出，而是采用所有attention后的历史隐含层信息。\n\n最后模型训练好之后，用Parsing Network学习到的句法距离就可以产生出无监督的句法树，当然这里只能产生unlabeled的句法树，也就是说，无监督的成分句法分析都是只评测unlabeled F1值，因为nonterminal信息实在是无法无监督的预测出来，除非结合外部标注器或者人工制定规则？\n\n**由于我觉得这篇论文写作有点粗糙，很多地方写的很乱，甚至还有公式变量和图片不对应，所以下面的公式我有些自行修改过了，如果觉得有疑问的，可以参考原文，并且告诉我。**\n\n# 动机\n---\n下图是一个输入句子及其对应的句法树示例：\n![](1.png)\n其中实线表示成分句法树的结构，而虚线表示同一棵子树的若干个子结点之间的联系。我们用$(x_0, x_1, \\ldots, x_n)$表示输入句子，用$y_i$表示句法树中的某一个结点，用$r$表示根结点。定义$y_i$所表示的短语范围是$(l(y_i), r(y_i))$，例如在上图中$y_1$表示的范围是$(2, 6)$，所以有$l(y_1) = 2$和$r(y_1) = 6$。\n\n下图是模型的Reading Network和Predict Network大致框架：\n![](2.png)\n其中实线表示Reading Network中RNN每个时刻的输入依赖于之前的哪些时刻，虚线表示Predict Network中预测下一个词时需要考虑哪些时刻的隐含层输出(**这里有个小错误，图中最上面一行函数参数从$m_3$开始，但实际上虚线表明应该从$m_2$开始**)。\n\n首先是Parsing Network。这种和之前状态的连接在这里被叫做“跨越连接”（skip connection），而具体和哪些状态连接，就要用到门$g_i^t$，表示当前处在$t$时刻，和之前的第$i$时刻有没有关联，有就是1，没有就是0。在这里先定义变量$l_t$为$x_t$和之前最远到哪个位置的单词有关联，分成两种情况：\n* 如果$x_t$不是某个子树最左边的叶子结点，那么$l_t$就定义为它的父结点的最左边那个叶子结点，也就是$x_t$最左边那个兄弟结点。比如上图中的$x_4$，因为它在子树中位于中间，所以$l_4 = 3$，也就是说它最远和$x_3$有一定关联，而再往前的单词由于不在同一个短语里，关联就不大了。\n* 如果$x_t$是某一个子树$y_i$最左边的子结点，那么$l_t$就定义为$y_i$最左边那个兄弟结点的最左边的叶子结点。比如上图中$l_3 = 2$，因为$x_3$是$y_3$的最左边的子结点，而$y_2$是$y_3$最左边的兄弟结点，$x_2$又是$y_2$最左边的叶子结点，也就是说$x_3$最远和之前的$x_2$有关联，它们共同组成了更大的短语$y_1$。（**这里定义又不是很严谨，例如对于上面那个例子，$x_2$既是$y_1$又是$y_2$的最左子结点，这种情况下不能按照$y_2$来计算，因为它没有最左的兄弟结点！所以按照$y_1$来算的话得到$l_2 = 0$。**）\n\n根据这个$l_t$就可以将$g_i^t$定义为：\n\\\\[\ng_i^t = \\left\\{ {\\begin{array}{}{1,{l_t} \\le i < t}\\\\{0,0 < i < {l_t}}\\end{array}} \\right.\n\\\\]\n但是因为这是离散的决策，没法传递梯度，所以之后会介绍用概率来替代这里的0和1。\n\n然后是Reading Network。得到了gates之后，就可以修改RNN，用下面公式计算$t$时刻的隐含层状态：\n\\\\[\nm_t = h(x_t, m_0, \\ldots, m_{t-1}, g_0^t, \\ldots, g_{t-1}^t)\n\\\\]\n具体是怎么使用这个gates的，后面再具体介绍，反正只要知道多考虑了很多个历史状态就行了，每个状态都有一个权重，表示考虑了多少。\n\n最后就是Predict Network，用来预测下一个单词$x_{t+1}$，用到的是历史多个隐含层状态信息：\n\\\\[\np(x_{t+1} | x_0, \\ldots, x_t) \\approx p(x_{t+1} ; f(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}))\n\\\\]\n这里后面也会具体讲到。\n\n# 模型\n---\n**这里我不按照论文上的顺序讲，论文是倒序，变量定义都得看完整篇论文才出来，实在是看的太杂乱了。。。**\n## Parsing Network\n**第1步：**\n首先第一步要预测出相邻两个单词的句法距离，用宽度为$L+1$的卷积核来对单词进行卷积。例如要预测$x_i$和$x_{i-1}$的句法距离，那么就对$x_{i-L}, x_{i-L+1}, \\ldots, x_i$进行卷积（其实就是两层前馈神经网络），得到如下输出（**注意原文中这一段里的词向量$e$应该都是$x$，有误**）：\n\\\\[\n\\begin{array}{}{h_i = {\\rm ReLU}(W_c \\left[ {\\begin{array}{\\*{20}{c}}e_{i-L}\\\\e_{i-L+1}\\\\ \\cdots\\\\ e_i \\end{array}} \\right] + b_c)} \\\\ {d_i = {\\rm ReLU}(W_dh_i+b_d)}\\end{array}\n\\\\]\n当然了，第二行也可以看做是窗口大小为1的卷积核，第一个单词之前要补上$L-1$个0。\n\n最后得到的句法距离反映出了相邻两个词之间的语义相关程度，如果距离比较大，说明两个词可能位于两个不同的短语中，否则就位于同一个短语。一个形象化的句法距离就是相邻两个单词的最近公共祖先的高度。\n\n下面这个图就是一个例子，卷积核窗口宽度为2：\n![](3.png)\n\n**第2步：**\n然后就可以根据句法距离，求出$x_t$最远到哪个位置有联系。用$\\alpha_j^t$来衡量$x_t$与$x_j$的分别与前一个单词的句法距离的差距：\n\\\\[\n\\alpha_j^t = \\frac{ {\\rm hardtanh}((d_t - d_j) \\cdot \\tau) + 1}{2}\n\\\\]\n这里的${\\rm hardtanh}$就是当输入大于1或者小于-1时，截取掉，给它限制在-1到1这个范围内，所以最后$\\alpha$的范围就是0到1。可以看出，如果$\\alpha_j^t$很大，那么$d_t$就大于$d_j$，否则的话$d_t$就小于$d_j$。这也很合乎直观上的认知，如果$d_t$大于$d_j$，那么说明$x_j$和$x_{j-1}$的最近公共祖先的高度比较低，那么说明$x_j$和$x_t$在同一棵子树中，差值自然大，反之的话$x_j$是当前子树的最左边的子结点，差值就很小。\n\n所以模型只需要一步步往左寻找第一个$\\alpha_j^t$最接近0的点，也就是之前提到过的$l_t$。为了实现这个目标，可以定义$l_t = i$的概率为：\n\\\\[\np(l_t = i | x_0, \\ldots, x_t) = (1 - \\alpha_i^t) \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n为什么这么设计呢？其实还是很有道理的。概率越大的话，说明$\\alpha_i^t$越小，而其他的$\\alpha_j^t$越大，这就印证了上面提出的观点。而如果取$l_t > i$的话，$1 - \\alpha_i^t$一定很小，会拉低概率；反之取$l_t < i$的话，会乘上一个很小的项$\\alpha_i^t$，也会拉低概率。所以取$l_t = i$就是最优的。\n\n**第3步：**\n我们的最终目的是求出门$g_i^t$，也就是$x_t$与$x_i$的相关度。在之前的动机中，直接将$l_t$之后的设为1，之前的设为0，但是这样是离散序列，无法传播梯度，所以这里采用另一种方法来求。注意到只有$p(l_t = i | x_0, \\ldots, x_t)$接近于1，而其他的概率都接近于0，所以只需要用概率密度函数来作为$g_i^t$就行了：\n\\\\[\ng_i^t = P(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n注意到这个概率密度函数在$i < l_t$时值基本很小接近于0，而大于等于它时很大，越来越接近于1。这和设计的初衷已经很像了，所以可以近似用来作为$g_i^t$。\n\n**这里要提几点证明，可看可不看。**\n\n**证明开始**\n\n---\n\n\n首先这个概率$p(l_t = i | x_0, \\ldots, x_t)$的形式其实是一个狄利克雷过程，有两个特殊值要定义一下，一个是$l_t = t-1$时，概率为：\n\\\\[\np(l_t = t - 1 | x_0, \\ldots, x_t) = (1 - \\alpha_{t - 1}^t)\n\\\\]\n还有就是当$l_t = 0$时，因为$d_0$实际不存在，所以定义为句法距离无穷大，那么$\\alpha_0^t$定义为0，所以概率为：\n\\\\[\np(l_t = 0 | x_0, \\ldots, x_t) = \\prod_{j=1}^{t-1} {\\alpha_j^t}\n\\\\]\n然后可以求出$g_i^t$的期望（**这里论文中又写的一塌糊涂，符号定义都不统一。。。**）：\n\\\\[\n\\mathbb E(g_i^t) = \\prod_{j=1}^{t-1} {\\alpha_j^t} + (1 - \\alpha_1^t)\\prod_{j=2}^{t-1} {\\alpha_j^t} + \\ldots + (1 - \\alpha_i^t)\\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n进一步可以写为：\n\\\\[\n\\mathbb E(g_i^t) = \\sum_{j=0}^i {p(l_t = j | x_0, \\dots, x_t)} = P(l_t \\le i)\n\\\\]\n上面的求和裂项相消可以得到：\n\\\\[\nP(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n这里也可以验证出$P(l_t < t) = 1$，所以最终得到下面的门是正确的：\n\\\\[\ng_i^t = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n\n然后要证明的就是根据这个策略求出的两个单词的关联区间没有交叉（但是可以完全覆盖）。首先放宽一下条件，证明当$\\alpha_j^t$只取0或者1时，性质成立，也就是定义（**这里原文又打错了。。。**）：\n\\\\[\n\\alpha_j^t = \\frac{ {\\rm sign}(d_t - d_j) + 1}{2}\n\\\\]\n也就是在原来的定义中令$\\tau$为正无穷。这样的话如果$d_t > d_j$，那么$\\alpha_j^t$就是1，否则就是0。放宽了条件之后，$g_i^t$取值就只有1和0了，所以求出的$l_t$一定是满足句法距离$d_i > d_t$所有位置中最右边的一个。而对于所有的$l_t < i < t$，都满足$d_i < d_t$。证明也很简单，假设存在两个单词$x_v$和$x_n$，其中$v < n$，它俩的关联区间交叉了，那么假设$x_v$的$l_t$为$u$，而$x_n$的$l_t$为$m$，所以$u < m < v < n$。那么根据定义，有：\n\\\\[\n\\begin{array}{} {d_u > d_v > d_m \\\\ d_m > d_n > d_v} \\end{array}\n\\\\]\n这两个式子显然矛盾，所以证明了在宽松的条件下，这个不交叉的性质是成立的。\n\n另一个极端是令$\\tau = 0$，这种情况下$\\alpha_j^t = \\frac{1}{2}$，最终算下来$g_i^t$是一个首项为$\\frac{1}{2^{t-1}}$公比为2的等比数列。这里的话论文里说最终会形成一棵所有叶子结点都直接连接在根结点上面的句法树，但是我是没看出来为什么，首先这种情况下句法距离$d$对最终的损失函数没有影响了，所以梯度无法传播回来，句法距离$d$应该只受到词向量影响了，最终就是一个普通的语言模型，句法距离最终会是什么样子谁也不知道。\n\n在具体实现时，将$\\tau$设为一个中间值，但是这样会产生交叉的关联区间，所以测试的时候再将其设为正无穷。\n\n**证明结束**\n\n---\n\n## Reading Network\n上面的Parsing Network求了半天就是为了得到这个gates $g_j^t$，然后怎么使用呢？既然是语言模型，下面当然要用LSTM来对句子进行编码了。众所周知，在LSTM中有两个隐含层状态$h$和$c$，所以在这里不直接使用上一个时刻传过来的状态，而是用历史所有时刻的状态信息，再与gates加权后输入到下一时刻。在论文中并没有直接使用gates作为权重，而是计算了一个新的权重，这里称作结构化attention：\n\\\\[\n\\begin{array}{} {k_t = W_h h_{t-1} + W_x x_t \\\\ \\tilde s_i^t = {\\rm softmax}(\\frac{h_i k_t^{T}}{\\sqrt {\\delta_k}})} \\end{array}\n\\\\]\n当然这还不是最终的权重，再通过加入gates，定义一个新的结构化intra-attention：\n\\\\[\ns_i^t = \\frac{g_i^t \\tilde s_i^t}{\\sum_i g_i^t}\n\\\\]\n上面两个式子我也不是很清楚怎么解释，反正最后就用这个权重来对历史状态进行编码：\n\\\\[\n\\left[ \\begin{array}{\\*{c}}{\\tilde h_t \\\\ \\tilde c_t}\\end{array} \\right] = \\sum_{i=1}^{t-1} {s_i^t \\cdot m_i} = \\sum_{i=1}^{t-1} {s_i^t \\cdot \\left[ \\begin{array}{\\*{c}}{h_i \\\\ c_i}\\end{array} \\right]}\n\\\\]\n最后将加权求和后的隐含层状态作为下一个时刻的隐含层输入，得到新的隐含层表示。\n\n## Predict Network\n最后就是预测下一个单词是什么了，这里并没有直接用下一时刻$t + 1$的隐含层输出来预测，还是采用了attention，但是存在一个问题，$g_j^{t+1}$的值依赖于$d_{t+1}$，也就是依赖于$x_{t+1}$，但是这是我们需要预测的，那怎么办呢？论文中就直接用另一套参数直接预测出一个临时的$d_{t+1}'$：\n\\\\[\nd_{t+1}' = {\\rm ReLU}(W_d'h_t + b_d')\n\\\\]\n最后对历史状态加权求和，然后用一个前馈神经网络预测下一个单词：\n\\\\[\nf(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}) = \\hat f([h_{l:t-1}, h_t])\n\\\\]\n\n# 实验\n---\n具体实验设置啥的去看论文吧，这里就贴几个结果图解释一下。\n\n![](4.jpg)\n上面这个是字符级别的语言模型的结果，PRPN取得了SOTA的结果。\n\n![](5.jpg)\n上面这个是词级别的语言模型的结果，除了那个用了4层LSTM和跨越连接的模型（参数多）外，PRPN效果是最好的。\n\n当然我最关心的还是无监督成分句法分析上面的结果：\n![](6.jpg)\n目前为止，无监督成分句法分析的标准做法还是用WSJ10数据集（也就是长度小于等于10的句子），然后用unlabeled F1评测。可以看到，PRPN效果只能说一般般，不是很好。\n\n其实我也很疑惑，这里的无监督句法分析全靠Parsing Network产生的句法距离来产生，但是一个关键问题是句法距离并没有监督，唯一的监督信号来自于最后Predict Network的语言模型，那么这个句法距离真的能够学习到真实的句法距离吗？我比较怀疑，不过效果证明，这个对语言模型还是有帮助的，对无监督成分句法分析的话不好说。\n\n# 总结\n---\n这篇论文几个review都给出了还算不错的评价，思想是不错的，但是和其中一个review观点一样，我觉得文章写得太烂了，一堆的笔误，逻辑很混乱，即使这已经是review后修改过的版本了，还是有一堆错误。\n\n过两天再看一篇ICLR2019的还是这个组的PRPN的改进版本，看看到底有何改进。不过真要搞无监督句法分析的话，还是老老实实去做聚类吧。","source":"_posts/iclr18-PRPN.md","raw":"---\ntitle: Neural Language Modeling by Jointly Learning Syntax and Lexicon\ndate: 2019-03-31 16:08:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- ICLR\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n**论文地址：**[Neural Language Modeling by Jointly Learning Syntax and Lexicon](https://arxiv.org/abs/1711.02013)\n**代码地址：**[github](https://github.com/yikangshen/PRPN)\n\n> 最近开始转向去看看一些无监督的成分句法分析论文，看看能否有一些启发QAQ。这篇博客摸鱼划水写了整整四天才写完，好累啊啊啊。\n\n# 介绍\n---\n一般来说，自然语言是由词汇和句法组成的，但是标准的语言模型一般都只用RNN对词汇进行建模，句法信息都是隐式的学习到的，没有办法显式地拿出来使用。所以本文提出的语言模型的变体可以结合结构上的attention，在中间过程中学习到结构信息，然后这层结构信息可以拿来生成句法树，用来做无监督的句法分析。\n\n那么为什么要做无监督的句法分析呢？主要原因还是一些小语种标注语料太少了甚至没有，不能用监督句法分析来做。而且无监督句法分析学到的信息还可以用来增强语言模型或者更为下游的任务的性能，使它们能更好的融合句法结构信息。\n\n本文提出的模型（PRPN）主要有如下三个组成部分：\n* **可微分的Parsing Network**。主要用来学习句子的句法距离（syntactic distance，这个在之前的博客中有讲到，是同一个组做的工作，链接：[Straight to the Tree: Constituency Parsing with Neural Syntactic Distance](https://godweiyang.com/2018/07/19/ConParsing-Syntactic-Distance/)），然后产生出门函数（gate function），也就是句子中每个词的权重，这样跑RNN的时候就没有必要考虑之前的所有信息了，只需要考虑句法距离最近的，也就是同一个短语中的信息。这里可微分后面会详细讲到，也就是不能直接预测离散的序列，不然梯度没办法反向传播，所以预测的是一个分布。\n* **Reading Network**。这个部分就和普通的RNN差不多，区别就是利用了上面的attention，然后每个时刻的输入不仅仅是上一个时刻的隐含层状态，还包括了历史所有相关的隐含层状态。\n* **Predict Network**。最后预测下一个词也不是直接采用当前时刻的隐含层输出，而是采用所有attention后的历史隐含层信息。\n\n最后模型训练好之后，用Parsing Network学习到的句法距离就可以产生出无监督的句法树，当然这里只能产生unlabeled的句法树，也就是说，无监督的成分句法分析都是只评测unlabeled F1值，因为nonterminal信息实在是无法无监督的预测出来，除非结合外部标注器或者人工制定规则？\n\n**由于我觉得这篇论文写作有点粗糙，很多地方写的很乱，甚至还有公式变量和图片不对应，所以下面的公式我有些自行修改过了，如果觉得有疑问的，可以参考原文，并且告诉我。**\n\n# 动机\n---\n下图是一个输入句子及其对应的句法树示例：\n![](1.png)\n其中实线表示成分句法树的结构，而虚线表示同一棵子树的若干个子结点之间的联系。我们用$(x_0, x_1, \\ldots, x_n)$表示输入句子，用$y_i$表示句法树中的某一个结点，用$r$表示根结点。定义$y_i$所表示的短语范围是$(l(y_i), r(y_i))$，例如在上图中$y_1$表示的范围是$(2, 6)$，所以有$l(y_1) = 2$和$r(y_1) = 6$。\n\n下图是模型的Reading Network和Predict Network大致框架：\n![](2.png)\n其中实线表示Reading Network中RNN每个时刻的输入依赖于之前的哪些时刻，虚线表示Predict Network中预测下一个词时需要考虑哪些时刻的隐含层输出(**这里有个小错误，图中最上面一行函数参数从$m_3$开始，但实际上虚线表明应该从$m_2$开始**)。\n\n首先是Parsing Network。这种和之前状态的连接在这里被叫做“跨越连接”（skip connection），而具体和哪些状态连接，就要用到门$g_i^t$，表示当前处在$t$时刻，和之前的第$i$时刻有没有关联，有就是1，没有就是0。在这里先定义变量$l_t$为$x_t$和之前最远到哪个位置的单词有关联，分成两种情况：\n* 如果$x_t$不是某个子树最左边的叶子结点，那么$l_t$就定义为它的父结点的最左边那个叶子结点，也就是$x_t$最左边那个兄弟结点。比如上图中的$x_4$，因为它在子树中位于中间，所以$l_4 = 3$，也就是说它最远和$x_3$有一定关联，而再往前的单词由于不在同一个短语里，关联就不大了。\n* 如果$x_t$是某一个子树$y_i$最左边的子结点，那么$l_t$就定义为$y_i$最左边那个兄弟结点的最左边的叶子结点。比如上图中$l_3 = 2$，因为$x_3$是$y_3$的最左边的子结点，而$y_2$是$y_3$最左边的兄弟结点，$x_2$又是$y_2$最左边的叶子结点，也就是说$x_3$最远和之前的$x_2$有关联，它们共同组成了更大的短语$y_1$。（**这里定义又不是很严谨，例如对于上面那个例子，$x_2$既是$y_1$又是$y_2$的最左子结点，这种情况下不能按照$y_2$来计算，因为它没有最左的兄弟结点！所以按照$y_1$来算的话得到$l_2 = 0$。**）\n\n根据这个$l_t$就可以将$g_i^t$定义为：\n\\\\[\ng_i^t = \\left\\{ {\\begin{array}{}{1,{l_t} \\le i < t}\\\\{0,0 < i < {l_t}}\\end{array}} \\right.\n\\\\]\n但是因为这是离散的决策，没法传递梯度，所以之后会介绍用概率来替代这里的0和1。\n\n然后是Reading Network。得到了gates之后，就可以修改RNN，用下面公式计算$t$时刻的隐含层状态：\n\\\\[\nm_t = h(x_t, m_0, \\ldots, m_{t-1}, g_0^t, \\ldots, g_{t-1}^t)\n\\\\]\n具体是怎么使用这个gates的，后面再具体介绍，反正只要知道多考虑了很多个历史状态就行了，每个状态都有一个权重，表示考虑了多少。\n\n最后就是Predict Network，用来预测下一个单词$x_{t+1}$，用到的是历史多个隐含层状态信息：\n\\\\[\np(x_{t+1} | x_0, \\ldots, x_t) \\approx p(x_{t+1} ; f(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}))\n\\\\]\n这里后面也会具体讲到。\n\n# 模型\n---\n**这里我不按照论文上的顺序讲，论文是倒序，变量定义都得看完整篇论文才出来，实在是看的太杂乱了。。。**\n## Parsing Network\n**第1步：**\n首先第一步要预测出相邻两个单词的句法距离，用宽度为$L+1$的卷积核来对单词进行卷积。例如要预测$x_i$和$x_{i-1}$的句法距离，那么就对$x_{i-L}, x_{i-L+1}, \\ldots, x_i$进行卷积（其实就是两层前馈神经网络），得到如下输出（**注意原文中这一段里的词向量$e$应该都是$x$，有误**）：\n\\\\[\n\\begin{array}{}{h_i = {\\rm ReLU}(W_c \\left[ {\\begin{array}{\\*{20}{c}}e_{i-L}\\\\e_{i-L+1}\\\\ \\cdots\\\\ e_i \\end{array}} \\right] + b_c)} \\\\ {d_i = {\\rm ReLU}(W_dh_i+b_d)}\\end{array}\n\\\\]\n当然了，第二行也可以看做是窗口大小为1的卷积核，第一个单词之前要补上$L-1$个0。\n\n最后得到的句法距离反映出了相邻两个词之间的语义相关程度，如果距离比较大，说明两个词可能位于两个不同的短语中，否则就位于同一个短语。一个形象化的句法距离就是相邻两个单词的最近公共祖先的高度。\n\n下面这个图就是一个例子，卷积核窗口宽度为2：\n![](3.png)\n\n**第2步：**\n然后就可以根据句法距离，求出$x_t$最远到哪个位置有联系。用$\\alpha_j^t$来衡量$x_t$与$x_j$的分别与前一个单词的句法距离的差距：\n\\\\[\n\\alpha_j^t = \\frac{ {\\rm hardtanh}((d_t - d_j) \\cdot \\tau) + 1}{2}\n\\\\]\n这里的${\\rm hardtanh}$就是当输入大于1或者小于-1时，截取掉，给它限制在-1到1这个范围内，所以最后$\\alpha$的范围就是0到1。可以看出，如果$\\alpha_j^t$很大，那么$d_t$就大于$d_j$，否则的话$d_t$就小于$d_j$。这也很合乎直观上的认知，如果$d_t$大于$d_j$，那么说明$x_j$和$x_{j-1}$的最近公共祖先的高度比较低，那么说明$x_j$和$x_t$在同一棵子树中，差值自然大，反之的话$x_j$是当前子树的最左边的子结点，差值就很小。\n\n所以模型只需要一步步往左寻找第一个$\\alpha_j^t$最接近0的点，也就是之前提到过的$l_t$。为了实现这个目标，可以定义$l_t = i$的概率为：\n\\\\[\np(l_t = i | x_0, \\ldots, x_t) = (1 - \\alpha_i^t) \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n为什么这么设计呢？其实还是很有道理的。概率越大的话，说明$\\alpha_i^t$越小，而其他的$\\alpha_j^t$越大，这就印证了上面提出的观点。而如果取$l_t > i$的话，$1 - \\alpha_i^t$一定很小，会拉低概率；反之取$l_t < i$的话，会乘上一个很小的项$\\alpha_i^t$，也会拉低概率。所以取$l_t = i$就是最优的。\n\n**第3步：**\n我们的最终目的是求出门$g_i^t$，也就是$x_t$与$x_i$的相关度。在之前的动机中，直接将$l_t$之后的设为1，之前的设为0，但是这样是离散序列，无法传播梯度，所以这里采用另一种方法来求。注意到只有$p(l_t = i | x_0, \\ldots, x_t)$接近于1，而其他的概率都接近于0，所以只需要用概率密度函数来作为$g_i^t$就行了：\n\\\\[\ng_i^t = P(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n注意到这个概率密度函数在$i < l_t$时值基本很小接近于0，而大于等于它时很大，越来越接近于1。这和设计的初衷已经很像了，所以可以近似用来作为$g_i^t$。\n\n**这里要提几点证明，可看可不看。**\n\n**证明开始**\n\n---\n\n\n首先这个概率$p(l_t = i | x_0, \\ldots, x_t)$的形式其实是一个狄利克雷过程，有两个特殊值要定义一下，一个是$l_t = t-1$时，概率为：\n\\\\[\np(l_t = t - 1 | x_0, \\ldots, x_t) = (1 - \\alpha_{t - 1}^t)\n\\\\]\n还有就是当$l_t = 0$时，因为$d_0$实际不存在，所以定义为句法距离无穷大，那么$\\alpha_0^t$定义为0，所以概率为：\n\\\\[\np(l_t = 0 | x_0, \\ldots, x_t) = \\prod_{j=1}^{t-1} {\\alpha_j^t}\n\\\\]\n然后可以求出$g_i^t$的期望（**这里论文中又写的一塌糊涂，符号定义都不统一。。。**）：\n\\\\[\n\\mathbb E(g_i^t) = \\prod_{j=1}^{t-1} {\\alpha_j^t} + (1 - \\alpha_1^t)\\prod_{j=2}^{t-1} {\\alpha_j^t} + \\ldots + (1 - \\alpha_i^t)\\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n进一步可以写为：\n\\\\[\n\\mathbb E(g_i^t) = \\sum_{j=0}^i {p(l_t = j | x_0, \\dots, x_t)} = P(l_t \\le i)\n\\\\]\n上面的求和裂项相消可以得到：\n\\\\[\nP(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n这里也可以验证出$P(l_t < t) = 1$，所以最终得到下面的门是正确的：\n\\\\[\ng_i^t = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}\n\\\\]\n\n然后要证明的就是根据这个策略求出的两个单词的关联区间没有交叉（但是可以完全覆盖）。首先放宽一下条件，证明当$\\alpha_j^t$只取0或者1时，性质成立，也就是定义（**这里原文又打错了。。。**）：\n\\\\[\n\\alpha_j^t = \\frac{ {\\rm sign}(d_t - d_j) + 1}{2}\n\\\\]\n也就是在原来的定义中令$\\tau$为正无穷。这样的话如果$d_t > d_j$，那么$\\alpha_j^t$就是1，否则就是0。放宽了条件之后，$g_i^t$取值就只有1和0了，所以求出的$l_t$一定是满足句法距离$d_i > d_t$所有位置中最右边的一个。而对于所有的$l_t < i < t$，都满足$d_i < d_t$。证明也很简单，假设存在两个单词$x_v$和$x_n$，其中$v < n$，它俩的关联区间交叉了，那么假设$x_v$的$l_t$为$u$，而$x_n$的$l_t$为$m$，所以$u < m < v < n$。那么根据定义，有：\n\\\\[\n\\begin{array}{} {d_u > d_v > d_m \\\\ d_m > d_n > d_v} \\end{array}\n\\\\]\n这两个式子显然矛盾，所以证明了在宽松的条件下，这个不交叉的性质是成立的。\n\n另一个极端是令$\\tau = 0$，这种情况下$\\alpha_j^t = \\frac{1}{2}$，最终算下来$g_i^t$是一个首项为$\\frac{1}{2^{t-1}}$公比为2的等比数列。这里的话论文里说最终会形成一棵所有叶子结点都直接连接在根结点上面的句法树，但是我是没看出来为什么，首先这种情况下句法距离$d$对最终的损失函数没有影响了，所以梯度无法传播回来，句法距离$d$应该只受到词向量影响了，最终就是一个普通的语言模型，句法距离最终会是什么样子谁也不知道。\n\n在具体实现时，将$\\tau$设为一个中间值，但是这样会产生交叉的关联区间，所以测试的时候再将其设为正无穷。\n\n**证明结束**\n\n---\n\n## Reading Network\n上面的Parsing Network求了半天就是为了得到这个gates $g_j^t$，然后怎么使用呢？既然是语言模型，下面当然要用LSTM来对句子进行编码了。众所周知，在LSTM中有两个隐含层状态$h$和$c$，所以在这里不直接使用上一个时刻传过来的状态，而是用历史所有时刻的状态信息，再与gates加权后输入到下一时刻。在论文中并没有直接使用gates作为权重，而是计算了一个新的权重，这里称作结构化attention：\n\\\\[\n\\begin{array}{} {k_t = W_h h_{t-1} + W_x x_t \\\\ \\tilde s_i^t = {\\rm softmax}(\\frac{h_i k_t^{T}}{\\sqrt {\\delta_k}})} \\end{array}\n\\\\]\n当然这还不是最终的权重，再通过加入gates，定义一个新的结构化intra-attention：\n\\\\[\ns_i^t = \\frac{g_i^t \\tilde s_i^t}{\\sum_i g_i^t}\n\\\\]\n上面两个式子我也不是很清楚怎么解释，反正最后就用这个权重来对历史状态进行编码：\n\\\\[\n\\left[ \\begin{array}{\\*{c}}{\\tilde h_t \\\\ \\tilde c_t}\\end{array} \\right] = \\sum_{i=1}^{t-1} {s_i^t \\cdot m_i} = \\sum_{i=1}^{t-1} {s_i^t \\cdot \\left[ \\begin{array}{\\*{c}}{h_i \\\\ c_i}\\end{array} \\right]}\n\\\\]\n最后将加权求和后的隐含层状态作为下一个时刻的隐含层输入，得到新的隐含层表示。\n\n## Predict Network\n最后就是预测下一个单词是什么了，这里并没有直接用下一时刻$t + 1$的隐含层输出来预测，还是采用了attention，但是存在一个问题，$g_j^{t+1}$的值依赖于$d_{t+1}$，也就是依赖于$x_{t+1}$，但是这是我们需要预测的，那怎么办呢？论文中就直接用另一套参数直接预测出一个临时的$d_{t+1}'$：\n\\\\[\nd_{t+1}' = {\\rm ReLU}(W_d'h_t + b_d')\n\\\\]\n最后对历史状态加权求和，然后用一个前馈神经网络预测下一个单词：\n\\\\[\nf(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}) = \\hat f([h_{l:t-1}, h_t])\n\\\\]\n\n# 实验\n---\n具体实验设置啥的去看论文吧，这里就贴几个结果图解释一下。\n\n![](4.jpg)\n上面这个是字符级别的语言模型的结果，PRPN取得了SOTA的结果。\n\n![](5.jpg)\n上面这个是词级别的语言模型的结果，除了那个用了4层LSTM和跨越连接的模型（参数多）外，PRPN效果是最好的。\n\n当然我最关心的还是无监督成分句法分析上面的结果：\n![](6.jpg)\n目前为止，无监督成分句法分析的标准做法还是用WSJ10数据集（也就是长度小于等于10的句子），然后用unlabeled F1评测。可以看到，PRPN效果只能说一般般，不是很好。\n\n其实我也很疑惑，这里的无监督句法分析全靠Parsing Network产生的句法距离来产生，但是一个关键问题是句法距离并没有监督，唯一的监督信号来自于最后Predict Network的语言模型，那么这个句法距离真的能够学习到真实的句法距离吗？我比较怀疑，不过效果证明，这个对语言模型还是有帮助的，对无监督成分句法分析的话不好说。\n\n# 总结\n---\n这篇论文几个review都给出了还算不错的评价，思想是不错的，但是和其中一个review观点一样，我觉得文章写得太烂了，一堆的笔误，逻辑很混乱，即使这已经是review后修改过的版本了，还是有一堆错误。\n\n过两天再看一篇ICLR2019的还是这个组的PRPN的改进版本，看看到底有何改进。不过真要搞无监督句法分析的话，还是老老实实去做聚类吧。","slug":"iclr18-PRPN","published":1,"updated":"2019-07-20T04:17:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hl00937swe3t66bt30","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/abs/1711.02013\" target=\"_blank\" rel=\"noopener\">Neural Language Modeling by Jointly Learning Syntax and Lexicon</a><br><strong>代码地址：</strong><a href=\"https://github.com/yikangshen/PRPN\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<blockquote>\n<p>最近开始转向去看看一些无监督的成分句法分析论文，看看能否有一些启发QAQ。这篇博客摸鱼划水写了整整四天才写完，好累啊啊啊。</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>一般来说，自然语言是由词汇和句法组成的，但是标准的语言模型一般都只用RNN对词汇进行建模，句法信息都是隐式的学习到的，没有办法显式地拿出来使用。所以本文提出的语言模型的变体可以结合结构上的attention，在中间过程中学习到结构信息，然后这层结构信息可以拿来生成句法树，用来做无监督的句法分析。</p>\n<p>那么为什么要做无监督的句法分析呢？主要原因还是一些小语种标注语料太少了甚至没有，不能用监督句法分析来做。而且无监督句法分析学到的信息还可以用来增强语言模型或者更为下游的任务的性能，使它们能更好的融合句法结构信息。</p>\n<p>本文提出的模型（PRPN）主要有如下三个组成部分：</p>\n<ul>\n<li><strong>可微分的Parsing Network</strong>。主要用来学习句子的句法距离（syntactic distance，这个在之前的博客中有讲到，是同一个组做的工作，链接：<a href=\"https://godweiyang.com/2018/07/19/ConParsing-Syntactic-Distance/\">Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</a>），然后产生出门函数（gate function），也就是句子中每个词的权重，这样跑RNN的时候就没有必要考虑之前的所有信息了，只需要考虑句法距离最近的，也就是同一个短语中的信息。这里可微分后面会详细讲到，也就是不能直接预测离散的序列，不然梯度没办法反向传播，所以预测的是一个分布。</li>\n<li><strong>Reading Network</strong>。这个部分就和普通的RNN差不多，区别就是利用了上面的attention，然后每个时刻的输入不仅仅是上一个时刻的隐含层状态，还包括了历史所有相关的隐含层状态。</li>\n<li><strong>Predict Network</strong>。最后预测下一个词也不是直接采用当前时刻的隐含层输出，而是采用所有attention后的历史隐含层信息。</li>\n</ul>\n<p>最后模型训练好之后，用Parsing Network学习到的句法距离就可以产生出无监督的句法树，当然这里只能产生unlabeled的句法树，也就是说，无监督的成分句法分析都是只评测unlabeled F1值，因为nonterminal信息实在是无法无监督的预测出来，除非结合外部标注器或者人工制定规则？</p>\n<p><strong>由于我觉得这篇论文写作有点粗糙，很多地方写的很乱，甚至还有公式变量和图片不对应，所以下面的公式我有些自行修改过了，如果觉得有疑问的，可以参考原文，并且告诉我。</strong></p>\n<h1 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h1><hr>\n<p>下图是一个输入句子及其对应的句法树示例：<br><img src=\"1.png\" alt><br>其中实线表示成分句法树的结构，而虚线表示同一棵子树的若干个子结点之间的联系。我们用$(x_0, x_1, \\ldots, x_n)$表示输入句子，用$y_i$表示句法树中的某一个结点，用$r$表示根结点。定义$y_i$所表示的短语范围是$(l(y_i), r(y_i))$，例如在上图中$y_1$表示的范围是$(2, 6)$，所以有$l(y_1) = 2$和$r(y_1) = 6$。</p>\n<p>下图是模型的Reading Network和Predict Network大致框架：<br><img src=\"2.png\" alt><br>其中实线表示Reading Network中RNN每个时刻的输入依赖于之前的哪些时刻，虚线表示Predict Network中预测下一个词时需要考虑哪些时刻的隐含层输出(<strong>这里有个小错误，图中最上面一行函数参数从$m_3$开始，但实际上虚线表明应该从$m_2$开始</strong>)。</p>\n<p>首先是Parsing Network。这种和之前状态的连接在这里被叫做“跨越连接”（skip connection），而具体和哪些状态连接，就要用到门$g_i^t$，表示当前处在$t$时刻，和之前的第$i$时刻有没有关联，有就是1，没有就是0。在这里先定义变量$l_t$为$x_t$和之前最远到哪个位置的单词有关联，分成两种情况：</p>\n<ul>\n<li>如果$x_t$不是某个子树最左边的叶子结点，那么$l_t$就定义为它的父结点的最左边那个叶子结点，也就是$x_t$最左边那个兄弟结点。比如上图中的$x_4$，因为它在子树中位于中间，所以$l_4 = 3$，也就是说它最远和$x_3$有一定关联，而再往前的单词由于不在同一个短语里，关联就不大了。</li>\n<li>如果$x_t$是某一个子树$y_i$最左边的子结点，那么$l_t$就定义为$y_i$最左边那个兄弟结点的最左边的叶子结点。比如上图中$l_3 = 2$，因为$x_3$是$y_3$的最左边的子结点，而$y_2$是$y_3$最左边的兄弟结点，$x_2$又是$y_2$最左边的叶子结点，也就是说$x_3$最远和之前的$x_2$有关联，它们共同组成了更大的短语$y_1$。（<strong>这里定义又不是很严谨，例如对于上面那个例子，$x_2$既是$y_1$又是$y_2$的最左子结点，这种情况下不能按照$y_2$来计算，因为它没有最左的兄弟结点！所以按照$y_1$来算的话得到$l_2 = 0$。</strong>）</li>\n</ul>\n<p>根据这个$l_t$就可以将$g_i^t$定义为：<br>\\[<br>g_i^t = \\left\\{ {\\begin{array}{}{1,{l_t} \\le i &lt; t}\\\\{0,0 &lt; i &lt; {l_t}}\\end{array}} \\right.<br>\\]<br>但是因为这是离散的决策，没法传递梯度，所以之后会介绍用概率来替代这里的0和1。</p>\n<p>然后是Reading Network。得到了gates之后，就可以修改RNN，用下面公式计算$t$时刻的隐含层状态：<br>\\[<br>m_t = h(x_t, m_0, \\ldots, m_{t-1}, g_0^t, \\ldots, g_{t-1}^t)<br>\\]<br>具体是怎么使用这个gates的，后面再具体介绍，反正只要知道多考虑了很多个历史状态就行了，每个状态都有一个权重，表示考虑了多少。</p>\n<p>最后就是Predict Network，用来预测下一个单词$x_{t+1}$，用到的是历史多个隐含层状态信息：<br>\\[<br>p(x_{t+1} | x_0, \\ldots, x_t) \\approx p(x_{t+1} ; f(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}))<br>\\]<br>这里后面也会具体讲到。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p><strong>这里我不按照论文上的顺序讲，论文是倒序，变量定义都得看完整篇论文才出来，实在是看的太杂乱了。。。</strong></p>\n<h2 id=\"Parsing-Network\"><a href=\"#Parsing-Network\" class=\"headerlink\" title=\"Parsing Network\"></a>Parsing Network</h2><p><strong>第1步：</strong><br>首先第一步要预测出相邻两个单词的句法距离，用宽度为$L+1$的卷积核来对单词进行卷积。例如要预测$x_i$和$x_{i-1}$的句法距离，那么就对$x_{i-L}, x_{i-L+1}, \\ldots, x_i$进行卷积（其实就是两层前馈神经网络），得到如下输出（<strong>注意原文中这一段里的词向量$e$应该都是$x$，有误</strong>）：<br>\\[<br>\\begin{array}{}{h_i = {\\rm ReLU}(W_c \\left[ {\\begin{array}{*{20}{c}}e_{i-L}\\\\e_{i-L+1}\\\\ \\cdots\\\\ e_i \\end{array}} \\right] + b_c)} \\\\ {d_i = {\\rm ReLU}(W_dh_i+b_d)}\\end{array}<br>\\]<br>当然了，第二行也可以看做是窗口大小为1的卷积核，第一个单词之前要补上$L-1$个0。</p>\n<p>最后得到的句法距离反映出了相邻两个词之间的语义相关程度，如果距离比较大，说明两个词可能位于两个不同的短语中，否则就位于同一个短语。一个形象化的句法距离就是相邻两个单词的最近公共祖先的高度。</p>\n<p>下面这个图就是一个例子，卷积核窗口宽度为2：<br><img src=\"3.png\" alt></p>\n<p><strong>第2步：</strong><br>然后就可以根据句法距离，求出$x_t$最远到哪个位置有联系。用$\\alpha_j^t$来衡量$x_t$与$x_j$的分别与前一个单词的句法距离的差距：<br>\\[<br>\\alpha_j^t = \\frac{ {\\rm hardtanh}((d_t - d_j) \\cdot \\tau) + 1}{2}<br>\\]<br>这里的${\\rm hardtanh}$就是当输入大于1或者小于-1时，截取掉，给它限制在-1到1这个范围内，所以最后$\\alpha$的范围就是0到1。可以看出，如果$\\alpha_j^t$很大，那么$d_t$就大于$d_j$，否则的话$d_t$就小于$d_j$。这也很合乎直观上的认知，如果$d_t$大于$d_j$，那么说明$x_j$和$x_{j-1}$的最近公共祖先的高度比较低，那么说明$x_j$和$x_t$在同一棵子树中，差值自然大，反之的话$x_j$是当前子树的最左边的子结点，差值就很小。</p>\n<p>所以模型只需要一步步往左寻找第一个$\\alpha_j^t$最接近0的点，也就是之前提到过的$l_t$。为了实现这个目标，可以定义$l_t = i$的概率为：<br>\\[<br>p(l_t = i | x_0, \\ldots, x_t) = (1 - \\alpha_i^t) \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>为什么这么设计呢？其实还是很有道理的。概率越大的话，说明$\\alpha_i^t$越小，而其他的$\\alpha_j^t$越大，这就印证了上面提出的观点。而如果取$l_t &gt; i$的话，$1 - \\alpha_i^t$一定很小，会拉低概率；反之取$l_t &lt; i$的话，会乘上一个很小的项$\\alpha_i^t$，也会拉低概率。所以取$l_t = i$就是最优的。</p>\n<p><strong>第3步：</strong><br>我们的最终目的是求出门$g_i^t$，也就是$x_t$与$x_i$的相关度。在之前的动机中，直接将$l_t$之后的设为1，之前的设为0，但是这样是离散序列，无法传播梯度，所以这里采用另一种方法来求。注意到只有$p(l_t = i | x_0, \\ldots, x_t)$接近于1，而其他的概率都接近于0，所以只需要用概率密度函数来作为$g_i^t$就行了：<br>\\[<br>g_i^t = P(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>注意到这个概率密度函数在$i &lt; l_t$时值基本很小接近于0，而大于等于它时很大，越来越接近于1。这和设计的初衷已经很像了，所以可以近似用来作为$g_i^t$。</p>\n<p><strong>这里要提几点证明，可看可不看。</strong></p>\n<p><strong>证明开始</strong></p>\n<hr>\n<p>首先这个概率$p(l_t = i | x_0, \\ldots, x_t)$的形式其实是一个狄利克雷过程，有两个特殊值要定义一下，一个是$l_t = t-1$时，概率为：<br>\\[<br>p(l_t = t - 1 | x_0, \\ldots, x_t) = (1 - \\alpha_{t - 1}^t)<br>\\]<br>还有就是当$l_t = 0$时，因为$d_0$实际不存在，所以定义为句法距离无穷大，那么$\\alpha_0^t$定义为0，所以概率为：<br>\\[<br>p(l_t = 0 | x_0, \\ldots, x_t) = \\prod_{j=1}^{t-1} {\\alpha_j^t}<br>\\]<br>然后可以求出$g_i^t$的期望（<strong>这里论文中又写的一塌糊涂，符号定义都不统一。。。</strong>）：<br>\\[<br>\\mathbb E(g_i^t) = \\prod_{j=1}^{t-1} {\\alpha_j^t} + (1 - \\alpha_1^t)\\prod_{j=2}^{t-1} {\\alpha_j^t} + \\ldots + (1 - \\alpha_i^t)\\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>进一步可以写为：<br>\\[<br>\\mathbb E(g_i^t) = \\sum_{j=0}^i {p(l_t = j | x_0, \\dots, x_t)} = P(l_t \\le i)<br>\\]<br>上面的求和裂项相消可以得到：<br>\\[<br>P(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>这里也可以验证出$P(l_t &lt; t) = 1$，所以最终得到下面的门是正确的：<br>\\[<br>g_i^t = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]</p>\n<p>然后要证明的就是根据这个策略求出的两个单词的关联区间没有交叉（但是可以完全覆盖）。首先放宽一下条件，证明当$\\alpha_j^t$只取0或者1时，性质成立，也就是定义（<strong>这里原文又打错了。。。</strong>）：<br>\\[<br>\\alpha_j^t = \\frac{ {\\rm sign}(d_t - d_j) + 1}{2}<br>\\]<br>也就是在原来的定义中令$\\tau$为正无穷。这样的话如果$d_t &gt; d_j$，那么$\\alpha_j^t$就是1，否则就是0。放宽了条件之后，$g_i^t$取值就只有1和0了，所以求出的$l_t$一定是满足句法距离$d_i &gt; d_t$所有位置中最右边的一个。而对于所有的$l_t &lt; i &lt; t$，都满足$d_i &lt; d_t$。证明也很简单，假设存在两个单词$x_v$和$x_n$，其中$v &lt; n$，它俩的关联区间交叉了，那么假设$x_v$的$l_t$为$u$，而$x_n$的$l_t$为$m$，所以$u &lt; m &lt; v &lt; n$。那么根据定义，有：<br>\\[<br>\\begin{array}{} {d_u &gt; d_v &gt; d_m \\\\ d_m &gt; d_n &gt; d_v} \\end{array}<br>\\]<br>这两个式子显然矛盾，所以证明了在宽松的条件下，这个不交叉的性质是成立的。</p>\n<p>另一个极端是令$\\tau = 0$，这种情况下$\\alpha_j^t = \\frac{1}{2}$，最终算下来$g_i^t$是一个首项为$\\frac{1}{2^{t-1}}$公比为2的等比数列。这里的话论文里说最终会形成一棵所有叶子结点都直接连接在根结点上面的句法树，但是我是没看出来为什么，首先这种情况下句法距离$d$对最终的损失函数没有影响了，所以梯度无法传播回来，句法距离$d$应该只受到词向量影响了，最终就是一个普通的语言模型，句法距离最终会是什么样子谁也不知道。</p>\n<p>在具体实现时，将$\\tau$设为一个中间值，但是这样会产生交叉的关联区间，所以测试的时候再将其设为正无穷。</p>\n<p><strong>证明结束</strong></p>\n<hr>\n<h2 id=\"Reading-Network\"><a href=\"#Reading-Network\" class=\"headerlink\" title=\"Reading Network\"></a>Reading Network</h2><p>上面的Parsing Network求了半天就是为了得到这个gates $g_j^t$，然后怎么使用呢？既然是语言模型，下面当然要用LSTM来对句子进行编码了。众所周知，在LSTM中有两个隐含层状态$h$和$c$，所以在这里不直接使用上一个时刻传过来的状态，而是用历史所有时刻的状态信息，再与gates加权后输入到下一时刻。在论文中并没有直接使用gates作为权重，而是计算了一个新的权重，这里称作结构化attention：<br>\\[<br>\\begin{array}{} {k_t = W_h h_{t-1} + W_x x_t \\\\ \\tilde s_i^t = {\\rm softmax}(\\frac{h_i k_t^{T}}{\\sqrt {\\delta_k}})} \\end{array}<br>\\]<br>当然这还不是最终的权重，再通过加入gates，定义一个新的结构化intra-attention：<br>\\[<br>s_i^t = \\frac{g_i^t \\tilde s_i^t}{\\sum_i g_i^t}<br>\\]<br>上面两个式子我也不是很清楚怎么解释，反正最后就用这个权重来对历史状态进行编码：<br>\\[<br>\\left[ \\begin{array}{*{c}}{\\tilde h_t \\\\ \\tilde c_t}\\end{array} \\right] = \\sum_{i=1}^{t-1} {s_i^t \\cdot m_i} = \\sum_{i=1}^{t-1} {s_i^t \\cdot \\left[ \\begin{array}{*{c}}{h_i \\\\ c_i}\\end{array} \\right]}<br>\\]<br>最后将加权求和后的隐含层状态作为下一个时刻的隐含层输入，得到新的隐含层表示。</p>\n<h2 id=\"Predict-Network\"><a href=\"#Predict-Network\" class=\"headerlink\" title=\"Predict Network\"></a>Predict Network</h2><p>最后就是预测下一个单词是什么了，这里并没有直接用下一时刻$t + 1$的隐含层输出来预测，还是采用了attention，但是存在一个问题，$g_j^{t+1}$的值依赖于$d_{t+1}$，也就是依赖于$x_{t+1}$，但是这是我们需要预测的，那怎么办呢？论文中就直接用另一套参数直接预测出一个临时的$d_{t+1}’$：<br>\\[<br>d_{t+1}’ = {\\rm ReLU}(W_d’h_t + b_d’)<br>\\]<br>最后对历史状态加权求和，然后用一个前馈神经网络预测下一个单词：<br>\\[<br>f(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}) = \\hat f([h_{l:t-1}, h_t])<br>\\]</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>具体实验设置啥的去看论文吧，这里就贴几个结果图解释一下。</p>\n<p><img src=\"4.jpg\" alt><br>上面这个是字符级别的语言模型的结果，PRPN取得了SOTA的结果。</p>\n<p><img src=\"5.jpg\" alt><br>上面这个是词级别的语言模型的结果，除了那个用了4层LSTM和跨越连接的模型（参数多）外，PRPN效果是最好的。</p>\n<p>当然我最关心的还是无监督成分句法分析上面的结果：<br><img src=\"6.jpg\" alt><br>目前为止，无监督成分句法分析的标准做法还是用WSJ10数据集（也就是长度小于等于10的句子），然后用unlabeled F1评测。可以看到，PRPN效果只能说一般般，不是很好。</p>\n<p>其实我也很疑惑，这里的无监督句法分析全靠Parsing Network产生的句法距离来产生，但是一个关键问题是句法距离并没有监督，唯一的监督信号来自于最后Predict Network的语言模型，那么这个句法距离真的能够学习到真实的句法距离吗？我比较怀疑，不过效果证明，这个对语言模型还是有帮助的，对无监督成分句法分析的话不好说。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文几个review都给出了还算不错的评价，思想是不错的，但是和其中一个review观点一样，我觉得文章写得太烂了，一堆的笔误，逻辑很混乱，即使这已经是review后修改过的版本了，还是有一堆错误。</p>\n<p>过两天再看一篇ICLR2019的还是这个组的PRPN的改进版本，看看到底有何改进。不过真要搞无监督句法分析的话，还是老老实实去做聚类吧。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=32507551&auto=1&height=66\"></iframe></div>\n\n<p><strong>论文地址：</strong><a href=\"https://arxiv.org/abs/1711.02013\" target=\"_blank\" rel=\"noopener\">Neural Language Modeling by Jointly Learning Syntax and Lexicon</a><br><strong>代码地址：</strong><a href=\"https://github.com/yikangshen/PRPN\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<blockquote>\n<p>最近开始转向去看看一些无监督的成分句法分析论文，看看能否有一些启发QAQ。这篇博客摸鱼划水写了整整四天才写完，好累啊啊啊。</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>一般来说，自然语言是由词汇和句法组成的，但是标准的语言模型一般都只用RNN对词汇进行建模，句法信息都是隐式的学习到的，没有办法显式地拿出来使用。所以本文提出的语言模型的变体可以结合结构上的attention，在中间过程中学习到结构信息，然后这层结构信息可以拿来生成句法树，用来做无监督的句法分析。</p>\n<p>那么为什么要做无监督的句法分析呢？主要原因还是一些小语种标注语料太少了甚至没有，不能用监督句法分析来做。而且无监督句法分析学到的信息还可以用来增强语言模型或者更为下游的任务的性能，使它们能更好的融合句法结构信息。</p>\n<p>本文提出的模型（PRPN）主要有如下三个组成部分：</p>\n<ul>\n<li><strong>可微分的Parsing Network</strong>。主要用来学习句子的句法距离（syntactic distance，这个在之前的博客中有讲到，是同一个组做的工作，链接：<a href=\"https://godweiyang.com/2018/07/19/ConParsing-Syntactic-Distance/\">Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</a>），然后产生出门函数（gate function），也就是句子中每个词的权重，这样跑RNN的时候就没有必要考虑之前的所有信息了，只需要考虑句法距离最近的，也就是同一个短语中的信息。这里可微分后面会详细讲到，也就是不能直接预测离散的序列，不然梯度没办法反向传播，所以预测的是一个分布。</li>\n<li><strong>Reading Network</strong>。这个部分就和普通的RNN差不多，区别就是利用了上面的attention，然后每个时刻的输入不仅仅是上一个时刻的隐含层状态，还包括了历史所有相关的隐含层状态。</li>\n<li><strong>Predict Network</strong>。最后预测下一个词也不是直接采用当前时刻的隐含层输出，而是采用所有attention后的历史隐含层信息。</li>\n</ul>\n<p>最后模型训练好之后，用Parsing Network学习到的句法距离就可以产生出无监督的句法树，当然这里只能产生unlabeled的句法树，也就是说，无监督的成分句法分析都是只评测unlabeled F1值，因为nonterminal信息实在是无法无监督的预测出来，除非结合外部标注器或者人工制定规则？</p>\n<p><strong>由于我觉得这篇论文写作有点粗糙，很多地方写的很乱，甚至还有公式变量和图片不对应，所以下面的公式我有些自行修改过了，如果觉得有疑问的，可以参考原文，并且告诉我。</strong></p>\n<h1 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h1><hr>\n<p>下图是一个输入句子及其对应的句法树示例：<br><img src=\"1.png\" alt><br>其中实线表示成分句法树的结构，而虚线表示同一棵子树的若干个子结点之间的联系。我们用$(x_0, x_1, \\ldots, x_n)$表示输入句子，用$y_i$表示句法树中的某一个结点，用$r$表示根结点。定义$y_i$所表示的短语范围是$(l(y_i), r(y_i))$，例如在上图中$y_1$表示的范围是$(2, 6)$，所以有$l(y_1) = 2$和$r(y_1) = 6$。</p>\n<p>下图是模型的Reading Network和Predict Network大致框架：<br><img src=\"2.png\" alt><br>其中实线表示Reading Network中RNN每个时刻的输入依赖于之前的哪些时刻，虚线表示Predict Network中预测下一个词时需要考虑哪些时刻的隐含层输出(<strong>这里有个小错误，图中最上面一行函数参数从$m_3$开始，但实际上虚线表明应该从$m_2$开始</strong>)。</p>\n<p>首先是Parsing Network。这种和之前状态的连接在这里被叫做“跨越连接”（skip connection），而具体和哪些状态连接，就要用到门$g_i^t$，表示当前处在$t$时刻，和之前的第$i$时刻有没有关联，有就是1，没有就是0。在这里先定义变量$l_t$为$x_t$和之前最远到哪个位置的单词有关联，分成两种情况：</p>\n<ul>\n<li>如果$x_t$不是某个子树最左边的叶子结点，那么$l_t$就定义为它的父结点的最左边那个叶子结点，也就是$x_t$最左边那个兄弟结点。比如上图中的$x_4$，因为它在子树中位于中间，所以$l_4 = 3$，也就是说它最远和$x_3$有一定关联，而再往前的单词由于不在同一个短语里，关联就不大了。</li>\n<li>如果$x_t$是某一个子树$y_i$最左边的子结点，那么$l_t$就定义为$y_i$最左边那个兄弟结点的最左边的叶子结点。比如上图中$l_3 = 2$，因为$x_3$是$y_3$的最左边的子结点，而$y_2$是$y_3$最左边的兄弟结点，$x_2$又是$y_2$最左边的叶子结点，也就是说$x_3$最远和之前的$x_2$有关联，它们共同组成了更大的短语$y_1$。（<strong>这里定义又不是很严谨，例如对于上面那个例子，$x_2$既是$y_1$又是$y_2$的最左子结点，这种情况下不能按照$y_2$来计算，因为它没有最左的兄弟结点！所以按照$y_1$来算的话得到$l_2 = 0$。</strong>）</li>\n</ul>\n<p>根据这个$l_t$就可以将$g_i^t$定义为：<br>\\[<br>g_i^t = \\left\\{ {\\begin{array}{}{1,{l_t} \\le i &lt; t}\\\\{0,0 &lt; i &lt; {l_t}}\\end{array}} \\right.<br>\\]<br>但是因为这是离散的决策，没法传递梯度，所以之后会介绍用概率来替代这里的0和1。</p>\n<p>然后是Reading Network。得到了gates之后，就可以修改RNN，用下面公式计算$t$时刻的隐含层状态：<br>\\[<br>m_t = h(x_t, m_0, \\ldots, m_{t-1}, g_0^t, \\ldots, g_{t-1}^t)<br>\\]<br>具体是怎么使用这个gates的，后面再具体介绍，反正只要知道多考虑了很多个历史状态就行了，每个状态都有一个权重，表示考虑了多少。</p>\n<p>最后就是Predict Network，用来预测下一个单词$x_{t+1}$，用到的是历史多个隐含层状态信息：<br>\\[<br>p(x_{t+1} | x_0, \\ldots, x_t) \\approx p(x_{t+1} ; f(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}))<br>\\]<br>这里后面也会具体讲到。</p>\n<h1 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h1><hr>\n<p><strong>这里我不按照论文上的顺序讲，论文是倒序，变量定义都得看完整篇论文才出来，实在是看的太杂乱了。。。</strong></p>\n<h2 id=\"Parsing-Network\"><a href=\"#Parsing-Network\" class=\"headerlink\" title=\"Parsing Network\"></a>Parsing Network</h2><p><strong>第1步：</strong><br>首先第一步要预测出相邻两个单词的句法距离，用宽度为$L+1$的卷积核来对单词进行卷积。例如要预测$x_i$和$x_{i-1}$的句法距离，那么就对$x_{i-L}, x_{i-L+1}, \\ldots, x_i$进行卷积（其实就是两层前馈神经网络），得到如下输出（<strong>注意原文中这一段里的词向量$e$应该都是$x$，有误</strong>）：<br>\\[<br>\\begin{array}{}{h_i = {\\rm ReLU}(W_c \\left[ {\\begin{array}{*{20}{c}}e_{i-L}\\\\e_{i-L+1}\\\\ \\cdots\\\\ e_i \\end{array}} \\right] + b_c)} \\\\ {d_i = {\\rm ReLU}(W_dh_i+b_d)}\\end{array}<br>\\]<br>当然了，第二行也可以看做是窗口大小为1的卷积核，第一个单词之前要补上$L-1$个0。</p>\n<p>最后得到的句法距离反映出了相邻两个词之间的语义相关程度，如果距离比较大，说明两个词可能位于两个不同的短语中，否则就位于同一个短语。一个形象化的句法距离就是相邻两个单词的最近公共祖先的高度。</p>\n<p>下面这个图就是一个例子，卷积核窗口宽度为2：<br><img src=\"3.png\" alt></p>\n<p><strong>第2步：</strong><br>然后就可以根据句法距离，求出$x_t$最远到哪个位置有联系。用$\\alpha_j^t$来衡量$x_t$与$x_j$的分别与前一个单词的句法距离的差距：<br>\\[<br>\\alpha_j^t = \\frac{ {\\rm hardtanh}((d_t - d_j) \\cdot \\tau) + 1}{2}<br>\\]<br>这里的${\\rm hardtanh}$就是当输入大于1或者小于-1时，截取掉，给它限制在-1到1这个范围内，所以最后$\\alpha$的范围就是0到1。可以看出，如果$\\alpha_j^t$很大，那么$d_t$就大于$d_j$，否则的话$d_t$就小于$d_j$。这也很合乎直观上的认知，如果$d_t$大于$d_j$，那么说明$x_j$和$x_{j-1}$的最近公共祖先的高度比较低，那么说明$x_j$和$x_t$在同一棵子树中，差值自然大，反之的话$x_j$是当前子树的最左边的子结点，差值就很小。</p>\n<p>所以模型只需要一步步往左寻找第一个$\\alpha_j^t$最接近0的点，也就是之前提到过的$l_t$。为了实现这个目标，可以定义$l_t = i$的概率为：<br>\\[<br>p(l_t = i | x_0, \\ldots, x_t) = (1 - \\alpha_i^t) \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>为什么这么设计呢？其实还是很有道理的。概率越大的话，说明$\\alpha_i^t$越小，而其他的$\\alpha_j^t$越大，这就印证了上面提出的观点。而如果取$l_t &gt; i$的话，$1 - \\alpha_i^t$一定很小，会拉低概率；反之取$l_t &lt; i$的话，会乘上一个很小的项$\\alpha_i^t$，也会拉低概率。所以取$l_t = i$就是最优的。</p>\n<p><strong>第3步：</strong><br>我们的最终目的是求出门$g_i^t$，也就是$x_t$与$x_i$的相关度。在之前的动机中，直接将$l_t$之后的设为1，之前的设为0，但是这样是离散序列，无法传播梯度，所以这里采用另一种方法来求。注意到只有$p(l_t = i | x_0, \\ldots, x_t)$接近于1，而其他的概率都接近于0，所以只需要用概率密度函数来作为$g_i^t$就行了：<br>\\[<br>g_i^t = P(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>注意到这个概率密度函数在$i &lt; l_t$时值基本很小接近于0，而大于等于它时很大，越来越接近于1。这和设计的初衷已经很像了，所以可以近似用来作为$g_i^t$。</p>\n<p><strong>这里要提几点证明，可看可不看。</strong></p>\n<p><strong>证明开始</strong></p>\n<hr>\n<p>首先这个概率$p(l_t = i | x_0, \\ldots, x_t)$的形式其实是一个狄利克雷过程，有两个特殊值要定义一下，一个是$l_t = t-1$时，概率为：<br>\\[<br>p(l_t = t - 1 | x_0, \\ldots, x_t) = (1 - \\alpha_{t - 1}^t)<br>\\]<br>还有就是当$l_t = 0$时，因为$d_0$实际不存在，所以定义为句法距离无穷大，那么$\\alpha_0^t$定义为0，所以概率为：<br>\\[<br>p(l_t = 0 | x_0, \\ldots, x_t) = \\prod_{j=1}^{t-1} {\\alpha_j^t}<br>\\]<br>然后可以求出$g_i^t$的期望（<strong>这里论文中又写的一塌糊涂，符号定义都不统一。。。</strong>）：<br>\\[<br>\\mathbb E(g_i^t) = \\prod_{j=1}^{t-1} {\\alpha_j^t} + (1 - \\alpha_1^t)\\prod_{j=2}^{t-1} {\\alpha_j^t} + \\ldots + (1 - \\alpha_i^t)\\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>进一步可以写为：<br>\\[<br>\\mathbb E(g_i^t) = \\sum_{j=0}^i {p(l_t = j | x_0, \\dots, x_t)} = P(l_t \\le i)<br>\\]<br>上面的求和裂项相消可以得到：<br>\\[<br>P(l_t \\le i) = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]<br>这里也可以验证出$P(l_t &lt; t) = 1$，所以最终得到下面的门是正确的：<br>\\[<br>g_i^t = \\prod_{j=i+1}^{t-1} {\\alpha_j^t}<br>\\]</p>\n<p>然后要证明的就是根据这个策略求出的两个单词的关联区间没有交叉（但是可以完全覆盖）。首先放宽一下条件，证明当$\\alpha_j^t$只取0或者1时，性质成立，也就是定义（<strong>这里原文又打错了。。。</strong>）：<br>\\[<br>\\alpha_j^t = \\frac{ {\\rm sign}(d_t - d_j) + 1}{2}<br>\\]<br>也就是在原来的定义中令$\\tau$为正无穷。这样的话如果$d_t &gt; d_j$，那么$\\alpha_j^t$就是1，否则就是0。放宽了条件之后，$g_i^t$取值就只有1和0了，所以求出的$l_t$一定是满足句法距离$d_i &gt; d_t$所有位置中最右边的一个。而对于所有的$l_t &lt; i &lt; t$，都满足$d_i &lt; d_t$。证明也很简单，假设存在两个单词$x_v$和$x_n$，其中$v &lt; n$，它俩的关联区间交叉了，那么假设$x_v$的$l_t$为$u$，而$x_n$的$l_t$为$m$，所以$u &lt; m &lt; v &lt; n$。那么根据定义，有：<br>\\[<br>\\begin{array}{} {d_u &gt; d_v &gt; d_m \\\\ d_m &gt; d_n &gt; d_v} \\end{array}<br>\\]<br>这两个式子显然矛盾，所以证明了在宽松的条件下，这个不交叉的性质是成立的。</p>\n<p>另一个极端是令$\\tau = 0$，这种情况下$\\alpha_j^t = \\frac{1}{2}$，最终算下来$g_i^t$是一个首项为$\\frac{1}{2^{t-1}}$公比为2的等比数列。这里的话论文里说最终会形成一棵所有叶子结点都直接连接在根结点上面的句法树，但是我是没看出来为什么，首先这种情况下句法距离$d$对最终的损失函数没有影响了，所以梯度无法传播回来，句法距离$d$应该只受到词向量影响了，最终就是一个普通的语言模型，句法距离最终会是什么样子谁也不知道。</p>\n<p>在具体实现时，将$\\tau$设为一个中间值，但是这样会产生交叉的关联区间，所以测试的时候再将其设为正无穷。</p>\n<p><strong>证明结束</strong></p>\n<hr>\n<h2 id=\"Reading-Network\"><a href=\"#Reading-Network\" class=\"headerlink\" title=\"Reading Network\"></a>Reading Network</h2><p>上面的Parsing Network求了半天就是为了得到这个gates $g_j^t$，然后怎么使用呢？既然是语言模型，下面当然要用LSTM来对句子进行编码了。众所周知，在LSTM中有两个隐含层状态$h$和$c$，所以在这里不直接使用上一个时刻传过来的状态，而是用历史所有时刻的状态信息，再与gates加权后输入到下一时刻。在论文中并没有直接使用gates作为权重，而是计算了一个新的权重，这里称作结构化attention：<br>\\[<br>\\begin{array}{} {k_t = W_h h_{t-1} + W_x x_t \\\\ \\tilde s_i^t = {\\rm softmax}(\\frac{h_i k_t^{T}}{\\sqrt {\\delta_k}})} \\end{array}<br>\\]<br>当然这还不是最终的权重，再通过加入gates，定义一个新的结构化intra-attention：<br>\\[<br>s_i^t = \\frac{g_i^t \\tilde s_i^t}{\\sum_i g_i^t}<br>\\]<br>上面两个式子我也不是很清楚怎么解释，反正最后就用这个权重来对历史状态进行编码：<br>\\[<br>\\left[ \\begin{array}{*{c}}{\\tilde h_t \\\\ \\tilde c_t}\\end{array} \\right] = \\sum_{i=1}^{t-1} {s_i^t \\cdot m_i} = \\sum_{i=1}^{t-1} {s_i^t \\cdot \\left[ \\begin{array}{*{c}}{h_i \\\\ c_i}\\end{array} \\right]}<br>\\]<br>最后将加权求和后的隐含层状态作为下一个时刻的隐含层输入，得到新的隐含层表示。</p>\n<h2 id=\"Predict-Network\"><a href=\"#Predict-Network\" class=\"headerlink\" title=\"Predict Network\"></a>Predict Network</h2><p>最后就是预测下一个单词是什么了，这里并没有直接用下一时刻$t + 1$的隐含层输出来预测，还是采用了attention，但是存在一个问题，$g_j^{t+1}$的值依赖于$d_{t+1}$，也就是依赖于$x_{t+1}$，但是这是我们需要预测的，那怎么办呢？论文中就直接用另一套参数直接预测出一个临时的$d_{t+1}’$：<br>\\[<br>d_{t+1}’ = {\\rm ReLU}(W_d’h_t + b_d’)<br>\\]<br>最后对历史状态加权求和，然后用一个前馈神经网络预测下一个单词：<br>\\[<br>f(m_0, \\ldots, m_t, g_0^{t+1}, \\ldots, g_t^{t+1}) = \\hat f([h_{l:t-1}, h_t])<br>\\]</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><hr>\n<p>具体实验设置啥的去看论文吧，这里就贴几个结果图解释一下。</p>\n<p><img src=\"4.jpg\" alt><br>上面这个是字符级别的语言模型的结果，PRPN取得了SOTA的结果。</p>\n<p><img src=\"5.jpg\" alt><br>上面这个是词级别的语言模型的结果，除了那个用了4层LSTM和跨越连接的模型（参数多）外，PRPN效果是最好的。</p>\n<p>当然我最关心的还是无监督成分句法分析上面的结果：<br><img src=\"6.jpg\" alt><br>目前为止，无监督成分句法分析的标准做法还是用WSJ10数据集（也就是长度小于等于10的句子），然后用unlabeled F1评测。可以看到，PRPN效果只能说一般般，不是很好。</p>\n<p>其实我也很疑惑，这里的无监督句法分析全靠Parsing Network产生的句法距离来产生，但是一个关键问题是句法距离并没有监督，唯一的监督信号来自于最后Predict Network的语言模型，那么这个句法距离真的能够学习到真实的句法距离吗？我比较怀疑，不过效果证明，这个对语言模型还是有帮助的，对无监督成分句法分析的话不好说。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<p>这篇论文几个review都给出了还算不错的评价，思想是不错的，但是和其中一个review观点一样，我觉得文章写得太烂了，一堆的笔误，逻辑很混乱，即使这已经是review后修改过的版本了，还是有一堆错误。</p>\n<p>过两天再看一篇ICLR2019的还是这个组的PRPN的改进版本，看看到底有何改进。不过真要搞无监督句法分析的话，还是老老实实去做聚类吧。</p>\n"},{"title":"Inside-outside Algorithm in PCFG","date":"2018-04-19T12:46:07.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=1&height=66\"></iframe></div>\n\ninside-outside算法是用来预测一棵句法分析树的概率的算法，算法建立在文法是乔姆斯基范式（CFG）的基础之上，CFG的定义见[维基百科](https://en.wikipedia.org/wiki/Chomsky_normal_form)。一棵句法分析树的potential定义为它包含的产生式的potential乘积，在PCFG中表示概率，在CRF-CFG中表示特征集合的分数。\n\ninside-outside算法需要定义两个变量：\n* $\\alpha (A,i,j)$定义为内部的potential之和，即以$A$为根结点，短语为${x_{i;j}}$的所有可能的子树的potential之和。\n* $\\beta (A,i,j)$定义为外部的potential之和，即以$A$为根结点，短语为${x_{1;i - 1}}A{x_{j + 1;n}}$的所有可能的子结构的potential之和。\n\n**给定文法CFG，输入字符串${x_{1;n}}$，计算inside和outside值。**\n\n# inside\n---\n初始化：\n如果$A \\to {x_i} \\in R$，那么$\\alpha (A,i,i) = \\varphi (A \\to {x_i},i,i,i)$。否则就等于0。\n其中$\\varphi (A \\to {x_i},i,i,i)$为potential值。\n\n类似于CKY算法，自底向上计算inside值：\n\\\\[\\alpha (A,i,j) = \\sum\\limits_{A \\to BC \\in R} {\\sum\\limits_{k = i}^{j - 1} {\\varphi (A \\to BC,i,k,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)} } \\\\]\n# outside\n---\n初始化：\n$\\beta (S,1,n) = 1$，其余都等于0。\n\noutside值要分为两部分计算：\n![](1.jpg)\n第一部分是${B \\to AC}$，如上图所示。\n![](2.jpg)\n第二部分是${B \\to CA}$，如上图所示。\n\n和inside相反，通过自顶向下计算outside值：\n\\\\[\\begin{array}{l}\\beta (A,i,j) = \\sum\\limits_{B \\to AC \\in R} {\\sum\\limits_{k = j + 1}^n {\\varphi (B \\to AC,i,j,k) \\cdot \\beta (B,i,k) \\cdot \\alpha (C,j + 1,k)} } \\\\ + \\sum\\limits_{B \\to CA \\in R} {\\sum\\limits_{k = 1}^{i - 1} {\\varphi (B \\to CA,k,i - 1,j) \\cdot \\beta (B,k,j) \\cdot \\alpha (C,k,i - 1)} } \\end{array}\\\\]\n\n# 应用\n---\n所有可能的句法树potential之和为：\n\\\\[{Z_s} = \\alpha (S,1,n)\\\\]\n包含产生式$(A \\to BC,i,k,j)$的所有可能句法树potential之和是：\n\\\\[\\mu (A \\to BC,i,k,j) = \\varphi (A \\to BC,i,k,j) \\cdot \\beta (A,i,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)\\\\]\n存在非终结符$A$，且短语是${x_{i;j}}$的所有可能句法树potential之和是：\n\\\\[\\mu (A,i,j) = \\alpha (A,i,j) \\cdot \\beta (A,i,j)\\\\]\n\n# PCFG参数估计\n---\n参数估计的目的就是为了估计出PCFG的概率$P$，使得所有句子的概率之和最大，采用的是EM迭代法。\n首先定义：\n\\\\[\\varphi (A \\to BC,i,k,j) = P(A \\to BC)\\\\]\n这里$P(A \\to BC)$是随机初始化的，满足归一化条件就行。\n对于语料库的每一条句子，可以计算出：\n\\\\[\\begin{array}{l}count(A \\to BC) = \\frac { {\\sum\\limits_{i,k,j} {\\mu (A \\to BC,i,k,j)} }}{ { {Z_s}}}\\\\P(A \\to BC) = \\frac{ {count(A \\to BC)}}{ {\\sum\\limits_r {count(r)} }}\\end{array}\\\\]\n然后算出期望，更新概率，迭代就行了。\n\n# CRF-CFG参数估计\n---\n首先定义:\n\\\\[\\varphi (A \\to BC,i,k,j) = \\exp \\sum\\limits_t { {\\theta _t}{f_t}(A \\to BC,i,k,j)} \\\\]\n其中$f_t$为特征函数。\n那么我们的目的就是训练特征参数$\\theta$。\n然后定义似然函数为\n\\\\[L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s) - {Z_s}} } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\]\n求偏导为\n\\\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {(\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - {E_\\theta }[{f_i}|s])}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\\\]\n\n这里可能有人看不懂，似然函数和偏导是怎么来的呢？下面我详细写一下过程。\n似然函数：\n\\\\[\\begin{array}{l}L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\log \\frac{ {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - \\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - {Z_s}} \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\end{array}\\\\]\n所以偏导为：\n\\\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - \\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}} \\right)}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\\\]\n而\n\\\\[\\begin{array}{l}\\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}\\\\ = \\frac{ {\\sum\\limits_{t \\in T(s)} {\\left( {\\left( {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } \\right) \\cdot \\sum\\limits_{r \\in t} { {f_i}(r,s)} } \\right)} }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}\\\\ = {E_\\theta }[{f_i}|s]\\end{array}\\\\]\n所以偏导就是这么来的。\n","source":"_posts/inside-outside.md","raw":"---\ntitle: Inside-outside Algorithm in PCFG\ndate: 2018-04-19 20:46:07\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=1&height=66\"></iframe></div>\n\ninside-outside算法是用来预测一棵句法分析树的概率的算法，算法建立在文法是乔姆斯基范式（CFG）的基础之上，CFG的定义见[维基百科](https://en.wikipedia.org/wiki/Chomsky_normal_form)。一棵句法分析树的potential定义为它包含的产生式的potential乘积，在PCFG中表示概率，在CRF-CFG中表示特征集合的分数。\n\ninside-outside算法需要定义两个变量：\n* $\\alpha (A,i,j)$定义为内部的potential之和，即以$A$为根结点，短语为${x_{i;j}}$的所有可能的子树的potential之和。\n* $\\beta (A,i,j)$定义为外部的potential之和，即以$A$为根结点，短语为${x_{1;i - 1}}A{x_{j + 1;n}}$的所有可能的子结构的potential之和。\n\n**给定文法CFG，输入字符串${x_{1;n}}$，计算inside和outside值。**\n\n# inside\n---\n初始化：\n如果$A \\to {x_i} \\in R$，那么$\\alpha (A,i,i) = \\varphi (A \\to {x_i},i,i,i)$。否则就等于0。\n其中$\\varphi (A \\to {x_i},i,i,i)$为potential值。\n\n类似于CKY算法，自底向上计算inside值：\n\\\\[\\alpha (A,i,j) = \\sum\\limits_{A \\to BC \\in R} {\\sum\\limits_{k = i}^{j - 1} {\\varphi (A \\to BC,i,k,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)} } \\\\]\n# outside\n---\n初始化：\n$\\beta (S,1,n) = 1$，其余都等于0。\n\noutside值要分为两部分计算：\n![](1.jpg)\n第一部分是${B \\to AC}$，如上图所示。\n![](2.jpg)\n第二部分是${B \\to CA}$，如上图所示。\n\n和inside相反，通过自顶向下计算outside值：\n\\\\[\\begin{array}{l}\\beta (A,i,j) = \\sum\\limits_{B \\to AC \\in R} {\\sum\\limits_{k = j + 1}^n {\\varphi (B \\to AC,i,j,k) \\cdot \\beta (B,i,k) \\cdot \\alpha (C,j + 1,k)} } \\\\ + \\sum\\limits_{B \\to CA \\in R} {\\sum\\limits_{k = 1}^{i - 1} {\\varphi (B \\to CA,k,i - 1,j) \\cdot \\beta (B,k,j) \\cdot \\alpha (C,k,i - 1)} } \\end{array}\\\\]\n\n# 应用\n---\n所有可能的句法树potential之和为：\n\\\\[{Z_s} = \\alpha (S,1,n)\\\\]\n包含产生式$(A \\to BC,i,k,j)$的所有可能句法树potential之和是：\n\\\\[\\mu (A \\to BC,i,k,j) = \\varphi (A \\to BC,i,k,j) \\cdot \\beta (A,i,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)\\\\]\n存在非终结符$A$，且短语是${x_{i;j}}$的所有可能句法树potential之和是：\n\\\\[\\mu (A,i,j) = \\alpha (A,i,j) \\cdot \\beta (A,i,j)\\\\]\n\n# PCFG参数估计\n---\n参数估计的目的就是为了估计出PCFG的概率$P$，使得所有句子的概率之和最大，采用的是EM迭代法。\n首先定义：\n\\\\[\\varphi (A \\to BC,i,k,j) = P(A \\to BC)\\\\]\n这里$P(A \\to BC)$是随机初始化的，满足归一化条件就行。\n对于语料库的每一条句子，可以计算出：\n\\\\[\\begin{array}{l}count(A \\to BC) = \\frac { {\\sum\\limits_{i,k,j} {\\mu (A \\to BC,i,k,j)} }}{ { {Z_s}}}\\\\P(A \\to BC) = \\frac{ {count(A \\to BC)}}{ {\\sum\\limits_r {count(r)} }}\\end{array}\\\\]\n然后算出期望，更新概率，迭代就行了。\n\n# CRF-CFG参数估计\n---\n首先定义:\n\\\\[\\varphi (A \\to BC,i,k,j) = \\exp \\sum\\limits_t { {\\theta _t}{f_t}(A \\to BC,i,k,j)} \\\\]\n其中$f_t$为特征函数。\n那么我们的目的就是训练特征参数$\\theta$。\n然后定义似然函数为\n\\\\[L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s) - {Z_s}} } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\]\n求偏导为\n\\\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {(\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - {E_\\theta }[{f_i}|s])}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\\\]\n\n这里可能有人看不懂，似然函数和偏导是怎么来的呢？下面我详细写一下过程。\n似然函数：\n\\\\[\\begin{array}{l}L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\log \\frac{ {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - \\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - {Z_s}} \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\end{array}\\\\]\n所以偏导为：\n\\\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - \\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}} \\right)}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\\\]\n而\n\\\\[\\begin{array}{l}\\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}\\\\ = \\frac{ {\\sum\\limits_{t \\in T(s)} {\\left( {\\left( {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } \\right) \\cdot \\sum\\limits_{r \\in t} { {f_i}(r,s)} } \\right)} }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}\\\\ = {E_\\theta }[{f_i}|s]\\end{array}\\\\]\n所以偏导就是这么来的。\n","slug":"inside-outside","published":1,"updated":"2019-07-20T04:17:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hn00977swed456dffy","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=1&height=66\"></iframe></div>\n\n<p>inside-outside算法是用来预测一棵句法分析树的概率的算法，算法建立在文法是乔姆斯基范式（CFG）的基础之上，CFG的定义见<a href=\"https://en.wikipedia.org/wiki/Chomsky_normal_form\" target=\"_blank\" rel=\"noopener\">维基百科</a>。一棵句法分析树的potential定义为它包含的产生式的potential乘积，在PCFG中表示概率，在CRF-CFG中表示特征集合的分数。</p>\n<p>inside-outside算法需要定义两个变量：</p>\n<ul>\n<li>$\\alpha (A,i,j)$定义为内部的potential之和，即以$A$为根结点，短语为${x_{i;j}}$的所有可能的子树的potential之和。</li>\n<li>$\\beta (A,i,j)$定义为外部的potential之和，即以$A$为根结点，短语为${x_{1;i - 1}}A{x_{j + 1;n}}$的所有可能的子结构的potential之和。</li>\n</ul>\n<p><strong>给定文法CFG，输入字符串${x_{1;n}}$，计算inside和outside值。</strong></p>\n<h1 id=\"inside\"><a href=\"#inside\" class=\"headerlink\" title=\"inside\"></a>inside</h1><hr>\n<p>初始化：<br>如果$A \\to {x_i} \\in R$，那么$\\alpha (A,i,i) = \\varphi (A \\to {x_i},i,i,i)$。否则就等于0。<br>其中$\\varphi (A \\to {x_i},i,i,i)$为potential值。</p>\n<p>类似于CKY算法，自底向上计算inside值：<br>\\[\\alpha (A,i,j) = \\sum\\limits_{A \\to BC \\in R} {\\sum\\limits_{k = i}^{j - 1} {\\varphi (A \\to BC,i,k,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)} } \\]</p>\n<h1 id=\"outside\"><a href=\"#outside\" class=\"headerlink\" title=\"outside\"></a>outside</h1><hr>\n<p>初始化：<br>$\\beta (S,1,n) = 1$，其余都等于0。</p>\n<p>outside值要分为两部分计算：<br><img src=\"1.jpg\" alt><br>第一部分是${B \\to AC}$，如上图所示。<br><img src=\"2.jpg\" alt><br>第二部分是${B \\to CA}$，如上图所示。</p>\n<p>和inside相反，通过自顶向下计算outside值：<br>\\[\\begin{array}{l}\\beta (A,i,j) = \\sum\\limits_{B \\to AC \\in R} {\\sum\\limits_{k = j + 1}^n {\\varphi (B \\to AC,i,j,k) \\cdot \\beta (B,i,k) \\cdot \\alpha (C,j + 1,k)} } \\\\ + \\sum\\limits_{B \\to CA \\in R} {\\sum\\limits_{k = 1}^{i - 1} {\\varphi (B \\to CA,k,i - 1,j) \\cdot \\beta (B,k,j) \\cdot \\alpha (C,k,i - 1)} } \\end{array}\\]</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><hr>\n<p>所有可能的句法树potential之和为：<br>\\[{Z_s} = \\alpha (S,1,n)\\]<br>包含产生式$(A \\to BC,i,k,j)$的所有可能句法树potential之和是：<br>\\[\\mu (A \\to BC,i,k,j) = \\varphi (A \\to BC,i,k,j) \\cdot \\beta (A,i,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)\\]<br>存在非终结符$A$，且短语是${x_{i;j}}$的所有可能句法树potential之和是：<br>\\[\\mu (A,i,j) = \\alpha (A,i,j) \\cdot \\beta (A,i,j)\\]</p>\n<h1 id=\"PCFG参数估计\"><a href=\"#PCFG参数估计\" class=\"headerlink\" title=\"PCFG参数估计\"></a>PCFG参数估计</h1><hr>\n<p>参数估计的目的就是为了估计出PCFG的概率$P$，使得所有句子的概率之和最大，采用的是EM迭代法。<br>首先定义：<br>\\[\\varphi (A \\to BC,i,k,j) = P(A \\to BC)\\]<br>这里$P(A \\to BC)$是随机初始化的，满足归一化条件就行。<br>对于语料库的每一条句子，可以计算出：<br>\\[\\begin{array}{l}count(A \\to BC) = \\frac { {\\sum\\limits_{i,k,j} {\\mu (A \\to BC,i,k,j)} }}{ { {Z_s}}}\\\\P(A \\to BC) = \\frac{ {count(A \\to BC)}}{ {\\sum\\limits_r {count(r)} }}\\end{array}\\]<br>然后算出期望，更新概率，迭代就行了。</p>\n<h1 id=\"CRF-CFG参数估计\"><a href=\"#CRF-CFG参数估计\" class=\"headerlink\" title=\"CRF-CFG参数估计\"></a>CRF-CFG参数估计</h1><hr>\n<p>首先定义:<br>\\[\\varphi (A \\to BC,i,k,j) = \\exp \\sum\\limits_t { {\\theta _t}{f_t}(A \\to BC,i,k,j)} \\]<br>其中$f_t$为特征函数。<br>那么我们的目的就是训练特征参数$\\theta$。<br>然后定义似然函数为<br>\\[L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s) - {Z_s}} } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\]<br>求偏导为<br>\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {(\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - {E_\\theta }[{f_i}|s])}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\]</p>\n<p>这里可能有人看不懂，似然函数和偏导是怎么来的呢？下面我详细写一下过程。<br>似然函数：<br>\\[\\begin{array}{l}L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\log \\frac{ {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - \\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - {Z_s}} \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\end{array}\\]<br>所以偏导为：<br>\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - \\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}} \\right)}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\]<br>而<br>\\[\\begin{array}{l}\\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}\\\\ = \\frac{ {\\sum\\limits_{t \\in T(s)} {\\left( {\\left( {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } \\right) \\cdot \\sum\\limits_{r \\in t} { {f_i}(r,s)} } \\right)} }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}\\\\ = {E_\\theta }[{f_i}|s]\\end{array}\\]<br>所以偏导就是这么来的。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=506196018&auto=1&height=66\"></iframe></div>\n\n<p>inside-outside算法是用来预测一棵句法分析树的概率的算法，算法建立在文法是乔姆斯基范式（CFG）的基础之上，CFG的定义见<a href=\"https://en.wikipedia.org/wiki/Chomsky_normal_form\" target=\"_blank\" rel=\"noopener\">维基百科</a>。一棵句法分析树的potential定义为它包含的产生式的potential乘积，在PCFG中表示概率，在CRF-CFG中表示特征集合的分数。</p>\n<p>inside-outside算法需要定义两个变量：</p>\n<ul>\n<li>$\\alpha (A,i,j)$定义为内部的potential之和，即以$A$为根结点，短语为${x_{i;j}}$的所有可能的子树的potential之和。</li>\n<li>$\\beta (A,i,j)$定义为外部的potential之和，即以$A$为根结点，短语为${x_{1;i - 1}}A{x_{j + 1;n}}$的所有可能的子结构的potential之和。</li>\n</ul>\n<p><strong>给定文法CFG，输入字符串${x_{1;n}}$，计算inside和outside值。</strong></p>\n<h1 id=\"inside\"><a href=\"#inside\" class=\"headerlink\" title=\"inside\"></a>inside</h1><hr>\n<p>初始化：<br>如果$A \\to {x_i} \\in R$，那么$\\alpha (A,i,i) = \\varphi (A \\to {x_i},i,i,i)$。否则就等于0。<br>其中$\\varphi (A \\to {x_i},i,i,i)$为potential值。</p>\n<p>类似于CKY算法，自底向上计算inside值：<br>\\[\\alpha (A,i,j) = \\sum\\limits_{A \\to BC \\in R} {\\sum\\limits_{k = i}^{j - 1} {\\varphi (A \\to BC,i,k,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)} } \\]</p>\n<h1 id=\"outside\"><a href=\"#outside\" class=\"headerlink\" title=\"outside\"></a>outside</h1><hr>\n<p>初始化：<br>$\\beta (S,1,n) = 1$，其余都等于0。</p>\n<p>outside值要分为两部分计算：<br><img src=\"1.jpg\" alt><br>第一部分是${B \\to AC}$，如上图所示。<br><img src=\"2.jpg\" alt><br>第二部分是${B \\to CA}$，如上图所示。</p>\n<p>和inside相反，通过自顶向下计算outside值：<br>\\[\\begin{array}{l}\\beta (A,i,j) = \\sum\\limits_{B \\to AC \\in R} {\\sum\\limits_{k = j + 1}^n {\\varphi (B \\to AC,i,j,k) \\cdot \\beta (B,i,k) \\cdot \\alpha (C,j + 1,k)} } \\\\ + \\sum\\limits_{B \\to CA \\in R} {\\sum\\limits_{k = 1}^{i - 1} {\\varphi (B \\to CA,k,i - 1,j) \\cdot \\beta (B,k,j) \\cdot \\alpha (C,k,i - 1)} } \\end{array}\\]</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><hr>\n<p>所有可能的句法树potential之和为：<br>\\[{Z_s} = \\alpha (S,1,n)\\]<br>包含产生式$(A \\to BC,i,k,j)$的所有可能句法树potential之和是：<br>\\[\\mu (A \\to BC,i,k,j) = \\varphi (A \\to BC,i,k,j) \\cdot \\beta (A,i,j) \\cdot \\alpha (B,i,k) \\cdot \\alpha (C,k + 1,j)\\]<br>存在非终结符$A$，且短语是${x_{i;j}}$的所有可能句法树potential之和是：<br>\\[\\mu (A,i,j) = \\alpha (A,i,j) \\cdot \\beta (A,i,j)\\]</p>\n<h1 id=\"PCFG参数估计\"><a href=\"#PCFG参数估计\" class=\"headerlink\" title=\"PCFG参数估计\"></a>PCFG参数估计</h1><hr>\n<p>参数估计的目的就是为了估计出PCFG的概率$P$，使得所有句子的概率之和最大，采用的是EM迭代法。<br>首先定义：<br>\\[\\varphi (A \\to BC,i,k,j) = P(A \\to BC)\\]<br>这里$P(A \\to BC)$是随机初始化的，满足归一化条件就行。<br>对于语料库的每一条句子，可以计算出：<br>\\[\\begin{array}{l}count(A \\to BC) = \\frac { {\\sum\\limits_{i,k,j} {\\mu (A \\to BC,i,k,j)} }}{ { {Z_s}}}\\\\P(A \\to BC) = \\frac{ {count(A \\to BC)}}{ {\\sum\\limits_r {count(r)} }}\\end{array}\\]<br>然后算出期望，更新概率，迭代就行了。</p>\n<h1 id=\"CRF-CFG参数估计\"><a href=\"#CRF-CFG参数估计\" class=\"headerlink\" title=\"CRF-CFG参数估计\"></a>CRF-CFG参数估计</h1><hr>\n<p>首先定义:<br>\\[\\varphi (A \\to BC,i,k,j) = \\exp \\sum\\limits_t { {\\theta _t}{f_t}(A \\to BC,i,k,j)} \\]<br>其中$f_t$为特征函数。<br>那么我们的目的就是训练特征参数$\\theta$。<br>然后定义似然函数为<br>\\[L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s) - {Z_s}} } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\]<br>求偏导为<br>\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {(\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - {E_\\theta }[{f_i}|s])}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\]</p>\n<p>这里可能有人看不懂，似然函数和偏导是怎么来的呢？下面我详细写一下过程。<br>似然函数：<br>\\[\\begin{array}{l}L(D;\\theta ) = \\sum\\limits_{(t,s) \\in D} {\\log \\frac{ {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - \\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\\\ = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} }  - {Z_s}} \\right)}  + \\sum\\limits_i {\\frac{ {\\theta _i^2}}{ {2{\\sigma ^2}}}} \\end{array}\\]<br>所以偏导为：<br>\\[\\frac{ {\\partial L(D;\\theta )}}{ {\\partial {\\theta _i}}} = \\sum\\limits_{(t,s) \\in D} {\\left( {\\sum\\limits_{r \\in t} { {f_i}(r,s)}  - \\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}} \\right)}  + \\frac{ { {\\theta _i}}}{ { {\\sigma ^2}}}\\]<br>而<br>\\[\\begin{array}{l}\\frac{ {\\partial \\left( {\\log \\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } } \\right)}}{ {\\partial {\\theta _i}}}\\\\ = \\frac{ {\\sum\\limits_{t \\in T(s)} {\\left( {\\left( {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } \\right) \\cdot \\sum\\limits_{r \\in t} { {f_i}(r,s)} } \\right)} }}{ {\\sum\\limits_{t \\in T(s)} {\\exp \\sum\\limits_{r \\in t} {\\sum\\limits_i { {\\theta _i}{f_i}(r,s)} } } }}\\\\ = {E_\\theta }[{f_i}|s]\\end{array}\\]<br>所以偏导就是这么来的。</p>\n"},{"title":"K-bandit Algorithm","date":"2018-08-05T08:16:42.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# 问题描述\n---\n有$K$个赌博机，每个赌博机有一定概率$P$吐出硬币，但是我们不知道这个概率是多少，每个赌博机吐出的硬币价值$V$也是不一样的，现在有$T$次机会选择赌博机，怎么选才能使得到的硬币总价值最大？\n\n在下面的不同算法实现中，统一设定\n\\\\[\\begin{array}{l}K = 5 \\\\ P = [0.1,0.9,0.3,0.2,0.7] \\\\ V = [5,3,1,7,4] \\\\ T = 1000000\\end{array}\\\\]\n可以计算出，这种情况下：\n1. 如果每次都选期望价值最高的4号赌博机，可以获得的最高总价值为2800000。\n2. 如果每次都选期望价值最低的2号赌博机，可以获得的最低总价值为300000。\n3. 如果随机选取赌博机，可以获得的期望总价值为1540000。\n\n# 探索与利用算法\n---\n## 原理\n“仅探索”（exploration-only）算法就是将机会平均分配给每一个赌博机，随机挑选赌博机。\n“仅利用”（exploitation-only）算法就是选取当前平均价值最高的那台赌博机。\n\n## 实现代码\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef R(k, P, V):\n    if random.random() < P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef exploration_bandit(K, P, V, R, T):\n    r = 0\n    for t in range(T):\n        k = random.randint(0, K - 1)\n        v = R(k, P, V)\n        r += v\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    print exploration_bandit(K, P, V, R, T)\n\nif __name__ == '__main__':\n    main()\n```\n代码运行结果为：获得总价值1538893。\n\n# $\\varepsilon $贪心算法\n---\n## 原理\n\n\n## 实现代码\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef R(k, P, V):\n    if random.random() < P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef eplison_bandit(K, P, V, R, T):\n    r = 0\n    Q = np.zeros(K)\n    count = np.zeros(K)\n    for t in range(T):\n        eplison = 1. / np.sqrt(t + 1)\n        if random.random() < eplison:\n            k = random.randint(0, K - 1)\n        else:\n            k = np.argmax(Q)\n        v = R(k, P, V)\n        r += v\n        Q[k] += (v - Q[k]) / (count[k] + 1)\n        count[k] += 1\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    print eplison_bandit(K, P, V, R, T)\n\nif __name__ == '__main__':\n    main()\n```\n代码运行结果为：获得总价值2795546。\n\n# Softmax算法\n---\n## 原理\n\n## 实现代码\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef softmax(x):\n    return np.exp(x) / np.sum(np.exp(x))\n\ndef R(k, P, V):\n    if random.random() < P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef eplison_bandit(K, P, V, R, T, tau=0.1):\n    r = 0\n    Q = np.zeros(K)\n    count = np.zeros(K)\n    for t in range(T):\n        p = softmax(Q / tau)\n        rand = random.random()\n        total = 0.0\n        for i in range(K):\n            total += p[i]\n            if total >= rand:\n                k = i\n                break\n        v = R(k, P, V)\n        r += v\n        Q[k] += (v - Q[k]) / (count[k] + 1)\n        count[k] += 1\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    tau = 0.1\n    print eplison_bandit(K, P, V, R, T, tau)\n\nif __name__ == '__main__':\n    main()\n```\n代码运行结果为：$tau=0.01$时，获得总价值1397795。$tau=0.1$时，获得总价值2798372。当然随机性很大，每次运行结果都会不同","source":"_posts/k-bandit.md","raw":"---\ntitle: K-bandit Algorithm\ndate: 2018-08-05 16:16:42\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 神经网络\n- 深度学习\n- 强化学习\ncategories:\n- 强化学习\n---\n\n# 问题描述\n---\n有$K$个赌博机，每个赌博机有一定概率$P$吐出硬币，但是我们不知道这个概率是多少，每个赌博机吐出的硬币价值$V$也是不一样的，现在有$T$次机会选择赌博机，怎么选才能使得到的硬币总价值最大？\n\n在下面的不同算法实现中，统一设定\n\\\\[\\begin{array}{l}K = 5 \\\\ P = [0.1,0.9,0.3,0.2,0.7] \\\\ V = [5,3,1,7,4] \\\\ T = 1000000\\end{array}\\\\]\n可以计算出，这种情况下：\n1. 如果每次都选期望价值最高的4号赌博机，可以获得的最高总价值为2800000。\n2. 如果每次都选期望价值最低的2号赌博机，可以获得的最低总价值为300000。\n3. 如果随机选取赌博机，可以获得的期望总价值为1540000。\n\n# 探索与利用算法\n---\n## 原理\n“仅探索”（exploration-only）算法就是将机会平均分配给每一个赌博机，随机挑选赌博机。\n“仅利用”（exploitation-only）算法就是选取当前平均价值最高的那台赌博机。\n\n## 实现代码\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef R(k, P, V):\n    if random.random() < P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef exploration_bandit(K, P, V, R, T):\n    r = 0\n    for t in range(T):\n        k = random.randint(0, K - 1)\n        v = R(k, P, V)\n        r += v\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    print exploration_bandit(K, P, V, R, T)\n\nif __name__ == '__main__':\n    main()\n```\n代码运行结果为：获得总价值1538893。\n\n# $\\varepsilon $贪心算法\n---\n## 原理\n\n\n## 实现代码\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef R(k, P, V):\n    if random.random() < P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef eplison_bandit(K, P, V, R, T):\n    r = 0\n    Q = np.zeros(K)\n    count = np.zeros(K)\n    for t in range(T):\n        eplison = 1. / np.sqrt(t + 1)\n        if random.random() < eplison:\n            k = random.randint(0, K - 1)\n        else:\n            k = np.argmax(Q)\n        v = R(k, P, V)\n        r += v\n        Q[k] += (v - Q[k]) / (count[k] + 1)\n        count[k] += 1\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    print eplison_bandit(K, P, V, R, T)\n\nif __name__ == '__main__':\n    main()\n```\n代码运行结果为：获得总价值2795546。\n\n# Softmax算法\n---\n## 原理\n\n## 实现代码\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef softmax(x):\n    return np.exp(x) / np.sum(np.exp(x))\n\ndef R(k, P, V):\n    if random.random() < P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef eplison_bandit(K, P, V, R, T, tau=0.1):\n    r = 0\n    Q = np.zeros(K)\n    count = np.zeros(K)\n    for t in range(T):\n        p = softmax(Q / tau)\n        rand = random.random()\n        total = 0.0\n        for i in range(K):\n            total += p[i]\n            if total >= rand:\n                k = i\n                break\n        v = R(k, P, V)\n        r += v\n        Q[k] += (v - Q[k]) / (count[k] + 1)\n        count[k] += 1\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    tau = 0.1\n    print eplison_bandit(K, P, V, R, T, tau)\n\nif __name__ == '__main__':\n    main()\n```\n代码运行结果为：$tau=0.01$时，获得总价值1397795。$tau=0.1$时，获得总价值2798372。当然随机性很大，每次运行结果都会不同","slug":"k-bandit","published":1,"updated":"2019-07-19T17:12:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hr009b7swekyq2s1xe","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><hr>\n<p>有$K$个赌博机，每个赌博机有一定概率$P$吐出硬币，但是我们不知道这个概率是多少，每个赌博机吐出的硬币价值$V$也是不一样的，现在有$T$次机会选择赌博机，怎么选才能使得到的硬币总价值最大？</p>\n<p>在下面的不同算法实现中，统一设定<br>\\[\\begin{array}{l}K = 5 \\\\ P = [0.1,0.9,0.3,0.2,0.7] \\\\ V = [5,3,1,7,4] \\\\ T = 1000000\\end{array}\\]<br>可以计算出，这种情况下：</p>\n<ol>\n<li>如果每次都选期望价值最高的4号赌博机，可以获得的最高总价值为2800000。</li>\n<li>如果每次都选期望价值最低的2号赌博机，可以获得的最低总价值为300000。</li>\n<li>如果随机选取赌博机，可以获得的期望总价值为1540000。</li>\n</ol>\n<h1 id=\"探索与利用算法\"><a href=\"#探索与利用算法\" class=\"headerlink\" title=\"探索与利用算法\"></a>探索与利用算法</h1><hr>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>“仅探索”（exploration-only）算法就是将机会平均分配给每一个赌博机，随机挑选赌博机。<br>“仅利用”（exploitation-only）算法就是选取当前平均价值最高的那台赌博机。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/python</span>\n<span class=\"token comment\" spellcheck=\"true\"># -*- coding: UTF-8 -*-</span>\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">R</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> P<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> V<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exploration_bandit</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        k <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> K <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        v <span class=\"token operator\">=</span> R<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">+=</span> v\n    <span class=\"token keyword\">return</span> r\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    K <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    P <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    V <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    T <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span>\n    <span class=\"token keyword\">print</span> exploration_bandit<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>代码运行结果为：获得总价值1538893。</p>\n<h1 id=\"varepsilon-贪心算法\"><a href=\"#varepsilon-贪心算法\" class=\"headerlink\" title=\"$\\varepsilon $贪心算法\"></a>$\\varepsilon $贪心算法</h1><hr>\n<h2 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h2 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/python</span>\n<span class=\"token comment\" spellcheck=\"true\"># -*- coding: UTF-8 -*-</span>\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">R</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> P<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> V<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">eplison_bandit</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    Q <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        eplison <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> eplison<span class=\"token punctuation\">:</span>\n            k <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> K <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            k <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span>\n        v <span class=\"token operator\">=</span> R<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">+=</span> v\n        Q<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">-</span> Q<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> r\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    K <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    P <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    V <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    T <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span>\n    <span class=\"token keyword\">print</span> eplison_bandit<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>代码运行结果为：获得总价值2795546。</p>\n<h1 id=\"Softmax算法\"><a href=\"#Softmax算法\" class=\"headerlink\" title=\"Softmax算法\"></a>Softmax算法</h1><hr>\n<h2 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h2 id=\"实现代码-2\"><a href=\"#实现代码-2\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/python</span>\n<span class=\"token comment\" spellcheck=\"true\"># -*- coding: UTF-8 -*-</span>\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">softmax</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">R</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> P<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> V<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">eplison_bandit</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> tau<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    r <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    Q <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        p <span class=\"token operator\">=</span> softmax<span class=\"token punctuation\">(</span>Q <span class=\"token operator\">/</span> tau<span class=\"token punctuation\">)</span>\n        rand <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        total <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            total <span class=\"token operator\">+=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> total <span class=\"token operator\">>=</span> rand<span class=\"token punctuation\">:</span>\n                k <span class=\"token operator\">=</span> i\n                <span class=\"token keyword\">break</span>\n        v <span class=\"token operator\">=</span> R<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">+=</span> v\n        Q<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">-</span> Q<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> r\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    K <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    P <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    V <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    T <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span>\n    tau <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\n    <span class=\"token keyword\">print</span> eplison_bandit<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">,</span> P<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> tau<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>代码运行结果为：$tau=0.01$时，获得总价值1397795。$tau=0.1$时，获得总价值2798372。当然随机性很大，每次运行结果都会不同</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><hr>\n<p>有$K$个赌博机，每个赌博机有一定概率$P$吐出硬币，但是我们不知道这个概率是多少，每个赌博机吐出的硬币价值$V$也是不一样的，现在有$T$次机会选择赌博机，怎么选才能使得到的硬币总价值最大？</p>\n<p>在下面的不同算法实现中，统一设定<br>\\[\\begin{array}{l}K = 5 \\\\ P = [0.1,0.9,0.3,0.2,0.7] \\\\ V = [5,3,1,7,4] \\\\ T = 1000000\\end{array}\\]<br>可以计算出，这种情况下：</p>\n<ol>\n<li>如果每次都选期望价值最高的4号赌博机，可以获得的最高总价值为2800000。</li>\n<li>如果每次都选期望价值最低的2号赌博机，可以获得的最低总价值为300000。</li>\n<li>如果随机选取赌博机，可以获得的期望总价值为1540000。</li>\n</ol>\n<h1 id=\"探索与利用算法\"><a href=\"#探索与利用算法\" class=\"headerlink\" title=\"探索与利用算法\"></a>探索与利用算法</h1><hr>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>“仅探索”（exploration-only）算法就是将机会平均分配给每一个赌博机，随机挑选赌博机。<br>“仅利用”（exploitation-only）算法就是选取当前平均价值最高的那台赌博机。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre><code class=\"python\">#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef R(k, P, V):\n    if random.random() &lt; P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef exploration_bandit(K, P, V, R, T):\n    r = 0\n    for t in range(T):\n        k = random.randint(0, K - 1)\n        v = R(k, P, V)\n        r += v\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    print exploration_bandit(K, P, V, R, T)\n\nif __name__ == &#39;__main__&#39;:\n    main()</code></pre>\n<p>代码运行结果为：获得总价值1538893。</p>\n<h1 id=\"varepsilon-贪心算法\"><a href=\"#varepsilon-贪心算法\" class=\"headerlink\" title=\"$\\varepsilon $贪心算法\"></a>$\\varepsilon $贪心算法</h1><hr>\n<h2 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h2 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre><code class=\"python\">#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef R(k, P, V):\n    if random.random() &lt; P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef eplison_bandit(K, P, V, R, T):\n    r = 0\n    Q = np.zeros(K)\n    count = np.zeros(K)\n    for t in range(T):\n        eplison = 1. / np.sqrt(t + 1)\n        if random.random() &lt; eplison:\n            k = random.randint(0, K - 1)\n        else:\n            k = np.argmax(Q)\n        v = R(k, P, V)\n        r += v\n        Q[k] += (v - Q[k]) / (count[k] + 1)\n        count[k] += 1\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    print eplison_bandit(K, P, V, R, T)\n\nif __name__ == &#39;__main__&#39;:\n    main()</code></pre>\n<p>代码运行结果为：获得总价值2795546。</p>\n<h1 id=\"Softmax算法\"><a href=\"#Softmax算法\" class=\"headerlink\" title=\"Softmax算法\"></a>Softmax算法</h1><hr>\n<h2 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h2 id=\"实现代码-2\"><a href=\"#实现代码-2\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre><code class=\"python\">#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nimport random\nimport numpy as np\n\ndef softmax(x):\n    return np.exp(x) / np.sum(np.exp(x))\n\ndef R(k, P, V):\n    if random.random() &lt; P[k]:\n        return V[k]\n    else:\n        return 0\n\ndef eplison_bandit(K, P, V, R, T, tau=0.1):\n    r = 0\n    Q = np.zeros(K)\n    count = np.zeros(K)\n    for t in range(T):\n        p = softmax(Q / tau)\n        rand = random.random()\n        total = 0.0\n        for i in range(K):\n            total += p[i]\n            if total &gt;= rand:\n                k = i\n                break\n        v = R(k, P, V)\n        r += v\n        Q[k] += (v - Q[k]) / (count[k] + 1)\n        count[k] += 1\n    return r\n\ndef main():\n    K = 5\n    P = np.array([0.1, 0.9, 0.3, 0.2, 0.7])\n    V = np.array([5, 3, 1, 7, 4])\n    T = 1000000\n    tau = 0.1\n    print eplison_bandit(K, P, V, R, T, tau)\n\nif __name__ == &#39;__main__&#39;:\n    main()</code></pre>\n<p>代码运行结果为：$tau=0.01$时，获得总价值1397795。$tau=0.1$时，获得总价值2798372。当然随机性很大，每次运行结果都会不同</p>\n"},{"title":"Latex撰写论文常用技巧总结","date":"2019-01-13T09:34:07.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。\n\n# 插入矢量图片\n---\n首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。\n![](1.jpg)\n**方法一：**\n直接另存为pdf，例如存为`figure.pdf`。\n![](2.jpg)\n注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。\n然后在Latex中使用如下代码插入pdf图片即可：\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\includegraphics[width=\\textwidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure*}\n```\n其中参数`width=\\textwidth`是用来调整图片宽度，使得图片占满整个论文，效果如下：\n![](3.jpg)\n注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。\n如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure}\n```\n效果如下：\n![](4.jpg)\n\n**2019.1.14更新：**\n关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。\n\n**方法二：**\nppt绘制好的模型图右键另存为`emf`格式，这是一种Windows的矢量图格式，然后下载一款软件叫`Metafile to EPS Converter`[地址](http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe)，将图片转为Latex支持的`eps`格式，例如命名为`figure.eps`。\n\n最后在Latex使用相同的代码插入图片即可，效果如下：\n![](5.jpg)\n可以看出两侧间距比原来小了很多。\n\n**2019.3.6更新：**\n# 中文支持\n---\n```latex\n\\usepackage{CJK}\n\n\\begin{document}\n\\begin{CJK*}{GBK}{song}\n\n% 正文\n\n\\end{CJK*}\n\\end{document}\n```\n\n# 图片\n---\n**单幅图片：**\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{xxxxx.}\n    \\label{Fig:xxxxx}\n\\end{figure}\n```\n跨双栏的话把`figure`改成`figure*`，`htbp`控制位置，自己看着调。\n\n难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：\n```latex\n\\twocolumn[{\n    \\renewcommand\\twocolumn[1][]{#1}\n    \\begin{center}\n        \\centering\n        \\includegraphics[width=\\textwidth]{figure.pdf}\n        \\captionof{xxxxx.}\n    \\end{center}\n}]\n```\n缺点是无法添加`label`，正文只能手动加引用了。\n\n**两幅图片同一行显示：**\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\subfigure[fig1.]{\n        \\begin{minipage}[t]{0.58\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure1.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1a}\n    }\n    \\subfigure[fig2.]{\n        \\begin{minipage}[t]{0.34\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure2.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1b}\n    }\n    \\caption{xxxxx.}\n    \\label{Fig:fig1}\n\\end{figure*}\n```\n注意的是，两个图片宽度之和`0.58 + 0.34 = 0.92`要尽量小于1，不然会显示出问题。\n\n# 伪代码\n---\n\n```latex\n\\renewcommand{\\algorithmicrequire}{ \\textbf{Input:}}\n\\renewcommand{\\algorithmicensure}{ \\textbf{Output:}}\n\n\\begin{algorithm}[t]\n    \\caption{ alg1. }\\label{Alg:Alg1}\n    \\begin{algorithmic}[1]\n        \\Require\n            % 输入\n        \\Ensure\n            % 输出\n        % 过程\n        \\Function {xxxxxx}{$i, j$}\n            % 函数体\n        \\EndFunction\n    \\end{algorithmic}\n\\end{algorithm}\n```\n\n# 表格\n---\n\n```latex\n\\newcommand{\\tabincell}[2]{\\begin{tabular}{@{}#1@{}}#2\\end{tabular}}\n\n\\begin{table}[t]\n\\normalsize\n\\begin{center}\n\\begin{tabular}{l|l|ccc}\n\n\\hline\n\\multicolumn{2}{c|}{Model} & LR & LP & F1\\\\\n\n\\hline\\hline\n\n\\end{tabular}\n\\end{center}\n\\caption{ xxxxx.}\n\\label{Tab:CompDiffConfig}\n\\end{table}\n```\n\n两个难点，一个是合并同一行的单元格，用`\\multicolumn{cols}{pos}{text}`。\n\n一个是合并同一列的单元格，用：\n```latex\n\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        \\multirow{2}*{合并两行一列} & 二 & 三 & 四 \\\\\n        ~ & 2 & 3 & 4 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\n```\n注意第二行第一列要用`~`补上空位。用`\\cline{start-end}`来代替`\\hline`划线。\n\n**暂时就想到这些了，等想到了再更吧，祝我paper顺利。**","source":"_posts/latex-pdf.md","raw":"---\ntitle: Latex撰写论文常用技巧总结\ndate: 2019-01-13 17:34:07\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- LaTeX\ncategories:\n- 软件安装与配置\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。\n\n# 插入矢量图片\n---\n首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。\n![](1.jpg)\n**方法一：**\n直接另存为pdf，例如存为`figure.pdf`。\n![](2.jpg)\n注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。\n然后在Latex中使用如下代码插入pdf图片即可：\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\includegraphics[width=\\textwidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure*}\n```\n其中参数`width=\\textwidth`是用来调整图片宽度，使得图片占满整个论文，效果如下：\n![](3.jpg)\n注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。\n如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure}\n```\n效果如下：\n![](4.jpg)\n\n**2019.1.14更新：**\n关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。\n\n**方法二：**\nppt绘制好的模型图右键另存为`emf`格式，这是一种Windows的矢量图格式，然后下载一款软件叫`Metafile to EPS Converter`[地址](http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe)，将图片转为Latex支持的`eps`格式，例如命名为`figure.eps`。\n\n最后在Latex使用相同的代码插入图片即可，效果如下：\n![](5.jpg)\n可以看出两侧间距比原来小了很多。\n\n**2019.3.6更新：**\n# 中文支持\n---\n```latex\n\\usepackage{CJK}\n\n\\begin{document}\n\\begin{CJK*}{GBK}{song}\n\n% 正文\n\n\\end{CJK*}\n\\end{document}\n```\n\n# 图片\n---\n**单幅图片：**\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{xxxxx.}\n    \\label{Fig:xxxxx}\n\\end{figure}\n```\n跨双栏的话把`figure`改成`figure*`，`htbp`控制位置，自己看着调。\n\n难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：\n```latex\n\\twocolumn[{\n    \\renewcommand\\twocolumn[1][]{#1}\n    \\begin{center}\n        \\centering\n        \\includegraphics[width=\\textwidth]{figure.pdf}\n        \\captionof{xxxxx.}\n    \\end{center}\n}]\n```\n缺点是无法添加`label`，正文只能手动加引用了。\n\n**两幅图片同一行显示：**\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\subfigure[fig1.]{\n        \\begin{minipage}[t]{0.58\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure1.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1a}\n    }\n    \\subfigure[fig2.]{\n        \\begin{minipage}[t]{0.34\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure2.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1b}\n    }\n    \\caption{xxxxx.}\n    \\label{Fig:fig1}\n\\end{figure*}\n```\n注意的是，两个图片宽度之和`0.58 + 0.34 = 0.92`要尽量小于1，不然会显示出问题。\n\n# 伪代码\n---\n\n```latex\n\\renewcommand{\\algorithmicrequire}{ \\textbf{Input:}}\n\\renewcommand{\\algorithmicensure}{ \\textbf{Output:}}\n\n\\begin{algorithm}[t]\n    \\caption{ alg1. }\\label{Alg:Alg1}\n    \\begin{algorithmic}[1]\n        \\Require\n            % 输入\n        \\Ensure\n            % 输出\n        % 过程\n        \\Function {xxxxxx}{$i, j$}\n            % 函数体\n        \\EndFunction\n    \\end{algorithmic}\n\\end{algorithm}\n```\n\n# 表格\n---\n\n```latex\n\\newcommand{\\tabincell}[2]{\\begin{tabular}{@{}#1@{}}#2\\end{tabular}}\n\n\\begin{table}[t]\n\\normalsize\n\\begin{center}\n\\begin{tabular}{l|l|ccc}\n\n\\hline\n\\multicolumn{2}{c|}{Model} & LR & LP & F1\\\\\n\n\\hline\\hline\n\n\\end{tabular}\n\\end{center}\n\\caption{ xxxxx.}\n\\label{Tab:CompDiffConfig}\n\\end{table}\n```\n\n两个难点，一个是合并同一行的单元格，用`\\multicolumn{cols}{pos}{text}`。\n\n一个是合并同一列的单元格，用：\n```latex\n\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        \\multirow{2}*{合并两行一列} & 二 & 三 & 四 \\\\\n        ~ & 2 & 3 & 4 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\n```\n注意第二行第一列要用`~`补上空位。用`\\cline{start-end}`来代替`\\hline`划线。\n\n**暂时就想到这些了，等想到了再更吧，祝我paper顺利。**","slug":"latex-pdf","published":1,"updated":"2019-07-20T04:18:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hs009e7swem8ck6vm5","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n<p>这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。</p>\n<h1 id=\"插入矢量图片\"><a href=\"#插入矢量图片\" class=\"headerlink\" title=\"插入矢量图片\"></a>插入矢量图片</h1><hr>\n<p>首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。<br><img src=\"1.jpg\" alt><br><strong>方法一：</strong><br>直接另存为pdf，例如存为<code>figure.pdf</code>。<br><img src=\"2.jpg\" alt><br>注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。<br>然后在Latex中使用如下代码插入pdf图片即可：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> Model. <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">fig::model</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span></code></pre>\n<p>其中参数<code>width=\\textwidth</code>是用来调整图片宽度，使得图片占满整个论文，效果如下：<br><img src=\"3.jpg\" alt><br>注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。<br>如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\linewidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> Model. <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">fig::model</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span></code></pre>\n<p>效果如下：<br><img src=\"4.jpg\" alt></p>\n<p><strong>2019.1.14更新：</strong><br>关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。</p>\n<p><strong>方法二：</strong><br>ppt绘制好的模型图右键另存为<code>emf</code>格式，这是一种Windows的矢量图格式，然后下载一款软件叫<code>Metafile to EPS Converter</code><a href=\"http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe\" target=\"_blank\" rel=\"noopener\">地址</a>，将图片转为Latex支持的<code>eps</code>格式，例如命名为<code>figure.eps</code>。</p>\n<p>最后在Latex使用相同的代码插入图片即可，效果如下：<br><img src=\"5.jpg\" alt><br>可以看出两侧间距比原来小了很多。</p>\n<p><strong>2019.3.6更新：</strong></p>\n<h1 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h1><hr>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">CJK</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">CJK*</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>GBK<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>song<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">% 正文</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">CJK*</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><hr>\n<p><strong>单幅图片：</strong></p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\linewidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>xxxxx.<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:xxxxx</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span></code></pre>\n<p>跨双栏的话把<code>figure</code>改成<code>figure*</code>，<code>htbp</code>控制位置，自己看着调。</p>\n<p>难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\twocolumn</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function selector\">\\renewcommand</span><span class=\"token function selector\">\\twocolumn</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>#1<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\centering</span>\n        <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\captionof</span><span class=\"token punctuation\">{</span>xxxxx.<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre>\n<p>缺点是无法添加<code>label</code>，正文只能手动加引用了。</p>\n<p><strong>两幅图片同一行显示：</strong></p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\subfigure</span><span class=\"token punctuation\">[</span>fig1.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>0.58<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure1.pdf<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:fig1a</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\subfigure</span><span class=\"token punctuation\">[</span>fig2.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>0.34<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure2.pdf<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:fig1b</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>xxxxx.<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:fig1</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span></code></pre>\n<p>注意的是，两个图片宽度之和<code>0.58 + 0.34 = 0.92</code>要尽量小于1，不然会显示出问题。</p>\n<h1 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h1><hr>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmicrequire</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>Input:<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmicensure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>Output:<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> alg1. <span class=\"token punctuation\">}</span><span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Alg:Alg1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithmic</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>\n        <span class=\"token function selector\">\\Require</span>\n            <span class=\"token comment\" spellcheck=\"true\">% 输入</span>\n        <span class=\"token function selector\">\\Ensure</span>\n            <span class=\"token comment\" spellcheck=\"true\">% 输出</span>\n        <span class=\"token comment\" spellcheck=\"true\">% 过程</span>\n        <span class=\"token function selector\">\\Function</span> <span class=\"token punctuation\">{</span>xxxxxx<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$i, j$</span><span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">% 函数体</span>\n        <span class=\"token function selector\">\\EndFunction</span>\n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithmic</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><hr>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\newcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\tabincell</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>@<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>#1@<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>#2<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n<span class=\"token function selector\">\\normalsize</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>l|l|ccc<span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\hline</span>\n<span class=\"token function selector\">\\multicolumn</span><span class=\"token punctuation\">{</span>2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>c|<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>Model<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">&amp;</span> LR <span class=\"token punctuation\">&amp;</span> LP <span class=\"token punctuation\">&amp;</span> F1<span class=\"token function selector\">\\\\</span>\n\n<span class=\"token function selector\">\\hline</span><span class=\"token function selector\">\\hline</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> xxxxx.<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Tab:CompDiffConfig</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span></code></pre>\n<p>两个难点，一个是合并同一行的单元格，用<code>\\multicolumn{cols}{pos}{text}</code>。</p>\n<p>一个是合并同一列的单元格，用：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>|c|c|c|c|<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\hline</span>\n        <span class=\"token function selector\">\\multirow</span><span class=\"token punctuation\">{</span>2<span class=\"token punctuation\">}</span>*<span class=\"token punctuation\">{</span>合并两行一列<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">&amp;</span> 二 <span class=\"token punctuation\">&amp;</span> 三 <span class=\"token punctuation\">&amp;</span> 四 <span class=\"token function selector\">\\\\</span>\n        ~ <span class=\"token punctuation\">&amp;</span> 2 <span class=\"token punctuation\">&amp;</span> 3 <span class=\"token punctuation\">&amp;</span> 4 <span class=\"token function selector\">\\\\</span>\n        <span class=\"token function selector\">\\hline</span>\n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span></code></pre>\n<p>注意第二行第一列要用<code>~</code>补上空位。用<code>\\cline{start-end}</code>来代替<code>\\hline</code>划线。</p>\n<p><strong>暂时就想到这些了，等想到了再更吧，祝我paper顺利。</strong></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n<p>这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。</p>\n<h1 id=\"插入矢量图片\"><a href=\"#插入矢量图片\" class=\"headerlink\" title=\"插入矢量图片\"></a>插入矢量图片</h1><hr>\n<p>首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。<br><img src=\"1.jpg\" alt><br><strong>方法一：</strong><br>直接另存为pdf，例如存为<code>figure.pdf</code>。<br><img src=\"2.jpg\" alt><br>注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。<br>然后在Latex中使用如下代码插入pdf图片即可：</p>\n<pre><code class=\"latex\">\\begin{figure*}[htbp]\n    \\centering\n    \\includegraphics[width=\\textwidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure*}</code></pre>\n<p>其中参数<code>width=\\textwidth</code>是用来调整图片宽度，使得图片占满整个论文，效果如下：<br><img src=\"3.jpg\" alt><br>注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。<br>如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：</p>\n<pre><code class=\"latex\">\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure}</code></pre>\n<p>效果如下：<br><img src=\"4.jpg\" alt></p>\n<p><strong>2019.1.14更新：</strong><br>关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。</p>\n<p><strong>方法二：</strong><br>ppt绘制好的模型图右键另存为<code>emf</code>格式，这是一种Windows的矢量图格式，然后下载一款软件叫<code>Metafile to EPS Converter</code><a href=\"http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe\" target=\"_blank\" rel=\"noopener\">地址</a>，将图片转为Latex支持的<code>eps</code>格式，例如命名为<code>figure.eps</code>。</p>\n<p>最后在Latex使用相同的代码插入图片即可，效果如下：<br><img src=\"5.jpg\" alt><br>可以看出两侧间距比原来小了很多。</p>\n<p><strong>2019.3.6更新：</strong></p>\n<h1 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h1><hr>\n<pre><code class=\"latex\">\\usepackage{CJK}\n\n\\begin{document}\n\\begin{CJK*}{GBK}{song}\n\n% 正文\n\n\\end{CJK*}\n\\end{document}</code></pre>\n<h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><hr>\n<p><strong>单幅图片：</strong></p>\n<pre><code class=\"latex\">\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{xxxxx.}\n    \\label{Fig:xxxxx}\n\\end{figure}</code></pre>\n<p>跨双栏的话把<code>figure</code>改成<code>figure*</code>，<code>htbp</code>控制位置，自己看着调。</p>\n<p>难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：</p>\n<pre><code class=\"latex\">\\twocolumn[{\n    \\renewcommand\\twocolumn[1][]{#1}\n    \\begin{center}\n        \\centering\n        \\includegraphics[width=\\textwidth]{figure.pdf}\n        \\captionof{xxxxx.}\n    \\end{center}\n}]</code></pre>\n<p>缺点是无法添加<code>label</code>，正文只能手动加引用了。</p>\n<p><strong>两幅图片同一行显示：</strong></p>\n<pre><code class=\"latex\">\\begin{figure*}[htbp]\n    \\centering\n    \\subfigure[fig1.]{\n        \\begin{minipage}[t]{0.58\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure1.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1a}\n    }\n    \\subfigure[fig2.]{\n        \\begin{minipage}[t]{0.34\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure2.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1b}\n    }\n    \\caption{xxxxx.}\n    \\label{Fig:fig1}\n\\end{figure*}</code></pre>\n<p>注意的是，两个图片宽度之和<code>0.58 + 0.34 = 0.92</code>要尽量小于1，不然会显示出问题。</p>\n<h1 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h1><hr>\n<pre><code class=\"latex\">\\renewcommand{\\algorithmicrequire}{ \\textbf{Input:}}\n\\renewcommand{\\algorithmicensure}{ \\textbf{Output:}}\n\n\\begin{algorithm}[t]\n    \\caption{ alg1. }\\label{Alg:Alg1}\n    \\begin{algorithmic}[1]\n        \\Require\n            % 输入\n        \\Ensure\n            % 输出\n        % 过程\n        \\Function {xxxxxx}{$i, j$}\n            % 函数体\n        \\EndFunction\n    \\end{algorithmic}\n\\end{algorithm}</code></pre>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><hr>\n<pre><code class=\"latex\">\\newcommand{\\tabincell}[2]{\\begin{tabular}{@{}#1@{}}#2\\end{tabular}}\n\n\\begin{table}[t]\n\\normalsize\n\\begin{center}\n\\begin{tabular}{l|l|ccc}\n\n\\hline\n\\multicolumn{2}{c|}{Model} &amp; LR &amp; LP &amp; F1\\\\\n\n\\hline\\hline\n\n\\end{tabular}\n\\end{center}\n\\caption{ xxxxx.}\n\\label{Tab:CompDiffConfig}\n\\end{table}</code></pre>\n<p>两个难点，一个是合并同一行的单元格，用<code>\\multicolumn{cols}{pos}{text}</code>。</p>\n<p>一个是合并同一列的单元格，用：</p>\n<pre><code class=\"latex\">\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        \\multirow{2}*{合并两行一列} &amp; 二 &amp; 三 &amp; 四 \\\\\n        ~ &amp; 2 &amp; 3 &amp; 4 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}</code></pre>\n<p>注意第二行第一列要用<code>~</code>补上空位。用<code>\\cline{start-end}</code>来代替<code>\\hline</code>划线。</p>\n<p><strong>暂时就想到这些了，等想到了再更吧，祝我paper顺利。</strong></p>\n"},{"title":"一位长者关于保研的一些人生经验","date":"2017-09-19T06:11:10.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"经过三年的艰苦学习，终于也艰难保上研了，因此在此给学弟学妹们一点人生经验，粗鄙之见，大家随便看看。\n\n# 学习\n---\n* 好好学习自然不用多说，自觉性是最重要的，作业不能拖拉，不要拖到最后一刻才做作业。\n就拿我自己说吧，我每次上完课都会立即把上课讲的再看一遍，把没听懂的搞懂，不然时间长了会慢慢忘掉的，等到期末就更难搞懂了。还有就是作业，我每次都会当天就开始做，尽量提前很早做完。这样好处多多哦，既可以不至于最后一天很忙，又可以把作业完成的很好，最后自然就拿高分啦。\n* 图书馆可以多去去的，虽然我这一年都没去过。\n想当年大一大二在闵行的时候，那时候还是有女票的(>﹏<)，基本上天天都会去图书馆呆着吧，很怀念那时候的日子。\n* 上课少玩手机，多听讲，这样期末复习起来才轻松一点。\n不过我自己上课也玩哈哈哈，我也有很多课听不懂或者很无聊的课，都会戳一戳手机解解闷。有时下午太困了还会打个盹。但是一定要记住，课上缺的，课后一定要补回来，就算花再多时间也要弄懂。\n\n# 竞赛项目\n---\n* 有实力和天赋的话搞搞ACM竞赛也是好处极大的，奖学金和保研加分多多的，也极大提升代码能力。\n想当年我刚高中毕业的那个暑假，还连信息学竞赛都没听说过，但是出于兴趣暑假自学了c语言和基础的算法。于是刚开学就被招进了ACM实验室。不过当时搞的人也少，于是我也就有了出去打比赛的机会。现在这几年人越来越多了，要好好加油了啊。\n不过我后来太懒了，都没怎么训练，现在光荣的退役咯，老学长只能给你们加油了。\n* 项目的话我没怎么搞过，真心想搞可以好好弄弄，想水一水的那就别浪费时间了，加分也不多。\n想当年还有过打算搞搞大夏杯啥的，后来也没了音讯，毕竟ACM太忙了。\n\n# 娱乐\n---\n* 也别老学习啊，多累啊，出去散散步逛逛街玩玩。\n找个女票啊，带她一起出去玩玩。实在没有的话，和好基友出去玩也行啊！\n* 日常开黑打打游戏啊，但别耽误了学习做作业。\n像我就玩英雄联盟、炉石之类的啊，别玩物丧志，通宵玩伤了身体就好。室友之间有个共同爱好挺不错的。\n\n# 恋爱\n---\n* 这方面我很失败，就不谈经验了，谈谈教训吧。\n* 要好好待人家，别只顾自己学习和玩乐。\n* 别太自私，毕竟人家为你付出了青春。\n* 为我自己加油。\n\n# 生活\n---\n* 千万别熬夜了，大一大二你还年轻，熬得起。等到了大三大四，身体吃不消了，你会越来越感觉累的。\n* 还是那句话，学在平时，别在考试前最后一天通宵学习。\n* 现在想来，还是多运动运动散散步好，整天呆在宿舍太闷了，恐怕是老了吧。\n\n最后附上今年保研最终排名，见笑了（好基友非要我给他打码，那我就照办了）：\n![](top.jpg)","source":"_posts/recommend.md","raw":"---\ntitle: 一位长者关于保研的一些人生经验\ndate: 2017-09-19 14:11:10\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 保研\ncategories:\n- 随笔\n---\n经过三年的艰苦学习，终于也艰难保上研了，因此在此给学弟学妹们一点人生经验，粗鄙之见，大家随便看看。\n\n# 学习\n---\n* 好好学习自然不用多说，自觉性是最重要的，作业不能拖拉，不要拖到最后一刻才做作业。\n就拿我自己说吧，我每次上完课都会立即把上课讲的再看一遍，把没听懂的搞懂，不然时间长了会慢慢忘掉的，等到期末就更难搞懂了。还有就是作业，我每次都会当天就开始做，尽量提前很早做完。这样好处多多哦，既可以不至于最后一天很忙，又可以把作业完成的很好，最后自然就拿高分啦。\n* 图书馆可以多去去的，虽然我这一年都没去过。\n想当年大一大二在闵行的时候，那时候还是有女票的(>﹏<)，基本上天天都会去图书馆呆着吧，很怀念那时候的日子。\n* 上课少玩手机，多听讲，这样期末复习起来才轻松一点。\n不过我自己上课也玩哈哈哈，我也有很多课听不懂或者很无聊的课，都会戳一戳手机解解闷。有时下午太困了还会打个盹。但是一定要记住，课上缺的，课后一定要补回来，就算花再多时间也要弄懂。\n\n# 竞赛项目\n---\n* 有实力和天赋的话搞搞ACM竞赛也是好处极大的，奖学金和保研加分多多的，也极大提升代码能力。\n想当年我刚高中毕业的那个暑假，还连信息学竞赛都没听说过，但是出于兴趣暑假自学了c语言和基础的算法。于是刚开学就被招进了ACM实验室。不过当时搞的人也少，于是我也就有了出去打比赛的机会。现在这几年人越来越多了，要好好加油了啊。\n不过我后来太懒了，都没怎么训练，现在光荣的退役咯，老学长只能给你们加油了。\n* 项目的话我没怎么搞过，真心想搞可以好好弄弄，想水一水的那就别浪费时间了，加分也不多。\n想当年还有过打算搞搞大夏杯啥的，后来也没了音讯，毕竟ACM太忙了。\n\n# 娱乐\n---\n* 也别老学习啊，多累啊，出去散散步逛逛街玩玩。\n找个女票啊，带她一起出去玩玩。实在没有的话，和好基友出去玩也行啊！\n* 日常开黑打打游戏啊，但别耽误了学习做作业。\n像我就玩英雄联盟、炉石之类的啊，别玩物丧志，通宵玩伤了身体就好。室友之间有个共同爱好挺不错的。\n\n# 恋爱\n---\n* 这方面我很失败，就不谈经验了，谈谈教训吧。\n* 要好好待人家，别只顾自己学习和玩乐。\n* 别太自私，毕竟人家为你付出了青春。\n* 为我自己加油。\n\n# 生活\n---\n* 千万别熬夜了，大一大二你还年轻，熬得起。等到了大三大四，身体吃不消了，你会越来越感觉累的。\n* 还是那句话，学在平时，别在考试前最后一天通宵学习。\n* 现在想来，还是多运动运动散散步好，整天呆在宿舍太闷了，恐怕是老了吧。\n\n最后附上今年保研最终排名，见笑了（好基友非要我给他打码，那我就照办了）：\n![](top.jpg)","slug":"recommend","published":1,"updated":"2019-07-19T12:27:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hv009j7swe4ditj6vv","content":"<p>经过三年的艰苦学习，终于也艰难保上研了，因此在此给学弟学妹们一点人生经验，粗鄙之见，大家随便看看。</p>\n<h1 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h1><hr>\n<ul>\n<li>好好学习自然不用多说，自觉性是最重要的，作业不能拖拉，不要拖到最后一刻才做作业。<br>就拿我自己说吧，我每次上完课都会立即把上课讲的再看一遍，把没听懂的搞懂，不然时间长了会慢慢忘掉的，等到期末就更难搞懂了。还有就是作业，我每次都会当天就开始做，尽量提前很早做完。这样好处多多哦，既可以不至于最后一天很忙，又可以把作业完成的很好，最后自然就拿高分啦。</li>\n<li>图书馆可以多去去的，虽然我这一年都没去过。<br>想当年大一大二在闵行的时候，那时候还是有女票的(&gt;﹏&lt;)，基本上天天都会去图书馆呆着吧，很怀念那时候的日子。</li>\n<li>上课少玩手机，多听讲，这样期末复习起来才轻松一点。<br>不过我自己上课也玩哈哈哈，我也有很多课听不懂或者很无聊的课，都会戳一戳手机解解闷。有时下午太困了还会打个盹。但是一定要记住，课上缺的，课后一定要补回来，就算花再多时间也要弄懂。</li>\n</ul>\n<h1 id=\"竞赛项目\"><a href=\"#竞赛项目\" class=\"headerlink\" title=\"竞赛项目\"></a>竞赛项目</h1><hr>\n<ul>\n<li>有实力和天赋的话搞搞ACM竞赛也是好处极大的，奖学金和保研加分多多的，也极大提升代码能力。<br>想当年我刚高中毕业的那个暑假，还连信息学竞赛都没听说过，但是出于兴趣暑假自学了c语言和基础的算法。于是刚开学就被招进了ACM实验室。不过当时搞的人也少，于是我也就有了出去打比赛的机会。现在这几年人越来越多了，要好好加油了啊。<br>不过我后来太懒了，都没怎么训练，现在光荣的退役咯，老学长只能给你们加油了。</li>\n<li>项目的话我没怎么搞过，真心想搞可以好好弄弄，想水一水的那就别浪费时间了，加分也不多。<br>想当年还有过打算搞搞大夏杯啥的，后来也没了音讯，毕竟ACM太忙了。</li>\n</ul>\n<h1 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h1><hr>\n<ul>\n<li>也别老学习啊，多累啊，出去散散步逛逛街玩玩。<br>找个女票啊，带她一起出去玩玩。实在没有的话，和好基友出去玩也行啊！</li>\n<li>日常开黑打打游戏啊，但别耽误了学习做作业。<br>像我就玩英雄联盟、炉石之类的啊，别玩物丧志，通宵玩伤了身体就好。室友之间有个共同爱好挺不错的。</li>\n</ul>\n<h1 id=\"恋爱\"><a href=\"#恋爱\" class=\"headerlink\" title=\"恋爱\"></a>恋爱</h1><hr>\n<ul>\n<li>这方面我很失败，就不谈经验了，谈谈教训吧。</li>\n<li>要好好待人家，别只顾自己学习和玩乐。</li>\n<li>别太自私，毕竟人家为你付出了青春。</li>\n<li>为我自己加油。</li>\n</ul>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><hr>\n<ul>\n<li>千万别熬夜了，大一大二你还年轻，熬得起。等到了大三大四，身体吃不消了，你会越来越感觉累的。</li>\n<li>还是那句话，学在平时，别在考试前最后一天通宵学习。</li>\n<li>现在想来，还是多运动运动散散步好，整天呆在宿舍太闷了，恐怕是老了吧。</li>\n</ul>\n<p>最后附上今年保研最终排名，见笑了（好基友非要我给他打码，那我就照办了）：<br><img src=\"top.jpg\" alt></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>经过三年的艰苦学习，终于也艰难保上研了，因此在此给学弟学妹们一点人生经验，粗鄙之见，大家随便看看。</p>\n<h1 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h1><hr>\n<ul>\n<li>好好学习自然不用多说，自觉性是最重要的，作业不能拖拉，不要拖到最后一刻才做作业。<br>就拿我自己说吧，我每次上完课都会立即把上课讲的再看一遍，把没听懂的搞懂，不然时间长了会慢慢忘掉的，等到期末就更难搞懂了。还有就是作业，我每次都会当天就开始做，尽量提前很早做完。这样好处多多哦，既可以不至于最后一天很忙，又可以把作业完成的很好，最后自然就拿高分啦。</li>\n<li>图书馆可以多去去的，虽然我这一年都没去过。<br>想当年大一大二在闵行的时候，那时候还是有女票的(&gt;﹏&lt;)，基本上天天都会去图书馆呆着吧，很怀念那时候的日子。</li>\n<li>上课少玩手机，多听讲，这样期末复习起来才轻松一点。<br>不过我自己上课也玩哈哈哈，我也有很多课听不懂或者很无聊的课，都会戳一戳手机解解闷。有时下午太困了还会打个盹。但是一定要记住，课上缺的，课后一定要补回来，就算花再多时间也要弄懂。</li>\n</ul>\n<h1 id=\"竞赛项目\"><a href=\"#竞赛项目\" class=\"headerlink\" title=\"竞赛项目\"></a>竞赛项目</h1><hr>\n<ul>\n<li>有实力和天赋的话搞搞ACM竞赛也是好处极大的，奖学金和保研加分多多的，也极大提升代码能力。<br>想当年我刚高中毕业的那个暑假，还连信息学竞赛都没听说过，但是出于兴趣暑假自学了c语言和基础的算法。于是刚开学就被招进了ACM实验室。不过当时搞的人也少，于是我也就有了出去打比赛的机会。现在这几年人越来越多了，要好好加油了啊。<br>不过我后来太懒了，都没怎么训练，现在光荣的退役咯，老学长只能给你们加油了。</li>\n<li>项目的话我没怎么搞过，真心想搞可以好好弄弄，想水一水的那就别浪费时间了，加分也不多。<br>想当年还有过打算搞搞大夏杯啥的，后来也没了音讯，毕竟ACM太忙了。</li>\n</ul>\n<h1 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h1><hr>\n<ul>\n<li>也别老学习啊，多累啊，出去散散步逛逛街玩玩。<br>找个女票啊，带她一起出去玩玩。实在没有的话，和好基友出去玩也行啊！</li>\n<li>日常开黑打打游戏啊，但别耽误了学习做作业。<br>像我就玩英雄联盟、炉石之类的啊，别玩物丧志，通宵玩伤了身体就好。室友之间有个共同爱好挺不错的。</li>\n</ul>\n<h1 id=\"恋爱\"><a href=\"#恋爱\" class=\"headerlink\" title=\"恋爱\"></a>恋爱</h1><hr>\n<ul>\n<li>这方面我很失败，就不谈经验了，谈谈教训吧。</li>\n<li>要好好待人家，别只顾自己学习和玩乐。</li>\n<li>别太自私，毕竟人家为你付出了青春。</li>\n<li>为我自己加油。</li>\n</ul>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><hr>\n<ul>\n<li>千万别熬夜了，大一大二你还年轻，熬得起。等到了大三大四，身体吃不消了，你会越来越感觉累的。</li>\n<li>还是那句话，学在平时，别在考试前最后一天通宵学习。</li>\n<li>现在想来，还是多运动运动散散步好，整天呆在宿舍太闷了，恐怕是老了吧。</li>\n</ul>\n<p>最后附上今年保研最终排名，见笑了（好基友非要我给他打码，那我就照办了）：<br><img src=\"top.jpg\" alt></p>\n"},{"title":"Ubuntu16.04下Nvidia+Cuda8.0+Dynet安装教程","date":"2018-03-08T16:31:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28936057&auto=1&height=66\"></iframe></div>\n\n之前也在笔记本上装过几次cuda，均以失败告终，网上的教程都没有完全能拿来用的，多多少少都会出现一些问题。\n这次终于完完全全安装成功了，可喜可贺。。。说起来都是泪。\n\n注意显卡驱动安装最新版就行了，但是cuda最好还是别安装最新版了，装个8.0版本吧，不然都是泪。\n\n最终版本为ubuntu16.04 + cuda8.0 + gcc5.4。\n\n# NVIDIA驱动安装\n---\n\n进入[NVIDIA官网](http://www.nvidia.com/Download/index.aspx?lang=en-us)，选择适合自己显卡的驱动，下载后是一个.run文件。\n\n清除之前安装过的NVIDIA：`sudo apt-get remove --purge nvidia*`\n\n禁止nouveau等驱动：`sudo gedit /etc/modprob.d/blacklist.conf`\n\n\n\n加入下列语句并保存：\n```\nblacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist nvidiafb\nblacklist rivatv\n```\n\n执行`sudo update-initramfs -u`并重启`reboot`。\n\n按`ctrl+alt+f1`，登录命令行界面。\n\n执行`sudo service lightdm stop`\n\n进入NVIDIA.run目录，运行`sudo sh ./NVIDIA.run –no-x-check –no-nouveau-check –no-opengl-files`\n\n安装过程中会报错，直接无视。会问你要不要自动更新X配置文件，选择是就行了。\n\n重启。输入`sudo nvidia-smi`或者`nvidia-settings`，如果显示显卡信息，那么恭喜你安装成功了。\n\n# CUDA安装\n---\n\n进入[cuda官网](https://developer.nvidia.com/cuda-toolkit)，根据自己版本下载cuda.run文件。\n\n执行`sudo sh cuda.run`，注意中间问你要不要安装驱动程序，选择no\n\n执行`sudo gedit /etc/profile`\n添加下列语句并保存：\n```\nexport PATH=/usr/local/cuda-8.0/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$LD_LIBRARY_PATH\n```\n\n重启，打开`/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery`\n\n执行``sudo make``和``./deviceQuery``，如果出现显卡信息，那么cuda安装成功了。\n\n# Dynet安装\n---\n\n首先安装Anaconda，过程就不说了，直接运行shell脚本就行了。\n\n然后重要的地方来了，创建虚拟环境，在虚拟环境里安装dynet！！！\n\n执行\n```\nconda create --name python2 python=2 cython numpy\nsource activate python2\n```\n\n然后CPU版本的话很简单，直接执行`pip install dynet`就行了。\n\nGPU版本执行`BACKEND=cuda pip install git+https://github.com/clab/dynet#egg=dynet -i https://pypi.tuna.tsinghua.edu.cn/simple`。\n\n然后就成功啦，但是运行dynet程序的时候还是会报错，找不到libcudart库，这时执行下面三条语句就行了：\n```\nsudo cp /usr/local/cuda-8.0/lib64/libcudart.so.8.0 /usr/local/lib/libcudart.so.8.0 && sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcublas.so.8.0 /usr/local/lib/libcublas.so.8.0 && sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcurand.so.8.0 /usr/local/lib/libcurand.so.8.0 && sudo ldconfig\n```\n\n然后终于可以运行了，感动哭了。。。","source":"_posts/nvidia-cuda-dynet.md","raw":"---\ntitle: Ubuntu16.04下Nvidia+Cuda8.0+Dynet安装教程\ndate: 2018-03-09 00:31:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- Dynet\n- Cuda\n- Ubuntu\ncategories:\n- 软件安装与配置\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28936057&auto=1&height=66\"></iframe></div>\n\n之前也在笔记本上装过几次cuda，均以失败告终，网上的教程都没有完全能拿来用的，多多少少都会出现一些问题。\n这次终于完完全全安装成功了，可喜可贺。。。说起来都是泪。\n\n注意显卡驱动安装最新版就行了，但是cuda最好还是别安装最新版了，装个8.0版本吧，不然都是泪。\n\n最终版本为ubuntu16.04 + cuda8.0 + gcc5.4。\n\n# NVIDIA驱动安装\n---\n\n进入[NVIDIA官网](http://www.nvidia.com/Download/index.aspx?lang=en-us)，选择适合自己显卡的驱动，下载后是一个.run文件。\n\n清除之前安装过的NVIDIA：`sudo apt-get remove --purge nvidia*`\n\n禁止nouveau等驱动：`sudo gedit /etc/modprob.d/blacklist.conf`\n\n\n\n加入下列语句并保存：\n```\nblacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist nvidiafb\nblacklist rivatv\n```\n\n执行`sudo update-initramfs -u`并重启`reboot`。\n\n按`ctrl+alt+f1`，登录命令行界面。\n\n执行`sudo service lightdm stop`\n\n进入NVIDIA.run目录，运行`sudo sh ./NVIDIA.run –no-x-check –no-nouveau-check –no-opengl-files`\n\n安装过程中会报错，直接无视。会问你要不要自动更新X配置文件，选择是就行了。\n\n重启。输入`sudo nvidia-smi`或者`nvidia-settings`，如果显示显卡信息，那么恭喜你安装成功了。\n\n# CUDA安装\n---\n\n进入[cuda官网](https://developer.nvidia.com/cuda-toolkit)，根据自己版本下载cuda.run文件。\n\n执行`sudo sh cuda.run`，注意中间问你要不要安装驱动程序，选择no\n\n执行`sudo gedit /etc/profile`\n添加下列语句并保存：\n```\nexport PATH=/usr/local/cuda-8.0/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$LD_LIBRARY_PATH\n```\n\n重启，打开`/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery`\n\n执行``sudo make``和``./deviceQuery``，如果出现显卡信息，那么cuda安装成功了。\n\n# Dynet安装\n---\n\n首先安装Anaconda，过程就不说了，直接运行shell脚本就行了。\n\n然后重要的地方来了，创建虚拟环境，在虚拟环境里安装dynet！！！\n\n执行\n```\nconda create --name python2 python=2 cython numpy\nsource activate python2\n```\n\n然后CPU版本的话很简单，直接执行`pip install dynet`就行了。\n\nGPU版本执行`BACKEND=cuda pip install git+https://github.com/clab/dynet#egg=dynet -i https://pypi.tuna.tsinghua.edu.cn/simple`。\n\n然后就成功啦，但是运行dynet程序的时候还是会报错，找不到libcudart库，这时执行下面三条语句就行了：\n```\nsudo cp /usr/local/cuda-8.0/lib64/libcudart.so.8.0 /usr/local/lib/libcudart.so.8.0 && sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcublas.so.8.0 /usr/local/lib/libcublas.so.8.0 && sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcurand.so.8.0 /usr/local/lib/libcurand.so.8.0 && sudo ldconfig\n```\n\n然后终于可以运行了，感动哭了。。。","slug":"nvidia-cuda-dynet","published":1,"updated":"2019-07-20T04:30:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hx009m7swexh1f5zad","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28936057&auto=1&height=66\"></iframe></div>\n\n<p>之前也在笔记本上装过几次cuda，均以失败告终，网上的教程都没有完全能拿来用的，多多少少都会出现一些问题。<br>这次终于完完全全安装成功了，可喜可贺。。。说起来都是泪。</p>\n<p>注意显卡驱动安装最新版就行了，但是cuda最好还是别安装最新版了，装个8.0版本吧，不然都是泪。</p>\n<p>最终版本为ubuntu16.04 + cuda8.0 + gcc5.4。</p>\n<h1 id=\"NVIDIA驱动安装\"><a href=\"#NVIDIA驱动安装\" class=\"headerlink\" title=\"NVIDIA驱动安装\"></a>NVIDIA驱动安装</h1><hr>\n<p>进入<a href=\"http://www.nvidia.com/Download/index.aspx?lang=en-us\" target=\"_blank\" rel=\"noopener\">NVIDIA官网</a>，选择适合自己显卡的驱动，下载后是一个.run文件。</p>\n<p>清除之前安装过的NVIDIA：<code>sudo apt-get remove --purge nvidia*</code></p>\n<p>禁止nouveau等驱动：<code>sudo gedit /etc/modprob.d/blacklist.conf</code></p>\n<p>加入下列语句并保存：</p>\n<pre><code>blacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist nvidiafb\nblacklist rivatv</code></pre><p>执行<code>sudo update-initramfs -u</code>并重启<code>reboot</code>。</p>\n<p>按<code>ctrl+alt+f1</code>，登录命令行界面。</p>\n<p>执行<code>sudo service lightdm stop</code></p>\n<p>进入NVIDIA.run目录，运行<code>sudo sh ./NVIDIA.run –no-x-check –no-nouveau-check –no-opengl-files</code></p>\n<p>安装过程中会报错，直接无视。会问你要不要自动更新X配置文件，选择是就行了。</p>\n<p>重启。输入<code>sudo nvidia-smi</code>或者<code>nvidia-settings</code>，如果显示显卡信息，那么恭喜你安装成功了。</p>\n<h1 id=\"CUDA安装\"><a href=\"#CUDA安装\" class=\"headerlink\" title=\"CUDA安装\"></a>CUDA安装</h1><hr>\n<p>进入<a href=\"https://developer.nvidia.com/cuda-toolkit\" target=\"_blank\" rel=\"noopener\">cuda官网</a>，根据自己版本下载cuda.run文件。</p>\n<p>执行<code>sudo sh cuda.run</code>，注意中间问你要不要安装驱动程序，选择no</p>\n<p>执行<code>sudo gedit /etc/profile</code><br>添加下列语句并保存：</p>\n<pre><code>export PATH=/usr/local/cuda-8.0/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$LD_LIBRARY_PATH</code></pre><p>重启，打开<code>/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery</code></p>\n<p>执行<code>sudo make</code>和<code>./deviceQuery</code>，如果出现显卡信息，那么cuda安装成功了。</p>\n<h1 id=\"Dynet安装\"><a href=\"#Dynet安装\" class=\"headerlink\" title=\"Dynet安装\"></a>Dynet安装</h1><hr>\n<p>首先安装Anaconda，过程就不说了，直接运行shell脚本就行了。</p>\n<p>然后重要的地方来了，创建虚拟环境，在虚拟环境里安装dynet！！！</p>\n<p>执行</p>\n<pre><code>conda create --name python2 python=2 cython numpy\nsource activate python2</code></pre><p>然后CPU版本的话很简单，直接执行<code>pip install dynet</code>就行了。</p>\n<p>GPU版本执行<code>BACKEND=cuda pip install git+https://github.com/clab/dynet#egg=dynet -i https://pypi.tuna.tsinghua.edu.cn/simple</code>。</p>\n<p>然后就成功啦，但是运行dynet程序的时候还是会报错，找不到libcudart库，这时执行下面三条语句就行了：</p>\n<pre><code>sudo cp /usr/local/cuda-8.0/lib64/libcudart.so.8.0 /usr/local/lib/libcudart.so.8.0 &amp;&amp; sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcublas.so.8.0 /usr/local/lib/libcublas.so.8.0 &amp;&amp; sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcurand.so.8.0 /usr/local/lib/libcurand.so.8.0 &amp;&amp; sudo ldconfig</code></pre><p>然后终于可以运行了，感动哭了。。。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28936057&auto=1&height=66\"></iframe></div>\n\n<p>之前也在笔记本上装过几次cuda，均以失败告终，网上的教程都没有完全能拿来用的，多多少少都会出现一些问题。<br>这次终于完完全全安装成功了，可喜可贺。。。说起来都是泪。</p>\n<p>注意显卡驱动安装最新版就行了，但是cuda最好还是别安装最新版了，装个8.0版本吧，不然都是泪。</p>\n<p>最终版本为ubuntu16.04 + cuda8.0 + gcc5.4。</p>\n<h1 id=\"NVIDIA驱动安装\"><a href=\"#NVIDIA驱动安装\" class=\"headerlink\" title=\"NVIDIA驱动安装\"></a>NVIDIA驱动安装</h1><hr>\n<p>进入<a href=\"http://www.nvidia.com/Download/index.aspx?lang=en-us\" target=\"_blank\" rel=\"noopener\">NVIDIA官网</a>，选择适合自己显卡的驱动，下载后是一个.run文件。</p>\n<p>清除之前安装过的NVIDIA：<code>sudo apt-get remove --purge nvidia*</code></p>\n<p>禁止nouveau等驱动：<code>sudo gedit /etc/modprob.d/blacklist.conf</code></p>\n<p>加入下列语句并保存：</p>\n<pre><code>blacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist nvidiafb\nblacklist rivatv</code></pre><p>执行<code>sudo update-initramfs -u</code>并重启<code>reboot</code>。</p>\n<p>按<code>ctrl+alt+f1</code>，登录命令行界面。</p>\n<p>执行<code>sudo service lightdm stop</code></p>\n<p>进入NVIDIA.run目录，运行<code>sudo sh ./NVIDIA.run –no-x-check –no-nouveau-check –no-opengl-files</code></p>\n<p>安装过程中会报错，直接无视。会问你要不要自动更新X配置文件，选择是就行了。</p>\n<p>重启。输入<code>sudo nvidia-smi</code>或者<code>nvidia-settings</code>，如果显示显卡信息，那么恭喜你安装成功了。</p>\n<h1 id=\"CUDA安装\"><a href=\"#CUDA安装\" class=\"headerlink\" title=\"CUDA安装\"></a>CUDA安装</h1><hr>\n<p>进入<a href=\"https://developer.nvidia.com/cuda-toolkit\" target=\"_blank\" rel=\"noopener\">cuda官网</a>，根据自己版本下载cuda.run文件。</p>\n<p>执行<code>sudo sh cuda.run</code>，注意中间问你要不要安装驱动程序，选择no</p>\n<p>执行<code>sudo gedit /etc/profile</code><br>添加下列语句并保存：</p>\n<pre><code>export PATH=/usr/local/cuda-8.0/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$LD_LIBRARY_PATH</code></pre><p>重启，打开<code>/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery</code></p>\n<p>执行<code>sudo make</code>和<code>./deviceQuery</code>，如果出现显卡信息，那么cuda安装成功了。</p>\n<h1 id=\"Dynet安装\"><a href=\"#Dynet安装\" class=\"headerlink\" title=\"Dynet安装\"></a>Dynet安装</h1><hr>\n<p>首先安装Anaconda，过程就不说了，直接运行shell脚本就行了。</p>\n<p>然后重要的地方来了，创建虚拟环境，在虚拟环境里安装dynet！！！</p>\n<p>执行</p>\n<pre><code>conda create --name python2 python=2 cython numpy\nsource activate python2</code></pre><p>然后CPU版本的话很简单，直接执行<code>pip install dynet</code>就行了。</p>\n<p>GPU版本执行<code>BACKEND=cuda pip install git+https://github.com/clab/dynet#egg=dynet -i https://pypi.tuna.tsinghua.edu.cn/simple</code>。</p>\n<p>然后就成功啦，但是运行dynet程序的时候还是会报错，找不到libcudart库，这时执行下面三条语句就行了：</p>\n<pre><code>sudo cp /usr/local/cuda-8.0/lib64/libcudart.so.8.0 /usr/local/lib/libcudart.so.8.0 &amp;&amp; sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcublas.so.8.0 /usr/local/lib/libcublas.so.8.0 &amp;&amp; sudo ldconfig\nsudo cp /usr/local/cuda-8.0/lib64/libcurand.so.8.0 /usr/local/lib/libcurand.so.8.0 &amp;&amp; sudo ldconfig</code></pre><p>然后终于可以运行了，感动哭了。。。</p>\n"},{"title":"给python新手的一些建议","date":"2018-10-11T12:53:18.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1293951677&auto=1&height=66\"></iframe></div>\n\n> 首先很荣幸被邀请给大一新入学的学弟学妹们谈谈编程入门经验，尤其是他们正在学的python语言。我就随便谈谈我大一时是如何编程入门的，以及怎么才能学好python编程，其他语言类似，都是相通的。最后再回答一下大家问的比较多的一些问题。\n\n# 引言\n---\n大多数人应该和我刚上大学时一样，完全没有接触过编程，所以在上python课的时候可能是一脸懵逼，完全不知道代码的原理是什么，为什么写出来就能运行，也不知道如何熟练地写出一段完整的代码。这都很正常，我大学之前也是对计算机一窍不通的，但是高中毕业的那个暑假，刚刚接触电脑、用上互联网的我，用了一个月自学了谭浩强的《C语言程序设计》，从此打开了新世界的大门。因此我下面结合我自身的经历给大家一些编程学习的经验，当然很多都要结合你自身的喜好和习惯，不用完全按我的来。\n\n# 一个称手的代码编辑器\n---\n要想代码写的舒服，首先得用一个称手的代码编辑器，最常用的python IDE是pycharm，如果你刚入门很依赖调试的话，可以使用这款IDE。当然不能过于依赖IDE的调试功能，要练就肉眼调试的本领，这样能极大的提高你的代码能力。所以我熟练了之后换上了sublime代码编辑器，这是一款十分漂亮的编辑器，个人觉得比pycharm好看到不知哪里去了。而具体的安装与python环境配置，去看看我的教程就行了：[Sublime Text安装与配置教程](https://godweiyang.com/2017/10/02/sublime/)。\n\n# 多练>多看\n---\n很多人还以为和高中一样，上课听听就完事了，课后也就不花时间去写代码了。其实不然，要想学好python，光课上听是没什么用的，还需要课后不停的找题目练习，只有试了才知道自己可能会踩到什么坑，才能不断总结出许多代码编写的经验。我刚开始也是一个劲看书，觉得语法都看的差不多了，以为自己都懂了，但是真正自己写起来才发现有很多的问题。\n\n课本首先得看熟了，上面的例子都要自己敲过去，还有布置的编程作业都得认真做完。推荐大家一个在线编程网站：[Python 基础教程 | 菜鸟教程](http://www.runoob.com/python/python-tutorial.html)，上面可以边学边练习，可以一定程度上提高你的学习积极性。\n\n# 善于使用EOJ\n---\n有很多同学学到最后都不知道有EOJ这个东西，这是我们学校的在线刷题网站，现在已经做得十分精美了。如果让你干巴巴的去写书上的代码，可能没多久你也没什么兴趣写了，但是如果让你用python做出来一道道的编程题，那么依旧会获得难以描述的快感，这能极大的提升你的积极性和代码能力。\n\n首先去[EOJ](http://acm.ecnu.edu.cn/)注册一个账号，然后去做过的人多的简单题，很多题首先考察的不是代码能力，而是你的算法，下面我还会讲到算法的重要性。做题需要注意输入输出格式，注意题目中的各种坑点，代码不是自然语言，和数学题一样容不得半点差错。\n\n# 程序=算法+数据结构\n---\n光会写几行代码没用，还要学会使用基本的数据结构和算法，这样才能写出高效率高质量的代码。比如python中的列表`list`、元组`tuple`、字典`dict`等等，熟练使用它们将会大大减轻你的工作量。算法也是非常重要的，比如要对若干个数进行排序，如果暴力的话速度会很慢很慢，这时候你就要学会用快速排序算法，就能立即得到结果啦。\n\n# 学会查阅资料\n---\n很多人遇到什么函数不会用了，使用报错了都不知道怎么办，到处问人，其实可以直接去[python官网](https://docs.python.org/3/)查看文档，里面都有各个函数的用法说明。遇到错误也可以百度错误内容，会有很多人写博客说明解决方法的，实在找不到推荐一个网站：[stackoverflow](https://stackoverflow.com/)，这是国外的一个问答网站，上面有超多编程相关问题，只要你提问了基本都有人替你解答。\n\n# 良好的编码风格\n---\n很多同学刚开始写的代码风格都很丑，我自己也是，要尽快形成自己的代码风格，python相比c语言好很多，强制了缩进，不然编译都不给你通过，但是还是有很多地方需要你自己注意，比如表达式运算符两边要加空格、变量命名要可以直接看出用途等等。推荐大家去读一读google的[python编程规范](https://www.runoob.com/w3cnote/google-python-styleguide.html)，写出美观的代码，以后也便于维护。\n\n# Q&A\n---\n* **Q: python相对于其他语言有哪些优势和区别？**\n**A:** 首先python语言最大的优势就是简单，非常适合没有编程基础的人入门，它去除了c语言繁琐的指针类型，而且代码也很容易读懂，与人类语言有点类似。python也支持面向对象，并且不像c++和java那样繁琐，保持了它的简洁性。因为它是开源的，所以有很多很多的第三方库可以调用，很多功能根本不需要你自己动手写，别人都帮你写好封装好了，你直接调用一个函数就解决了。但是python也有缺点，一大缺点就是相比于c++和java这种较为底层的语言，python的运行速度非常慢，当然可以选择使用cython来加速python。并且python的格式要求非常严格，强制代码缩进，两条语句不能写在同一行等等。\n\n* **Q: 老师上课提到“面向对象”和“面向过程”，是什么意思？**\n**A:** 简单来说，面向过程就是按照解决问题的顺序，一步步的编写代码、调用函数。而面向对象就是将你要处理的事物分解为一个个对象（也就是类），每个对象有很多属性，编写代码时只要生成这些类，并且调用它们的类方法就好了。面向对象的一大好处就是可维护性好，比如如果你要对两个相同的对象进行操作，如果用面向过程，那你就要写两段相同的代码，如果改了一段，还得同时修改另一段；而面向对象就很简单了，因为你的两个对象都封装在了一个类里，所以只要改一下类就好啦。\n\n* **Q: 拿到一个问题应该如何思考？如何解决？步骤是什么？**\n**A:** 拿到一个问题（比如编程题），不要直接下手写代码，先想想该用什么方法解决？方法的时间复杂度和空间复杂度能否承受？要用到哪些函数？总体框架应该写成什么样子？然后再一个个模块编写，不要写一步想一步。\n\n* **Q: 什么是递归思维？有什么好处？**\n**A:** 递归思想也就是递归算法是经常用到的一种算法，可以将规模很大的问题化解为一个个的小问题，便于求解也增加了可读性。举个例子吧，求解阶乘，常规方法是从$f(1)$开始逐项计算，而用递归思想就是要计算$f(n)$，就先计算出$f(n - 1)$然后乘以$n$，而$f(n - 1)$继续递归算下去就行了。\n\n* **Q: 对于萌新，基础薄弱，学长有什么好的方法？推荐一下有用的参考资料**\n**A:** 基础薄弱那就先把书上的语法看懂了，边看边敲了自己试一试怎么用，不要光看不写。资料的话看再多不如自己敲来的记忆深刻，推荐《python简明教程》吧，最方便的还是不会的用法直接百度或者谷歌，看博客讲解。\n\n* **Q: 如何避免语法符号规范的错误？**\n**A:** 语法错误很正常，我也经常遇到，特别是没怎么用过的函数，这个只能靠查文档，然后用多了自然就记得怎么用了。规范之类的上面说过了，去看google的python编码规范，养成一个好的编码习惯，既是为了别人能看懂你的代码，也是为了你自己今后还能看懂你自己的代码。\n\n* **Q: 如何判断什么时候该用什么函数？**\n**A:** 这个就根据你要实现的功能啊，比如你要切分一个句子变成若干个单词，那么自然而然想到要用`string.split()`函数。当然刚开始你可能根本就不知道有哪些函数可以给你用，那么你就需要百度“python切分一个句子变成若干个单词”，然后就会告诉你要用什么方法了，多查多记以后就会用了。\n\n* **Q: OJ系统是什么？我们如何利用它？**\n**A:** OJ全称是Online Judge，是一个在线评测系统，上面有很多很多编程题，你可以写代码实现它，然后提交给OJ运行，它会告诉你你的代码是否正确。大家可以利用我们学校自己的EOJ来进行编程训练，先从简单的题开始做起，记住，不要一遇到不会做的题就去百度找题解，一定要自己思考，自己想出了方法收获才是最大的，切记。","source":"_posts/python-advice.md","raw":"---\ntitle: 给python新手的一些建议\ndate: 2018-10-11 20:53:18\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- Python\n- 算法\ncategories:\n- 随笔\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1293951677&auto=1&height=66\"></iframe></div>\n\n> 首先很荣幸被邀请给大一新入学的学弟学妹们谈谈编程入门经验，尤其是他们正在学的python语言。我就随便谈谈我大一时是如何编程入门的，以及怎么才能学好python编程，其他语言类似，都是相通的。最后再回答一下大家问的比较多的一些问题。\n\n# 引言\n---\n大多数人应该和我刚上大学时一样，完全没有接触过编程，所以在上python课的时候可能是一脸懵逼，完全不知道代码的原理是什么，为什么写出来就能运行，也不知道如何熟练地写出一段完整的代码。这都很正常，我大学之前也是对计算机一窍不通的，但是高中毕业的那个暑假，刚刚接触电脑、用上互联网的我，用了一个月自学了谭浩强的《C语言程序设计》，从此打开了新世界的大门。因此我下面结合我自身的经历给大家一些编程学习的经验，当然很多都要结合你自身的喜好和习惯，不用完全按我的来。\n\n# 一个称手的代码编辑器\n---\n要想代码写的舒服，首先得用一个称手的代码编辑器，最常用的python IDE是pycharm，如果你刚入门很依赖调试的话，可以使用这款IDE。当然不能过于依赖IDE的调试功能，要练就肉眼调试的本领，这样能极大的提高你的代码能力。所以我熟练了之后换上了sublime代码编辑器，这是一款十分漂亮的编辑器，个人觉得比pycharm好看到不知哪里去了。而具体的安装与python环境配置，去看看我的教程就行了：[Sublime Text安装与配置教程](https://godweiyang.com/2017/10/02/sublime/)。\n\n# 多练>多看\n---\n很多人还以为和高中一样，上课听听就完事了，课后也就不花时间去写代码了。其实不然，要想学好python，光课上听是没什么用的，还需要课后不停的找题目练习，只有试了才知道自己可能会踩到什么坑，才能不断总结出许多代码编写的经验。我刚开始也是一个劲看书，觉得语法都看的差不多了，以为自己都懂了，但是真正自己写起来才发现有很多的问题。\n\n课本首先得看熟了，上面的例子都要自己敲过去，还有布置的编程作业都得认真做完。推荐大家一个在线编程网站：[Python 基础教程 | 菜鸟教程](http://www.runoob.com/python/python-tutorial.html)，上面可以边学边练习，可以一定程度上提高你的学习积极性。\n\n# 善于使用EOJ\n---\n有很多同学学到最后都不知道有EOJ这个东西，这是我们学校的在线刷题网站，现在已经做得十分精美了。如果让你干巴巴的去写书上的代码，可能没多久你也没什么兴趣写了，但是如果让你用python做出来一道道的编程题，那么依旧会获得难以描述的快感，这能极大的提升你的积极性和代码能力。\n\n首先去[EOJ](http://acm.ecnu.edu.cn/)注册一个账号，然后去做过的人多的简单题，很多题首先考察的不是代码能力，而是你的算法，下面我还会讲到算法的重要性。做题需要注意输入输出格式，注意题目中的各种坑点，代码不是自然语言，和数学题一样容不得半点差错。\n\n# 程序=算法+数据结构\n---\n光会写几行代码没用，还要学会使用基本的数据结构和算法，这样才能写出高效率高质量的代码。比如python中的列表`list`、元组`tuple`、字典`dict`等等，熟练使用它们将会大大减轻你的工作量。算法也是非常重要的，比如要对若干个数进行排序，如果暴力的话速度会很慢很慢，这时候你就要学会用快速排序算法，就能立即得到结果啦。\n\n# 学会查阅资料\n---\n很多人遇到什么函数不会用了，使用报错了都不知道怎么办，到处问人，其实可以直接去[python官网](https://docs.python.org/3/)查看文档，里面都有各个函数的用法说明。遇到错误也可以百度错误内容，会有很多人写博客说明解决方法的，实在找不到推荐一个网站：[stackoverflow](https://stackoverflow.com/)，这是国外的一个问答网站，上面有超多编程相关问题，只要你提问了基本都有人替你解答。\n\n# 良好的编码风格\n---\n很多同学刚开始写的代码风格都很丑，我自己也是，要尽快形成自己的代码风格，python相比c语言好很多，强制了缩进，不然编译都不给你通过，但是还是有很多地方需要你自己注意，比如表达式运算符两边要加空格、变量命名要可以直接看出用途等等。推荐大家去读一读google的[python编程规范](https://www.runoob.com/w3cnote/google-python-styleguide.html)，写出美观的代码，以后也便于维护。\n\n# Q&A\n---\n* **Q: python相对于其他语言有哪些优势和区别？**\n**A:** 首先python语言最大的优势就是简单，非常适合没有编程基础的人入门，它去除了c语言繁琐的指针类型，而且代码也很容易读懂，与人类语言有点类似。python也支持面向对象，并且不像c++和java那样繁琐，保持了它的简洁性。因为它是开源的，所以有很多很多的第三方库可以调用，很多功能根本不需要你自己动手写，别人都帮你写好封装好了，你直接调用一个函数就解决了。但是python也有缺点，一大缺点就是相比于c++和java这种较为底层的语言，python的运行速度非常慢，当然可以选择使用cython来加速python。并且python的格式要求非常严格，强制代码缩进，两条语句不能写在同一行等等。\n\n* **Q: 老师上课提到“面向对象”和“面向过程”，是什么意思？**\n**A:** 简单来说，面向过程就是按照解决问题的顺序，一步步的编写代码、调用函数。而面向对象就是将你要处理的事物分解为一个个对象（也就是类），每个对象有很多属性，编写代码时只要生成这些类，并且调用它们的类方法就好了。面向对象的一大好处就是可维护性好，比如如果你要对两个相同的对象进行操作，如果用面向过程，那你就要写两段相同的代码，如果改了一段，还得同时修改另一段；而面向对象就很简单了，因为你的两个对象都封装在了一个类里，所以只要改一下类就好啦。\n\n* **Q: 拿到一个问题应该如何思考？如何解决？步骤是什么？**\n**A:** 拿到一个问题（比如编程题），不要直接下手写代码，先想想该用什么方法解决？方法的时间复杂度和空间复杂度能否承受？要用到哪些函数？总体框架应该写成什么样子？然后再一个个模块编写，不要写一步想一步。\n\n* **Q: 什么是递归思维？有什么好处？**\n**A:** 递归思想也就是递归算法是经常用到的一种算法，可以将规模很大的问题化解为一个个的小问题，便于求解也增加了可读性。举个例子吧，求解阶乘，常规方法是从$f(1)$开始逐项计算，而用递归思想就是要计算$f(n)$，就先计算出$f(n - 1)$然后乘以$n$，而$f(n - 1)$继续递归算下去就行了。\n\n* **Q: 对于萌新，基础薄弱，学长有什么好的方法？推荐一下有用的参考资料**\n**A:** 基础薄弱那就先把书上的语法看懂了，边看边敲了自己试一试怎么用，不要光看不写。资料的话看再多不如自己敲来的记忆深刻，推荐《python简明教程》吧，最方便的还是不会的用法直接百度或者谷歌，看博客讲解。\n\n* **Q: 如何避免语法符号规范的错误？**\n**A:** 语法错误很正常，我也经常遇到，特别是没怎么用过的函数，这个只能靠查文档，然后用多了自然就记得怎么用了。规范之类的上面说过了，去看google的python编码规范，养成一个好的编码习惯，既是为了别人能看懂你的代码，也是为了你自己今后还能看懂你自己的代码。\n\n* **Q: 如何判断什么时候该用什么函数？**\n**A:** 这个就根据你要实现的功能啊，比如你要切分一个句子变成若干个单词，那么自然而然想到要用`string.split()`函数。当然刚开始你可能根本就不知道有哪些函数可以给你用，那么你就需要百度“python切分一个句子变成若干个单词”，然后就会告诉你要用什么方法了，多查多记以后就会用了。\n\n* **Q: OJ系统是什么？我们如何利用它？**\n**A:** OJ全称是Online Judge，是一个在线评测系统，上面有很多很多编程题，你可以写代码实现它，然后提交给OJ运行，它会告诉你你的代码是否正确。大家可以利用我们学校自己的EOJ来进行编程训练，先从简单的题开始做起，记住，不要一遇到不会做的题就去百度找题解，一定要自己思考，自己想出了方法收获才是最大的，切记。","slug":"python-advice","published":1,"updated":"2019-07-25T05:30:08.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hy009q7swex208fbay","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1293951677&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>首先很荣幸被邀请给大一新入学的学弟学妹们谈谈编程入门经验，尤其是他们正在学的python语言。我就随便谈谈我大一时是如何编程入门的，以及怎么才能学好python编程，其他语言类似，都是相通的。最后再回答一下大家问的比较多的一些问题。</p>\n</blockquote>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><hr>\n<p>大多数人应该和我刚上大学时一样，完全没有接触过编程，所以在上python课的时候可能是一脸懵逼，完全不知道代码的原理是什么，为什么写出来就能运行，也不知道如何熟练地写出一段完整的代码。这都很正常，我大学之前也是对计算机一窍不通的，但是高中毕业的那个暑假，刚刚接触电脑、用上互联网的我，用了一个月自学了谭浩强的《C语言程序设计》，从此打开了新世界的大门。因此我下面结合我自身的经历给大家一些编程学习的经验，当然很多都要结合你自身的喜好和习惯，不用完全按我的来。</p>\n<h1 id=\"一个称手的代码编辑器\"><a href=\"#一个称手的代码编辑器\" class=\"headerlink\" title=\"一个称手的代码编辑器\"></a>一个称手的代码编辑器</h1><hr>\n<p>要想代码写的舒服，首先得用一个称手的代码编辑器，最常用的python IDE是pycharm，如果你刚入门很依赖调试的话，可以使用这款IDE。当然不能过于依赖IDE的调试功能，要练就肉眼调试的本领，这样能极大的提高你的代码能力。所以我熟练了之后换上了sublime代码编辑器，这是一款十分漂亮的编辑器，个人觉得比pycharm好看到不知哪里去了。而具体的安装与python环境配置，去看看我的教程就行了：<a href=\"https://godweiyang.com/2017/10/02/sublime/\">Sublime Text安装与配置教程</a>。</p>\n<h1 id=\"多练-gt-多看\"><a href=\"#多练-gt-多看\" class=\"headerlink\" title=\"多练&gt;多看\"></a>多练&gt;多看</h1><hr>\n<p>很多人还以为和高中一样，上课听听就完事了，课后也就不花时间去写代码了。其实不然，要想学好python，光课上听是没什么用的，还需要课后不停的找题目练习，只有试了才知道自己可能会踩到什么坑，才能不断总结出许多代码编写的经验。我刚开始也是一个劲看书，觉得语法都看的差不多了，以为自己都懂了，但是真正自己写起来才发现有很多的问题。</p>\n<p>课本首先得看熟了，上面的例子都要自己敲过去，还有布置的编程作业都得认真做完。推荐大家一个在线编程网站：<a href=\"http://www.runoob.com/python/python-tutorial.html\" target=\"_blank\" rel=\"noopener\">Python 基础教程 | 菜鸟教程</a>，上面可以边学边练习，可以一定程度上提高你的学习积极性。</p>\n<h1 id=\"善于使用EOJ\"><a href=\"#善于使用EOJ\" class=\"headerlink\" title=\"善于使用EOJ\"></a>善于使用EOJ</h1><hr>\n<p>有很多同学学到最后都不知道有EOJ这个东西，这是我们学校的在线刷题网站，现在已经做得十分精美了。如果让你干巴巴的去写书上的代码，可能没多久你也没什么兴趣写了，但是如果让你用python做出来一道道的编程题，那么依旧会获得难以描述的快感，这能极大的提升你的积极性和代码能力。</p>\n<p>首先去<a href=\"http://acm.ecnu.edu.cn/\" target=\"_blank\" rel=\"noopener\">EOJ</a>注册一个账号，然后去做过的人多的简单题，很多题首先考察的不是代码能力，而是你的算法，下面我还会讲到算法的重要性。做题需要注意输入输出格式，注意题目中的各种坑点，代码不是自然语言，和数学题一样容不得半点差错。</p>\n<h1 id=\"程序-算法-数据结构\"><a href=\"#程序-算法-数据结构\" class=\"headerlink\" title=\"程序=算法+数据结构\"></a>程序=算法+数据结构</h1><hr>\n<p>光会写几行代码没用，还要学会使用基本的数据结构和算法，这样才能写出高效率高质量的代码。比如python中的列表<code>list</code>、元组<code>tuple</code>、字典<code>dict</code>等等，熟练使用它们将会大大减轻你的工作量。算法也是非常重要的，比如要对若干个数进行排序，如果暴力的话速度会很慢很慢，这时候你就要学会用快速排序算法，就能立即得到结果啦。</p>\n<h1 id=\"学会查阅资料\"><a href=\"#学会查阅资料\" class=\"headerlink\" title=\"学会查阅资料\"></a>学会查阅资料</h1><hr>\n<p>很多人遇到什么函数不会用了，使用报错了都不知道怎么办，到处问人，其实可以直接去<a href=\"https://docs.python.org/3/\" target=\"_blank\" rel=\"noopener\">python官网</a>查看文档，里面都有各个函数的用法说明。遇到错误也可以百度错误内容，会有很多人写博客说明解决方法的，实在找不到推荐一个网站：<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>，这是国外的一个问答网站，上面有超多编程相关问题，只要你提问了基本都有人替你解答。</p>\n<h1 id=\"良好的编码风格\"><a href=\"#良好的编码风格\" class=\"headerlink\" title=\"良好的编码风格\"></a>良好的编码风格</h1><hr>\n<p>很多同学刚开始写的代码风格都很丑，我自己也是，要尽快形成自己的代码风格，python相比c语言好很多，强制了缩进，不然编译都不给你通过，但是还是有很多地方需要你自己注意，比如表达式运算符两边要加空格、变量命名要可以直接看出用途等等。推荐大家去读一读google的<a href=\"https://www.runoob.com/w3cnote/google-python-styleguide.html\" target=\"_blank\" rel=\"noopener\">python编程规范</a>，写出美观的代码，以后也便于维护。</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><hr>\n<ul>\n<li><p><strong>Q: python相对于其他语言有哪些优势和区别？</strong></p>\n</li>\n<li><p><em>A:*</em> 首先python语言最大的优势就是简单，非常适合没有编程基础的人入门，它去除了c语言繁琐的指针类型，而且代码也很容易读懂，与人类语言有点类似。python也支持面向对象，并且不像c++和java那样繁琐，保持了它的简洁性。因为它是开源的，所以有很多很多的第三方库可以调用，很多功能根本不需要你自己动手写，别人都帮你写好封装好了，你直接调用一个函数就解决了。但是python也有缺点，一大缺点就是相比于c++和java这种较为底层的语言，python的运行速度非常慢，当然可以选择使用cython来加速python。并且python的格式要求非常严格，强制代码缩进，两条语句不能写在同一行等等。</p>\n</li>\n<li><p><strong>Q: 老师上课提到“面向对象”和“面向过程”，是什么意思？</strong></p>\n</li>\n<li><p><em>A:*</em> 简单来说，面向过程就是按照解决问题的顺序，一步步的编写代码、调用函数。而面向对象就是将你要处理的事物分解为一个个对象（也就是类），每个对象有很多属性，编写代码时只要生成这些类，并且调用它们的类方法就好了。面向对象的一大好处就是可维护性好，比如如果你要对两个相同的对象进行操作，如果用面向过程，那你就要写两段相同的代码，如果改了一段，还得同时修改另一段；而面向对象就很简单了，因为你的两个对象都封装在了一个类里，所以只要改一下类就好啦。</p>\n</li>\n<li><p><strong>Q: 拿到一个问题应该如何思考？如何解决？步骤是什么？</strong></p>\n</li>\n<li><p><em>A:*</em> 拿到一个问题（比如编程题），不要直接下手写代码，先想想该用什么方法解决？方法的时间复杂度和空间复杂度能否承受？要用到哪些函数？总体框架应该写成什么样子？然后再一个个模块编写，不要写一步想一步。</p>\n</li>\n<li><p><strong>Q: 什么是递归思维？有什么好处？</strong></p>\n</li>\n<li><p><em>A:*</em> 递归思想也就是递归算法是经常用到的一种算法，可以将规模很大的问题化解为一个个的小问题，便于求解也增加了可读性。举个例子吧，求解阶乘，常规方法是从$f(1)$开始逐项计算，而用递归思想就是要计算$f(n)$，就先计算出$f(n - 1)$然后乘以$n$，而$f(n - 1)$继续递归算下去就行了。</p>\n</li>\n<li><p><strong>Q: 对于萌新，基础薄弱，学长有什么好的方法？推荐一下有用的参考资料</strong></p>\n</li>\n<li><p><em>A:*</em> 基础薄弱那就先把书上的语法看懂了，边看边敲了自己试一试怎么用，不要光看不写。资料的话看再多不如自己敲来的记忆深刻，推荐《python简明教程》吧，最方便的还是不会的用法直接百度或者谷歌，看博客讲解。</p>\n</li>\n<li><p><strong>Q: 如何避免语法符号规范的错误？</strong></p>\n</li>\n<li><p><em>A:*</em> 语法错误很正常，我也经常遇到，特别是没怎么用过的函数，这个只能靠查文档，然后用多了自然就记得怎么用了。规范之类的上面说过了，去看google的python编码规范，养成一个好的编码习惯，既是为了别人能看懂你的代码，也是为了你自己今后还能看懂你自己的代码。</p>\n</li>\n<li><p><strong>Q: 如何判断什么时候该用什么函数？</strong></p>\n</li>\n<li><p><em>A:*</em> 这个就根据你要实现的功能啊，比如你要切分一个句子变成若干个单词，那么自然而然想到要用<code>string.split()</code>函数。当然刚开始你可能根本就不知道有哪些函数可以给你用，那么你就需要百度“python切分一个句子变成若干个单词”，然后就会告诉你要用什么方法了，多查多记以后就会用了。</p>\n</li>\n<li><p><strong>Q: OJ系统是什么？我们如何利用它？</strong></p>\n</li>\n<li><p><em>A:*</em> OJ全称是Online Judge，是一个在线评测系统，上面有很多很多编程题，你可以写代码实现它，然后提交给OJ运行，它会告诉你你的代码是否正确。大家可以利用我们学校自己的EOJ来进行编程训练，先从简单的题开始做起，记住，不要一遇到不会做的题就去百度找题解，一定要自己思考，自己想出了方法收获才是最大的，切记。</p>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1293951677&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>首先很荣幸被邀请给大一新入学的学弟学妹们谈谈编程入门经验，尤其是他们正在学的python语言。我就随便谈谈我大一时是如何编程入门的，以及怎么才能学好python编程，其他语言类似，都是相通的。最后再回答一下大家问的比较多的一些问题。</p>\n</blockquote>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><hr>\n<p>大多数人应该和我刚上大学时一样，完全没有接触过编程，所以在上python课的时候可能是一脸懵逼，完全不知道代码的原理是什么，为什么写出来就能运行，也不知道如何熟练地写出一段完整的代码。这都很正常，我大学之前也是对计算机一窍不通的，但是高中毕业的那个暑假，刚刚接触电脑、用上互联网的我，用了一个月自学了谭浩强的《C语言程序设计》，从此打开了新世界的大门。因此我下面结合我自身的经历给大家一些编程学习的经验，当然很多都要结合你自身的喜好和习惯，不用完全按我的来。</p>\n<h1 id=\"一个称手的代码编辑器\"><a href=\"#一个称手的代码编辑器\" class=\"headerlink\" title=\"一个称手的代码编辑器\"></a>一个称手的代码编辑器</h1><hr>\n<p>要想代码写的舒服，首先得用一个称手的代码编辑器，最常用的python IDE是pycharm，如果你刚入门很依赖调试的话，可以使用这款IDE。当然不能过于依赖IDE的调试功能，要练就肉眼调试的本领，这样能极大的提高你的代码能力。所以我熟练了之后换上了sublime代码编辑器，这是一款十分漂亮的编辑器，个人觉得比pycharm好看到不知哪里去了。而具体的安装与python环境配置，去看看我的教程就行了：<a href=\"https://godweiyang.com/2017/10/02/sublime/\">Sublime Text安装与配置教程</a>。</p>\n<h1 id=\"多练-gt-多看\"><a href=\"#多练-gt-多看\" class=\"headerlink\" title=\"多练&gt;多看\"></a>多练&gt;多看</h1><hr>\n<p>很多人还以为和高中一样，上课听听就完事了，课后也就不花时间去写代码了。其实不然，要想学好python，光课上听是没什么用的，还需要课后不停的找题目练习，只有试了才知道自己可能会踩到什么坑，才能不断总结出许多代码编写的经验。我刚开始也是一个劲看书，觉得语法都看的差不多了，以为自己都懂了，但是真正自己写起来才发现有很多的问题。</p>\n<p>课本首先得看熟了，上面的例子都要自己敲过去，还有布置的编程作业都得认真做完。推荐大家一个在线编程网站：<a href=\"http://www.runoob.com/python/python-tutorial.html\" target=\"_blank\" rel=\"noopener\">Python 基础教程 | 菜鸟教程</a>，上面可以边学边练习，可以一定程度上提高你的学习积极性。</p>\n<h1 id=\"善于使用EOJ\"><a href=\"#善于使用EOJ\" class=\"headerlink\" title=\"善于使用EOJ\"></a>善于使用EOJ</h1><hr>\n<p>有很多同学学到最后都不知道有EOJ这个东西，这是我们学校的在线刷题网站，现在已经做得十分精美了。如果让你干巴巴的去写书上的代码，可能没多久你也没什么兴趣写了，但是如果让你用python做出来一道道的编程题，那么依旧会获得难以描述的快感，这能极大的提升你的积极性和代码能力。</p>\n<p>首先去<a href=\"http://acm.ecnu.edu.cn/\" target=\"_blank\" rel=\"noopener\">EOJ</a>注册一个账号，然后去做过的人多的简单题，很多题首先考察的不是代码能力，而是你的算法，下面我还会讲到算法的重要性。做题需要注意输入输出格式，注意题目中的各种坑点，代码不是自然语言，和数学题一样容不得半点差错。</p>\n<h1 id=\"程序-算法-数据结构\"><a href=\"#程序-算法-数据结构\" class=\"headerlink\" title=\"程序=算法+数据结构\"></a>程序=算法+数据结构</h1><hr>\n<p>光会写几行代码没用，还要学会使用基本的数据结构和算法，这样才能写出高效率高质量的代码。比如python中的列表<code>list</code>、元组<code>tuple</code>、字典<code>dict</code>等等，熟练使用它们将会大大减轻你的工作量。算法也是非常重要的，比如要对若干个数进行排序，如果暴力的话速度会很慢很慢，这时候你就要学会用快速排序算法，就能立即得到结果啦。</p>\n<h1 id=\"学会查阅资料\"><a href=\"#学会查阅资料\" class=\"headerlink\" title=\"学会查阅资料\"></a>学会查阅资料</h1><hr>\n<p>很多人遇到什么函数不会用了，使用报错了都不知道怎么办，到处问人，其实可以直接去<a href=\"https://docs.python.org/3/\" target=\"_blank\" rel=\"noopener\">python官网</a>查看文档，里面都有各个函数的用法说明。遇到错误也可以百度错误内容，会有很多人写博客说明解决方法的，实在找不到推荐一个网站：<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>，这是国外的一个问答网站，上面有超多编程相关问题，只要你提问了基本都有人替你解答。</p>\n<h1 id=\"良好的编码风格\"><a href=\"#良好的编码风格\" class=\"headerlink\" title=\"良好的编码风格\"></a>良好的编码风格</h1><hr>\n<p>很多同学刚开始写的代码风格都很丑，我自己也是，要尽快形成自己的代码风格，python相比c语言好很多，强制了缩进，不然编译都不给你通过，但是还是有很多地方需要你自己注意，比如表达式运算符两边要加空格、变量命名要可以直接看出用途等等。推荐大家去读一读google的<a href=\"https://www.runoob.com/w3cnote/google-python-styleguide.html\" target=\"_blank\" rel=\"noopener\">python编程规范</a>，写出美观的代码，以后也便于维护。</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><hr>\n<ul>\n<li><p><strong>Q: python相对于其他语言有哪些优势和区别？</strong></p>\n</li>\n<li><p><em>A:*</em> 首先python语言最大的优势就是简单，非常适合没有编程基础的人入门，它去除了c语言繁琐的指针类型，而且代码也很容易读懂，与人类语言有点类似。python也支持面向对象，并且不像c++和java那样繁琐，保持了它的简洁性。因为它是开源的，所以有很多很多的第三方库可以调用，很多功能根本不需要你自己动手写，别人都帮你写好封装好了，你直接调用一个函数就解决了。但是python也有缺点，一大缺点就是相比于c++和java这种较为底层的语言，python的运行速度非常慢，当然可以选择使用cython来加速python。并且python的格式要求非常严格，强制代码缩进，两条语句不能写在同一行等等。</p>\n</li>\n<li><p><strong>Q: 老师上课提到“面向对象”和“面向过程”，是什么意思？</strong></p>\n</li>\n<li><p><em>A:*</em> 简单来说，面向过程就是按照解决问题的顺序，一步步的编写代码、调用函数。而面向对象就是将你要处理的事物分解为一个个对象（也就是类），每个对象有很多属性，编写代码时只要生成这些类，并且调用它们的类方法就好了。面向对象的一大好处就是可维护性好，比如如果你要对两个相同的对象进行操作，如果用面向过程，那你就要写两段相同的代码，如果改了一段，还得同时修改另一段；而面向对象就很简单了，因为你的两个对象都封装在了一个类里，所以只要改一下类就好啦。</p>\n</li>\n<li><p><strong>Q: 拿到一个问题应该如何思考？如何解决？步骤是什么？</strong></p>\n</li>\n<li><p><em>A:*</em> 拿到一个问题（比如编程题），不要直接下手写代码，先想想该用什么方法解决？方法的时间复杂度和空间复杂度能否承受？要用到哪些函数？总体框架应该写成什么样子？然后再一个个模块编写，不要写一步想一步。</p>\n</li>\n<li><p><strong>Q: 什么是递归思维？有什么好处？</strong></p>\n</li>\n<li><p><em>A:*</em> 递归思想也就是递归算法是经常用到的一种算法，可以将规模很大的问题化解为一个个的小问题，便于求解也增加了可读性。举个例子吧，求解阶乘，常规方法是从$f(1)$开始逐项计算，而用递归思想就是要计算$f(n)$，就先计算出$f(n - 1)$然后乘以$n$，而$f(n - 1)$继续递归算下去就行了。</p>\n</li>\n<li><p><strong>Q: 对于萌新，基础薄弱，学长有什么好的方法？推荐一下有用的参考资料</strong></p>\n</li>\n<li><p><em>A:*</em> 基础薄弱那就先把书上的语法看懂了，边看边敲了自己试一试怎么用，不要光看不写。资料的话看再多不如自己敲来的记忆深刻，推荐《python简明教程》吧，最方便的还是不会的用法直接百度或者谷歌，看博客讲解。</p>\n</li>\n<li><p><strong>Q: 如何避免语法符号规范的错误？</strong></p>\n</li>\n<li><p><em>A:*</em> 语法错误很正常，我也经常遇到，特别是没怎么用过的函数，这个只能靠查文档，然后用多了自然就记得怎么用了。规范之类的上面说过了，去看google的python编码规范，养成一个好的编码习惯，既是为了别人能看懂你的代码，也是为了你自己今后还能看懂你自己的代码。</p>\n</li>\n<li><p><strong>Q: 如何判断什么时候该用什么函数？</strong></p>\n</li>\n<li><p><em>A:*</em> 这个就根据你要实现的功能啊，比如你要切分一个句子变成若干个单词，那么自然而然想到要用<code>string.split()</code>函数。当然刚开始你可能根本就不知道有哪些函数可以给你用，那么你就需要百度“python切分一个句子变成若干个单词”，然后就会告诉你要用什么方法了，多查多记以后就会用了。</p>\n</li>\n<li><p><strong>Q: OJ系统是什么？我们如何利用它？</strong></p>\n</li>\n<li><p><em>A:*</em> OJ全称是Online Judge，是一个在线评测系统，上面有很多很多编程题，你可以写代码实现它，然后提交给OJ运行，它会告诉你你的代码是否正确。大家可以利用我们学校自己的EOJ来进行编程训练，先从简单的题开始做起，记住，不要一遇到不会做的题就去百度找题解，一定要自己思考，自己想出了方法收获才是最大的，切记。</p>\n</li>\n</ul>\n"},{"title":"Sublime Text安装与配置教程","date":"2017-10-02T05:27:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\nSublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。\n先附上一张美图：\n![](sublime.png)\n# 安装Sublime Text 3\n---\n下载地址请点击[这里](https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe)。\n安装过程就不多说了，一直点`next`就行了。\n\n# 配置C++运行环境\n---\n装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。\n* 首先要安装C++的编译器MinGW，可以直接去官网下（[传送门](http://www.mingw.org/)）。不过我自己是直接下的CodeBlocks（[传送门](https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe)），然后用的自带的MinGW。\n* 装完编译器之后在`我的电脑`右键，依次点击`属性 - 高级系统设置 - 环境变量`，在`系统变量`中找到`Path`，编辑它，新建一条，添加MinGW路径，以我的为例是`E:\\software\\codeblocks\\MinGW\\bin`。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"encoding\": \"utf-8\",\n\t\"working_dir\": \"$file_path\",\n\t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file_name\\\" -o \\\"$file_base_name\\\"\",\n\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\"selector\": \"source.c++\",\n \n\t\"variants\": \n\t[\n\t\t{\t\n\t\t\"name\": \"Run\",\n        \t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file\\\" -o \\\"$file_base_name\\\" && start cmd /c \\\"\\\"${file_path}/${file_base_name}\\\" & pause\\\"\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为c++11。\n\n这时候随便写一个C++代码，然后`Tools - Build System`选择`c++11`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的C++，所以支持输入数据的哦！\n\n# 配置Java运行环境\n---\n* 首先下载Java的编译器jdk（[传送门](http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe)），安装过程就不说了。\n* 环境变量应该不用自己添加了，安装过程会帮你自动添加。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"cmd\": [\"javac\",\"-d\",\".\",\"$file\"],\n\t\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",\n\t\"selector\": \"source.java\",\n\t\"encoding\":\"cp936\",\n\t//执行完上面的命令就结束\n\t// 下面的命令需要按Ctrl+Shift+b来运行\n\t\"variants\":\n\t[\n\t\t{\n\t\t\t\"name\": \"Run\",\n\t\t\t\"shell\": true,\n\t\t\t\"cmd\" : [\"start\",\"cmd\",\"/c\", \"java ${file_base_name} &echo. & pause\"],\n \t\t\t//c是执行完命令后关闭cmd窗口,\n\t\t\t//k是执行完命令后不关闭cmd窗口。\n\t\t\t// echo. 相当于输入一个回车\n\t\t\t// pause命令使cmd窗口按任意键后才关闭\n\t\t\t\"working_dir\": \"${file_path}\",\n\t\t\t\"encoding\":\"cp936\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为JavaC。\n\n这时候随便写一个Java代码，然后`Tools - Build System`选择`JavaC`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的Java，所以支持输入数据的哦！\n\n# 配置Python运行环境\n---\n* 强烈推荐配合Python发行版本Anaconda使用，下载地址（[传送门](https://www.anaconda.com/download/)），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！\n* 然后...就没有然后了，Python运行环境安装就是这么简单，直接按`ctrl+b`就能运行了，但是不支持输入数据哦，想要输入数据的话要安装`Sublime REPL`插件，请看后面的教程。\n\n# 安装插件\nSublime Text的强大之处就是可以安装各种插件满足你的需求。\n安装过程很简单：\n* 首先要安装插件管理工具`Package Control`，按`ctrl+shift+p`，输入`Install Package`，按回车，等待安装完毕。\n* 然后`Preferences`选项菜单就会出现`Package Control`子菜单。\n* 然后按`ctrl+shift+p`，输入各种插件名称就能安装啦。\n\n下面推荐几个我使用的插件，其他的可以自行百度搜索。\n* Anaconda\n这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。\n* SublimeREPL\n这个是为了Python输入数据准备的插件，装完之后点击`Preferences - Key Bindings`，在`User`文件里粘贴以下代码：\n\t```\n\t[ \n\t\t{ \"keys\": [\"f5\"],\n\t\t\t\"caption\": \"SublimeREPL: Python - RUN current file\",\n\t\t\t\"command\": \"run_existing_window_command\", \"args\":\n\t\t\t{\n\t\t\t\t\"id\": \"repl_python_run\",\n\t\t\t\t\"file\": \"config/Python/Main.sublime-menu\"\n\t\t\t}\n\t\t}\n\t]\n\t```\n\t然后运行Python代码时直接按`F5`就行啦！\n下面两个随意装。\n* SublimeHighLight\n装完之后选中你要复制的代码，右键`Copy as RTF`，然后粘贴到Word里就会保留代码格式，很漂亮的啊！\n* ConvertToUTF8\n这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。\n\n我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。\n\n# 快捷键\n---\n直接递上[传送门](http://www.jb51.net/softjc/180873.html)。\n\n# sublime配置\n**Settings:**\n```\n{\n\t\"color_scheme\": \"Packages/Color Scheme - Default/Monokai.sublime-color-scheme\",\n\t\"font_options\":\n\t[\n\t\t\"gdi\"\n\t],\n\t\"font_size\": 14,\n\t\"ignored_packages\":\n\t[\n\t\t\"Vintage\"\n\t],\n\t\"theme\": \"Adaptive.sublime-theme\",\n\t\"translate_tabs_to_spaces\": true,\n\t\"expand_tabs_on_save\": true,\n\t\"tab_size\": 4,\n}\n```\n\n**Anaconda Settings User:**\n```\n{\n\t\"python_interpreter\": \"E:/software/anaconda/python.exe\",\n\t\"suppress_word_completions\": false,\n\t\"suppress_explicit_completions\": false,\n\t\"complete_parameters\": true,\n\t\"complete__all_parameters\": true,\n\t\"anaconda_linting\": false,\n\t\"swallow_startup_errors\": true,\n\t\"auto_formatting\": true,\n\t\"enable_docstrings_tooltip\": true,\n\t\"enable_signatures_tooltip\": true,\n\t\"display_signatures\": true,\n}\n```\n","source":"_posts/sublime.md","raw":"---\ntitle: Sublime Text安装与配置教程\ndate: 2017-10-02 13:27:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- Sublime\ncategories:\n- 软件安装与配置\n---\n\nSublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。\n先附上一张美图：\n![](sublime.png)\n# 安装Sublime Text 3\n---\n下载地址请点击[这里](https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe)。\n安装过程就不多说了，一直点`next`就行了。\n\n# 配置C++运行环境\n---\n装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。\n* 首先要安装C++的编译器MinGW，可以直接去官网下（[传送门](http://www.mingw.org/)）。不过我自己是直接下的CodeBlocks（[传送门](https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe)），然后用的自带的MinGW。\n* 装完编译器之后在`我的电脑`右键，依次点击`属性 - 高级系统设置 - 环境变量`，在`系统变量`中找到`Path`，编辑它，新建一条，添加MinGW路径，以我的为例是`E:\\software\\codeblocks\\MinGW\\bin`。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"encoding\": \"utf-8\",\n\t\"working_dir\": \"$file_path\",\n\t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file_name\\\" -o \\\"$file_base_name\\\"\",\n\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\"selector\": \"source.c++\",\n \n\t\"variants\": \n\t[\n\t\t{\t\n\t\t\"name\": \"Run\",\n        \t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file\\\" -o \\\"$file_base_name\\\" && start cmd /c \\\"\\\"${file_path}/${file_base_name}\\\" & pause\\\"\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为c++11。\n\n这时候随便写一个C++代码，然后`Tools - Build System`选择`c++11`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的C++，所以支持输入数据的哦！\n\n# 配置Java运行环境\n---\n* 首先下载Java的编译器jdk（[传送门](http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe)），安装过程就不说了。\n* 环境变量应该不用自己添加了，安装过程会帮你自动添加。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"cmd\": [\"javac\",\"-d\",\".\",\"$file\"],\n\t\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",\n\t\"selector\": \"source.java\",\n\t\"encoding\":\"cp936\",\n\t//执行完上面的命令就结束\n\t// 下面的命令需要按Ctrl+Shift+b来运行\n\t\"variants\":\n\t[\n\t\t{\n\t\t\t\"name\": \"Run\",\n\t\t\t\"shell\": true,\n\t\t\t\"cmd\" : [\"start\",\"cmd\",\"/c\", \"java ${file_base_name} &echo. & pause\"],\n \t\t\t//c是执行完命令后关闭cmd窗口,\n\t\t\t//k是执行完命令后不关闭cmd窗口。\n\t\t\t// echo. 相当于输入一个回车\n\t\t\t// pause命令使cmd窗口按任意键后才关闭\n\t\t\t\"working_dir\": \"${file_path}\",\n\t\t\t\"encoding\":\"cp936\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为JavaC。\n\n这时候随便写一个Java代码，然后`Tools - Build System`选择`JavaC`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的Java，所以支持输入数据的哦！\n\n# 配置Python运行环境\n---\n* 强烈推荐配合Python发行版本Anaconda使用，下载地址（[传送门](https://www.anaconda.com/download/)），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！\n* 然后...就没有然后了，Python运行环境安装就是这么简单，直接按`ctrl+b`就能运行了，但是不支持输入数据哦，想要输入数据的话要安装`Sublime REPL`插件，请看后面的教程。\n\n# 安装插件\nSublime Text的强大之处就是可以安装各种插件满足你的需求。\n安装过程很简单：\n* 首先要安装插件管理工具`Package Control`，按`ctrl+shift+p`，输入`Install Package`，按回车，等待安装完毕。\n* 然后`Preferences`选项菜单就会出现`Package Control`子菜单。\n* 然后按`ctrl+shift+p`，输入各种插件名称就能安装啦。\n\n下面推荐几个我使用的插件，其他的可以自行百度搜索。\n* Anaconda\n这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。\n* SublimeREPL\n这个是为了Python输入数据准备的插件，装完之后点击`Preferences - Key Bindings`，在`User`文件里粘贴以下代码：\n\t```\n\t[ \n\t\t{ \"keys\": [\"f5\"],\n\t\t\t\"caption\": \"SublimeREPL: Python - RUN current file\",\n\t\t\t\"command\": \"run_existing_window_command\", \"args\":\n\t\t\t{\n\t\t\t\t\"id\": \"repl_python_run\",\n\t\t\t\t\"file\": \"config/Python/Main.sublime-menu\"\n\t\t\t}\n\t\t}\n\t]\n\t```\n\t然后运行Python代码时直接按`F5`就行啦！\n下面两个随意装。\n* SublimeHighLight\n装完之后选中你要复制的代码，右键`Copy as RTF`，然后粘贴到Word里就会保留代码格式，很漂亮的啊！\n* ConvertToUTF8\n这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。\n\n我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。\n\n# 快捷键\n---\n直接递上[传送门](http://www.jb51.net/softjc/180873.html)。\n\n# sublime配置\n**Settings:**\n```\n{\n\t\"color_scheme\": \"Packages/Color Scheme - Default/Monokai.sublime-color-scheme\",\n\t\"font_options\":\n\t[\n\t\t\"gdi\"\n\t],\n\t\"font_size\": 14,\n\t\"ignored_packages\":\n\t[\n\t\t\"Vintage\"\n\t],\n\t\"theme\": \"Adaptive.sublime-theme\",\n\t\"translate_tabs_to_spaces\": true,\n\t\"expand_tabs_on_save\": true,\n\t\"tab_size\": 4,\n}\n```\n\n**Anaconda Settings User:**\n```\n{\n\t\"python_interpreter\": \"E:/software/anaconda/python.exe\",\n\t\"suppress_word_completions\": false,\n\t\"suppress_explicit_completions\": false,\n\t\"complete_parameters\": true,\n\t\"complete__all_parameters\": true,\n\t\"anaconda_linting\": false,\n\t\"swallow_startup_errors\": true,\n\t\"auto_formatting\": true,\n\t\"enable_docstrings_tooltip\": true,\n\t\"enable_signatures_tooltip\": true,\n\t\"display_signatures\": true,\n}\n```\n","slug":"sublime","published":1,"updated":"2019-07-25T05:31:01.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982hz009t7swen3oelmtg","content":"<p>Sublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。<br>先附上一张美图：<br><img src=\"sublime.png\" alt></p>\n<h1 id=\"安装Sublime-Text-3\"><a href=\"#安装Sublime-Text-3\" class=\"headerlink\" title=\"安装Sublime Text 3\"></a>安装Sublime Text 3</h1><hr>\n<p>下载地址请点击<a href=\"https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>安装过程就不多说了，一直点<code>next</code>就行了。</p>\n<h1 id=\"配置C-运行环境\"><a href=\"#配置C-运行环境\" class=\"headerlink\" title=\"配置C++运行环境\"></a>配置C++运行环境</h1><hr>\n<p>装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。</p>\n<ul>\n<li><p>首先要安装C++的编译器MinGW，可以直接去官网下（<a href=\"http://www.mingw.org/\" target=\"_blank\" rel=\"noopener\">传送门</a>）。不过我自己是直接下的CodeBlocks（<a href=\"https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），然后用的自带的MinGW。</p>\n</li>\n<li><p>装完编译器之后在<code>我的电脑</code>右键，依次点击<code>属性 - 高级系统设置 - 环境变量</code>，在<code>系统变量</code>中找到<code>Path</code>，编辑它，新建一条，添加MinGW路径，以我的为例是<code>E:\\software\\codeblocks\\MinGW\\bin</code>。</p>\n</li>\n<li><p>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：</p>\n<pre><code>{\n  &quot;encoding&quot;: &quot;utf-8&quot;,\n  &quot;working_dir&quot;: &quot;$file_path&quot;,\n  &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file_name\\&quot; -o \\&quot;$file_base_name\\&quot;&quot;,\n  &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,\n  &quot;selector&quot;: &quot;source.c++&quot;,\n\n  &quot;variants&quot;: \n  [\n      {    \n      &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file\\&quot; -o \\&quot;$file_base_name\\&quot; &amp;&amp; start cmd /c \\&quot;\\&quot;${file_path}/${file_base_name}\\&quot; &amp; pause\\&quot;&quot;\n      }\n  ]\n}</code></pre></li>\n<li><p>然后<code>ctrl+s</code>保存，命名为c++11。</p>\n</li>\n</ul>\n<p>这时候随便写一个C++代码，然后<code>Tools - Build System</code>选择<code>c++11</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的C++，所以支持输入数据的哦！</p>\n<h1 id=\"配置Java运行环境\"><a href=\"#配置Java运行环境\" class=\"headerlink\" title=\"配置Java运行环境\"></a>配置Java运行环境</h1><hr>\n<ul>\n<li>首先下载Java的编译器jdk（<a href=\"http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），安装过程就不说了。</li>\n<li>环境变量应该不用自己添加了，安装过程会帮你自动添加。</li>\n<li>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：<pre><code>{\n  &quot;cmd&quot;: [&quot;javac&quot;,&quot;-d&quot;,&quot;.&quot;,&quot;$file&quot;],\n  &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,\n  &quot;selector&quot;: &quot;source.java&quot;,\n  &quot;encoding&quot;:&quot;cp936&quot;,\n  //执行完上面的命令就结束\n  // 下面的命令需要按Ctrl+Shift+b来运行\n  &quot;variants&quot;:\n  [\n      {\n          &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell&quot;: true,\n          &quot;cmd&quot; : [&quot;start&quot;,&quot;cmd&quot;,&quot;/c&quot;, &quot;java ${file_base_name} &amp;echo. &amp; pause&quot;],\n           //c是执行完命令后关闭cmd窗口,\n          //k是执行完命令后不关闭cmd窗口。\n          // echo. 相当于输入一个回车\n          // pause命令使cmd窗口按任意键后才关闭\n          &quot;working_dir&quot;: &quot;${file_path}&quot;,\n          &quot;encoding&quot;:&quot;cp936&quot;\n      }\n  ]\n}</code></pre></li>\n<li>然后<code>ctrl+s</code>保存，命名为JavaC。</li>\n</ul>\n<p>这时候随便写一个Java代码，然后<code>Tools - Build System</code>选择<code>JavaC</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的Java，所以支持输入数据的哦！</p>\n<h1 id=\"配置Python运行环境\"><a href=\"#配置Python运行环境\" class=\"headerlink\" title=\"配置Python运行环境\"></a>配置Python运行环境</h1><hr>\n<ul>\n<li>强烈推荐配合Python发行版本Anaconda使用，下载地址（<a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener\">传送门</a>），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！</li>\n<li>然后…就没有然后了，Python运行环境安装就是这么简单，直接按<code>ctrl+b</code>就能运行了，但是不支持输入数据哦，想要输入数据的话要安装<code>Sublime REPL</code>插件，请看后面的教程。</li>\n</ul>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>Sublime Text的强大之处就是可以安装各种插件满足你的需求。<br>安装过程很简单：</p>\n<ul>\n<li>首先要安装插件管理工具<code>Package Control</code>，按<code>ctrl+shift+p</code>，输入<code>Install Package</code>，按回车，等待安装完毕。</li>\n<li>然后<code>Preferences</code>选项菜单就会出现<code>Package Control</code>子菜单。</li>\n<li>然后按<code>ctrl+shift+p</code>，输入各种插件名称就能安装啦。</li>\n</ul>\n<p>下面推荐几个我使用的插件，其他的可以自行百度搜索。</p>\n<ul>\n<li>Anaconda<br>这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。</li>\n<li>SublimeREPL<br>这个是为了Python输入数据准备的插件，装完之后点击<code>Preferences - Key Bindings</code>，在<code>User</code>文件里粘贴以下代码：<pre><code>  [ \n      { &quot;keys&quot;: [&quot;f5&quot;],\n          &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,\n          &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:\n          {\n              &quot;id&quot;: &quot;repl_python_run&quot;,\n              &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;\n          }\n      }\n  ]</code></pre>  然后运行Python代码时直接按<code>F5</code>就行啦！<br>下面两个随意装。</li>\n<li>SublimeHighLight<br>装完之后选中你要复制的代码，右键<code>Copy as RTF</code>，然后粘贴到Word里就会保留代码格式，很漂亮的啊！</li>\n<li>ConvertToUTF8<br>这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。</li>\n</ul>\n<p>我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><hr>\n<p>直接递上<a href=\"http://www.jb51.net/softjc/180873.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<h1 id=\"sublime配置\"><a href=\"#sublime配置\" class=\"headerlink\" title=\"sublime配置\"></a>sublime配置</h1><p><strong>Settings:</strong></p>\n<pre><code>{\n    &quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai.sublime-color-scheme&quot;,\n    &quot;font_options&quot;:\n    [\n        &quot;gdi&quot;\n    ],\n    &quot;font_size&quot;: 14,\n    &quot;ignored_packages&quot;:\n    [\n        &quot;Vintage&quot;\n    ],\n    &quot;theme&quot;: &quot;Adaptive.sublime-theme&quot;,\n    &quot;translate_tabs_to_spaces&quot;: true,\n    &quot;expand_tabs_on_save&quot;: true,\n    &quot;tab_size&quot;: 4,\n}</code></pre><p><strong>Anaconda Settings User:</strong></p>\n<pre><code>{\n    &quot;python_interpreter&quot;: &quot;E:/software/anaconda/python.exe&quot;,\n    &quot;suppress_word_completions&quot;: false,\n    &quot;suppress_explicit_completions&quot;: false,\n    &quot;complete_parameters&quot;: true,\n    &quot;complete__all_parameters&quot;: true,\n    &quot;anaconda_linting&quot;: false,\n    &quot;swallow_startup_errors&quot;: true,\n    &quot;auto_formatting&quot;: true,\n    &quot;enable_docstrings_tooltip&quot;: true,\n    &quot;enable_signatures_tooltip&quot;: true,\n    &quot;display_signatures&quot;: true,\n}</code></pre>","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>Sublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。<br>先附上一张美图：<br><img src=\"sublime.png\" alt></p>\n<h1 id=\"安装Sublime-Text-3\"><a href=\"#安装Sublime-Text-3\" class=\"headerlink\" title=\"安装Sublime Text 3\"></a>安装Sublime Text 3</h1><hr>\n<p>下载地址请点击<a href=\"https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>安装过程就不多说了，一直点<code>next</code>就行了。</p>\n<h1 id=\"配置C-运行环境\"><a href=\"#配置C-运行环境\" class=\"headerlink\" title=\"配置C++运行环境\"></a>配置C++运行环境</h1><hr>\n<p>装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。</p>\n<ul>\n<li><p>首先要安装C++的编译器MinGW，可以直接去官网下（<a href=\"http://www.mingw.org/\" target=\"_blank\" rel=\"noopener\">传送门</a>）。不过我自己是直接下的CodeBlocks（<a href=\"https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），然后用的自带的MinGW。</p>\n</li>\n<li><p>装完编译器之后在<code>我的电脑</code>右键，依次点击<code>属性 - 高级系统设置 - 环境变量</code>，在<code>系统变量</code>中找到<code>Path</code>，编辑它，新建一条，添加MinGW路径，以我的为例是<code>E:\\software\\codeblocks\\MinGW\\bin</code>。</p>\n</li>\n<li><p>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：</p>\n<pre><code>{\n  &quot;encoding&quot;: &quot;utf-8&quot;,\n  &quot;working_dir&quot;: &quot;$file_path&quot;,\n  &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file_name\\&quot; -o \\&quot;$file_base_name\\&quot;&quot;,\n  &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,\n  &quot;selector&quot;: &quot;source.c++&quot;,\n\n  &quot;variants&quot;: \n  [\n      {    \n      &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file\\&quot; -o \\&quot;$file_base_name\\&quot; &amp;&amp; start cmd /c \\&quot;\\&quot;${file_path}/${file_base_name}\\&quot; &amp; pause\\&quot;&quot;\n      }\n  ]\n}</code></pre></li>\n<li><p>然后<code>ctrl+s</code>保存，命名为c++11。</p>\n</li>\n</ul>\n<p>这时候随便写一个C++代码，然后<code>Tools - Build System</code>选择<code>c++11</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的C++，所以支持输入数据的哦！</p>\n<h1 id=\"配置Java运行环境\"><a href=\"#配置Java运行环境\" class=\"headerlink\" title=\"配置Java运行环境\"></a>配置Java运行环境</h1><hr>\n<ul>\n<li>首先下载Java的编译器jdk（<a href=\"http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），安装过程就不说了。</li>\n<li>环境变量应该不用自己添加了，安装过程会帮你自动添加。</li>\n<li>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：<pre><code>{\n  &quot;cmd&quot;: [&quot;javac&quot;,&quot;-d&quot;,&quot;.&quot;,&quot;$file&quot;],\n  &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,\n  &quot;selector&quot;: &quot;source.java&quot;,\n  &quot;encoding&quot;:&quot;cp936&quot;,\n  //执行完上面的命令就结束\n  // 下面的命令需要按Ctrl+Shift+b来运行\n  &quot;variants&quot;:\n  [\n      {\n          &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell&quot;: true,\n          &quot;cmd&quot; : [&quot;start&quot;,&quot;cmd&quot;,&quot;/c&quot;, &quot;java ${file_base_name} &amp;echo. &amp; pause&quot;],\n           //c是执行完命令后关闭cmd窗口,\n          //k是执行完命令后不关闭cmd窗口。\n          // echo. 相当于输入一个回车\n          // pause命令使cmd窗口按任意键后才关闭\n          &quot;working_dir&quot;: &quot;${file_path}&quot;,\n          &quot;encoding&quot;:&quot;cp936&quot;\n      }\n  ]\n}</code></pre></li>\n<li>然后<code>ctrl+s</code>保存，命名为JavaC。</li>\n</ul>\n<p>这时候随便写一个Java代码，然后<code>Tools - Build System</code>选择<code>JavaC</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的Java，所以支持输入数据的哦！</p>\n<h1 id=\"配置Python运行环境\"><a href=\"#配置Python运行环境\" class=\"headerlink\" title=\"配置Python运行环境\"></a>配置Python运行环境</h1><hr>\n<ul>\n<li>强烈推荐配合Python发行版本Anaconda使用，下载地址（<a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener\">传送门</a>），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！</li>\n<li>然后…就没有然后了，Python运行环境安装就是这么简单，直接按<code>ctrl+b</code>就能运行了，但是不支持输入数据哦，想要输入数据的话要安装<code>Sublime REPL</code>插件，请看后面的教程。</li>\n</ul>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>Sublime Text的强大之处就是可以安装各种插件满足你的需求。<br>安装过程很简单：</p>\n<ul>\n<li>首先要安装插件管理工具<code>Package Control</code>，按<code>ctrl+shift+p</code>，输入<code>Install Package</code>，按回车，等待安装完毕。</li>\n<li>然后<code>Preferences</code>选项菜单就会出现<code>Package Control</code>子菜单。</li>\n<li>然后按<code>ctrl+shift+p</code>，输入各种插件名称就能安装啦。</li>\n</ul>\n<p>下面推荐几个我使用的插件，其他的可以自行百度搜索。</p>\n<ul>\n<li>Anaconda<br>这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。</li>\n<li>SublimeREPL<br>这个是为了Python输入数据准备的插件，装完之后点击<code>Preferences - Key Bindings</code>，在<code>User</code>文件里粘贴以下代码：<pre><code>  [ \n      { &quot;keys&quot;: [&quot;f5&quot;],\n          &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,\n          &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:\n          {\n              &quot;id&quot;: &quot;repl_python_run&quot;,\n              &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;\n          }\n      }\n  ]</code></pre>  然后运行Python代码时直接按<code>F5</code>就行啦！<br>下面两个随意装。</li>\n<li>SublimeHighLight<br>装完之后选中你要复制的代码，右键<code>Copy as RTF</code>，然后粘贴到Word里就会保留代码格式，很漂亮的啊！</li>\n<li>ConvertToUTF8<br>这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。</li>\n</ul>\n<p>我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><hr>\n<p>直接递上<a href=\"http://www.jb51.net/softjc/180873.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<h1 id=\"sublime配置\"><a href=\"#sublime配置\" class=\"headerlink\" title=\"sublime配置\"></a>sublime配置</h1><p><strong>Settings:</strong></p>\n<pre><code>{\n    &quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai.sublime-color-scheme&quot;,\n    &quot;font_options&quot;:\n    [\n        &quot;gdi&quot;\n    ],\n    &quot;font_size&quot;: 14,\n    &quot;ignored_packages&quot;:\n    [\n        &quot;Vintage&quot;\n    ],\n    &quot;theme&quot;: &quot;Adaptive.sublime-theme&quot;,\n    &quot;translate_tabs_to_spaces&quot;: true,\n    &quot;expand_tabs_on_save&quot;: true,\n    &quot;tab_size&quot;: 4,\n}</code></pre><p><strong>Anaconda Settings User:</strong></p>\n<pre><code>{\n    &quot;python_interpreter&quot;: &quot;E:/software/anaconda/python.exe&quot;,\n    &quot;suppress_word_completions&quot;: false,\n    &quot;suppress_explicit_completions&quot;: false,\n    &quot;complete_parameters&quot;: true,\n    &quot;complete__all_parameters&quot;: true,\n    &quot;anaconda_linting&quot;: false,\n    &quot;swallow_startup_errors&quot;: true,\n    &quot;auto_formatting&quot;: true,\n    &quot;enable_docstrings_tooltip&quot;: true,\n    &quot;enable_signatures_tooltip&quot;: true,\n    &quot;display_signatures&quot;: true,\n}</code></pre>"},{"title":"编译原理实践期末大作业","date":"2017-11-16T08:18:33.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n这学期编译原理实践期末大作业是编写一个简化swift语法编译器，代码等到学期结束再上传百度云，现在先上传一个测试运行程序，bug很多。\n[程序地址](https://pan.baidu.com/s/1jHDbtcy)，密码是cnfj，在大四上文件夹下。\n主界面：\n![](1.png)\n支持常用编辑以及编译运行和单步调试查看数据栈。\n目前暂时只做了跳过注释、mod、odd、自增、自减、常量定义、repeat这几个扩展点，其他再说吧，做的很烂，及格就行。","source":"_posts/sw-compiler.md","raw":"---\ntitle: 编译原理实践期末大作业\ndate: 2017-11-16 16:18:33\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 编译原理\n- 编译器\n- C#\n- C++\ncategories:\n- 程序设计\n---\n\n这学期编译原理实践期末大作业是编写一个简化swift语法编译器，代码等到学期结束再上传百度云，现在先上传一个测试运行程序，bug很多。\n[程序地址](https://pan.baidu.com/s/1jHDbtcy)，密码是cnfj，在大四上文件夹下。\n主界面：\n![](1.png)\n支持常用编辑以及编译运行和单步调试查看数据栈。\n目前暂时只做了跳过注释、mod、odd、自增、自减、常量定义、repeat这几个扩展点，其他再说吧，做的很烂，及格就行。","slug":"sw-compiler","published":1,"updated":"2019-07-20T04:21:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982i1009x7swek37fw3rv","content":"<p>这学期编译原理实践期末大作业是编写一个简化swift语法编译器，代码等到学期结束再上传百度云，现在先上传一个测试运行程序，bug很多。<br><a href=\"https://pan.baidu.com/s/1jHDbtcy\" target=\"_blank\" rel=\"noopener\">程序地址</a>，密码是cnfj，在大四上文件夹下。<br>主界面：<br><img src=\"1.png\" alt><br>支持常用编辑以及编译运行和单步调试查看数据栈。<br>目前暂时只做了跳过注释、mod、odd、自增、自减、常量定义、repeat这几个扩展点，其他再说吧，做的很烂，及格就行。</p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>这学期编译原理实践期末大作业是编写一个简化swift语法编译器，代码等到学期结束再上传百度云，现在先上传一个测试运行程序，bug很多。<br><a href=\"https://pan.baidu.com/s/1jHDbtcy\" target=\"_blank\" rel=\"noopener\">程序地址</a>，密码是cnfj，在大四上文件夹下。<br>主界面：<br><img src=\"1.png\" alt><br>支持常用编辑以及编译运行和单步调试查看数据栈。<br>目前暂时只做了跳过注释、mod、odd、自增、自减、常量定义、repeat这几个扩展点，其他再说吧，做的很烂，及格就行。</p>\n"},{"title":"Sequence Tagging with Little Labeled Data","date":"2017-12-30T03:49:42.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n历经几个星期的磨难，文本挖掘课的presentation课件初稿基本完成了，1月中下旬开讲，这次讲的是基于少量标注数据的序列标注，下面是我的综述。\n\n# Outline\n---\n- Sequence Tagging\n- Semi-supervised Learning\n- Transfer Learning\n- Conclusions\n- References\n\n# Sequence Tagging\n---\n\n### Introduction\n**Definition**\nSequence tagging is a type of pattern recognition task that involves the algorithmic assignment of a categorical label to each member of a sequence of observed values.\n**Significance**\nSequence tagging is one of the first stages in most natural language processing applications, such as part-of-speech tagging, chunking and named entity recognition.\n**Approaches**\n- ~~Traditional models~~\n - ~~Hidden Markov Models~~\n - ~~Conditional Random Fields~~\n- Neural network models\n - RNN, LSTM, GRU\n\n### Neural Network Model\n![](1.png)\n\n### Results\n![](3.png)\n\n### Sequence Tagging with Little Labeled Data\n**Backgrounds**\nAlthough recent neural networks obtain state-of-the-art performance on several sequence tagging tasks, they can't be used for tasks with little labeled data.\n**Approaches**\n- ~~Self-taught learning~~\n- ~~Active learning~~\n- ~~Transductive learning~~\n- Semi-supervised learning\n- Transfer learning\n\n# Semi-supervised Learning\n---\n\n### References\n**Language Models Added**\n- Semi-supervised Multitask Learning for Sequence Labeling. Marek Rei. ACL17.\n- Semi-supervised Sequence Tagging with Bidirectional Language Models. Matthew et al. ACL17.\n\n**Graph-based**\n- Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models. Subramanya et al. EMNLP10.\n- Scientific Information Extraction with Semi-supervised Neural Tagging. Luan et al. EMNLP17.\n- Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition. Liu et al. IEEE SLT14.\n\n### Language Models Added\n![](2.png)\n\n### Language Modeling Objective\n\\\\[\\begin{array}{l}\\overrightarrow { {m_t}}  = \\tanh (\\overrightarrow { {W_m}} \\overrightarrow { {h_t}} )\\\\\\overleftarrow { {m_t}}  = \\tanh (\\overleftarrow { {W_m}} \\overleftarrow { {h_t}} )\\\\P({w_{t + 1}}|\\overrightarrow { {m_t}} ) = {\\rm{softmax}}(\\overrightarrow { {W_q}} \\overrightarrow { {m_t}} )\\\\P({w_{t - 1}}|\\overleftarrow { {m_t}} ) = {\\rm{softmax}}(\\overleftarrow { {W_q}} \\overleftarrow { {m_t}} )\\\\\\overrightarrow E  =  - \\sum\\limits_{t = 1}^{T - 1} {\\log (P({w_{t + 1}}|\\overrightarrow { {m_t}} ))} \\\\\\overleftarrow E  =  - \\sum\\limits_{t = 2}^T {\\log (P({w_{t - 1}}|\\overleftarrow { {m_t}} ))} \\\\E = E + \\gamma (\\overrightarrow E  + \\overleftarrow E )\\end{array}\\\\]\n\n### Results\n![](4.png)\n![](5.png)\n\n### Language Models Added\n![](6.png)\n\n### Bidirectional Language Model\n\\\\[\\begin{array}{l}h_k^{LM} = [\\overrightarrow {h_k^{LM}} ;\\overleftarrow {h_k^{LM}} ]\\\\{h_{k,1}} = [\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]\\end{array}\\\\]\n**Alternative**\n- Replace $[\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]$ with $f([\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}])$.\n- Concatenate the LM embeddings at different locations in the baseline sequence tagger.\n- Decrease the number of parameters in the second RNN layer.\n\n### Results\n![](7.png)\n![](8.png)\n\n### Conclusions\n- The language model transfer across domains.\n- The model is robust even when trained on a large number of labeled data.\n- Training the sequence tagging model and language model together increases performance.\n\n### Graph-based\n- Steps\n - Construct a graph of tokens based on their semantic similarity.\n - Use the CRF marginal as a regularization term to do label propagation on the graph.\n - The smoothed posterior is then used to either interpolate with the CRF marginal or as an additional feature to the neural network.\n- Graph Construction\n - ${w_{uv}} = {d_e}(u,v)$ if $v \\in K(u)$ or $u \\in K(v)$.\n- Label Propagation\n![](9.png)\n- Uncertain Label Marginalizing\n\\\\[\\mathcal{Y}({x_t}) = \\left\\{ {\\begin{array}{*{20}{c}}{\\{ {y_t}\\} }&{ {\\rm{if \\ }}p({y_t}|x;\\theta ) > \\eta }\\\\{ {\\rm{All \\ label \\ types}}}&{ {\\rm{otherwise}}}\\end{array}} \\right.\\\\]\n- Score\n\\\\[\\phi (y;x,\\theta ) = \\sum\\limits_{t = 0}^n { {T_{ {y_t},{y_{t + 1}}}}}  + \\sum\\limits_{t = 1}^n { {P_{t,{y_t}}}} \\\\]\n- Probability\n\\\\[{p_\\theta }(\\mathcal{Y}({x^k})|{x^k}) = \\frac{ {\\sum\\nolimits_{ {y^k} \\in \\mathcal{Y}({x^k})} {\\exp (\\phi ({y^k};{x^k},\\theta ))} }}{ {\\sum\\nolimits_{y' \\in Y} {\\exp (\\phi (y';x,\\theta ))} }}\\\\]\n![](10.png)\n\n### Results\n![](11.png)\n\n### Conclusions\n- In-domain data performs better than cross-domain data.\n- The combination of in-domain data and ULM algorithms performs well.\n- We can add language models into the model in the future to capture the context information.\n\n# Transfer Learning\n---\n\n### References\n**Cross-domain Transfer**\n- Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.\n- Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning. Peng et al. ACL16.\n- Multi-task Domain Adaptation for Sequence Tagging. Peng et al. Workshop17.\n\n**Cross-lingual Transfer**\n- Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.\n- Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources. Kim et al. EMNLP17.\n\n### Cross-domain Transfer\n- Label mapping exist\n![](13.png)\n- Disparate label sets\n![](12.png)\n\n![](20.png)\n![](15.png)\n\n### Domain Projections\n- Domain Masks\n\\\\[\\begin{array}{l}{m_1} = [\\overrightarrow 1 ,\\overrightarrow 1 ,\\overrightarrow 0 ],{m_2} = [\\overrightarrow 1 ,\\overrightarrow 0 ,\\overrightarrow 1 ]\\\\\\hat h = {m_d} \\odot h\\end{array}\\\\]\n- Linear Projection\n\\\\[\\hat h = {T_d}h\\\\]\n\n### Results\n![](16.png)\n\n### Conclusions\n- Multi-task learning can help domain adaptation.\n- The number of shared parameters has great impact on the performance.\n- We may use other domain adaptation methods besides parameter sharing and representation learning.\n\n### Cross-lingual Transfer\n![](17.png)\n![](18.png)\n- Sequence Tagging Loss\n\\\\[{\\mathcal{L}_p} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N { {p_{i,j}}\\log ({ {\\hat p}_{i,j}})} }\\\\]\n- Language Classifier Loss\n\\\\[{\\mathcal{L}_a} =  - \\sum\\limits_{i = 1}^S { {l_i}\\log ({ {\\hat l}_i})}\\\\]\n- Bidirectional Language Model Loss\n\\\\[{\\mathcal{L}_l} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N {\\log (P({w_{j + 1}}|{f_j})) + \\log (P({w_{j - 1}}|{b_j}))} }\\\\]\n- Total Loss\n\\\\[\\mathcal{L} = {w_s}({\\mathcal{L}_p} + \\lambda {\\mathcal{L}_a} + \\lambda {\\mathcal{L}_l})\\\\]\n\n### Results\n![](19.png)\n\n### Conclusions\n- The language classifier can train the common LSTM to be language-agnostic.\n- Either too many or too little labeled data decrease the performance.\n- Multiple source languages can be used to increase the performance.\n\n# Conclusions\n---\n\n### Semi-supervised Learning vs Transfer Learning\n- It seems that semi-supervised learning is better than transfer learning on some tasks.\n- Semi-supervised learning is not always useful for the lack of unlabeled data in the same domain.\n- Andrew Ng had said that transfer learning is an important research direction in the next five years.\n\n### Future\n- Semi-supervised learning and transfer learning can be combined to increase performance.\n- Other methods like active learning can be added.\n\n# References\n---\nXuezhe Ma and Eduard Hovy. (2016).\n**End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF.**\n*In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1064–1074, Berlin, Germany, August 7-12, 2016.*\n\nMarek Rei. (2017).\n**Semi-supervised Multitask Learning for Sequence Labeling.**\n*In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 2121–2130, Vancouver, Canada, July 30 - August 4, 2017.*\n\nMatthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. (2017).\n**Semi-supervised Sequence Tagging with Bidirectional Language Models.**\n*In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1756–1765, Vancouver, Canada, July 30 - August 4, 2017.*\n\nYi Luan, Mari Ostendorf, Hannaneh Hajishirzi. (2017).\n**Scientific Information Extraction with Semi-supervised Neural Tagging.**\n*In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2631–2641, Copenhagen, Denmark, September 7–11, 2017.*\n\nZhilin Yang, Ruslan Salakhutdinov, William W. Cohen. (2017).\n**Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks.**\n*In ICLR 2017.*\n\nJoo-Kyung Kim, Young-Bum Kim, Ruhi Sarikaya, Eric Fosler-Lussier. (2017).\n**Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources.**\n*In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2822–2828, Copenhagen, Denmark, September 7–11, 2017.*\n\nNanyun Peng, Mark Dredze. (2017).\n**Multi-task Domain Adaptation for Sequence Tagging.**\n*In Proceedings of the 2nd Workshop on Representation Learning for NLP, pages 91–100, Vancouver, Canada, August 3, 2017.*\n\nAmarnag Subramanya, Slav Petrov, Fernando Pereira. (2010).\n**Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models.**\n*In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 167–176, MIT, Massachusetts, USA, 9-11 October 2010.*\n\nYuzong Liu, Katrin Kirchhoff. (2014).\n**Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition.**\n*In IEEE SLT 2014.*\n\nNanyun Peng, Mark Dredze. (2016).\n**Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning.**\n*In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 149–155, Berlin, Germany, August 7-12, 2016.*","source":"_posts/text-minning-ppt.md","raw":"---\ntitle: Sequence Tagging with Little Labeled Data\ndate: 2017-12-30 11:49:42\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 自然语言处理\n- 神经网络\n- 深度学习\n- 序列标注\n- 半监督学习\n- 迁移学习\ncategories:\n- 序列标注\n---\n\n历经几个星期的磨难，文本挖掘课的presentation课件初稿基本完成了，1月中下旬开讲，这次讲的是基于少量标注数据的序列标注，下面是我的综述。\n\n# Outline\n---\n- Sequence Tagging\n- Semi-supervised Learning\n- Transfer Learning\n- Conclusions\n- References\n\n# Sequence Tagging\n---\n\n### Introduction\n**Definition**\nSequence tagging is a type of pattern recognition task that involves the algorithmic assignment of a categorical label to each member of a sequence of observed values.\n**Significance**\nSequence tagging is one of the first stages in most natural language processing applications, such as part-of-speech tagging, chunking and named entity recognition.\n**Approaches**\n- ~~Traditional models~~\n - ~~Hidden Markov Models~~\n - ~~Conditional Random Fields~~\n- Neural network models\n - RNN, LSTM, GRU\n\n### Neural Network Model\n![](1.png)\n\n### Results\n![](3.png)\n\n### Sequence Tagging with Little Labeled Data\n**Backgrounds**\nAlthough recent neural networks obtain state-of-the-art performance on several sequence tagging tasks, they can't be used for tasks with little labeled data.\n**Approaches**\n- ~~Self-taught learning~~\n- ~~Active learning~~\n- ~~Transductive learning~~\n- Semi-supervised learning\n- Transfer learning\n\n# Semi-supervised Learning\n---\n\n### References\n**Language Models Added**\n- Semi-supervised Multitask Learning for Sequence Labeling. Marek Rei. ACL17.\n- Semi-supervised Sequence Tagging with Bidirectional Language Models. Matthew et al. ACL17.\n\n**Graph-based**\n- Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models. Subramanya et al. EMNLP10.\n- Scientific Information Extraction with Semi-supervised Neural Tagging. Luan et al. EMNLP17.\n- Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition. Liu et al. IEEE SLT14.\n\n### Language Models Added\n![](2.png)\n\n### Language Modeling Objective\n\\\\[\\begin{array}{l}\\overrightarrow { {m_t}}  = \\tanh (\\overrightarrow { {W_m}} \\overrightarrow { {h_t}} )\\\\\\overleftarrow { {m_t}}  = \\tanh (\\overleftarrow { {W_m}} \\overleftarrow { {h_t}} )\\\\P({w_{t + 1}}|\\overrightarrow { {m_t}} ) = {\\rm{softmax}}(\\overrightarrow { {W_q}} \\overrightarrow { {m_t}} )\\\\P({w_{t - 1}}|\\overleftarrow { {m_t}} ) = {\\rm{softmax}}(\\overleftarrow { {W_q}} \\overleftarrow { {m_t}} )\\\\\\overrightarrow E  =  - \\sum\\limits_{t = 1}^{T - 1} {\\log (P({w_{t + 1}}|\\overrightarrow { {m_t}} ))} \\\\\\overleftarrow E  =  - \\sum\\limits_{t = 2}^T {\\log (P({w_{t - 1}}|\\overleftarrow { {m_t}} ))} \\\\E = E + \\gamma (\\overrightarrow E  + \\overleftarrow E )\\end{array}\\\\]\n\n### Results\n![](4.png)\n![](5.png)\n\n### Language Models Added\n![](6.png)\n\n### Bidirectional Language Model\n\\\\[\\begin{array}{l}h_k^{LM} = [\\overrightarrow {h_k^{LM}} ;\\overleftarrow {h_k^{LM}} ]\\\\{h_{k,1}} = [\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]\\end{array}\\\\]\n**Alternative**\n- Replace $[\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]$ with $f([\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}])$.\n- Concatenate the LM embeddings at different locations in the baseline sequence tagger.\n- Decrease the number of parameters in the second RNN layer.\n\n### Results\n![](7.png)\n![](8.png)\n\n### Conclusions\n- The language model transfer across domains.\n- The model is robust even when trained on a large number of labeled data.\n- Training the sequence tagging model and language model together increases performance.\n\n### Graph-based\n- Steps\n - Construct a graph of tokens based on their semantic similarity.\n - Use the CRF marginal as a regularization term to do label propagation on the graph.\n - The smoothed posterior is then used to either interpolate with the CRF marginal or as an additional feature to the neural network.\n- Graph Construction\n - ${w_{uv}} = {d_e}(u,v)$ if $v \\in K(u)$ or $u \\in K(v)$.\n- Label Propagation\n![](9.png)\n- Uncertain Label Marginalizing\n\\\\[\\mathcal{Y}({x_t}) = \\left\\{ {\\begin{array}{*{20}{c}}{\\{ {y_t}\\} }&{ {\\rm{if \\ }}p({y_t}|x;\\theta ) > \\eta }\\\\{ {\\rm{All \\ label \\ types}}}&{ {\\rm{otherwise}}}\\end{array}} \\right.\\\\]\n- Score\n\\\\[\\phi (y;x,\\theta ) = \\sum\\limits_{t = 0}^n { {T_{ {y_t},{y_{t + 1}}}}}  + \\sum\\limits_{t = 1}^n { {P_{t,{y_t}}}} \\\\]\n- Probability\n\\\\[{p_\\theta }(\\mathcal{Y}({x^k})|{x^k}) = \\frac{ {\\sum\\nolimits_{ {y^k} \\in \\mathcal{Y}({x^k})} {\\exp (\\phi ({y^k};{x^k},\\theta ))} }}{ {\\sum\\nolimits_{y' \\in Y} {\\exp (\\phi (y';x,\\theta ))} }}\\\\]\n![](10.png)\n\n### Results\n![](11.png)\n\n### Conclusions\n- In-domain data performs better than cross-domain data.\n- The combination of in-domain data and ULM algorithms performs well.\n- We can add language models into the model in the future to capture the context information.\n\n# Transfer Learning\n---\n\n### References\n**Cross-domain Transfer**\n- Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.\n- Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning. Peng et al. ACL16.\n- Multi-task Domain Adaptation for Sequence Tagging. Peng et al. Workshop17.\n\n**Cross-lingual Transfer**\n- Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.\n- Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources. Kim et al. EMNLP17.\n\n### Cross-domain Transfer\n- Label mapping exist\n![](13.png)\n- Disparate label sets\n![](12.png)\n\n![](20.png)\n![](15.png)\n\n### Domain Projections\n- Domain Masks\n\\\\[\\begin{array}{l}{m_1} = [\\overrightarrow 1 ,\\overrightarrow 1 ,\\overrightarrow 0 ],{m_2} = [\\overrightarrow 1 ,\\overrightarrow 0 ,\\overrightarrow 1 ]\\\\\\hat h = {m_d} \\odot h\\end{array}\\\\]\n- Linear Projection\n\\\\[\\hat h = {T_d}h\\\\]\n\n### Results\n![](16.png)\n\n### Conclusions\n- Multi-task learning can help domain adaptation.\n- The number of shared parameters has great impact on the performance.\n- We may use other domain adaptation methods besides parameter sharing and representation learning.\n\n### Cross-lingual Transfer\n![](17.png)\n![](18.png)\n- Sequence Tagging Loss\n\\\\[{\\mathcal{L}_p} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N { {p_{i,j}}\\log ({ {\\hat p}_{i,j}})} }\\\\]\n- Language Classifier Loss\n\\\\[{\\mathcal{L}_a} =  - \\sum\\limits_{i = 1}^S { {l_i}\\log ({ {\\hat l}_i})}\\\\]\n- Bidirectional Language Model Loss\n\\\\[{\\mathcal{L}_l} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N {\\log (P({w_{j + 1}}|{f_j})) + \\log (P({w_{j - 1}}|{b_j}))} }\\\\]\n- Total Loss\n\\\\[\\mathcal{L} = {w_s}({\\mathcal{L}_p} + \\lambda {\\mathcal{L}_a} + \\lambda {\\mathcal{L}_l})\\\\]\n\n### Results\n![](19.png)\n\n### Conclusions\n- The language classifier can train the common LSTM to be language-agnostic.\n- Either too many or too little labeled data decrease the performance.\n- Multiple source languages can be used to increase the performance.\n\n# Conclusions\n---\n\n### Semi-supervised Learning vs Transfer Learning\n- It seems that semi-supervised learning is better than transfer learning on some tasks.\n- Semi-supervised learning is not always useful for the lack of unlabeled data in the same domain.\n- Andrew Ng had said that transfer learning is an important research direction in the next five years.\n\n### Future\n- Semi-supervised learning and transfer learning can be combined to increase performance.\n- Other methods like active learning can be added.\n\n# References\n---\nXuezhe Ma and Eduard Hovy. (2016).\n**End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF.**\n*In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1064–1074, Berlin, Germany, August 7-12, 2016.*\n\nMarek Rei. (2017).\n**Semi-supervised Multitask Learning for Sequence Labeling.**\n*In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 2121–2130, Vancouver, Canada, July 30 - August 4, 2017.*\n\nMatthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. (2017).\n**Semi-supervised Sequence Tagging with Bidirectional Language Models.**\n*In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1756–1765, Vancouver, Canada, July 30 - August 4, 2017.*\n\nYi Luan, Mari Ostendorf, Hannaneh Hajishirzi. (2017).\n**Scientific Information Extraction with Semi-supervised Neural Tagging.**\n*In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2631–2641, Copenhagen, Denmark, September 7–11, 2017.*\n\nZhilin Yang, Ruslan Salakhutdinov, William W. Cohen. (2017).\n**Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks.**\n*In ICLR 2017.*\n\nJoo-Kyung Kim, Young-Bum Kim, Ruhi Sarikaya, Eric Fosler-Lussier. (2017).\n**Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources.**\n*In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2822–2828, Copenhagen, Denmark, September 7–11, 2017.*\n\nNanyun Peng, Mark Dredze. (2017).\n**Multi-task Domain Adaptation for Sequence Tagging.**\n*In Proceedings of the 2nd Workshop on Representation Learning for NLP, pages 91–100, Vancouver, Canada, August 3, 2017.*\n\nAmarnag Subramanya, Slav Petrov, Fernando Pereira. (2010).\n**Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models.**\n*In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 167–176, MIT, Massachusetts, USA, 9-11 October 2010.*\n\nYuzong Liu, Katrin Kirchhoff. (2014).\n**Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition.**\n*In IEEE SLT 2014.*\n\nNanyun Peng, Mark Dredze. (2016).\n**Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning.**\n*In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 149–155, Berlin, Germany, August 7-12, 2016.*","slug":"text-minning-ppt","published":1,"updated":"2019-07-19T17:12:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyk982i300a07swe11iy03i7","content":"<p>历经几个星期的磨难，文本挖掘课的presentation课件初稿基本完成了，1月中下旬开讲，这次讲的是基于少量标注数据的序列标注，下面是我的综述。</p>\n<h1 id=\"Outline\"><a href=\"#Outline\" class=\"headerlink\" title=\"Outline\"></a>Outline</h1><hr>\n<ul>\n<li>Sequence Tagging</li>\n<li>Semi-supervised Learning</li>\n<li>Transfer Learning</li>\n<li>Conclusions</li>\n<li>References</li>\n</ul>\n<h1 id=\"Sequence-Tagging\"><a href=\"#Sequence-Tagging\" class=\"headerlink\" title=\"Sequence Tagging\"></a>Sequence Tagging</h1><hr>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p><strong>Definition</strong><br>Sequence tagging is a type of pattern recognition task that involves the algorithmic assignment of a categorical label to each member of a sequence of observed values.<br><strong>Significance</strong><br>Sequence tagging is one of the first stages in most natural language processing applications, such as part-of-speech tagging, chunking and named entity recognition.<br><strong>Approaches</strong></p>\n<ul>\n<li><del>Traditional models</del><ul>\n<li><del>Hidden Markov Models</del></li>\n<li><del>Conditional Random Fields</del></li>\n</ul>\n</li>\n<li>Neural network models<ul>\n<li>RNN, LSTM, GRU</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Neural-Network-Model\"><a href=\"#Neural-Network-Model\" class=\"headerlink\" title=\"Neural Network Model\"></a>Neural Network Model</h3><p><img src=\"1.png\" alt></p>\n<h3 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"3.png\" alt></p>\n<h3 id=\"Sequence-Tagging-with-Little-Labeled-Data\"><a href=\"#Sequence-Tagging-with-Little-Labeled-Data\" class=\"headerlink\" title=\"Sequence Tagging with Little Labeled Data\"></a>Sequence Tagging with Little Labeled Data</h3><p><strong>Backgrounds</strong><br>Although recent neural networks obtain state-of-the-art performance on several sequence tagging tasks, they can’t be used for tasks with little labeled data.<br><strong>Approaches</strong></p>\n<ul>\n<li><del>Self-taught learning</del></li>\n<li><del>Active learning</del></li>\n<li><del>Transductive learning</del></li>\n<li>Semi-supervised learning</li>\n<li>Transfer learning</li>\n</ul>\n<h1 id=\"Semi-supervised-Learning\"><a href=\"#Semi-supervised-Learning\" class=\"headerlink\" title=\"Semi-supervised Learning\"></a>Semi-supervised Learning</h1><hr>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p><strong>Language Models Added</strong></p>\n<ul>\n<li>Semi-supervised Multitask Learning for Sequence Labeling. Marek Rei. ACL17.</li>\n<li>Semi-supervised Sequence Tagging with Bidirectional Language Models. Matthew et al. ACL17.</li>\n</ul>\n<p><strong>Graph-based</strong></p>\n<ul>\n<li>Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models. Subramanya et al. EMNLP10.</li>\n<li>Scientific Information Extraction with Semi-supervised Neural Tagging. Luan et al. EMNLP17.</li>\n<li>Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition. Liu et al. IEEE SLT14.</li>\n</ul>\n<h3 id=\"Language-Models-Added\"><a href=\"#Language-Models-Added\" class=\"headerlink\" title=\"Language Models Added\"></a>Language Models Added</h3><p><img src=\"2.png\" alt></p>\n<h3 id=\"Language-Modeling-Objective\"><a href=\"#Language-Modeling-Objective\" class=\"headerlink\" title=\"Language Modeling Objective\"></a>Language Modeling Objective</h3><p>\\[\\begin{array}{l}\\overrightarrow { {m_t}}  = \\tanh (\\overrightarrow { {W_m}} \\overrightarrow { {h_t}} )\\\\\\overleftarrow { {m_t}}  = \\tanh (\\overleftarrow { {W_m}} \\overleftarrow { {h_t}} )\\\\P({w_{t + 1}}|\\overrightarrow { {m_t}} ) = {\\rm{softmax}}(\\overrightarrow { {W_q}} \\overrightarrow { {m_t}} )\\\\P({w_{t - 1}}|\\overleftarrow { {m_t}} ) = {\\rm{softmax}}(\\overleftarrow { {W_q}} \\overleftarrow { {m_t}} )\\\\\\overrightarrow E  =  - \\sum\\limits_{t = 1}^{T - 1} {\\log (P({w_{t + 1}}|\\overrightarrow { {m_t}} ))} \\\\\\overleftarrow E  =  - \\sum\\limits_{t = 2}^T {\\log (P({w_{t - 1}}|\\overleftarrow { {m_t}} ))} \\\\E = E + \\gamma (\\overrightarrow E  + \\overleftarrow E )\\end{array}\\]</p>\n<h3 id=\"Results-1\"><a href=\"#Results-1\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"4.png\" alt><br><img src=\"5.png\" alt></p>\n<h3 id=\"Language-Models-Added-1\"><a href=\"#Language-Models-Added-1\" class=\"headerlink\" title=\"Language Models Added\"></a>Language Models Added</h3><p><img src=\"6.png\" alt></p>\n<h3 id=\"Bidirectional-Language-Model\"><a href=\"#Bidirectional-Language-Model\" class=\"headerlink\" title=\"Bidirectional Language Model\"></a>Bidirectional Language Model</h3><p>\\[\\begin{array}{l}h_k^{LM} = [\\overrightarrow {h_k^{LM}} ;\\overleftarrow {h_k^{LM}} ]\\\\{h_{k,1}} = [\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]\\end{array}\\]<br><strong>Alternative</strong></p>\n<ul>\n<li>Replace $[\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]$ with $f([\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}])$.</li>\n<li>Concatenate the LM embeddings at different locations in the baseline sequence tagger.</li>\n<li>Decrease the number of parameters in the second RNN layer.</li>\n</ul>\n<h3 id=\"Results-2\"><a href=\"#Results-2\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"7.png\" alt><br><img src=\"8.png\" alt></p>\n<h3 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>The language model transfer across domains.</li>\n<li>The model is robust even when trained on a large number of labeled data.</li>\n<li>Training the sequence tagging model and language model together increases performance.</li>\n</ul>\n<h3 id=\"Graph-based\"><a href=\"#Graph-based\" class=\"headerlink\" title=\"Graph-based\"></a>Graph-based</h3><ul>\n<li>Steps<ul>\n<li>Construct a graph of tokens based on their semantic similarity.</li>\n<li>Use the CRF marginal as a regularization term to do label propagation on the graph.</li>\n<li>The smoothed posterior is then used to either interpolate with the CRF marginal or as an additional feature to the neural network.</li>\n</ul>\n</li>\n<li>Graph Construction<ul>\n<li>${w_{uv}} = {d_e}(u,v)$ if $v \\in K(u)$ or $u \\in K(v)$.</li>\n</ul>\n</li>\n<li>Label Propagation<br><img src=\"9.png\" alt></li>\n<li>Uncertain Label Marginalizing<br>\\[\\mathcal{Y}({x_t}) = \\left\\{ {\\begin{array}{*{20}{c}}{\\{ {y_t}\\} }&amp;{ {\\rm{if \\ }}p({y_t}|x;\\theta ) &gt; \\eta }\\\\{ {\\rm{All \\ label \\ types}}}&amp;{ {\\rm{otherwise}}}\\end{array}} \\right.\\]</li>\n<li>Score<br>\\[\\phi (y;x,\\theta ) = \\sum\\limits_{t = 0}^n { {T_{ {y_t},{y_{t + 1}}}}}  + \\sum\\limits_{t = 1}^n { {P_{t,{y_t}}}} \\]</li>\n<li>Probability<br>\\[{p_\\theta }(\\mathcal{Y}({x^k})|{x^k}) = \\frac{ {\\sum\\nolimits_{ {y^k} \\in \\mathcal{Y}({x^k})} {\\exp (\\phi ({y^k};{x^k},\\theta ))} }}{ {\\sum\\nolimits_{y’ \\in Y} {\\exp (\\phi (y’;x,\\theta ))} }}\\]<br><img src=\"10.png\" alt></li>\n</ul>\n<h3 id=\"Results-3\"><a href=\"#Results-3\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"11.png\" alt></p>\n<h3 id=\"Conclusions-1\"><a href=\"#Conclusions-1\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>In-domain data performs better than cross-domain data.</li>\n<li>The combination of in-domain data and ULM algorithms performs well.</li>\n<li>We can add language models into the model in the future to capture the context information.</li>\n</ul>\n<h1 id=\"Transfer-Learning\"><a href=\"#Transfer-Learning\" class=\"headerlink\" title=\"Transfer Learning\"></a>Transfer Learning</h1><hr>\n<h3 id=\"References-1\"><a href=\"#References-1\" class=\"headerlink\" title=\"References\"></a>References</h3><p><strong>Cross-domain Transfer</strong></p>\n<ul>\n<li>Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.</li>\n<li>Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning. Peng et al. ACL16.</li>\n<li>Multi-task Domain Adaptation for Sequence Tagging. Peng et al. Workshop17.</li>\n</ul>\n<p><strong>Cross-lingual Transfer</strong></p>\n<ul>\n<li>Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.</li>\n<li>Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources. Kim et al. EMNLP17.</li>\n</ul>\n<h3 id=\"Cross-domain-Transfer\"><a href=\"#Cross-domain-Transfer\" class=\"headerlink\" title=\"Cross-domain Transfer\"></a>Cross-domain Transfer</h3><ul>\n<li>Label mapping exist<br><img src=\"13.png\" alt></li>\n<li>Disparate label sets<br><img src=\"12.png\" alt></li>\n</ul>\n<p><img src=\"20.png\" alt><br><img src=\"15.png\" alt></p>\n<h3 id=\"Domain-Projections\"><a href=\"#Domain-Projections\" class=\"headerlink\" title=\"Domain Projections\"></a>Domain Projections</h3><ul>\n<li>Domain Masks<br>\\[\\begin{array}{l}{m_1} = [\\overrightarrow 1 ,\\overrightarrow 1 ,\\overrightarrow 0 ],{m_2} = [\\overrightarrow 1 ,\\overrightarrow 0 ,\\overrightarrow 1 ]\\\\\\hat h = {m_d} \\odot h\\end{array}\\]</li>\n<li>Linear Projection<br>\\[\\hat h = {T_d}h\\]</li>\n</ul>\n<h3 id=\"Results-4\"><a href=\"#Results-4\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"16.png\" alt></p>\n<h3 id=\"Conclusions-2\"><a href=\"#Conclusions-2\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>Multi-task learning can help domain adaptation.</li>\n<li>The number of shared parameters has great impact on the performance.</li>\n<li>We may use other domain adaptation methods besides parameter sharing and representation learning.</li>\n</ul>\n<h3 id=\"Cross-lingual-Transfer\"><a href=\"#Cross-lingual-Transfer\" class=\"headerlink\" title=\"Cross-lingual Transfer\"></a>Cross-lingual Transfer</h3><p><img src=\"17.png\" alt><br><img src=\"18.png\" alt></p>\n<ul>\n<li>Sequence Tagging Loss<br>\\[{\\mathcal{L}_p} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N { {p_{i,j}}\\log ({ {\\hat p}_{i,j}})} }\\]</li>\n<li>Language Classifier Loss<br>\\[{\\mathcal{L}_a} =  - \\sum\\limits_{i = 1}^S { {l_i}\\log ({ {\\hat l}_i})}\\]</li>\n<li>Bidirectional Language Model Loss<br>\\[{\\mathcal{L}_l} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N {\\log (P({w_{j + 1}}|{f_j})) + \\log (P({w_{j - 1}}|{b_j}))} }\\]</li>\n<li>Total Loss<br>\\[\\mathcal{L} = {w_s}({\\mathcal{L}_p} + \\lambda {\\mathcal{L}_a} + \\lambda {\\mathcal{L}_l})\\]</li>\n</ul>\n<h3 id=\"Results-5\"><a href=\"#Results-5\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"19.png\" alt></p>\n<h3 id=\"Conclusions-3\"><a href=\"#Conclusions-3\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>The language classifier can train the common LSTM to be language-agnostic.</li>\n<li>Either too many or too little labeled data decrease the performance.</li>\n<li>Multiple source languages can be used to increase the performance.</li>\n</ul>\n<h1 id=\"Conclusions-4\"><a href=\"#Conclusions-4\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h1><hr>\n<h3 id=\"Semi-supervised-Learning-vs-Transfer-Learning\"><a href=\"#Semi-supervised-Learning-vs-Transfer-Learning\" class=\"headerlink\" title=\"Semi-supervised Learning vs Transfer Learning\"></a>Semi-supervised Learning vs Transfer Learning</h3><ul>\n<li>It seems that semi-supervised learning is better than transfer learning on some tasks.</li>\n<li>Semi-supervised learning is not always useful for the lack of unlabeled data in the same domain.</li>\n<li>Andrew Ng had said that transfer learning is an important research direction in the next five years.</li>\n</ul>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><ul>\n<li>Semi-supervised learning and transfer learning can be combined to increase performance.</li>\n<li>Other methods like active learning can be added.</li>\n</ul>\n<h1 id=\"References-2\"><a href=\"#References-2\" class=\"headerlink\" title=\"References\"></a>References</h1><hr>\n<p>Xuezhe Ma and Eduard Hovy. (2016).<br><strong>End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF.</strong><br><em>In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1064–1074, Berlin, Germany, August 7-12, 2016.</em></p>\n<p>Marek Rei. (2017).<br><strong>Semi-supervised Multitask Learning for Sequence Labeling.</strong><br><em>In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 2121–2130, Vancouver, Canada, July 30 - August 4, 2017.</em></p>\n<p>Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. (2017).<br><strong>Semi-supervised Sequence Tagging with Bidirectional Language Models.</strong><br><em>In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1756–1765, Vancouver, Canada, July 30 - August 4, 2017.</em></p>\n<p>Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. (2017).<br><strong>Scientific Information Extraction with Semi-supervised Neural Tagging.</strong><br><em>In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2631–2641, Copenhagen, Denmark, September 7–11, 2017.</em></p>\n<p>Zhilin Yang, Ruslan Salakhutdinov, William W. Cohen. (2017).<br><strong>Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks.</strong><br><em>In ICLR 2017.</em></p>\n<p>Joo-Kyung Kim, Young-Bum Kim, Ruhi Sarikaya, Eric Fosler-Lussier. (2017).<br><strong>Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources.</strong><br><em>In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2822–2828, Copenhagen, Denmark, September 7–11, 2017.</em></p>\n<p>Nanyun Peng, Mark Dredze. (2017).<br><strong>Multi-task Domain Adaptation for Sequence Tagging.</strong><br><em>In Proceedings of the 2nd Workshop on Representation Learning for NLP, pages 91–100, Vancouver, Canada, August 3, 2017.</em></p>\n<p>Amarnag Subramanya, Slav Petrov, Fernando Pereira. (2010).<br><strong>Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models.</strong><br><em>In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 167–176, MIT, Massachusetts, USA, 9-11 October 2010.</em></p>\n<p>Yuzong Liu, Katrin Kirchhoff. (2014).<br><strong>Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition.</strong><br><em>In IEEE SLT 2014.</em></p>\n<p>Nanyun Peng, Mark Dredze. (2016).<br><strong>Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning.</strong><br><em>In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 149–155, Berlin, Germany, August 7-12, 2016.</em></p>\n","site":{"data":{"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}],"friends":[{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<p>历经几个星期的磨难，文本挖掘课的presentation课件初稿基本完成了，1月中下旬开讲，这次讲的是基于少量标注数据的序列标注，下面是我的综述。</p>\n<h1 id=\"Outline\"><a href=\"#Outline\" class=\"headerlink\" title=\"Outline\"></a>Outline</h1><hr>\n<ul>\n<li>Sequence Tagging</li>\n<li>Semi-supervised Learning</li>\n<li>Transfer Learning</li>\n<li>Conclusions</li>\n<li>References</li>\n</ul>\n<h1 id=\"Sequence-Tagging\"><a href=\"#Sequence-Tagging\" class=\"headerlink\" title=\"Sequence Tagging\"></a>Sequence Tagging</h1><hr>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p><strong>Definition</strong><br>Sequence tagging is a type of pattern recognition task that involves the algorithmic assignment of a categorical label to each member of a sequence of observed values.<br><strong>Significance</strong><br>Sequence tagging is one of the first stages in most natural language processing applications, such as part-of-speech tagging, chunking and named entity recognition.<br><strong>Approaches</strong></p>\n<ul>\n<li><del>Traditional models</del><ul>\n<li><del>Hidden Markov Models</del></li>\n<li><del>Conditional Random Fields</del></li>\n</ul>\n</li>\n<li>Neural network models<ul>\n<li>RNN, LSTM, GRU</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Neural-Network-Model\"><a href=\"#Neural-Network-Model\" class=\"headerlink\" title=\"Neural Network Model\"></a>Neural Network Model</h3><p><img src=\"1.png\" alt></p>\n<h3 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"3.png\" alt></p>\n<h3 id=\"Sequence-Tagging-with-Little-Labeled-Data\"><a href=\"#Sequence-Tagging-with-Little-Labeled-Data\" class=\"headerlink\" title=\"Sequence Tagging with Little Labeled Data\"></a>Sequence Tagging with Little Labeled Data</h3><p><strong>Backgrounds</strong><br>Although recent neural networks obtain state-of-the-art performance on several sequence tagging tasks, they can’t be used for tasks with little labeled data.<br><strong>Approaches</strong></p>\n<ul>\n<li><del>Self-taught learning</del></li>\n<li><del>Active learning</del></li>\n<li><del>Transductive learning</del></li>\n<li>Semi-supervised learning</li>\n<li>Transfer learning</li>\n</ul>\n<h1 id=\"Semi-supervised-Learning\"><a href=\"#Semi-supervised-Learning\" class=\"headerlink\" title=\"Semi-supervised Learning\"></a>Semi-supervised Learning</h1><hr>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p><strong>Language Models Added</strong></p>\n<ul>\n<li>Semi-supervised Multitask Learning for Sequence Labeling. Marek Rei. ACL17.</li>\n<li>Semi-supervised Sequence Tagging with Bidirectional Language Models. Matthew et al. ACL17.</li>\n</ul>\n<p><strong>Graph-based</strong></p>\n<ul>\n<li>Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models. Subramanya et al. EMNLP10.</li>\n<li>Scientific Information Extraction with Semi-supervised Neural Tagging. Luan et al. EMNLP17.</li>\n<li>Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition. Liu et al. IEEE SLT14.</li>\n</ul>\n<h3 id=\"Language-Models-Added\"><a href=\"#Language-Models-Added\" class=\"headerlink\" title=\"Language Models Added\"></a>Language Models Added</h3><p><img src=\"2.png\" alt></p>\n<h3 id=\"Language-Modeling-Objective\"><a href=\"#Language-Modeling-Objective\" class=\"headerlink\" title=\"Language Modeling Objective\"></a>Language Modeling Objective</h3><p>\\[\\begin{array}{l}\\overrightarrow { {m_t}}  = \\tanh (\\overrightarrow { {W_m}} \\overrightarrow { {h_t}} )\\\\\\overleftarrow { {m_t}}  = \\tanh (\\overleftarrow { {W_m}} \\overleftarrow { {h_t}} )\\\\P({w_{t + 1}}|\\overrightarrow { {m_t}} ) = {\\rm{softmax}}(\\overrightarrow { {W_q}} \\overrightarrow { {m_t}} )\\\\P({w_{t - 1}}|\\overleftarrow { {m_t}} ) = {\\rm{softmax}}(\\overleftarrow { {W_q}} \\overleftarrow { {m_t}} )\\\\\\overrightarrow E  =  - \\sum\\limits_{t = 1}^{T - 1} {\\log (P({w_{t + 1}}|\\overrightarrow { {m_t}} ))} \\\\\\overleftarrow E  =  - \\sum\\limits_{t = 2}^T {\\log (P({w_{t - 1}}|\\overleftarrow { {m_t}} ))} \\\\E = E + \\gamma (\\overrightarrow E  + \\overleftarrow E )\\end{array}\\]</p>\n<h3 id=\"Results-1\"><a href=\"#Results-1\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"4.png\" alt><br><img src=\"5.png\" alt></p>\n<h3 id=\"Language-Models-Added-1\"><a href=\"#Language-Models-Added-1\" class=\"headerlink\" title=\"Language Models Added\"></a>Language Models Added</h3><p><img src=\"6.png\" alt></p>\n<h3 id=\"Bidirectional-Language-Model\"><a href=\"#Bidirectional-Language-Model\" class=\"headerlink\" title=\"Bidirectional Language Model\"></a>Bidirectional Language Model</h3><p>\\[\\begin{array}{l}h_k^{LM} = [\\overrightarrow {h_k^{LM}} ;\\overleftarrow {h_k^{LM}} ]\\\\{h_{k,1}} = [\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]\\end{array}\\]<br><strong>Alternative</strong></p>\n<ul>\n<li>Replace $[\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}]$ with $f([\\overrightarrow { {h_{k,1}}} ;\\overleftarrow { {h_{k,1}}} ;h_k^{LM}])$.</li>\n<li>Concatenate the LM embeddings at different locations in the baseline sequence tagger.</li>\n<li>Decrease the number of parameters in the second RNN layer.</li>\n</ul>\n<h3 id=\"Results-2\"><a href=\"#Results-2\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"7.png\" alt><br><img src=\"8.png\" alt></p>\n<h3 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>The language model transfer across domains.</li>\n<li>The model is robust even when trained on a large number of labeled data.</li>\n<li>Training the sequence tagging model and language model together increases performance.</li>\n</ul>\n<h3 id=\"Graph-based\"><a href=\"#Graph-based\" class=\"headerlink\" title=\"Graph-based\"></a>Graph-based</h3><ul>\n<li>Steps<ul>\n<li>Construct a graph of tokens based on their semantic similarity.</li>\n<li>Use the CRF marginal as a regularization term to do label propagation on the graph.</li>\n<li>The smoothed posterior is then used to either interpolate with the CRF marginal or as an additional feature to the neural network.</li>\n</ul>\n</li>\n<li>Graph Construction<ul>\n<li>${w_{uv}} = {d_e}(u,v)$ if $v \\in K(u)$ or $u \\in K(v)$.</li>\n</ul>\n</li>\n<li>Label Propagation<br><img src=\"9.png\" alt></li>\n<li>Uncertain Label Marginalizing<br>\\[\\mathcal{Y}({x_t}) = \\left\\{ {\\begin{array}{*{20}{c}}{\\{ {y_t}\\} }&amp;{ {\\rm{if \\ }}p({y_t}|x;\\theta ) &gt; \\eta }\\\\{ {\\rm{All \\ label \\ types}}}&amp;{ {\\rm{otherwise}}}\\end{array}} \\right.\\]</li>\n<li>Score<br>\\[\\phi (y;x,\\theta ) = \\sum\\limits_{t = 0}^n { {T_{ {y_t},{y_{t + 1}}}}}  + \\sum\\limits_{t = 1}^n { {P_{t,{y_t}}}} \\]</li>\n<li>Probability<br>\\[{p_\\theta }(\\mathcal{Y}({x^k})|{x^k}) = \\frac{ {\\sum\\nolimits_{ {y^k} \\in \\mathcal{Y}({x^k})} {\\exp (\\phi ({y^k};{x^k},\\theta ))} }}{ {\\sum\\nolimits_{y’ \\in Y} {\\exp (\\phi (y’;x,\\theta ))} }}\\]<br><img src=\"10.png\" alt></li>\n</ul>\n<h3 id=\"Results-3\"><a href=\"#Results-3\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"11.png\" alt></p>\n<h3 id=\"Conclusions-1\"><a href=\"#Conclusions-1\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>In-domain data performs better than cross-domain data.</li>\n<li>The combination of in-domain data and ULM algorithms performs well.</li>\n<li>We can add language models into the model in the future to capture the context information.</li>\n</ul>\n<h1 id=\"Transfer-Learning\"><a href=\"#Transfer-Learning\" class=\"headerlink\" title=\"Transfer Learning\"></a>Transfer Learning</h1><hr>\n<h3 id=\"References-1\"><a href=\"#References-1\" class=\"headerlink\" title=\"References\"></a>References</h3><p><strong>Cross-domain Transfer</strong></p>\n<ul>\n<li>Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.</li>\n<li>Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning. Peng et al. ACL16.</li>\n<li>Multi-task Domain Adaptation for Sequence Tagging. Peng et al. Workshop17.</li>\n</ul>\n<p><strong>Cross-lingual Transfer</strong></p>\n<ul>\n<li>Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks. Yang et al. ICLR17.</li>\n<li>Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources. Kim et al. EMNLP17.</li>\n</ul>\n<h3 id=\"Cross-domain-Transfer\"><a href=\"#Cross-domain-Transfer\" class=\"headerlink\" title=\"Cross-domain Transfer\"></a>Cross-domain Transfer</h3><ul>\n<li>Label mapping exist<br><img src=\"13.png\" alt></li>\n<li>Disparate label sets<br><img src=\"12.png\" alt></li>\n</ul>\n<p><img src=\"20.png\" alt><br><img src=\"15.png\" alt></p>\n<h3 id=\"Domain-Projections\"><a href=\"#Domain-Projections\" class=\"headerlink\" title=\"Domain Projections\"></a>Domain Projections</h3><ul>\n<li>Domain Masks<br>\\[\\begin{array}{l}{m_1} = [\\overrightarrow 1 ,\\overrightarrow 1 ,\\overrightarrow 0 ],{m_2} = [\\overrightarrow 1 ,\\overrightarrow 0 ,\\overrightarrow 1 ]\\\\\\hat h = {m_d} \\odot h\\end{array}\\]</li>\n<li>Linear Projection<br>\\[\\hat h = {T_d}h\\]</li>\n</ul>\n<h3 id=\"Results-4\"><a href=\"#Results-4\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"16.png\" alt></p>\n<h3 id=\"Conclusions-2\"><a href=\"#Conclusions-2\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>Multi-task learning can help domain adaptation.</li>\n<li>The number of shared parameters has great impact on the performance.</li>\n<li>We may use other domain adaptation methods besides parameter sharing and representation learning.</li>\n</ul>\n<h3 id=\"Cross-lingual-Transfer\"><a href=\"#Cross-lingual-Transfer\" class=\"headerlink\" title=\"Cross-lingual Transfer\"></a>Cross-lingual Transfer</h3><p><img src=\"17.png\" alt><br><img src=\"18.png\" alt></p>\n<ul>\n<li>Sequence Tagging Loss<br>\\[{\\mathcal{L}_p} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N { {p_{i,j}}\\log ({ {\\hat p}_{i,j}})} }\\]</li>\n<li>Language Classifier Loss<br>\\[{\\mathcal{L}_a} =  - \\sum\\limits_{i = 1}^S { {l_i}\\log ({ {\\hat l}_i})}\\]</li>\n<li>Bidirectional Language Model Loss<br>\\[{\\mathcal{L}_l} =  - \\sum\\limits_{i = 1}^S {\\sum\\limits_{j = 1}^N {\\log (P({w_{j + 1}}|{f_j})) + \\log (P({w_{j - 1}}|{b_j}))} }\\]</li>\n<li>Total Loss<br>\\[\\mathcal{L} = {w_s}({\\mathcal{L}_p} + \\lambda {\\mathcal{L}_a} + \\lambda {\\mathcal{L}_l})\\]</li>\n</ul>\n<h3 id=\"Results-5\"><a href=\"#Results-5\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p><img src=\"19.png\" alt></p>\n<h3 id=\"Conclusions-3\"><a href=\"#Conclusions-3\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h3><ul>\n<li>The language classifier can train the common LSTM to be language-agnostic.</li>\n<li>Either too many or too little labeled data decrease the performance.</li>\n<li>Multiple source languages can be used to increase the performance.</li>\n</ul>\n<h1 id=\"Conclusions-4\"><a href=\"#Conclusions-4\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h1><hr>\n<h3 id=\"Semi-supervised-Learning-vs-Transfer-Learning\"><a href=\"#Semi-supervised-Learning-vs-Transfer-Learning\" class=\"headerlink\" title=\"Semi-supervised Learning vs Transfer Learning\"></a>Semi-supervised Learning vs Transfer Learning</h3><ul>\n<li>It seems that semi-supervised learning is better than transfer learning on some tasks.</li>\n<li>Semi-supervised learning is not always useful for the lack of unlabeled data in the same domain.</li>\n<li>Andrew Ng had said that transfer learning is an important research direction in the next five years.</li>\n</ul>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><ul>\n<li>Semi-supervised learning and transfer learning can be combined to increase performance.</li>\n<li>Other methods like active learning can be added.</li>\n</ul>\n<h1 id=\"References-2\"><a href=\"#References-2\" class=\"headerlink\" title=\"References\"></a>References</h1><hr>\n<p>Xuezhe Ma and Eduard Hovy. (2016).<br><strong>End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF.</strong><br><em>In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1064–1074, Berlin, Germany, August 7-12, 2016.</em></p>\n<p>Marek Rei. (2017).<br><strong>Semi-supervised Multitask Learning for Sequence Labeling.</strong><br><em>In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 2121–2130, Vancouver, Canada, July 30 - August 4, 2017.</em></p>\n<p>Matthew E. Peters, Waleed Ammar, Chandra Bhagavatula, Russell Power. (2017).<br><strong>Semi-supervised Sequence Tagging with Bidirectional Language Models.</strong><br><em>In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1756–1765, Vancouver, Canada, July 30 - August 4, 2017.</em></p>\n<p>Yi Luan, Mari Ostendorf, Hannaneh Hajishirzi. (2017).<br><strong>Scientific Information Extraction with Semi-supervised Neural Tagging.</strong><br><em>In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2631–2641, Copenhagen, Denmark, September 7–11, 2017.</em></p>\n<p>Zhilin Yang, Ruslan Salakhutdinov, William W. Cohen. (2017).<br><strong>Transfer Learning for Sequence Tagging with Hierarchical Recurrent Networks.</strong><br><em>In ICLR 2017.</em></p>\n<p>Joo-Kyung Kim, Young-Bum Kim, Ruhi Sarikaya, Eric Fosler-Lussier. (2017).<br><strong>Cross-Lingual Transfer Learning for POS Tagging without Cross-Lingual Resources.</strong><br><em>In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2822–2828, Copenhagen, Denmark, September 7–11, 2017.</em></p>\n<p>Nanyun Peng, Mark Dredze. (2017).<br><strong>Multi-task Domain Adaptation for Sequence Tagging.</strong><br><em>In Proceedings of the 2nd Workshop on Representation Learning for NLP, pages 91–100, Vancouver, Canada, August 3, 2017.</em></p>\n<p>Amarnag Subramanya, Slav Petrov, Fernando Pereira. (2010).<br><strong>Efficient Graph-Based Semi-Supervised Learning of Structured Tagging Models.</strong><br><em>In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 167–176, MIT, Massachusetts, USA, 9-11 October 2010.</em></p>\n<p>Yuzong Liu, Katrin Kirchhoff. (2014).<br><strong>Graph-based Semi-supervised Acoustic Modeling in DNN-based Speech Recognition.</strong><br><em>In IEEE SLT 2014.</em></p>\n<p>Nanyun Peng, Mark Dredze. (2016).<br><strong>Improving Named Entity Recognition for Chinese Social Media with Word Segmentation Representation Learning.</strong><br><em>In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 149–155, Berlin, Germany, August 7-12, 2016.</em></p>\n"}],"PostAsset":[{"_id":"source/_posts/ACL17-1161/4.jpg","slug":"4.jpg","post":"cjyk9822h00057swe7c90d436","modified":1,"renderable":0},{"_id":"source/_posts/ACL17-ConParsing/3.png","slug":"3.png","post":"cjyk9822x00077swexxx0bn1b","modified":1,"renderable":0},{"_id":"source/_posts/ICLR17-1/1.png","slug":"1.png","post":"cjyk9824j000x7swevcmae2do","modified":1,"renderable":0},{"_id":"source/_posts/ICLR17-1/4.png","slug":"4.png","post":"cjyk9824j000x7swevcmae2do","modified":1,"renderable":0},{"_id":"source/_posts/2018-conclusion/header.jpg","slug":"header.jpg","post":"cjyk9822b00027swe2ii20oa9","modified":1,"renderable":0},{"_id":"source/_posts/ACL17-1161/header.jpg","slug":"header.jpg","post":"cjyk9822h00057swe7c90d436","modified":1,"renderable":0},{"_id":"source/_posts/ACL17-2027/header.jpg","slug":"header.jpg","post":"cjyk98232000b7swehljmyxdr","modified":1,"renderable":0},{"_id":"source/_posts/ACL17-ConParsing/1.png","slug":"1.png","post":"cjyk9822x00077swexxx0bn1b","modified":1,"renderable":0},{"_id":"source/_posts/ACL17-ConParsing/2.png","slug":"2.png","post":"cjyk9822x00077swexxx0bn1b","modified":1,"renderable":0},{"_id":"source/_posts/ConParsing-Syntactic-Distance/5.png","slug":"5.png","post":"cjyk9823j000m7swexrt09wex","modified":1,"renderable":0},{"_id":"source/_posts/ConParsing-Syntactic-Distance/4.png","slug":"4.png","post":"cjyk9823j000m7swexrt09wex","modified":1,"renderable":0},{"_id":"source/_posts/EMNLP17-1/6.png","slug":"6.png","post":"cjyk9823e000i7sweq0nu9a5d","modified":1,"renderable":0},{"_id":"source/_posts/EMNLP17-1/7.png","slug":"7.png","post":"cjyk9823e000i7sweq0nu9a5d","modified":1,"renderable":0},{"_id":"source/_posts/EMNLP17-1/header.jpg","slug":"header.jpg","post":"cjyk9823e000i7sweq0nu9a5d","modified":1,"renderable":0},{"_id":"source/_posts/EMNLP17-2/header.jpg","slug":"header.jpg","post":"cjyk9823w000r7sweiw6bc88i","modified":1,"renderable":0},{"_id":"source/_posts/ICLR17-1/header.jpg","slug":"header.jpg","post":"cjyk9824j000x7swevcmae2do","modified":1,"renderable":0},{"_id":"source/_posts/POS-LM/header.jpg","slug":"header.jpg","post":"cjyk982bx004o7swey2lrt3rs","modified":1,"renderable":0},{"_id":"source/_posts/PaperDaily-1/header.jpg","slug":"header.jpg","post":"cjyk982c7004s7swe6sfa3q08","modified":1,"renderable":0},{"_id":"source/_posts/PaperDaily-3/1.png","slug":"1.png","post":"cjyk982cd004w7swem26rdu0q","modified":1,"renderable":0},{"_id":"source/_posts/TextMinning/header.jpg","slug":"header.jpg","post":"cjyk982dg005e7swejlbbcwbp","modified":1,"renderable":0},{"_id":"source/_posts/baoyan/header.jpg","slug":"header.jpg","post":"cjyk982ec005t7swe6905ormb","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-2/header.jpg","slug":"header.jpg","post":"cjyk982f3006f7swegiidv0hp","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-6/header.jpg","slug":"header.jpg","post":"cjyk982fo006w7swesd1dqlp6","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-9/header.jpg","slug":"header.jpg","post":"cjyk982g000767swekt9goqe1","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-hw1/4.jpg","slug":"4.jpg","post":"cjyk982g6007a7swe0pgwevzc","modified":1,"renderable":0},{"_id":"source/_posts/context/header.jpg","slug":"header.jpg","post":"cjyk982gs007v7swewic60ejc","modified":1,"renderable":0},{"_id":"source/_posts/dl1/header.jpg","slug":"header.jpg","post":"cjyk982gq007r7sweu1o54f9w","modified":1,"renderable":0},{"_id":"source/_posts/dlhw1/header.jpg","slug":"header.jpg","post":"cjyk982h000867swegwnzi4yr","modified":1,"renderable":0},{"_id":"source/_posts/dl2/header.jpg","slug":"header.jpg","post":"cjyk982gx00837swe276ql81u","modified":1,"renderable":0},{"_id":"source/_posts/dlhw2/header.jpg","slug":"header.jpg","post":"cjyk982h2008a7sweyph05x1t","modified":1,"renderable":0},{"_id":"source/_posts/ecnu-ppt/1.png","slug":"1.png","post":"cjyk982h8008h7swezrg84a69","modified":1,"renderable":0},{"_id":"source/_posts/ecnu-ppt/header.jpg","slug":"header.jpg","post":"cjyk982h8008h7swezrg84a69","modified":1,"renderable":0},{"_id":"source/_posts/eoj3328/header.jpg","slug":"header.jpg","post":"cjyk982hf008s7swex0no3xdg","modified":1,"renderable":0},{"_id":"source/_posts/recommend/header.jpg","slug":"header.jpg","post":"cjyk982hv009j7swe4ditj6vv","modified":1,"renderable":0},{"_id":"source/_posts/sublime/header.jpg","slug":"header.jpg","post":"cjyk982hz009t7swen3oelmtg","modified":1,"renderable":0},{"_id":"source/_posts/sw-compiler/header.jpg","slug":"header.jpg","post":"cjyk982i1009x7swek37fw3rv","modified":1,"renderable":0},{"_id":"source/_posts/text-minning-ppt/19.png","slug":"19.png","post":"cjyk982i300a07swe11iy03i7","modified":1,"renderable":0},{"_id":"source/_posts/text-minning-ppt/header.jpg","slug":"header.jpg","post":"cjyk982i300a07swe11iy03i7","modified":1,"renderable":0},{"_id":"source/_posts/ACL17-ConParsing/header.jpg","slug":"header.jpg","post":"cjyk9822x00077swexxx0bn1b","modified":1,"renderable":0},{"_id":"source/_posts/ACL18-BeamSpanParser/header.jpg","slug":"header.jpg","post":"cjyk9822q00067swezejw3z8g","modified":1,"renderable":0},{"_id":"source/_posts/ACL18-BeamSpanParser/1.jpg","post":"cjyk9822q00067swezejw3z8g","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-BeamSpanParser/2.jpg","post":"cjyk9822q00067swezejw3z8g","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-BeamSpanParser/3.jpg","post":"cjyk9822q00067swezejw3z8g","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-2027/1.png","post":"cjyk98232000b7swehljmyxdr","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-2027/2.png","post":"cjyk98232000b7swehljmyxdr","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-2027/3.png","post":"cjyk98232000b7swehljmyxdr","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-conclusion/1.jpg","post":"cjyk9822b00027swe2ii20oa9","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-conclusion/2.jpg","post":"cjyk9822b00027swe2ii20oa9","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-conclusion/3.jpg","post":"cjyk9822b00027swe2ii20oa9","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-conclusion/4.jpg","post":"cjyk9822b00027swe2ii20oa9","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/COLING18-2LocalModels/1.jpg","post":"cjyk98235000c7sweajadp08h","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/COLING18-2LocalModels/2.jpg","post":"cjyk98235000c7sweajadp08h","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/COLING18-2LocalModels/3.jpg","post":"cjyk98235000c7sweajadp08h","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/COLING18-2LocalModels/4.jpg","post":"cjyk98235000c7sweajadp08h","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/COLING18-2LocalModels/header.jpg","slug":"header.jpg","post":"cjyk98235000c7sweajadp08h","modified":1,"renderable":0},{"_id":"source/_posts/2017-conclusion/1.jpg","post":"cjyk9822500017swet2uryjuq","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017-conclusion/2.jpg","post":"cjyk9822500017swet2uryjuq","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017-conclusion/3.jpg","post":"cjyk9822500017swet2uryjuq","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017-conclusion/4.jpg","post":"cjyk9822500017swet2uryjuq","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017-conclusion/749826.jpg","post":"cjyk9822500017swet2uryjuq","slug":"749826.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2017-conclusion/header.jpg","slug":"header.jpg","post":"cjyk9822500017swet2uryjuq","modified":1,"renderable":0},{"_id":"source/_posts/ICLR17-1/2.png","post":"cjyk9824j000x7swevcmae2do","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/ICLR17-1/3.png","post":"cjyk9824j000x7swevcmae2do","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/ICLR17-1/5.png","post":"cjyk9824j000x7swevcmae2do","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-1161/1.jpg","post":"cjyk9822h00057swe7c90d436","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-1161/2.jpg","post":"cjyk9822h00057swe7c90d436","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-1161/3.jpg","post":"cjyk9822h00057swe7c90d436","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-1161/5.jpg","post":"cjyk9822h00057swe7c90d436","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ACL17-1161/6.jpg","post":"cjyk9822h00057swe7c90d436","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/1.jpg","post":"cjyk98242000t7swelvvw2qt3","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/2.jpg","post":"cjyk98242000t7swelvvw2qt3","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/3.jpg","post":"cjyk98242000t7swelvvw2qt3","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/4.jpg","post":"cjyk98242000t7swelvvw2qt3","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/5.jpg","post":"cjyk98242000t7swelvvw2qt3","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/6.jpg","post":"cjyk98242000t7swelvvw2qt3","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP18-dynamic-oracle/header.jpg","slug":"header.jpg","post":"cjyk98242000t7swelvvw2qt3","modified":1,"renderable":0},{"_id":"source/_posts/EMNLP17-1/1.png","post":"cjyk9823e000i7sweq0nu9a5d","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP17-1/2.png","post":"cjyk9823e000i7sweq0nu9a5d","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP17-1/3.png","post":"cjyk9823e000i7sweq0nu9a5d","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP17-1/4.png","post":"cjyk9823e000i7sweq0nu9a5d","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/EMNLP17-1/5.png","post":"cjyk9823e000i7sweq0nu9a5d","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/ConParsing-Syntactic-Distance/1.png","post":"cjyk9823j000m7swexrt09wex","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/ConParsing-Syntactic-Distance/2.png","post":"cjyk9823j000m7swexrt09wex","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/ConParsing-Syntactic-Distance/3.png","post":"cjyk9823j000m7swexrt09wex","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/ConParsing-Syntactic-Distance/6.png","post":"cjyk9823j000m7swexrt09wex","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/ConParsing-Syntactic-Distance/7.png","post":"cjyk9823j000m7swexrt09wex","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/ConParsing-Syntactic-Distance/header.jpg","slug":"header.jpg","post":"cjyk9823j000m7swexrt09wex","modified":1,"renderable":0},{"_id":"source/_posts/ConParSeqLab/1.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/2.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/3.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/4.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/5.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/6.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/7.jpg","post":"cjyk9823q000n7sweoilctfo4","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ConParSeqLab/header.jpg","slug":"header.jpg","post":"cjyk9823q000n7sweoilctfo4","modified":1,"renderable":0},{"_id":"source/_posts/ACL18-AttConParsing/1.png","post":"cjyk9823a000h7swe62coip1m","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/2.png","post":"cjyk9823a000h7swe62coip1m","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/3.png","post":"cjyk9823a000h7swe62coip1m","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/4.png","post":"cjyk9823a000h7swe62coip1m","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/5.png","post":"cjyk9823a000h7swe62coip1m","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/6.png","post":"cjyk9823a000h7swe62coip1m","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/7.png","post":"cjyk9823a000h7swe62coip1m","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/8.png","post":"cjyk9823a000h7swe62coip1m","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/9.png","post":"cjyk9823a000h7swe62coip1m","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/ACL18-AttConParsing/header.jpg","slug":"header.jpg","post":"cjyk9823a000h7swe62coip1m","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-13/header.jpg","slug":"header.jpg","post":"cjyk982ex006b7swe9pyd0z26","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-3/header.jpg","slug":"header.jpg","post":"cjyk982fc006m7swe200anrmv","modified":1,"renderable":0},{"_id":"source/_posts/iclr18-PRPN/1.png","slug":"1.png","post":"cjyk982hl00937swe3t66bt30","modified":1,"renderable":0},{"_id":"source/_posts/python-advice/header.jpg","slug":"header.jpg","post":"cjyk982hy009q7swex208fbay","modified":1,"renderable":0},{"_id":"source/_posts/text-minning-ppt/10.png","slug":"10.png","post":"cjyk982i300a07swe11iy03i7","modified":1,"renderable":0},{"_id":"source/_posts/text-minning-ppt/9.png","slug":"9.png","post":"cjyk982i300a07swe11iy03i7","modified":1,"renderable":0},{"_id":"source/_posts/IVP-EACL17/header.jpg","slug":"header.jpg","post":"cjyk982bg004b7sweho7rw9sq","modified":1,"renderable":0},{"_id":"source/_posts/NAACL18-ConParsing/header.jpg","slug":"header.jpg","post":"cjyk982bi004f7sweu04gv5xr","modified":1,"renderable":0},{"_id":"source/_posts/biyelunwen/header.jpg","slug":"header.jpg","post":"cjyk982dt005l7swe7z9m9uys","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-11/header.jpg","slug":"header.jpg","post":"cjyk982et00647swe9qgzishr","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-12/header.jpg","slug":"header.jpg","post":"cjyk982ev00687swe4hjd9zbr","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-14/header.jpg","slug":"header.jpg","post":"cjyk982ff006p7swejx97r4wu","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-5/header.jpg","slug":"header.jpg","post":"cjyk982fk006t7swe4iijnlti","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-hw3/header.jpg","slug":"header.jpg","post":"cjyk982ga007d7swegfgrgdi7","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-hw5/header.jpg","slug":"header.jpg","post":"cjyk982go007o7sweczp85rz8","modified":1,"renderable":0},{"_id":"source/_posts/eoj2854/header.jpg","slug":"header.jpg","post":"cjyk982hb008k7swebxzrr39k","modified":1,"renderable":0},{"_id":"source/_posts/eoj3006/header.jpg","slug":"header.jpg","post":"cjyk982he008p7swesqz4f6vs","modified":1,"renderable":0},{"_id":"source/_posts/graduate-technique/header.jpg","slug":"header.jpg","post":"cjyk982hh008w7swe0nqrv3bk","modified":1,"renderable":0},{"_id":"source/_posts/k-bandit/header.jpg","slug":"header.jpg","post":"cjyk982hr009b7swekyq2s1xe","modified":1,"renderable":0},{"_id":"source/_posts/nvidia-cuda-dynet/header.jpg","slug":"header.jpg","post":"cjyk982hx009m7swexh1f5zad","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-10/1.png","post":"cjyk982ej005w7sweqabw08u0","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-10/header.jpg","slug":"header.jpg","post":"cjyk982ej005w7sweqabw08u0","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-4/1.jpg","post":"cjyk982f7006h7swemo9qfsgu","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-4/header.jpg","slug":"header.jpg","post":"cjyk982f7006h7swemo9qfsgu","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-7/1.jpg","post":"cjyk982fs006z7sweetb2anzx","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-7/header.jpg","slug":"header.jpg","post":"cjyk982fs006z7sweetb2anzx","modified":1,"renderable":0},{"_id":"source/_posts/recommend/top.jpg","post":"cjyk982hv009j7swe4ditj6vv","slug":"top.jpg","modified":1,"renderable":1},{"_id":"source/_posts/sublime/sublime.png","post":"cjyk982hz009t7swen3oelmtg","slug":"sublime.png","modified":1,"renderable":1},{"_id":"source/_posts/sw-compiler/1.png","post":"cjyk982i1009x7swek37fw3rv","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/NAACL18-ConParsing/1.jpg","post":"cjyk982bi004f7sweu04gv5xr","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL18-ConParsing/2.jpg","post":"cjyk982bi004f7sweu04gv5xr","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-1/1.png","post":"cjyk982c7004s7swe6sfa3q08","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-1/2.png","post":"cjyk982c7004s7swe6sfa3q08","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-2/1.png","post":"cjyk982cw00547swe2cn6linm","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-2/2.png","post":"cjyk982cw00547swe2cn6linm","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-2/header.jpg","post":"cjyk982cw00547swe2cn6linm","slug":"header.jpg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm-code-tricks/3337-1.jpg","post":"cjyk982dn005i7swecky5jyg4","slug":"3337-1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm-code-tricks/3337-2.jpg","post":"cjyk982dn005i7swecky5jyg4","slug":"3337-2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm-code-tricks/header.jpg","slug":"header.jpg","post":"cjyk982dn005i7swecky5jyg4","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-8/1.jpg","post":"cjyk982fx00737swepktpt7s2","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-8/2.jpg","post":"cjyk982fx00737swepktpt7s2","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-8/header.jpg","slug":"header.jpg","post":"cjyk982fx00737swepktpt7s2","modified":1,"renderable":0},{"_id":"source/_posts/inside-outside/1.jpg","post":"cjyk982hn00977swed456dffy","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/inside-outside/2.jpg","post":"cjyk982hn00977swed456dffy","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/inside-outside/header.jpg","slug":"header.jpg","post":"cjyk982hn00977swed456dffy","modified":1,"renderable":0},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/1.jpg","post":"cjyk982e4005q7sweutq60sl8","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/2.jpg","post":"cjyk982e4005q7sweutq60sl8","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/3.jpg","post":"cjyk982e4005q7sweutq60sl8","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/arxiv-18-SR-CP-bottom-up/header.jpg","slug":"header.jpg","post":"cjyk982e4005q7sweutq60sl8","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-1/1.jpg","post":"cjyk982er00607swef0owra02","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-1/2.jpg","post":"cjyk982er00607swef0owra02","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-1/3.jpg","post":"cjyk982er00607swef0owra02","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-1/header.jpg","slug":"header.jpg","post":"cjyk982er00607swef0owra02","modified":1,"renderable":0},{"_id":"source/_posts/concrete-math-hw1/1.jpg","post":"cjyk982g6007a7swe0pgwevzc","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw1/2.jpg","post":"cjyk982g6007a7swe0pgwevzc","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw1/3.jpg","post":"cjyk982g6007a7swe0pgwevzc","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw1/header.jpg","slug":"header.jpg","post":"cjyk982g6007a7swe0pgwevzc","modified":1,"renderable":0},{"_id":"source/_posts/context/1.jpg","post":"cjyk982gs007v7swewic60ejc","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/context/2.jpg","post":"cjyk982gs007v7swewic60ejc","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/context/3.jpg","post":"cjyk982gs007v7swewic60ejc","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/context/hierarchical_model.jpg","post":"cjyk982gs007v7swewic60ejc","slug":"hierarchical_model.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl2/13.jpg","post":"cjyk982gx00837swe276ql81u","slug":"13.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl2/14.jpg","post":"cjyk982gx00837swe276ql81u","slug":"14.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl2/15.jpg","post":"cjyk982gx00837swe276ql81u","slug":"15.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl2/16.jpg","post":"cjyk982gx00837swe276ql81u","slug":"16.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl2/17.jpg","post":"cjyk982gx00837swe276ql81u","slug":"17.jpg","modified":1,"renderable":1},{"_id":"source/_posts/latex-pdf/1.jpg","post":"cjyk982hs009e7swem8ck6vm5","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/latex-pdf/2.jpg","post":"cjyk982hs009e7swem8ck6vm5","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/latex-pdf/3.jpg","post":"cjyk982hs009e7swem8ck6vm5","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/latex-pdf/4.jpg","post":"cjyk982hs009e7swem8ck6vm5","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/latex-pdf/5.jpg","post":"cjyk982hs009e7swem8ck6vm5","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/latex-pdf/header.jpg","slug":"header.jpg","post":"cjyk982hs009e7swem8ck6vm5","modified":1,"renderable":0},{"_id":"source/_posts/NAACL19-ConParsing/1.jpg","post":"cjyk982bn004h7swe3tv7ud79","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-ConParsing/2.jpg","post":"cjyk982bn004h7swe3tv7ud79","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-ConParsing/3.jpg","post":"cjyk982bn004h7swe3tv7ud79","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-ConParsing/4.jpg","post":"cjyk982bn004h7swe3tv7ud79","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-ConParsing/5.jpg","post":"cjyk982bn004h7swe3tv7ud79","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-ConParsing/6.jpg","post":"cjyk982bn004h7swe3tv7ud79","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-ConParsing/header.jpg","slug":"header.jpg","post":"cjyk982bn004h7swe3tv7ud79","modified":1,"renderable":0},{"_id":"source/_posts/RNNG/1.jpg","post":"cjyk982cn004z7sweww5akeku","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RNNG/2.jpg","post":"cjyk982cn004z7sweww5akeku","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RNNG/3.jpg","post":"cjyk982cn004z7sweww5akeku","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RNNG/4.jpg","post":"cjyk982cn004z7sweww5akeku","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RNNG/5.jpg","post":"cjyk982cn004z7sweww5akeku","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RNNG/6.jpg","post":"cjyk982cn004z7sweww5akeku","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/RNNG/header.jpg","slug":"header.jpg","post":"cjyk982cn004z7sweww5akeku","modified":1,"renderable":0},{"_id":"source/_posts/TextMinning/1.png","post":"cjyk982dg005e7swejlbbcwbp","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/TextMinning/2.png","post":"cjyk982dg005e7swejlbbcwbp","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/TextMinning/3.png","post":"cjyk982dg005e7swejlbbcwbp","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/TextMinning/4.png","post":"cjyk982dg005e7swejlbbcwbp","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/TextMinning/5.png","post":"cjyk982dg005e7swejlbbcwbp","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/TextMinning/6.png","post":"cjyk982dg005e7swejlbbcwbp","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/iclr18-PRPN/2.png","slug":"2.png","post":"cjyk982hl00937swe3t66bt30","modified":1,"renderable":0},{"_id":"source/_posts/iclr18-PRPN/3.png","slug":"3.png","post":"cjyk982hl00937swe3t66bt30","modified":1,"renderable":0},{"_id":"source/_posts/iclr18-PRPN/4.jpg","post":"cjyk982hl00937swe3t66bt30","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/iclr18-PRPN/5.jpg","post":"cjyk982hl00937swe3t66bt30","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/iclr18-PRPN/6.jpg","post":"cjyk982hl00937swe3t66bt30","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/iclr18-PRPN/header.jpg","slug":"header.jpg","post":"cjyk982hl00937swe3t66bt30","modified":1,"renderable":0},{"_id":"source/_posts/IVP-EACL17/1.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/IVP-EACL17/2.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/IVP-EACL17/3.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/IVP-EACL17/4.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/IVP-EACL17/5.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/IVP-EACL17/6.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/IVP-EACL17/7.jpg","post":"cjyk982bg004b7sweho7rw9sq","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/1.jpg","slug":"1.jpg","post":"cjyk982br004j7swe81j07ckv","modified":1,"renderable":0},{"_id":"source/_posts/NAACL19-URNNG/2.png","post":"cjyk982br004j7swe81j07ckv","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/3.jpg","post":"cjyk982br004j7swe81j07ckv","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/4.jpg","post":"cjyk982br004j7swe81j07ckv","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/5.jpg","post":"cjyk982br004j7swe81j07ckv","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/6.jpg","post":"cjyk982br004j7swe81j07ckv","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/7.jpg","post":"cjyk982br004j7swe81j07ckv","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NAACL19-URNNG/header.jpg","slug":"header.jpg","post":"cjyk982br004j7swe81j07ckv","modified":1,"renderable":0},{"_id":"source/_posts/PaperDaily-3/2.png","post":"cjyk982cd004w7swem26rdu0q","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-3/3.png","post":"cjyk982cd004w7swem26rdu0q","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-3/4.png","post":"cjyk982cd004w7swem26rdu0q","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-3/5.png","post":"cjyk982cd004w7swem26rdu0q","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-3/6.png","post":"cjyk982cd004w7swem26rdu0q","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-3/header.jpg","slug":"header.jpg","post":"cjyk982cd004w7swem26rdu0q","modified":1,"renderable":0},{"_id":"source/_posts/PaperDaily-3/ukulele.jpg","post":"cjyk982cd004w7swem26rdu0q","slug":"ukulele.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/1.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/2.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/3.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/4.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/5.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/6.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/7.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/8.jpg","post":"cjyk982ge007h7swezdj48v45","slug":"8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/concrete-math-hw2/header.jpg","slug":"header.jpg","post":"cjyk982ge007h7swezdj48v45","modified":1,"renderable":0},{"_id":"source/_posts/dl1/10.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/11.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/12.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/5.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/6.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/7.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/8.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dl1/9.jpg","post":"cjyk982gq007r7sweu1o54f9w","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/1.png","post":"cjyk982h6008d7sweikaanzpf","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/2.png","post":"cjyk982h6008d7sweikaanzpf","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/3.png","post":"cjyk982h6008d7sweikaanzpf","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/4.png","post":"cjyk982h6008d7sweikaanzpf","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/5.png","post":"cjyk982h6008d7sweikaanzpf","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/6.png","post":"cjyk982h6008d7sweikaanzpf","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/7.png","post":"cjyk982h6008d7sweikaanzpf","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/8.png","post":"cjyk982h6008d7sweikaanzpf","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-oracles/header.jpg","slug":"header.jpg","post":"cjyk982h6008d7sweikaanzpf","modified":1,"renderable":0},{"_id":"source/_posts/MetaMTL/1.jpg","post":"cjyk982be00497swe9bgackvm","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/2.jpg","post":"cjyk982be00497swe9bgackvm","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/3.jpg","post":"cjyk982be00497swe9bgackvm","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/4.jpg","post":"cjyk982be00497swe9bgackvm","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/5.jpg","post":"cjyk982be00497swe9bgackvm","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/6.jpg","post":"cjyk982be00497swe9bgackvm","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/7.jpg","post":"cjyk982be00497swe9bgackvm","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/8.jpg","post":"cjyk982be00497swe9bgackvm","slug":"8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/9.jpg","post":"cjyk982be00497swe9bgackvm","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MetaMTL/header.jpg","slug":"header.jpg","post":"cjyk982be00497swe9bgackvm","modified":1,"renderable":0},{"_id":"source/_posts/TACL17-ConParsing/1.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/10.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/11.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/12.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/2.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/3.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/4.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/5.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/6.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/7.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/8.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/9.jpg","post":"cjyk982d9005b7swegblkx9ix","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/TACL17-ConParsing/header.jpg","slug":"header.jpg","post":"cjyk982d9005b7swegblkx9ix","modified":1,"renderable":0},{"_id":"source/_posts/PaperDaily-4/1.png","post":"cjyk982d200577swemegrzdef","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/10.png","post":"cjyk982d200577swemegrzdef","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/11.png","post":"cjyk982d200577swemegrzdef","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/12.png","post":"cjyk982d200577swemegrzdef","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/13.png","post":"cjyk982d200577swemegrzdef","slug":"13.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/14.png","post":"cjyk982d200577swemegrzdef","slug":"14.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/15.png","post":"cjyk982d200577swemegrzdef","slug":"15.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/2.png","post":"cjyk982d200577swemegrzdef","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/3.png","post":"cjyk982d200577swemegrzdef","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/4.png","post":"cjyk982d200577swemegrzdef","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/5.png","post":"cjyk982d200577swemegrzdef","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/6.png","post":"cjyk982d200577swemegrzdef","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/7.png","post":"cjyk982d200577swemegrzdef","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/8.png","post":"cjyk982d200577swemegrzdef","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/9.png","post":"cjyk982d200577swemegrzdef","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/PaperDaily-4/header.jpg","slug":"header.jpg","post":"cjyk982d200577swemegrzdef","modified":1,"renderable":0},{"_id":"source/_posts/text-minning-ppt/1.png","post":"cjyk982i300a07swe11iy03i7","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/11.png","post":"cjyk982i300a07swe11iy03i7","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/12.png","post":"cjyk982i300a07swe11iy03i7","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/13.png","post":"cjyk982i300a07swe11iy03i7","slug":"13.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/14.png","post":"cjyk982i300a07swe11iy03i7","slug":"14.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/15.png","post":"cjyk982i300a07swe11iy03i7","slug":"15.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/16.png","post":"cjyk982i300a07swe11iy03i7","slug":"16.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/17.png","post":"cjyk982i300a07swe11iy03i7","slug":"17.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/18.png","post":"cjyk982i300a07swe11iy03i7","slug":"18.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/2.png","post":"cjyk982i300a07swe11iy03i7","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/20.png","post":"cjyk982i300a07swe11iy03i7","slug":"20.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/3.png","post":"cjyk982i300a07swe11iy03i7","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/4.png","post":"cjyk982i300a07swe11iy03i7","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/5.png","post":"cjyk982i300a07swe11iy03i7","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/6.png","post":"cjyk982i300a07swe11iy03i7","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/7.png","post":"cjyk982i300a07swe11iy03i7","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/text-minning-ppt/8.png","post":"cjyk982i300a07swe11iy03i7","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/bi_lstm.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"bi_lstm.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/binarized_syntactic_tree.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"binarized_syntactic_tree.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/bottom_up.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"bottom_up.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/bottom_up_example.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"bottom_up_example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/chart_based.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"chart_based.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/composition.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"composition.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/header.jpg","slug":"header.jpg","post":"cjyk982gk007k7swe5o6uu6r4","modified":1,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/in_order.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"in_order.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/in_order_example.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"in_order_example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/label_oracle.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"label_oracle.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/multi_headed_attention.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"multi_headed_attention.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/results.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"results.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/single_attention.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"single_attention.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"span_based_bottom_up.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_example.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"span_based_bottom_up_example.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_tree.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"span_based_bottom_up_tree.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/structural_oracle.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"structural_oracle.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/syntactic_distance_example.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"syntactic_distance_example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/syntactic_tree.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"syntactic_tree.png","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/top_down.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"top_down.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/top_down_example.jpg","post":"cjyk982gk007k7swe5o6uu6r4","slug":"top_down_example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/constituent-parsing-summary/transition_framework.png","post":"cjyk982gk007k7swe5o6uu6r4","slug":"transition_framework.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/1.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/10.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"10.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/11.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"11.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/12.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"12.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/13.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"13.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/14.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"14.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/15.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"15.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/16.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"16.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/17.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"17.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/18.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"18.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/19.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"19.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/2.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/20.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"20.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/21.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"21.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/3.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/4.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/5.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/6.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/7.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/8.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/9.jpg","post":"cjyk982hj008z7swe0k8w8m98","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/header.jpg","slug":"header.jpg","post":"cjyk982hj008z7swe0k8w8m98","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjyk9822500017swet2uryjuq","category_id":"cjyk9822e00037swe2hssdb8z","_id":"cjyk98237000e7swe8yfftqxw"},{"post_id":"cjyk9822b00027swe2ii20oa9","category_id":"cjyk9822e00037swe2hssdb8z","_id":"cjyk9823f000j7swellofedyt"},{"post_id":"cjyk9822h00057swe7c90d436","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk9823s000o7swemu6q9u1p"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk9823x000s7swe8t2453bm"},{"post_id":"cjyk9823j000m7swexrt09wex","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk98243000u7sweoqd4e9xc"},{"post_id":"cjyk9822q00067swezejw3z8g","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk9824m000y7swerqpfrx68"},{"post_id":"cjyk9823q000n7sweoilctfo4","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk9824q000z7swe8xpozxa8"},{"post_id":"cjyk9823w000r7sweiw6bc88i","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk9824v00127swevl3pxna2"},{"post_id":"cjyk9822x00077swexxx0bn1b","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk9825200137swetlk52032"},{"post_id":"cjyk98242000t7swelvvw2qt3","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk9825700157swe4xfx1vko"},{"post_id":"cjyk9824j000x7swevcmae2do","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk9825c00187sweofwpxcku"},{"post_id":"cjyk98232000b7swehljmyxdr","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk9825g001a7swet12hm2fc"},{"post_id":"cjyk98235000c7sweajadp08h","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk9825l001d7swe2gku678k"},{"post_id":"cjyk9823a000h7swe62coip1m","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk9825o001f7sweu6g3t8jj"},{"post_id":"cjyk982bg004b7sweho7rw9sq","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982bs004k7swe1twtguj2"},{"post_id":"cjyk982bi004f7sweu04gv5xr","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982by004p7swen5c7zdgj"},{"post_id":"cjyk982bn004h7swe3tv7ud79","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982c8004t7swevuibel6b"},{"post_id":"cjyk982be00497swe9bgackvm","category_id":"cjyk982bi004d7swelpwfwgu4","_id":"cjyk982cg004x7swehe3256i6"},{"post_id":"cjyk982br004j7swe81j07ckv","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982cp00507swea0dj3p7t"},{"post_id":"cjyk982bx004o7swey2lrt3rs","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk982cx00557sweaoji3yjd"},{"post_id":"cjyk982c7004s7swe6sfa3q08","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk982d200587swez37enetc"},{"post_id":"cjyk982cn004z7sweww5akeku","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982da005c7swez8qt4dgv"},{"post_id":"cjyk982cw00547swe2cn6linm","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982dg005f7sweazz9vt7m"},{"post_id":"cjyk982d200577swemegrzdef","category_id":"cjyk982cu00527sweafdrrt31","_id":"cjyk982do005j7swekdcxej9h"},{"post_id":"cjyk982cd004w7swem26rdu0q","category_id":"cjyk982cu00527sweafdrrt31","_id":"cjyk982du005m7swe3k6prm5c"},{"post_id":"cjyk982d9005b7swegblkx9ix","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982e5005r7swetvf5bkap"},{"post_id":"cjyk982dg005e7swejlbbcwbp","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk982ed005u7swege2wlh55"},{"post_id":"cjyk982dt005l7swe7z9m9uys","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982el005x7swec6ea2qbi"},{"post_id":"cjyk982e4005q7sweutq60sl8","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982es00617swergwphb75"},{"post_id":"cjyk982ec005t7swe6905ormb","category_id":"cjyk9822e00037swe2hssdb8z","_id":"cjyk982et00657swe5cm3f8u7"},{"post_id":"cjyk982dn005i7swecky5jyg4","category_id":"cjyk982e3005n7swecx4rk5ws","_id":"cjyk982ew00697sweknu3zej9"},{"post_id":"cjyk982ev00687swe4hjd9zbr","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982f9006i7swevrn41a36"},{"post_id":"cjyk982ej005w7sweqabw08u0","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982fd006n7swephrgoxdf"},{"post_id":"cjyk982ex006b7swe9pyd0z26","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982fi006q7swe92klyc1x"},{"post_id":"cjyk982f3006f7swegiidv0hp","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982fm006u7swee9tein8w"},{"post_id":"cjyk982er00607swef0owra02","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982fq006x7swe8jbczyvc"},{"post_id":"cjyk982f7006h7swemo9qfsgu","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982fu00707swev1689aoe"},{"post_id":"cjyk982fc006m7swe200anrmv","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982fz00747sweack8jk6f"},{"post_id":"cjyk982et00647swe9qgzishr","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982g300777swe3952a37w"},{"post_id":"cjyk982ff006p7swejx97r4wu","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982g9007b7swetnrmvvde"},{"post_id":"cjyk982fk006t7swe4iijnlti","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gc007e7sweab5rt53q"},{"post_id":"cjyk982fo006w7swesd1dqlp6","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gj007i7swealkeh7gc"},{"post_id":"cjyk982fs006z7sweetb2anzx","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gm007l7swe5303oq8m"},{"post_id":"cjyk982fx00737swepktpt7s2","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gp007p7swekd8s4otu"},{"post_id":"cjyk982g000767swekt9goqe1","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gr007s7sweuzemfybp"},{"post_id":"cjyk982g6007a7swe0pgwevzc","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gt007w7swe90it88se"},{"post_id":"cjyk982ga007d7swegfgrgdi7","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gw007z7swesgtyik12"},{"post_id":"cjyk982ge007h7swezdj48v45","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982gy00847swe9clynuh0"},{"post_id":"cjyk982gk007k7swe5o6uu6r4","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982h100877swe1oo5dh1f"},{"post_id":"cjyk982go007o7sweczp85rz8","category_id":"cjyk982es00627swe653j5ekw","_id":"cjyk982h4008b7swecostnji1"},{"post_id":"cjyk982gq007r7sweu1o54f9w","category_id":"cjyk982cu00527sweafdrrt31","_id":"cjyk982h7008e7swecyw8pwa9"},{"post_id":"cjyk982gu007y7sweyegs8wyy","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982ha008i7swepx6n5kvp"},{"post_id":"cjyk982gx00837swe276ql81u","category_id":"cjyk982cu00527sweafdrrt31","_id":"cjyk982hc008l7swelnkm014s"},{"post_id":"cjyk982h000867swegwnzi4yr","category_id":"cjyk982cu00527sweafdrrt31","_id":"cjyk982he008q7swe2tdlmgr1"},{"post_id":"cjyk982gs007v7swewic60ejc","category_id":"cjyk982gx00817swe7g9jybut","_id":"cjyk982hg008t7swe9d3sym0o"},{"post_id":"cjyk982h2008a7sweyph05x1t","category_id":"cjyk982cu00527sweafdrrt31","_id":"cjyk982hh008x7swezwb30287"},{"post_id":"cjyk982h6008d7sweikaanzpf","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982hk00907swe26rvvvft"},{"post_id":"cjyk982hb008k7swebxzrr39k","category_id":"cjyk982e3005n7swecx4rk5ws","_id":"cjyk982hm00947swevw2ykbkg"},{"post_id":"cjyk982he008p7swesqz4f6vs","category_id":"cjyk982e3005n7swecx4rk5ws","_id":"cjyk982ho00987swemcis3pmk"},{"post_id":"cjyk982hf008s7swex0no3xdg","category_id":"cjyk982e3005n7swecx4rk5ws","_id":"cjyk982hs009c7sweugk26m9r"},{"post_id":"cjyk982h8008h7swezrg84a69","category_id":"cjyk982hd008n7sweqx2bwmzz","_id":"cjyk982ht009f7sweuxzzek1v"},{"post_id":"cjyk982hh008w7swe0nqrv3bk","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982hw009k7swe8po17etq"},{"post_id":"cjyk982hl00937swe3t66bt30","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982hx009n7sweg4xcigop"},{"post_id":"cjyk982hn00977swed456dffy","category_id":"cjyk9823g000k7sweghwh64ld","_id":"cjyk982hy009r7swe6yuq0i8p"},{"post_id":"cjyk982hj008z7swe0k8w8m98","category_id":"cjyk982hm00957sweodjcw0i7","_id":"cjyk982i1009u7swefjjsmdnz"},{"post_id":"cjyk982hs009e7swem8ck6vm5","category_id":"cjyk982hm00957sweodjcw0i7","_id":"cjyk982i2009y7swe3ir6487p"},{"post_id":"cjyk982hv009j7swe4ditj6vv","category_id":"cjyk9822e00037swe2hssdb8z","_id":"cjyk982i400a17sweafvk0bxk"},{"post_id":"cjyk982hx009m7swexh1f5zad","category_id":"cjyk982hm00957sweodjcw0i7","_id":"cjyk982i400a37swe2aukl7el"},{"post_id":"cjyk982hr009b7swekyq2s1xe","category_id":"cjyk982hv009h7swe41t56m0r","_id":"cjyk982i500a67swe365ijoxd"},{"post_id":"cjyk982hy009q7swex208fbay","category_id":"cjyk9822e00037swe2hssdb8z","_id":"cjyk982i600a87swepy48x11k"},{"post_id":"cjyk982hz009t7swen3oelmtg","category_id":"cjyk982hm00957sweodjcw0i7","_id":"cjyk982i600ab7swew5qad04i"},{"post_id":"cjyk982i1009x7swek37fw3rv","category_id":"cjyk982e3005n7swecx4rk5ws","_id":"cjyk982i700ad7swe360a5rwi"},{"post_id":"cjyk982i300a07swe11iy03i7","category_id":"cjyk98237000d7swecka03c14","_id":"cjyk982i700ag7swes4nmar4k"}],"PostTag":[{"post_id":"cjyk9822500017swet2uryjuq","tag_id":"cjyk9822g00047swel7sqcfdj","_id":"cjyk98231000a7swec8obca9x"},{"post_id":"cjyk9822b00027swe2ii20oa9","tag_id":"cjyk9822g00047swel7sqcfdj","_id":"cjyk9823a000g7swelr3jflv4"},{"post_id":"cjyk9822h00057swe7c90d436","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk9825b00177swesormrdl6"},{"post_id":"cjyk9822h00057swe7c90d436","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk9825g00197swei6afc5q8"},{"post_id":"cjyk9822h00057swe7c90d436","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk9825k001c7swegdy4c5zn"},{"post_id":"cjyk9822h00057swe7c90d436","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk9825o001e7sweo1gg9dtj"},{"post_id":"cjyk9822h00057swe7c90d436","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk9825s001h7swebj6tbng5"},{"post_id":"cjyk9822q00067swezejw3z8g","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk9826f001l7swe17vuv3rh"},{"post_id":"cjyk9822q00067swezejw3z8g","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk9826j001m7sweww8o0tka"},{"post_id":"cjyk9822q00067swezejw3z8g","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk9826n001o7swe8pqhu6vm"},{"post_id":"cjyk9822q00067swezejw3z8g","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk9826w001p7swehpsu7mhu"},{"post_id":"cjyk9822q00067swezejw3z8g","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk98270001r7swes29wd6xe"},{"post_id":"cjyk9822x00077swexxx0bn1b","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk9827m001v7swexyon1lxg"},{"post_id":"cjyk9822x00077swexxx0bn1b","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk9827u001w7swe8sv93pkl"},{"post_id":"cjyk9822x00077swexxx0bn1b","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk9827x001y7swei3t1id2g"},{"post_id":"cjyk9822x00077swexxx0bn1b","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk98280001z7swevzuwejtg"},{"post_id":"cjyk9822x00077swexxx0bn1b","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk9828300217swefmp24si5"},{"post_id":"cjyk98232000b7swehljmyxdr","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk9828k00257swekylhm7jt"},{"post_id":"cjyk98232000b7swehljmyxdr","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk9828n00267swez3bd3yit"},{"post_id":"cjyk98232000b7swehljmyxdr","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk9828q00287swe53ox4xvb"},{"post_id":"cjyk98232000b7swehljmyxdr","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk9828t00297swegdtw745z"},{"post_id":"cjyk98232000b7swehljmyxdr","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk9828w002b7swezqsfe7m0"},{"post_id":"cjyk98235000c7sweajadp08h","tag_id":"cjyk9828k00247swekh0uyo2e","_id":"cjyk9829j002f7swe3jratk0d"},{"post_id":"cjyk98235000c7sweajadp08h","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk9829m002g7swelcj3jahr"},{"post_id":"cjyk98235000c7sweajadp08h","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk9829p002i7sweemjg7ykr"},{"post_id":"cjyk98235000c7sweajadp08h","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk9829t002j7sweoxrwcxzm"},{"post_id":"cjyk98235000c7sweajadp08h","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk9829w002l7swe3mfywjkk"},{"post_id":"cjyk9823a000h7swe62coip1m","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk982a4002o7swebfwenjab"},{"post_id":"cjyk9823a000h7swe62coip1m","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982a4002p7swe1a1ivcu5"},{"post_id":"cjyk9823a000h7swe62coip1m","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982a4002r7swefw911mql"},{"post_id":"cjyk9823a000h7swe62coip1m","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982a4002s7swed5k52w09"},{"post_id":"cjyk9823a000h7swe62coip1m","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982a5002u7swewjfin93g"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","tag_id":"cjyk982a3002n7swe5ehd2l3s","_id":"cjyk982a6002z7swem9yel5gf"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982a700307sweax6bzrbx"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982a700327swe213ob6cu"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982a800337swemisov33t"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","tag_id":"cjyk982a5002w7swe70by0wrn","_id":"cjyk982a800357swexfmql37g"},{"post_id":"cjyk9823e000i7sweq0nu9a5d","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk982a800367sweczqdenqr"},{"post_id":"cjyk9823j000m7swexrt09wex","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk982a900387sweek7qf0qo"},{"post_id":"cjyk9823j000m7swexrt09wex","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982a900397swe6qk1iuct"},{"post_id":"cjyk9823j000m7swexrt09wex","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982a9003b7swe35rh02ip"},{"post_id":"cjyk9823j000m7swexrt09wex","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982a9003c7swe59sdce1f"},{"post_id":"cjyk9823j000m7swexrt09wex","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982aa003e7swecc3fjn09"},{"post_id":"cjyk9823q000n7sweoilctfo4","tag_id":"cjyk982a3002n7swe5ehd2l3s","_id":"cjyk982aa003h7swewalp2wgh"},{"post_id":"cjyk9823q000n7sweoilctfo4","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982ab003i7sweibwpgml5"},{"post_id":"cjyk9823q000n7sweoilctfo4","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982ab003k7swe0760ueiy"},{"post_id":"cjyk9823q000n7sweoilctfo4","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982ab003l7swelkd2i0b3"},{"post_id":"cjyk9823q000n7sweoilctfo4","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982ac003n7swet2d7dvdq"},{"post_id":"cjyk9823w000r7sweiw6bc88i","tag_id":"cjyk982a3002n7swe5ehd2l3s","_id":"cjyk982ad003p7swexxmx5z1w"},{"post_id":"cjyk9823w000r7sweiw6bc88i","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982ad003q7sweb3s2o9fl"},{"post_id":"cjyk9823w000r7sweiw6bc88i","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982ae003s7swe7vsjd34b"},{"post_id":"cjyk9823w000r7sweiw6bc88i","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982ae003t7swe8m0ozork"},{"post_id":"cjyk9823w000r7sweiw6bc88i","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk982af003v7swealv9vwm6"},{"post_id":"cjyk98242000t7swelvvw2qt3","tag_id":"cjyk982a3002n7swe5ehd2l3s","_id":"cjyk982af003x7sweyw5a9yru"},{"post_id":"cjyk98242000t7swelvvw2qt3","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982af003y7swex9ddhfx9"},{"post_id":"cjyk98242000t7swelvvw2qt3","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982ag00407swenwsxyexb"},{"post_id":"cjyk98242000t7swelvvw2qt3","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982ag00417swe8a2e0291"},{"post_id":"cjyk98242000t7swelvvw2qt3","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982ag00437swe7mdqau2x"},{"post_id":"cjyk9824j000x7swevcmae2do","tag_id":"cjyk982af003w7swetghgq8w6","_id":"cjyk982ag00447swe1nyv6njc"},{"post_id":"cjyk9824j000x7swevcmae2do","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982ag00457swe6ios57rg"},{"post_id":"cjyk9824j000x7swevcmae2do","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982ah00467swej6gbpyx0"},{"post_id":"cjyk9824j000x7swevcmae2do","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982ah00477swe8kv3hy7f"},{"post_id":"cjyk9824j000x7swevcmae2do","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk982ah00487swe9421gjch"},{"post_id":"cjyk982be00497swe9bgackvm","tag_id":"cjyk982bi004e7swe8nisvl6v","_id":"cjyk982bx004n7swe7s9gtfiu"},{"post_id":"cjyk982be00497swe9bgackvm","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982c7004r7swekm8m6qt5"},{"post_id":"cjyk982be00497swe9bgackvm","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982cc004v7swe8s7gcb25"},{"post_id":"cjyk982be00497swe9bgackvm","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982cn004y7swebfk18m4c"},{"post_id":"cjyk982be00497swe9bgackvm","tag_id":"cjyk982a5002w7swe70by0wrn","_id":"cjyk982cv00537swewv2nprbl"},{"post_id":"cjyk982bg004b7sweho7rw9sq","tag_id":"cjyk982bt004l7sweg2e1xxig","_id":"cjyk982d100567swef1nptfgf"},{"post_id":"cjyk982bg004b7sweho7rw9sq","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982d9005a7swexzivdiwj"},{"post_id":"cjyk982bg004b7sweho7rw9sq","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982df005d7swegfyckdur"},{"post_id":"cjyk982bg004b7sweho7rw9sq","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982dn005h7sweq37jqmbh"},{"post_id":"cjyk982bg004b7sweho7rw9sq","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982dt005k7sweqx026w1z"},{"post_id":"cjyk982c7004s7swe6sfa3q08","tag_id":"cjyk982bi004e7swe8nisvl6v","_id":"cjyk982e4005p7swenev3uypj"},{"post_id":"cjyk982c7004s7swe6sfa3q08","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982eb005s7sweodtbj4q1"},{"post_id":"cjyk982c7004s7swe6sfa3q08","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982ej005v7swey2g4d8pl"},{"post_id":"cjyk982c7004s7swe6sfa3q08","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982er005z7swe1cw9n0vy"},{"post_id":"cjyk982c7004s7swe6sfa3q08","tag_id":"cjyk982a5002w7swe70by0wrn","_id":"cjyk982es00637swe7z30x58d"},{"post_id":"cjyk982c7004s7swe6sfa3q08","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk982ev00677swegdzpn27d"},{"post_id":"cjyk982bi004f7sweu04gv5xr","tag_id":"cjyk982c8004u7swek6v1k233","_id":"cjyk982ex006a7sweteej0bqz"},{"post_id":"cjyk982bi004f7sweu04gv5xr","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982f2006e7swetzcjidk5"},{"post_id":"cjyk982bi004f7sweu04gv5xr","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982f6006g7swevvs38bhs"},{"post_id":"cjyk982bi004f7sweu04gv5xr","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982fb006l7swe14vft4s2"},{"post_id":"cjyk982bi004f7sweu04gv5xr","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982fe006o7swee1ihewol"},{"post_id":"cjyk982cn004z7sweww5akeku","tag_id":"cjyk982c8004u7swek6v1k233","_id":"cjyk982fj006s7swen6d1va5h"},{"post_id":"cjyk982cn004z7sweww5akeku","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982fo006v7swebiz7vsoa"},{"post_id":"cjyk982cn004z7sweww5akeku","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982fr006y7swebljc72fl"},{"post_id":"cjyk982cn004z7sweww5akeku","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982fw00727swejriopzfa"},{"post_id":"cjyk982cn004z7sweww5akeku","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982g000757swezt3drrbe"},{"post_id":"cjyk982cw00547swe2cn6linm","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk982g600797swefuvthln9"},{"post_id":"cjyk982cw00547swe2cn6linm","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982g9007c7swexghckkjc"},{"post_id":"cjyk982cw00547swe2cn6linm","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982ge007g7swe6pfgwxj6"},{"post_id":"cjyk982cw00547swe2cn6linm","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982gk007j7swem7qeyvsq"},{"post_id":"cjyk982cw00547swe2cn6linm","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982gn007n7swemec7gx8i"},{"post_id":"cjyk982bn004h7swe3tv7ud79","tag_id":"cjyk982c8004u7swek6v1k233","_id":"cjyk982gp007q7swe7l765mkq"},{"post_id":"cjyk982bn004h7swe3tv7ud79","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982gs007u7swe6hi7ju7n"},{"post_id":"cjyk982bn004h7swe3tv7ud79","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982gu007x7swe18dewytx"},{"post_id":"cjyk982bn004h7swe3tv7ud79","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982gx00827swei0djvsri"},{"post_id":"cjyk982bn004h7swe3tv7ud79","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982gz00857swec84bz0o0"},{"post_id":"cjyk982d200577swemegrzdef","tag_id":"cjyk982c8004u7swek6v1k233","_id":"cjyk982h200897sweodosqj4l"},{"post_id":"cjyk982d200577swemegrzdef","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982h5008c7swernvnh1gc"},{"post_id":"cjyk982d200577swemegrzdef","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982h8008g7swewd9ky3vr"},{"post_id":"cjyk982d200577swemegrzdef","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982ha008j7sweri3njcjg"},{"post_id":"cjyk982br004j7swe81j07ckv","tag_id":"cjyk982c8004u7swek6v1k233","_id":"cjyk982hd008o7swe7v6cse06"},{"post_id":"cjyk982br004j7swe81j07ckv","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982hf008r7sweg2ru357c"},{"post_id":"cjyk982br004j7swe81j07ckv","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982hh008v7swergy0vjia"},{"post_id":"cjyk982br004j7swe81j07ckv","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982hh008y7sweem69vraz"},{"post_id":"cjyk982br004j7swe81j07ckv","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982hl00927swe3kv65757"},{"post_id":"cjyk982bx004o7swey2lrt3rs","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk982hm00967swe0nuqtuhq"},{"post_id":"cjyk982bx004o7swey2lrt3rs","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982hr009a7swebxbov318"},{"post_id":"cjyk982bx004o7swey2lrt3rs","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982hs009d7swe6a9vakc7"},{"post_id":"cjyk982bx004o7swey2lrt3rs","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982hv009i7swezvmuocz1"},{"post_id":"cjyk982bx004o7swey2lrt3rs","tag_id":"cjyk982dh005g7swejep57utp","_id":"cjyk982hw009l7swez3qw97ir"},{"post_id":"cjyk982dt005l7swe7z9m9uys","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982hy009p7swevekfnu1i"},{"post_id":"cjyk982dt005l7swe7z9m9uys","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982hz009s7swelbylf0f1"},{"post_id":"cjyk982dt005l7swe7z9m9uys","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982i1009w7sweixrhuw76"},{"post_id":"cjyk982dt005l7swe7z9m9uys","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982i2009z7sweqggcmtbg"},{"post_id":"cjyk982e4005q7sweutq60sl8","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982i400a27swe2nl50qyr"},{"post_id":"cjyk982e4005q7sweutq60sl8","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982i500a57swere8johc2"},{"post_id":"cjyk982e4005q7sweutq60sl8","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982i600a77sweeje3k2d6"},{"post_id":"cjyk982e4005q7sweutq60sl8","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982i600aa7swe9q9j1jbc"},{"post_id":"cjyk982cd004w7swem26rdu0q","tag_id":"cjyk982e4005o7swelrat9ewz","_id":"cjyk982i600ac7sweichuunbz"},{"post_id":"cjyk982cd004w7swem26rdu0q","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982i700af7swec8facu96"},{"post_id":"cjyk982cd004w7swem26rdu0q","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982i800ah7sweiy118gyg"},{"post_id":"cjyk982cd004w7swem26rdu0q","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982i800aj7swet4ilnspo"},{"post_id":"cjyk982d9005b7swegblkx9ix","tag_id":"cjyk982e4005o7swelrat9ewz","_id":"cjyk982i900ak7swegzpk852p"},{"post_id":"cjyk982d9005b7swegblkx9ix","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982ia00am7sweaurv5rr3"},{"post_id":"cjyk982d9005b7swegblkx9ix","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982in00an7swejhshned5"},{"post_id":"cjyk982d9005b7swegblkx9ix","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982j000ap7swe8p23o4vl"},{"post_id":"cjyk982d9005b7swegblkx9ix","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982jd00aq7swe3m5jsdbi"},{"post_id":"cjyk982dg005e7swejlbbcwbp","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982jt00ar7swe3kmow37i"},{"post_id":"cjyk982dg005e7swejlbbcwbp","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982k700at7swemsm1xi73"},{"post_id":"cjyk982dg005e7swejlbbcwbp","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982k800au7swer8mpk94t"},{"post_id":"cjyk982dg005e7swejlbbcwbp","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk982kk00aw7swepi11wvp8"},{"post_id":"cjyk982dg005e7swejlbbcwbp","tag_id":"cjyk982eu00667swevdq55zmd","_id":"cjyk982kx00ax7swe4beqnb5y"},{"post_id":"cjyk982dg005e7swejlbbcwbp","tag_id":"cjyk982a5002w7swe70by0wrn","_id":"cjyk982ld00az7swem8w2v5g1"},{"post_id":"cjyk982dn005i7swecky5jyg4","tag_id":"cjyk982f0006d7swe2w58hva0","_id":"cjyk982ls00b07sweoh4ez7i0"},{"post_id":"cjyk982dn005i7swecky5jyg4","tag_id":"cjyk982fa006k7swe2ah4was7","_id":"cjyk982m600b27swewnk9piu7"},{"post_id":"cjyk982ec005t7swe6905ormb","tag_id":"cjyk982fj006r7swe0u9av439","_id":"cjyk982mk00b37swe0j2cwccp"},{"post_id":"cjyk982fx00737swepktpt7s2","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n000b57swepb86utp0"},{"post_id":"cjyk982ej005w7sweqabw08u0","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n100b67sweamwrm3lt"},{"post_id":"cjyk982g000767swekt9goqe1","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n200b77swelbkx63tj"},{"post_id":"cjyk982g6007a7swe0pgwevzc","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n200b97swefal3c6ht"},{"post_id":"cjyk982er00607swef0owra02","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n200ba7swe1ydq308a"},{"post_id":"cjyk982ga007d7swegfgrgdi7","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n300bc7swecwysfj7q"},{"post_id":"cjyk982ge007h7swezdj48v45","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n300bd7sweh5ao4w1m"},{"post_id":"cjyk982et00647swe9qgzishr","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n400bf7swe7zdg4poz"},{"post_id":"cjyk982go007o7sweczp85rz8","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n400bg7swewjbzc04a"},{"post_id":"cjyk982ev00687swe4hjd9zbr","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n400bi7swe4jzb81fi"},{"post_id":"cjyk982gq007r7sweu1o54f9w","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n400bj7swevrrgxxvh"},{"post_id":"cjyk982gq007r7sweu1o54f9w","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n400bk7sweidkptm47"},{"post_id":"cjyk982ex006b7swe9pyd0z26","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n500bm7sweqnnd669h"},{"post_id":"cjyk982gu007y7sweyegs8wyy","tag_id":"cjyk982c8004u7swek6v1k233","_id":"cjyk982n500bn7swegbl5njds"},{"post_id":"cjyk982gu007y7sweyegs8wyy","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982n500bp7swe35fvdtlo"},{"post_id":"cjyk982gu007y7sweyegs8wyy","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n500bq7swed5vunrhb"},{"post_id":"cjyk982gu007y7sweyegs8wyy","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n600bs7swewrs6wcgf"},{"post_id":"cjyk982gu007y7sweyegs8wyy","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982n600bt7swe9r92ml1a"},{"post_id":"cjyk982gx00837swe276ql81u","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n600bu7swewoau1s81"},{"post_id":"cjyk982gx00837swe276ql81u","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n700bv7swe2r9zv4fa"},{"post_id":"cjyk982f3006f7swegiidv0hp","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n700bw7swe92swt9yr"},{"post_id":"cjyk982h000867swegwnzi4yr","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n700bx7swetu3es4gz"},{"post_id":"cjyk982h000867swegwnzi4yr","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n700by7swein4zrjb2"},{"post_id":"cjyk982h2008a7sweyph05x1t","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n700bz7swe47fdm70a"},{"post_id":"cjyk982h2008a7sweyph05x1t","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n700c07swe8hy2durw"},{"post_id":"cjyk982f7006h7swemo9qfsgu","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n700c17swebg9r7non"},{"post_id":"cjyk982h6008d7sweikaanzpf","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982n700c27swere3rh68d"},{"post_id":"cjyk982h6008d7sweikaanzpf","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n800c37swe927bau56"},{"post_id":"cjyk982h6008d7sweikaanzpf","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n800c47swedn1afi4m"},{"post_id":"cjyk982h6008d7sweikaanzpf","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982n800c57swejrzzlq7c"},{"post_id":"cjyk982fc006m7swe200anrmv","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n800c67swesa1mfqq9"},{"post_id":"cjyk982ff006p7swejx97r4wu","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n800c77swe8zkpah2f"},{"post_id":"cjyk982hh008w7swe0nqrv3bk","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982n800c87swexoxnfc47"},{"post_id":"cjyk982hh008w7swe0nqrv3bk","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n800c97swe24ifh4cs"},{"post_id":"cjyk982hh008w7swe0nqrv3bk","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n900ca7swemnnrle4o"},{"post_id":"cjyk982hh008w7swe0nqrv3bk","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982n900cb7swe10mdel5v"},{"post_id":"cjyk982fk006t7swe4iijnlti","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n900cc7swefhpoq5av"},{"post_id":"cjyk982hl00937swe3t66bt30","tag_id":"cjyk982af003w7swetghgq8w6","_id":"cjyk982n900cd7sweua5m63ru"},{"post_id":"cjyk982hl00937swe3t66bt30","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982n900ce7swelph7ew1n"},{"post_id":"cjyk982hl00937swe3t66bt30","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982n900cf7swen3smxcf2"},{"post_id":"cjyk982hl00937swe3t66bt30","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982n900cg7swe9i9u55sq"},{"post_id":"cjyk982hl00937swe3t66bt30","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982n900ch7swe9mc2y5hg"},{"post_id":"cjyk982fo006w7swesd1dqlp6","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982n900ci7sweg6dlq0qn"},{"post_id":"cjyk982hn00977swed456dffy","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982n900cj7sweiwndgruj"},{"post_id":"cjyk982hn00977swed456dffy","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982na00ck7swezm1kggcf"},{"post_id":"cjyk982fs006z7sweetb2anzx","tag_id":"cjyk982fv00717sweo1x48ye8","_id":"cjyk982na00cl7swecwqn95ed"},{"post_id":"cjyk982hv009j7swe4ditj6vv","tag_id":"cjyk982fj006r7swe0u9av439","_id":"cjyk982na00cm7swerj6vu5nv"},{"post_id":"cjyk982gk007k7swe5o6uu6r4","tag_id":"cjyk982ht009g7swe5v0qd7ft","_id":"cjyk982na00cn7swew19i4qgg"},{"post_id":"cjyk982gk007k7swe5o6uu6r4","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982na00co7swe8ye83yt2"},{"post_id":"cjyk982gk007k7swe5o6uu6r4","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982na00cp7swez8yzb0qq"},{"post_id":"cjyk982gk007k7swe5o6uu6r4","tag_id":"cjyk98264001j7sweg6xbcc0n","_id":"cjyk982na00cq7swei95f1mrg"},{"post_id":"cjyk982gs007v7swewic60ejc","tag_id":"cjyk98238000f7swecyy3uliz","_id":"cjyk982na00cr7swejj34xbxh"},{"post_id":"cjyk982gs007v7swewic60ejc","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982na00cs7swe3v59dv34"},{"post_id":"cjyk982gs007v7swewic60ejc","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982na00ct7swezv254yx1"},{"post_id":"cjyk982gs007v7swewic60ejc","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982na00cu7swe6r2b7r5h"},{"post_id":"cjyk982gs007v7swewic60ejc","tag_id":"cjyk982hy009o7swet6q9ezst","_id":"cjyk982nb00cv7swecazsn1se"},{"post_id":"cjyk982i300a07swe11iy03i7","tag_id":"cjyk9823g000l7sweei3ak9vf","_id":"cjyk982nb00cw7swebabg7oh8"},{"post_id":"cjyk982i300a07swe11iy03i7","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982nb00cx7swelablmoql"},{"post_id":"cjyk982i300a07swe11iy03i7","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982nb00cy7sweemdqkndl"},{"post_id":"cjyk982i300a07swe11iy03i7","tag_id":"cjyk9824v00117sweelepcq8a","_id":"cjyk982nb00cz7swem2v4sz24"},{"post_id":"cjyk982i300a07swe11iy03i7","tag_id":"cjyk982eu00667swevdq55zmd","_id":"cjyk982nb00d07swe39r7gk4j"},{"post_id":"cjyk982i300a07swe11iy03i7","tag_id":"cjyk982a5002w7swe70by0wrn","_id":"cjyk982nb00d17swettnpnooh"},{"post_id":"cjyk982h8008h7swezrg84a69","tag_id":"cjyk982i1009v7sweggpgda1d","_id":"cjyk982nb00d27swe4rfmwi08"},{"post_id":"cjyk982h8008h7swezrg84a69","tag_id":"cjyk982i400a47swempkqqd1v","_id":"cjyk982nb00d37swemybup1i7"},{"post_id":"cjyk982h8008h7swezrg84a69","tag_id":"cjyk982i600a97sweys0z1zsz","_id":"cjyk982nb00d47swegeqnu8zf"},{"post_id":"cjyk982hb008k7swebxzrr39k","tag_id":"cjyk982i700ae7swe352u66yu","_id":"cjyk982nc00d57swe5f4q1xqs"},{"post_id":"cjyk982hb008k7swebxzrr39k","tag_id":"cjyk982f0006d7swe2w58hva0","_id":"cjyk982nc00d67swelkxv9iou"},{"post_id":"cjyk982he008p7swesqz4f6vs","tag_id":"cjyk982i700ae7swe352u66yu","_id":"cjyk982nc00d77sweer0djqxx"},{"post_id":"cjyk982he008p7swesqz4f6vs","tag_id":"cjyk982f0006d7swe2w58hva0","_id":"cjyk982nc00d87swepebiwgmb"},{"post_id":"cjyk982hf008s7swex0no3xdg","tag_id":"cjyk982i700ae7swe352u66yu","_id":"cjyk982nc00d97swevsy278j8"},{"post_id":"cjyk982hf008s7swex0no3xdg","tag_id":"cjyk982f0006d7swe2w58hva0","_id":"cjyk982nc00da7sweaas5aft5"},{"post_id":"cjyk982hj008z7swe0k8w8m98","tag_id":"cjyk982j000ao7swemgxktnri","_id":"cjyk982nc00db7swelxcd0gqw"},{"post_id":"cjyk982hj008z7swe0k8w8m98","tag_id":"cjyk982ju00as7swey9vq09vi","_id":"cjyk982nc00dc7sweyygc1xe5"},{"post_id":"cjyk982hj008z7swe0k8w8m98","tag_id":"cjyk982k800av7swet0guof8x","_id":"cjyk982nc00dd7swedbt97b17"},{"post_id":"cjyk982hr009b7swekyq2s1xe","tag_id":"cjyk9823v000q7sweriywm9ds","_id":"cjyk982nc00de7swesy2dm85i"},{"post_id":"cjyk982hr009b7swekyq2s1xe","tag_id":"cjyk9824j000w7swe2sbl02q0","_id":"cjyk982nd00df7swegmf1huxp"},{"post_id":"cjyk982hr009b7swekyq2s1xe","tag_id":"cjyk982ky00ay7swe3tyrgumf","_id":"cjyk982nd00dg7swe4up1ibsy"},{"post_id":"cjyk982hs009e7swem8ck6vm5","tag_id":"cjyk982i1009v7sweggpgda1d","_id":"cjyk982nd00dh7sweyt4g8c5w"},{"post_id":"cjyk982hx009m7swexh1f5zad","tag_id":"cjyk982dh005g7swejep57utp","_id":"cjyk982nd00di7swe6xpuc41y"},{"post_id":"cjyk982hx009m7swexh1f5zad","tag_id":"cjyk982n000b47swerx863bu4","_id":"cjyk982nd00dj7swe7v5xvf0z"},{"post_id":"cjyk982hx009m7swexh1f5zad","tag_id":"cjyk982n200b87swe17j2hv8q","_id":"cjyk982nd00dk7swecdo3c53c"},{"post_id":"cjyk982hy009q7swex208fbay","tag_id":"cjyk982n300bb7swe9denqxsy","_id":"cjyk982nd00dl7swevsbnx9nt"},{"post_id":"cjyk982hy009q7swex208fbay","tag_id":"cjyk982f0006d7swe2w58hva0","_id":"cjyk982nd00dm7sweokgwmgsi"},{"post_id":"cjyk982hz009t7swen3oelmtg","tag_id":"cjyk982n300be7swee2labc9g","_id":"cjyk982nd00dn7sweimr1alna"},{"post_id":"cjyk982i1009x7swek37fw3rv","tag_id":"cjyk982n400bh7swe8uenpnre","_id":"cjyk982nd00do7swe3jqgzbsp"},{"post_id":"cjyk982i1009x7swek37fw3rv","tag_id":"cjyk982n500bl7swew0f3k4rf","_id":"cjyk982ne00dp7swendawvg5j"},{"post_id":"cjyk982i1009x7swek37fw3rv","tag_id":"cjyk982n500bo7swefmkptryd","_id":"cjyk982ne00dq7swer7fmytxn"},{"post_id":"cjyk982i1009x7swek37fw3rv","tag_id":"cjyk982n600br7swev8orbn0u","_id":"cjyk982ne00dr7swe6e6ngvu6"}],"Tag":[{"name":"随笔","_id":"cjyk9822g00047swel7sqcfdj"},{"name":"ACL","_id":"cjyk98238000f7swecyy3uliz"},{"name":"自然语言处理","_id":"cjyk9823g000l7sweei3ak9vf"},{"name":"神经网络","_id":"cjyk9823v000q7sweriywm9ds"},{"name":"深度学习","_id":"cjyk9824j000w7swe2sbl02q0"},{"name":"序列标注","_id":"cjyk9824v00117sweelepcq8a"},{"name":"句法分析","_id":"cjyk98264001j7sweg6xbcc0n"},{"name":"COLING","_id":"cjyk9828k00247swekh0uyo2e"},{"name":"EMNLP","_id":"cjyk982a3002n7swe5ehd2l3s"},{"name":"迁移学习","_id":"cjyk982a5002w7swe70by0wrn"},{"name":"ICLR","_id":"cjyk982af003w7swetghgq8w6"},{"name":"AAAI","_id":"cjyk982bi004e7swe8nisvl6v"},{"name":"EACL","_id":"cjyk982bt004l7sweg2e1xxig"},{"name":"NAACL","_id":"cjyk982c8004u7swek6v1k233"},{"name":"Dynet","_id":"cjyk982dh005g7swejep57utp"},{"name":"TACL","_id":"cjyk982e4005o7swelrat9ewz"},{"name":"半监督学习","_id":"cjyk982eu00667swevdq55zmd"},{"name":"算法","_id":"cjyk982f0006d7swe2w58hva0"},{"name":"机试","_id":"cjyk982fa006k7swe2ah4was7"},{"name":"保研","_id":"cjyk982fj006r7swe0u9av439"},{"name":"具体数学","_id":"cjyk982fv00717sweo1x48ye8"},{"name":"NLP","_id":"cjyk982ht009g7swe5v0qd7ft"},{"name":"问答系统","_id":"cjyk982hy009o7swet6q9ezst"},{"name":"LaTeX","_id":"cjyk982i1009v7sweggpgda1d"},{"name":"Beamer","_id":"cjyk982i400a47swempkqqd1v"},{"name":"ppt","_id":"cjyk982i600a97sweys0z1zsz"},{"name":"EOJ","_id":"cjyk982i700ae7swe352u66yu"},{"name":"Hexo","_id":"cjyk982j000ao7swemgxktnri"},{"name":"Github","_id":"cjyk982ju00as7swey9vq09vi"},{"name":"博客","_id":"cjyk982k800av7swet0guof8x"},{"name":"强化学习","_id":"cjyk982ky00ay7swe3tyrgumf"},{"name":"Cuda","_id":"cjyk982n000b47swerx863bu4"},{"name":"Ubuntu","_id":"cjyk982n200b87swe17j2hv8q"},{"name":"Python","_id":"cjyk982n300bb7swe9denqxsy"},{"name":"Sublime","_id":"cjyk982n300be7swee2labc9g"},{"name":"编译原理","_id":"cjyk982n400bh7swe8uenpnre"},{"name":"编译器","_id":"cjyk982n500bl7swew0f3k4rf"},{"name":"C#","_id":"cjyk982n500bo7swefmkptryd"},{"name":"C++","_id":"cjyk982n600br7swev8orbn0u"}]}}